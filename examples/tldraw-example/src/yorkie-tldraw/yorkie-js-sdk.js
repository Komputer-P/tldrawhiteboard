/*!
 * 
 * yorkie-js-sdk for building collaborative editing applications.
 *  - Version: v0.2.7
 *  - Date: 2022-05-27T14:50Z
 *  - Homepage: https://yorkie.dev
 *
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["yorkie"] = factory();
	else
		root["yorkie"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/assert/build/assert.js":
/*!*********************************************!*\
  !*** ./node_modules/assert/build/assert.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(/*! ./internal/errors */ "./node_modules/assert/build/internal/errors.js"),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ "./node_modules/assert/build/internal/assert/assertion_error.js");

var _require2 = __webpack_require__(/*! util/ */ "./node_modules/util/util.js"),
    inspect = _require2.inspect;

var _require$types = __webpack_require__(/*! util/ */ "./node_modules/util/util.js").types,
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : __webpack_require__(/*! es6-object-assign */ "./node_modules/es6-object-assign/index.js").assign;
var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "./node_modules/object-is/index.js");
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ "./node_modules/assert/build/internal/util/comparisons.js");

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"];

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ "./node_modules/assert/build/internal/assert/assertion_error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/assert/build/internal/assert/assertion_error.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(/*! util/ */ "./node_modules/util/util.js"),
    inspect = _require.inspect;

var _require2 = __webpack_require__(/*! ../errors */ "./node_modules/assert/build/internal/errors.js"),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ "./node_modules/assert/build/internal/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/assert/build/internal/errors.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/assert/build/assert.js");
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(/*! util/ */ "./node_modules/util/util.js");
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/assert/build/assert.js");
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ "./node_modules/assert/build/internal/util/comparisons.js":
/*!****************************************************************!*\
  !*** ./node_modules/assert/build/internal/util/comparisons.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "./node_modules/object-is/index.js");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ "./node_modules/is-nan/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = __webpack_require__(/*! util/ */ "./node_modules/util/util.js").types,
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "./node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(/*! util */ "./node_modules/util/util.js")
var assert = __webpack_require__(/*! assert */ "./node_modules/assert/build/assert.js")
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ "./node_modules/define-properties/index.js":
/*!*************************************************!*\
  !*** ./node_modules/define-properties/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(/*! object-keys */ "./node_modules/object-keys/index.js");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ "./node_modules/es6-object-assign/index.js":
/*!*************************************************!*\
  !*** ./node_modules/es6-object-assign/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ "./node_modules/foreach/index.js":
/*!***************************************!*\
  !*** ./node_modules/foreach/index.js ***!
  \***************************************/
/***/ ((module) => {


var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};



/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! has */ "./node_modules/has/src/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "./node_modules/google-protobuf/google-protobuf.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-protobuf/google-protobuf.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/buffer/index.js */ "./node_modules/buffer/index.js")["Buffer"];
var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof __webpack_require__.g&&null!=__webpack_require__.g?__webpack_require__.g:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.polyfill("Array.prototype.findIndex",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},"es6","es3");
$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},"es6","es3");$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6","es3");
$jscomp.polyfill("String.prototype.startsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"startsWith");a+="";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},"es6","es3");
$jscomp.polyfill("String.prototype.repeat",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},"es6","es3");var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.isDef=function(a){return void 0!==a};goog.isString=function(a){return"string"==typeof a};goog.isBoolean=function(a){return"boolean"==typeof a};
goog.isNumber=function(a){return"number"==typeof a};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}};
goog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2012;goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;
goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(".")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};
goog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};
goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};
goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};
goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};
goog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error('Module with namespace "'+a+'" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error('Module with namespace "'+
a+'" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};
COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&goog.isDefAndNotNull(goog.getObjectByName(a))},goog.implicitNamespaces_={"goog.module":!0});goog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],!goog.isDefAndNotNull(b))return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c]};
goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};
goog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.nullFunction=function(){};
goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";
goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE="";goog.TRANSPILER="transpile.js";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";')}catch(b){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return"(function(){"+a+"\n;})();\n"};
goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if(goog.isString(a))goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if(goog.isString(d)&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,
c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name "'+d+'"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};
goog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){(0,eval)(g+"\n//# sourceURL="+f)}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=
goog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+" requires transpilation but no transpiler was found.");return a});return e(a,b,c)};
goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b};goog.isNull=function(a){return null===a};goog.isDefAndNotNull=function(a){return null!=a};goog.isArray=function(a){return"array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isFunction=function(a){return"function"==goog.typeOf(a)};
goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;
goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};
goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};
goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;")}catch(d){}if("undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=
!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c)}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;
goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};
goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,c){return null!=b&&c in b?b[c]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};
goog.exportProperty=function(a,b,c){a[b]=c};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};
goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if("undefined"!==typeof d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++)e[f-1]=arguments[f];return d.superClass_.constructor.apply(a,e)}if("string"!=typeof b&&"symbol"!=typeof b)throw Error("method names provided to goog.base must be a string or a symbol");
e=Array(arguments.length-2);for(f=2;f<arguments.length;f++)e[f-2]=arguments[f];f=!1;for(var g=a.constructor.prototype;g;g=Object.getPrototypeOf(g))if(g[b]===d)f=!0;else if(f)return g[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};
COMPILED||(goog.global.COMPILED=COMPILED);goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};
goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;goog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};
goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";
!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH)&&goog.isString(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;
a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0}function b(a){try{return!!eval(a)}catch(h){return!1}}
var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";a("es5",function(){return b("[1,].length==1")});a("es6",function(){return f.match(/Edge\/(\d+)(\.\d)*/i)?!1:b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});
a("es7",function(){return b("2 ** 2 == 4")});a("es8",function(){return b("async () => 1, true")});a("es9",function(){return b("({...rest} = {}), true")});a("es_next",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=this.transpilationTarget_||
c.target}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||"es6"!=b||"noModule"in goog.global.document.createElement("script")?!1:!0;throw Error("Unknown language mode: "+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\/(SCRIPT)/ig,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};
this.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=
0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=
function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error("Bad dependency path or symbol: "+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else throw a="goog.require could not find: "+
a,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);
return b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||""})},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(b){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,
b)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);
break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=
function(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,
b,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=
a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=
function(a){delete goog.Dependency.callbackMap_[a]},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=
goog.global.document;if("complete"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write "'+this.path+'" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded())}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?
' nonce="'+goog.getScriptNonce()+'"':"";d='<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+c+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+d+">\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}else{var e=b.createElement("script");e.defer=goog.Dependency.defer_;e.async=!1;e.type="text/javascript";(d=goog.getScriptNonce())&&e.setAttribute("nonce",d);goog.DebugLoader_.IS_OLD_IE_?
(a.pause(),e.onreadystatechange=function(){if("loaded"==e.readyState||"complete"==e.readyState)a.loaded(),a.resume()}):e.onload=function(){e.onload=null;a.loaded()};e.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(e)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),
a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){a=b?'<script type="module" crossorigin>'+b+"\x3c/script>":'<script type="module" crossorigin src="'+a+'">\x3c/script>';d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(a):a)}function c(a,b){var c=d.createElement("script");c.defer=!0;c.async=!1;c.type=
"module";c.setAttribute("crossorigin",!0);var e=goog.getScriptNonce();e&&c.setAttribute("nonce",e);b?c.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(b):b:c.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(a):a;d.head.appendChild(c)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=
!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_("'+g+'")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+h+'", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);
a.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_("'+k+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=
goog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+="\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),
d)});a.loaded()}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c()}),d='<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+b+'");')+"\x3c/script>";a.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):a.pause();
else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c()});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();var l=k.onreadystatechange;k.onreadystatechange=function(){"interactive"==k.readyState&&(k.onreadystatechange=
l,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},
goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;this.transpiler_=g},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=
function(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(a+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+a+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,
c,d){b=b||[];a=a.replace(/\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||"es3",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(a){this.transpiler=a},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,
b,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.global.CLOSURE_NO_DEPS||
goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});goog.TRUSTED_TYPES_POLICY_NAME="";goog.identity_=function(a){return a};goog.createTrustedTypesPolicy=function(a){var b=null;if("undefined"===typeof TrustedTypes||!TrustedTypes.createPolicy)return b;try{b=TrustedTypes.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(c){goog.logToConsole_(c.message)}return b};
goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null;goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};
goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};
goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};
goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};
goog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(var d in b)if(!(d in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};
goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};
goog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return goog.object.getKeys(d)};goog.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_=function(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c){e+=": "+c;var f=d}else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};
goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&goog.asserts.doAssertFailure_("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.")};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};var jspb={BinaryConstants:{},ConstBinaryMessage:function(){},BinaryMessage:function(){}};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};
jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};
jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;
jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)};
goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};
goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};
goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
goog.array.findIndexRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};
goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};
goog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};
goog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};
goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};
goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};
goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1;var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:~f};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};
goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};
goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};
goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};
goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};
goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g])}else b.push(d)}return b};
goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};
goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};goog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};
goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d)}return b};
goog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join(b||"")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};
goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b};
goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63)}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023))}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63)}return b.join("")};
goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};
goog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};
goog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};
goog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};
goog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};
goog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};
goog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};
goog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};
goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};
goog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};
goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};
goog.functions.debounce=function(a,b,c){var d=0;return function(e){goog.global.clearTimeout(d);var f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){var d=0,e=!1,f=[],g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(c,f)};return function(a){f=arguments;d?e=!0:h()}};goog.functions.rateLimit=function(a,b,c){var d=0,e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.dom.HtmlElement=function(){};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName("A");goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR");goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM");goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS");goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET");goog.dom.TagName.AREA=new goog.dom.TagName("AREA");goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE");
goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE");goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO");goog.dom.TagName.B=new goog.dom.TagName("B");goog.dom.TagName.BASE=new goog.dom.TagName("BASE");goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT");goog.dom.TagName.BDI=new goog.dom.TagName("BDI");goog.dom.TagName.BDO=new goog.dom.TagName("BDO");goog.dom.TagName.BIG=new goog.dom.TagName("BIG");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE");goog.dom.TagName.BODY=new goog.dom.TagName("BODY");
goog.dom.TagName.BR=new goog.dom.TagName("BR");goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON");goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS");goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION");goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER");goog.dom.TagName.CITE=new goog.dom.TagName("CITE");goog.dom.TagName.CODE=new goog.dom.TagName("CODE");goog.dom.TagName.COL=new goog.dom.TagName("COL");goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP");
goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND");goog.dom.TagName.DATA=new goog.dom.TagName("DATA");goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST");goog.dom.TagName.DD=new goog.dom.TagName("DD");goog.dom.TagName.DEL=new goog.dom.TagName("DEL");goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS");goog.dom.TagName.DFN=new goog.dom.TagName("DFN");goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG");goog.dom.TagName.DIR=new goog.dom.TagName("DIR");goog.dom.TagName.DIV=new goog.dom.TagName("DIV");
goog.dom.TagName.DL=new goog.dom.TagName("DL");goog.dom.TagName.DT=new goog.dom.TagName("DT");goog.dom.TagName.EM=new goog.dom.TagName("EM");goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED");goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION");goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE");goog.dom.TagName.FONT=new goog.dom.TagName("FONT");goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER");goog.dom.TagName.FORM=new goog.dom.TagName("FORM");
goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME");goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET");goog.dom.TagName.H1=new goog.dom.TagName("H1");goog.dom.TagName.H2=new goog.dom.TagName("H2");goog.dom.TagName.H3=new goog.dom.TagName("H3");goog.dom.TagName.H4=new goog.dom.TagName("H4");goog.dom.TagName.H5=new goog.dom.TagName("H5");goog.dom.TagName.H6=new goog.dom.TagName("H6");goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD");goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER");
goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP");goog.dom.TagName.HR=new goog.dom.TagName("HR");goog.dom.TagName.HTML=new goog.dom.TagName("HTML");goog.dom.TagName.I=new goog.dom.TagName("I");goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME");goog.dom.TagName.IMG=new goog.dom.TagName("IMG");goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT");goog.dom.TagName.INS=new goog.dom.TagName("INS");goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX");goog.dom.TagName.KBD=new goog.dom.TagName("KBD");
goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN");goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL");goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND");goog.dom.TagName.LI=new goog.dom.TagName("LI");goog.dom.TagName.LINK=new goog.dom.TagName("LINK");goog.dom.TagName.MAIN=new goog.dom.TagName("MAIN");goog.dom.TagName.MAP=new goog.dom.TagName("MAP");goog.dom.TagName.MARK=new goog.dom.TagName("MARK");goog.dom.TagName.MATH=new goog.dom.TagName("MATH");goog.dom.TagName.MENU=new goog.dom.TagName("MENU");
goog.dom.TagName.MENUITEM=new goog.dom.TagName("MENUITEM");goog.dom.TagName.META=new goog.dom.TagName("META");goog.dom.TagName.METER=new goog.dom.TagName("METER");goog.dom.TagName.NAV=new goog.dom.TagName("NAV");goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT");goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT");goog.dom.TagName.OL=new goog.dom.TagName("OL");goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP");
goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION");goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT");goog.dom.TagName.P=new goog.dom.TagName("P");goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM");goog.dom.TagName.PICTURE=new goog.dom.TagName("PICTURE");goog.dom.TagName.PRE=new goog.dom.TagName("PRE");goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS");goog.dom.TagName.Q=new goog.dom.TagName("Q");goog.dom.TagName.RP=new goog.dom.TagName("RP");goog.dom.TagName.RT=new goog.dom.TagName("RT");
goog.dom.TagName.RTC=new goog.dom.TagName("RTC");goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY");goog.dom.TagName.S=new goog.dom.TagName("S");goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP");goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT");goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION");goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT");goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL");goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE");goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN");
goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE");goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG");goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE");goog.dom.TagName.SUB=new goog.dom.TagName("SUB");goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY");goog.dom.TagName.SUP=new goog.dom.TagName("SUP");goog.dom.TagName.SVG=new goog.dom.TagName("SVG");goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE");goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY");goog.dom.TagName.TD=new goog.dom.TagName("TD");
goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE");goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA");goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT");goog.dom.TagName.TH=new goog.dom.TagName("TH");goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD");goog.dom.TagName.TIME=new goog.dom.TagName("TIME");goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE");goog.dom.TagName.TR=new goog.dom.TagName("TR");goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK");goog.dom.TagName.TT=new goog.dom.TagName("TT");
goog.dom.TagName.U=new goog.dom.TagName("U");goog.dom.TagName.UL=new goog.dom.TagName("UL");goog.dom.TagName.VAR=new goog.dom.TagName("VAR");goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO");goog.dom.TagName.WBR=new goog.dom.TagName("WBR");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#html"):null;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};
goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"};goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got '"+a+"'");return"type_error:Const"};
goog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeScript.fromConstantAndArgs=function(a,b){for(var c=[],d=1;d<arguments.length;d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("("+goog.string.Const.unwrap(a)+")("+c.join(", ")+");")};goog.html.SafeScript.fromJson=function(a){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a))};goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"});goog.html.SafeScript.unwrap=function(a){return goog.html.SafeScript.unwrapTrustedScript(a).toString()};
goog.html.SafeScript.unwrapTrustedScript=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail("expected object of type SafeScript, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeScript"};
goog.html.SafeScript.stringify_=function(a){return JSON.stringify(a).replace(/</g,"\\x3c")};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a):a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn't seem to support blob URLs");};
goog.fs.url.findUrlObject_=function(){return goog.isDef(goog.global.URL)&&goog.isDef(goog.global.URL.createObjectURL)?goog.global.URL:goog.isDef(goog.global.webkitURL)&&goog.isDef(goog.global.webkitURL.createObjectURL)?goog.global.webkitURL:goog.isDef(goog.global.createObjectURL)?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;
goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||
"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))&&("adlm"==goog.LOCALE.substring(3,7).toLowerCase()||"arab"==goog.LOCALE.substring(3,7).toLowerCase()||"hebr"==goog.LOCALE.substring(3,7).toLowerCase()||"nkoo"==goog.LOCALE.substring(3,
7).toLowerCase()||"rohg"==goog.LOCALE.substring(3,7).toLowerCase()||"thaa"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))&&("adlm"==goog.LOCALE.substring(4,8).toLowerCase()||"arab"==goog.LOCALE.substring(4,8).toLowerCase()||"hebr"==goog.LOCALE.substring(4,8).toLowerCase()||"nkoo"==goog.LOCALE.substring(4,8).toLowerCase()||"rohg"==goog.LOCALE.substring(4,8).toLowerCase()||"thaa"==goog.LOCALE.substring(4,8).toLowerCase());
goog.i18n.bidi.Format={LRE:"\u202a",RLE:"\u202b",PDF:"\u202c",LRM:"\u200e",RLM:"\u200f"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT="right";goog.i18n.bidi.LEFT="left";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir=function(a,b){return"number"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_="A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0900-\u1fff\u200e\u2c00-\ud801\ud804-\ud839\ud83c-\udbff\uf900-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";goog.i18n.bidi.rtlChars_="\u0591-\u06ef\u06fa-\u08ff\u200f\ud802-\ud803\ud83a-\ud83b\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,""):a};goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};
goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};
goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,b+"$&"+b)};goog.i18n.bidi.enforceRtlInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+a+"</span>"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};
goog.i18n.bidi.enforceLtrInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+a+"</span>"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;
goog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1\u05f3")};goog.i18n.bidi.wordSeparatorRe_=/\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;
goog.i18n.bidi.estimateDirection=function(a,b){var c=0,d=0,e=!1;a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){var f=a[b];goog.i18n.bidi.startsWithRtl(f)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(f)?e=!0:goog.i18n.bidi.hasAnyLtr(f)?d++:goog.i18n.bidi.hasNumeralsRe_.test(f)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};
goog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")};
goog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:a.dir="rtl";break;default:a.removeAttribute("dir")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.TrustedResourceUrl=function(){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_="";this.trustedURL_=null;this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};
goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};
goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"});goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};
goog.html.TrustedResourceUrl.unwrapTrustedURL=function(a){return a.trustedURL_?a.trustedURL_:goog.html.TrustedResourceUrl.unwrap(a)};
goog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof goog.string.Const?goog.string.Const.unwrap(a):
encodeURIComponent(String(a))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.TrustedResourceUrl;b.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a):a;goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY&&(b.trustedURL_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a));return b};
goog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if(goog.isString(c))return c?a+encodeURIComponent(c):"";for(var d in c){var e=c[d];e=goog.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};
goog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};
goog.string.internal.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
goog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,
"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;
goog.string.internal.NULL_RE_=/\x00/g;goog.string.internal.ALL_RE_=/[\x00&<>"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};
goog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||"",g=b[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==
f[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=function(){this.privateDoNotAccessOrElseSafeUrlWrappedValue_="";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+"}"});goog.html.SafeUrl.unwrap=function(a){return goog.html.SafeUrl.unwrapTrustedURL(a).toString()};
goog.html.SafeUrl.unwrapTrustedURL=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};
goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i;goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};goog.html.SafeUrl.fromBlob=function(a){a=goog.html.SAFE_MIME_TYPE_PATTERN_.test(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.DATA_URL_PATTERN_=/^data:([^,]*);base64,[a-z0-9+\/]+=*$/i;goog.html.SafeUrl.fromDataUrl=function(a){a=a.replace(/(%0A|%0D)/g,"");var b=a.match(goog.html.DATA_URL_PATTERN_);b=b&&goog.html.SAFE_MIME_TYPE_PATTERN_.test(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,a,b)};
goog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(a){return goog.string.Const.unwrap(a)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};
goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.SafeUrl;b.privateDoNotAccessOrElseSafeUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a):a;return b};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.asserts.assert(goog.string.internal.endsWith(a,";"),"Last character of style string is not ';': "+a);goog.asserts.assert(goog.string.internal.contains(a,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"});
goog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail("expected object of type SafeStyle, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyle"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez";
goog.html.SafeStyle.create=function(a){var b="",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error("Name allows only [-_a-zA-Z0-9], got: "+c);var d=a[c];null!=d&&(d=goog.isArray(d)?goog.array.map(d,goog.html.SafeStyle.sanitizePropertyValue_).join(" "):goog.html.SafeStyle.sanitizePropertyValue_(d),b+=c+":"+d+";")}return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};
goog.html.SafeStyle.sanitizePropertyValue_=function(a){if(a instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):goog.html.SafeStyle.sanitizePropertyValueString_(String(a));if(/[{;}]/.test(a))throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.",[a]);return a};
goog.html.SafeStyle.sanitizePropertyValueString_=function(a){var b=a.replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.URL_RE_,"url");if(goog.html.SafeStyle.VALUE_RE_.test(b)){if(goog.html.SafeStyle.COMMENT_RE_.test(a))return goog.asserts.fail("String value disallows comments, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedQuotes_(a))return goog.asserts.fail("String value requires balanced quotes, got: "+
a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedSquareBrackets_(a))return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING}else return goog.asserts.fail("String value allows only "+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+" and simple functions, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;return goog.html.SafeStyle.sanitizeUrl_(a)};
goog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);"'"==e&&c?b=!b:'"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.hasBalancedSquareBrackets_=function(a){for(var b=!0,c=/^[-_a-zA-Z0-9]$/,d=0;d<a.length;d++){var e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b};goog.html.SafeStyle.VALUE_ALLOWED_CHARS_="[-,.\"'%_!# a-zA-Z0-9\\[\\]]";
goog.html.SafeStyle.VALUE_RE_=new RegExp("^"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+"+$");goog.html.SafeStyle.URL_RE_=/\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;goog.html.SafeStyle.FUNCTIONS_RE_=/\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g;goog.html.SafeStyle.COMMENT_RE_=/\/\*/;
goog.html.SafeStyle.sanitizeUrl_=function(a){return a.replace(goog.html.SafeStyle.URL_RE_,function(a,c,d,e){var b="";d=d.replace(/^(['"])(.*)\1$/,function(a,c,d){b=c;return d});a=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+b+a+b+e})};goog.html.SafeStyle.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyleSheet.createRule=function(a,b){if(goog.string.internal.contains(a,"<"))throw Error("Selector does not allow '<', got: "+a);var c=a.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+a);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof goog.html.SafeStyle||(b=goog.html.SafeStyle.create(b));
a=a+"{"+goog.html.SafeStyle.unwrap(b).replace(/</g,"\\3C ")+"}";return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.hasBalancedBrackets_=function(a){for(var b={"(":")","[":"]"},c=[],d=0;d<a.length;d++){var e=a[d];if(b[e])c.push(b[e]);else if(goog.object.contains(b,e)&&c.pop()!=e)return!1}return 0==c.length};
goog.html.SafeStyleSheet.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.internal.contains(a,"<"),"Forbidden '<' character in style sheet string: "+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};
goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"});
goog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail("expected object of type SafeStyleSheet, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};
goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};
goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("Edg/")};
goog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("OPR")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")};
goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};
goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_;goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_;goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):
goog.labs.userAgent.browser.isEdgeChromium()?a(["Edg"]):goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];b="";var c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"});goog.html.SafeHtml.unwrap=function(a){return goog.html.SafeHtml.unwrapTrustedHTML(a).toString()};
goog.html.SafeHtml.unwrapTrustedHTML=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail("expected object of type SafeHtml, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeHtml"};
goog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b="object"==typeof a,c=null;b&&a.implementsGoogI18nBidiDirectionalString&&(c=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a),c)};
goog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};goog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};
goog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error("Invalid tag name <"+a+">.");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error("Tag name <"+a+"> is not allowed for SafeHtml.");};
goog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:""},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error("The browser does not support sandboxed iframes.");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);a=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)};
goog.html.SafeHtml.createScript=function(a,b){for(var c in b){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d||"type"==d)throw Error('Cannot set "'+d+'" attribute');}c="";a=goog.array.concat(a);for(d=0;d<a.length;d++)c+=goog.html.SafeScript.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)};
goog.html.SafeHtml.createStyle=function(a,b){b=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},b);var c="";a=goog.array.concat(a);for(var d=0;d<a.length;d++)c+=goog.html.SafeStyleSheet.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)};
goog.html.SafeHtml.createMetaRefresh=function(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(b||0)+"; url="+a})};
goog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())c=goog.html.SafeHtml.getStyleValue_(c);else{if(/^on/i.test(b))throw Error('Attribute "'+b+'" requires goog.string.Const value, "'+c+'" given.');if(b.toLowerCase()in goog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);
else if(goog.isString(c))c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error('Attribute "'+b+'" on tag "'+a+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+c+'" given.');}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert(goog.isString(c)||goog.isNumber(c),"String or number value expected, got "+typeof c+" with value: "+c);return b+'="'+goog.string.internal.htmlEscape(String(c))+'"'};
goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+" given: "+a);a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};goog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};
goog.html.SafeHtml.join=function(a,b){a=goog.html.SafeHtml.htmlEscape(a);var c=a.getDirection(),d=[],e=function(a){goog.isArray(a)?goog.array.forEach(a,e):(a=goog.html.SafeHtml.htmlEscape(a),d.push(goog.html.SafeHtml.unwrap(a)),a=a.getDirection(),c==goog.i18n.bidi.Dir.NEUTRAL?c=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&c!=a&&(c=null))};goog.array.forEach(b,e);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)),c)};
goog.html.SafeHtml.concat=function(a){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))};goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a):a;this.dir_=b;return this};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null;var e="<"+a+goog.html.SafeHtml.stringifyAttributes(a,b);goog.isDefAndNotNull(c)?goog.isArray(c)||(c=[c]):c=[];goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,"Void tag <"+a+"> does not allow content."),e+=">"):(d=goog.html.SafeHtml.concat(c),e+=">"+goog.html.SafeHtml.unwrap(d)+"</"+a+">",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:
null);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,d)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c="";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error('Invalid attribute name "'+d+'".');var e=b[d];goog.isDefAndNotNull(e)&&(c+=" "+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};
goog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=b[e];for(e in c){var f=e.toLowerCase();if(f in a)throw Error('Cannot override "'+f+'" attribute, got "'+e+'" with value "'+c[e]+'"');f in b&&delete d[f];d[e]=c[e]}return d};
goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);return!b.parentElement});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrapTrustedHTML(b))};
goog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:image\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)};
goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),a.href=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrapTrustedURL(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrapTrustedURL(b):
goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};
goog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.text=goog.html.SafeScript.unwrapTrustedScript(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrapTrustedURL(b))};goog.dom.safe.replaceLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrapTrustedURL(b))};
goog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);return(b||goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(a),c?goog.string.Const.unwrap(c):"",d,e)};goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b),c)};
goog.dom.safe.createImageFromBlob=function(a){if(!/^image\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};goog.dom.safe.setImageSrc(a,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."),b));return a};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;
goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};
goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};
goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;
goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;
goog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'};var d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;"#"==b.charAt(0)&&(b=Number("0"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),
a+" ")),e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:return"#"!=c.charAt(0)||(c=Number("0"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"};goog.string.jsEscapeCache_={"'":"\\'"};
goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c="\\x",16>b||256<b)c+="0"}else c="\\u",4096>b&&(c+="0");c+=b.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;
goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};
goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};
goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;
goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};
goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};
goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(""!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};
goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return""};
goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||""};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")};goog.labs.userAgent.platform.isGo2Phone=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP")};
goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isKaiOS()?(b=/(?:KaiOS)\/(\S+)/i,
b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};
goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;
goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.ASSUME_GO2PHONE=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||"","X11")};
goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();goog.userAgent.GO2PHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_GO2PHONE:goog.labs.userAgent.platform.isGo2Phone();
goog.userAgent.determineVersion_=function(){var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};
goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\/(\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \/]?(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};
goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE)return goog.userAgent.getDocumentMode_()}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;
goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.DEFAULT_ALPHABET_COMMON_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"-_.";goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4};goog.crypt.base64.paddingChars_="=.";
goog.crypt.base64.isPadding_=function(a){return goog.string.contains(goog.crypt.base64.paddingChars_,a)};goog.crypt.base64.byteToCharMaps_={};goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;
goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;
goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");void 0===b&&(b=goog.crypt.base64.Alphabet.DEFAULT);goog.crypt.base64.init_();b=goog.crypt.base64.byteToCharMaps_[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g]||"",b[k]||"")}return c.join("")};
goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a)});return c};
goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a)});return c};
goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=a.length,c=3*b/4;c%3?c=Math.floor(c):goog.crypt.base64.isPadding_(a[b-1])&&(c=goog.crypt.base64.isPadding_(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a});return d.subarray(0,e)};
goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h))}};
goog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var a=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));goog.crypt.base64.byteToCharMaps_[c]=d;for(var e=0;e<d.length;e++){var f=d[e],g=goog.crypt.base64.charToByteMap_[f];void 0===g?goog.crypt.base64.charToByteMap_[f]=e:goog.asserts.assert(g===e)}}}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a};
jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c};
jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|
a)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23);16777216<=a&&++c;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a&8388607)>>>0}};
jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0}else{c=
a;var d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c}};
jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+(a>>>0)};
jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.toZigzag64=function(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)};jspb.utils.joinZigzag64=function(a,b){return jspb.utils.fromZigzag64(a,b,jspb.utils.joinInt64)};jspb.utils.fromZigzag64=function(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)};
jspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};
jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS="0123456789abcdef".split("");jspb.utils.ZERO_CHAR_CODE_=48;jspb.utils.A_CHAR_CODE_=97;
jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a,b){a=a?String(a):"";return b?"0000000".slice(a.length)+a:a}if(2097151>=b)return""+jspb.utils.joinUint64(a,b);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)};
jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};
jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};
jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255}goog.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,a.charCodeAt(f)-jspb.utils.ZERO_CHAR_CODE_);d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a))};
jspb.utils.toHexDigit_=function(a){return String.fromCharCode(10>a?jspb.utils.ZERO_CHAR_CODE_+a:jspb.utils.A_CHAR_CODE_-10+a)};jspb.utils.fromHexCharCode_=function(a){return a>=jspb.utils.A_CHAR_CODE_?a-jspb.utils.A_CHAR_CODE_+10:a-jspb.utils.ZERO_CHAR_CODE_};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.toHexDigit_(d>>4);b[2*c+3]=jspb.utils.toHexDigit_(d&15)}return b.join("")};
jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();goog.asserts.assert(18==a.length);goog.asserts.assert("0"==a[0]);goog.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++){var d=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+2)),e=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+3));b=String.fromCharCode(16*d+e)+b}return b};
jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};
jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7}if(a[b++]!=g)break;f++;b+=e}return f};
jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};
jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16)}return b+'"'};
jspb.utils.debugScalarToTextFormat=function(a){return"string"===typeof a?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d}return b};
jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||"undefined"!=typeof Buffer&&a.constructor===Buffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0)};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c)};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)};
jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};
jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=void 0!==b?b:0;this.end_=void 0!==c?this.start_+c:this.bytes_.length;this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};
jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_)};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};
jspb.BinaryDecoder.prototype.readSplitVarint64=function(a){for(var b=128,c=0,d=0,e=0;4>e&&128<=b;e++)b=this.bytes_[this.cursor_++],c|=(b&127)<<7*e;128<=b&&(b=this.bytes_[this.cursor_++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(e=0;5>e&&128<=b;e++)b=this.bytes_[this.cursor_++],d|=(b&127)<<7*e+3;if(128>b)return a(c>>>0,d>>>0);goog.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=!0};
jspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(a){return this.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryDecoder.prototype.readSplitFixed64=function(a){var b=this.bytes_,c=this.cursor_;this.cursor_+=8;for(var d=0,e=0,f=c+7;f>=c;f--)d=d<<8|b[f],e=e<<8|b[f+4];return a(d,e)};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++};
jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--};
jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,goog.asserts.assert(this.cursor_<=
this.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&goog.asserts.assert(!1);goog.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32;jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};
jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)};
jspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)};jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};
jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};
jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};
jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};
jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};
jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};
jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63)}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63)}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320)}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0)}e+=goog.crypt.byteArrayToString(d);
this.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);return b};jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null};jspb.BinaryReader.instanceCache_=[];
jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;
jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};
jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isDelimited=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED};jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};
jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};
jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a)};
jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return goog.asserts.fail("Invalid wire type: %s (at position %s)",
a,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()};
jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint()};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a)}};
jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4)};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8)};
jspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(goog.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField()}while(1)};
jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.")}};
jspb.BinaryReader.prototype.registerReadCallback=function(a,b){null===this.readCallbacks_&&(this.readCallbacks_={});goog.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b};jspb.BinaryReader.prototype.runReadCallback=function(a){goog.asserts.assert(null!==this.readCallbacks_);a=this.readCallbacks_[a];goog.asserts.assert(a);return a(this)};
jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();
case b.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();
default:goog.asserts.fail("Invalid field type in readAny()")}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c)};
jspb.BinaryReader.prototype.readGroup=function(a,b,c){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);goog.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0)};
jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};
jspb.BinaryReader.prototype.readInt32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};jspb.BinaryReader.prototype.readInt64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};
jspb.BinaryReader.prototype.readUint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readUint32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};
jspb.BinaryReader.prototype.readUint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};jspb.BinaryReader.prototype.readSint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};
jspb.BinaryReader.prototype.readSint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};jspb.BinaryReader.prototype.readFixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};
jspb.BinaryReader.prototype.readFixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};jspb.BinaryReader.prototype.readSfixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};jspb.BinaryReader.prototype.readSfixed32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};
jspb.BinaryReader.prototype.readSfixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};jspb.BinaryReader.prototype.readSfixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};jspb.BinaryReader.prototype.readFloat=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};
jspb.BinaryReader.prototype.readDouble=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};jspb.BinaryReader.prototype.readBool=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readEnum=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};
jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};
jspb.BinaryReader.prototype.readVarintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readSintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarintHash64()};jspb.BinaryReader.prototype.readSplitVarint64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(a)};
jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryReader.prototype.readFixedHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};
jspb.BinaryReader.prototype.readSplitFixed64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readSplitFixed64(a)};jspb.BinaryReader.prototype.readPackedField_=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};
jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};
jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};
jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};
jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};
jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};
jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.BinaryEncoder=function(){this.buffer_=[]};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};
jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b)};
jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));for(goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1)}};
jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0)};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a))};jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(a){var b=this;jspb.utils.splitHash64(a);jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,function(a,d){b.writeSplitVarint64(a>>>0,d>>>0)})};
jspb.BinaryEncoder.prototype.writeUint8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeUint16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeUint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};jspb.BinaryEncoder.prototype.writeUint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeInt16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeInt32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};
jspb.BinaryEncoder.prototype.writeInt64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt64String=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFloat=function(a){goog.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low)};
jspb.BinaryEncoder.prototype.writeDouble=function(a){goog.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};jspb.BinaryEncoder.prototype.writeBool=function(a){goog.asserts.assert("boolean"===typeof a||"number"===typeof a);this.buffer_.push(a?1:0)};
jspb.BinaryEncoder.prototype.writeEnum=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a)};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a)};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeString=function(a){for(var b=this.buffer_.length,c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128),c++)}else this.buffer_.push(d>>
12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128)}return this.buffer_.length-b};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};
jspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};
jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};
jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};
jspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c}""==a&&(a="0");return a};
jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c)}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b};
jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};
jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?"-":"")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[]};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length};
jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(goog.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++};
jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c))};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c)};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[]};
jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length}b=this.encoder_.end();a.set(b,d);d+=b.length;goog.asserts.assert(d==a.length);this.blocks_=[a];return a};jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};
jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a))};jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop())};jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){goog.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b)};
jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");
break;case d.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:goog.asserts.fail("Invalid field type in writeAny()")}};
jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b))};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b))};
jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b))};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b))};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b))};
jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b))};jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(b))};
jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b))};jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b))};
jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b))};jspb.BinaryWriter.prototype.writeSintHash64=function(a,b){null!=b&&this.writeZigzagVarintHash64_(a,b)};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&this.writeZigzagVarint64String_(a,b)};
jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b))};jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b))};
jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b))};
jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b))};jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b))};jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b))};
jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(goog.asserts.assert("boolean"===typeof b||"number"===typeof b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b))};jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};
jspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a))};jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b))};jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a))};
jspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))};
jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP))};jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b))};
jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b))};jspb.BinaryWriter.prototype.writeSplitFixed64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(b,c)};
jspb.BinaryWriter.prototype.writeSplitVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(b,c)};jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);var d=this.encoder_;jspb.utils.toZigzag64(b,c,function(a,b){d.writeSplitVarint64(a>>>0,b>>>0)})};
jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitFixed64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitZigzagVarint64(a,c(b[e]),d(b[e]))};
jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarintHash64_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e)}};
jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP)};jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c])};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitFixed64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitFixed64(c(b[e]),d(b[e]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitVarint64(c(b[e]),d(b[e]));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=this.encoder_,f=0;f<b.length;f++)jspb.utils.toZigzag64(c(b[f]),d(b[f]),function(a,b){e.writeSplitVarint64(a>>>0,b>>>0)});this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a])};jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a])};
jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi)}};
jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a])};jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a])};
jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a])};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a])};
jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a])};jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a])};
jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a])};
jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a)}};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_()};jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1])}this.arrClean=!0};
jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray()}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value])}this.arrClean=!0}return this.arr_};
jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(goog.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value])}return d};jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f)}return b};jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a};
jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1};
jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value])}return a};jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)])}return new jspb.Map.ArrayIteratorIterable_(a)};
jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};
jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this)}};jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};
jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};jspb.Map.prototype.has=function(a){return a.toString()in this.map_};jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage()}};
jspb.Map.deserializeBinary=function(a,b,c,d,e,f,g){for(;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(goog.asserts.assert(e),g||(g=new a.valueCtor_),d.call(b,g,e)):g=d.call(b))}goog.asserts.assert(void 0!=f);goog.asserts.assert(void 0!=g);a.set(f,g)};jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};
jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e};jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f};jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};jspb.Message=function(){};jspb.Message.GENERATE_TO_OBJECT=!0;jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;
jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};jspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};
jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=
a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b])};jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:Array.isArray(a)};jspb.Message.isExtensionObject_=function(a){return null!==a&&"object"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};
jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE};jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={})};
jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h}}};
jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
else f.binaryWriterFn.call(b,g.fieldIndex,h)}};jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g)}else b.skipField()};
jspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};jspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};
jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0}return c};
jspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0}return c};
jspb.Message.bytesAsB64=function(a){if(null==a||"string"===typeof a)return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null};jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if("string"===typeof a)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null};
jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return a.length&&"string"!==typeof a[0]?goog.array.map(a,jspb.Message.bytesAsB64):a};jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};
jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b)})}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};jspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};
jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e)}return a.wrappers_[b]=new jspb.Map(e,d)};
jspb.Message.setField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);return a};jspb.Message.setProto3IntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};jspb.Message.setProto3FloatField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};
jspb.Message.setProto3BooleanField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,!1)};jspb.Message.setProto3StringField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};jspb.Message.setProto3BytesField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};jspb.Message.setProto3EnumField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};
jspb.Message.setProto3StringIntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"0")};jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);c!==d?jspb.Message.setField(a,b,c):b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=null:(jspb.Message.maybeInitEmptyExtensionObject_(a),delete a.extensionObject_[b]);return a};
jspb.Message.addToRepeatedField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);b=jspb.Message.getRepeatedField(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};jspb.Message.setOneofField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));return jspb.Message.setField(a,b,d)};
jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0))}return c?(jspb.Message.setField(a,c,d),c):0};jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e)}return a.wrappers_[c]};
jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e}};
jspb.Message.setWrapperField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};jspb.Message.setOneofWrapperField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;return jspb.Message.setOneofField(a,b,c,e)};
jspb.Message.setRepeatedWrapperField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};
jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};
jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(Array.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray()}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});
jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};
jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};
jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};
jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};
jspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return"number"===typeof a&&isNaN(a)||"number"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&
g.constructor==Object&&(goog.asserts.assert(void 0===d),goog.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(goog.asserts.assert(void 0===e),goog.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};
jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};
jspb.Message.copyInto=function(a,b){goog.asserts.assertInstanceof(a,jspb.Message);goog.asserts.assertInstanceof(b,jspb.Message);goog.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_};
jspb.Message.clone_=function(a){if(Array.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d)}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){b.messageId=a};jspb.Message.messageSetExtensions={};
jspb.Message.messageSetExtensionsBinary={};jspb.Export={}; true&&(exports.Map=jspb.Map,exports.Message=jspb.Message,exports.BinaryReader=jspb.BinaryReader,exports.BinaryWriter=jspb.BinaryWriter,exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo,exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo,exports.exportSymbol=goog.exportSymbol,exports.inherits=goog.inherits,exports.object={extend:goog.object.extend},exports.typeOf=goog.typeOf);


/***/ }),

/***/ "./node_modules/google-protobuf/google/protobuf/timestamp_pb.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-protobuf/google/protobuf/timestamp_pb.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// source: google/protobuf/timestamp.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = __webpack_require__(/*! google-protobuf */ "./node_modules/google-protobuf/google-protobuf.js");
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.google.protobuf.Timestamp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.protobuf.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.protobuf.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.protobuf.Timestamp.displayName = 'proto.google.protobuf.Timestamp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.protobuf.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.google.protobuf.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.protobuf.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.protobuf.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.google.protobuf.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.protobuf.Timestamp;
  return proto.google.protobuf.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.protobuf.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.google.protobuf.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.protobuf.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.protobuf.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.protobuf.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.protobuf.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.google.protobuf.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.google.protobuf.Timestamp} returns this
 */
proto.google.protobuf.Timestamp.prototype.setSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.google.protobuf.Timestamp.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.google.protobuf.Timestamp} returns this
 */
proto.google.protobuf.Timestamp.prototype.setNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.google.protobuf);
/* This code will be inserted into generated code for
 * google/protobuf/timestamp.proto. */

/**
 * Returns a JavaScript 'Date' object corresponding to this Timestamp.
 * @return {!Date}
 */
proto.google.protobuf.Timestamp.prototype.toDate = function() {
  var seconds = this.getSeconds();
  var nanos = this.getNanos();

  return new Date((seconds * 1000) + (nanos / 1000000));
};


/**
 * Sets the value of this Timestamp object to be the given Date.
 * @param {!Date} value The value to set.
 */
proto.google.protobuf.Timestamp.prototype.fromDate = function(value) {
  this.setSeconds(Math.floor(value.getTime() / 1000));
  this.setNanos(value.getMilliseconds() * 1000000);
};


/**
 * Factory method that returns a Timestamp object with value equal to
 * the given Date.
 * @param {!Date} value The value to set.
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.google.protobuf.Timestamp.fromDate = function(value) {
  var timestamp = new proto.google.protobuf.Timestamp();
  timestamp.fromDate(value);
  return timestamp;
};


/***/ }),

/***/ "./node_modules/grpc-web/index.js":
/*!****************************************!*\
  !*** ./node_modules/grpc-web/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var n;function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var ba="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function ca(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof __webpack_require__.g&&__webpack_require__.g,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var r=ca(this);
function t(){t=function(){};r.Symbol||(r.Symbol=da)}function ea(a,b){this.a=a;ba(this,"description",{configurable:!0,writable:!0,value:b})}ea.prototype.toString=function(){return this.a};var da=function(){function a(c){if(this instanceof a)throw new TypeError("Symbol is not a constructor");return new ea("jscomp_symbol_"+(c||"")+"_"+b++,c)}var b=0;return a}();
function u(){t();var a=r.Symbol.iterator;a||(a=r.Symbol.iterator=r.Symbol("Symbol.iterator"));"function"!=typeof Array.prototype[a]&&ba(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return fa(aa(this))}});u=function(){}}function fa(a){u();a={next:a};a[r.Symbol.iterator]=function(){return this};return a}function ha(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}
var ia="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ja;if("function"==typeof Object.setPrototypeOf)ja=Object.setPrototypeOf;else{var ka;a:{var la={V:!0},ma={};try{ma.__proto__=la;ka=ma.V;break a}catch(a){}ka=!1}ja=ka?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var na=ja;
function oa(a,b){a.prototype=ia(b.prototype);a.prototype.constructor=a;if(na)na(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.O=b.prototype}
function pa(a,b){u();a instanceof String&&(a+="");var c=0,d={next:function(){if(c<a.length){var f=c++;return{value:b(f,a[f]),done:!1}}d.next=function(){return{done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d}function v(a,b){if(b){var c=r;a=a.split(".");for(var d=0;d<a.length-1;d++){var f=a[d];f in c||(c[f]={});c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}
v("Array.prototype.keys",function(a){return a?a:function(){return pa(this,function(b){return b})}});v("Array.prototype.find",function(a){return a?a:function(b,c){a:{var d=this;d instanceof String&&(d=String(d));for(var f=d.length,g=0;g<f;g++){var e=d[g];if(b.call(c,e,g,d)){b=e;break a}}b=void 0}return b}});v("Object.is",function(a){return a?a:function(b,c){return b===c?0!==b||1/b===1/c:b!==b&&c!==c}});
v("Array.prototype.includes",function(a){return a?a:function(b,c){var d=this;d instanceof String&&(d=String(d));var f=d.length;c=c||0;for(0>c&&(c=Math.max(c+f,0));c<f;c++){var g=d[c];if(g===b||Object.is(g,b))return!0}return!1}});
v("Promise",function(a){function b(e){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{e(h.resolve,h.reject)}catch(k){h.reject(k)}}function c(){this.a=null}function d(e){return e instanceof b?e:new b(function(h){h(e)})}if(a)return a;c.prototype.b=function(e){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g()})}this.a.push(e)};var f=r.setTimeout;c.prototype.c=function(e){f(e,0)};c.prototype.g=function(){for(;this.a&&this.a.length;){var e=this.a;this.a=[];for(var h=0;h<e.length;++h){var k=
e[h];e[h]=null;try{k()}catch(l){this.f(l)}}}this.a=null};c.prototype.f=function(e){this.c(function(){throw e;})};b.prototype.f=function(){function e(l){return function(m){k||(k=!0,l.call(h,m))}}var h=this,k=!1;return{resolve:e(this.s),reject:e(this.g)}};b.prototype.s=function(e){if(e===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof b)this.v(e);else{a:switch(typeof e){case "object":var h=null!=e;break a;case "function":h=!0;break a;default:h=!1}h?this.m(e):this.h(e)}};
b.prototype.m=function(e){var h=void 0;try{h=e.then}catch(k){this.g(k);return}"function"==typeof h?this.w(h,e):this.h(e)};b.prototype.g=function(e){this.i(2,e)};b.prototype.h=function(e){this.i(1,e)};b.prototype.i=function(e,h){if(0!=this.b)throw Error("Cannot settle("+e+", "+h+"): Promise already settled in state"+this.b);this.b=e;this.c=h;this.l()};b.prototype.l=function(){if(null!=this.a){for(var e=0;e<this.a.length;++e)g.b(this.a[e]);this.a=null}};var g=new c;b.prototype.v=function(e){var h=this.f();
e.F(h.resolve,h.reject)};b.prototype.w=function(e,h){var k=this.f();try{e.call(h,k.resolve,k.reject)}catch(l){k.reject(l)}};b.prototype.then=function(e,h){function k(q,x){return"function"==typeof q?function(z){try{l(q(z))}catch(N){m(N)}}:x}var l,m,p=new b(function(q,x){l=q;m=x});this.F(k(e,l),k(h,m));return p};b.prototype.catch=function(e){return this.then(void 0,e)};b.prototype.F=function(e,h){function k(){switch(l.b){case 1:e(l.c);break;case 2:h(l.c);break;default:throw Error("Unexpected state: "+
l.b);}}var l=this;null==this.a?g.b(k):this.a.push(k)};b.resolve=d;b.reject=function(e){return new b(function(h,k){k(e)})};b.race=function(e){return new b(function(h,k){for(var l=ha(e),m=l.next();!m.done;m=l.next())d(m.value).F(h,k)})};b.all=function(e){var h=ha(e),k=h.next();return k.done?d([]):new b(function(l,m){function p(z){return function(N){q[z]=N;x--;0==x&&l(q)}}var q=[],x=0;do q.push(void 0),x++,d(k.value).F(p(q.length-1),m),k=h.next();while(!k.done)})};return b});var qa=qa||{},w=this||self;
function y(a,b){a=a.split(".");b=b||w;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b}function ra(){}function sa(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var ta="closure_uid_"+(1E9*Math.random()>>>0),ua=0;function va(a,b,c){return a.call.apply(a.bind,arguments)}
function wa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var f=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(f,d);return a.apply(b,f)}}return function(){return a.apply(b,arguments)}}function A(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?A=va:A=wa;return A.apply(null,arguments)}
function B(a,b){function c(){}c.prototype=b.prototype;a.O=b.prototype;a.prototype=new c;a.prototype.constructor=a};function xa(a){this.a=a||{}}xa.prototype.get=function(a){return this.a[a]};xa.prototype.G=function(){return Object.keys(this.a)};function C(a,b,c,d){this.f=a;this.c=b;this.b=c;this.a=d}C.prototype.getRequestMessage=function(){return this.f};C.prototype.getMethodDescriptor=function(){return this.c};C.prototype.getMetadata=function(){return this.b};C.prototype.getCallOptions=function(){return this.a};function D(a,b,c,d){c=void 0===c?{}:c;this.c=a;this.a=c;this.b=b;this.f=void 0===d?null:d}D.prototype.getResponseMessage=function(){return this.c};D.prototype.getMetadata=function(){return this.a};D.prototype.getMethodDescriptor=function(){return this.b};D.prototype.getStatus=function(){return this.f};function E(a,b,c,d,f,g){this.name=a;this.a=b;this.f=c;this.b=d;this.c=f;this.g=g}function ya(a,b,c){c=void 0===c?{}:c;var d=void 0===d?new xa:d;return new C(b,a,c,d)}n=E.prototype;n.getName=function(){return this.name};n.getMethodType=function(){return this.a};n.getResponseMessageCtor=function(){return this.b};n.getRequestMessageCtor=function(){return this.f};n.getResponseDeserializeFn=function(){return this.g};n.getRequestSerializeFn=function(){return this.c};E.prototype.getRequestSerializeFn=E.prototype.getRequestSerializeFn;
E.prototype.getResponseDeserializeFn=E.prototype.getResponseDeserializeFn;E.prototype.getRequestMessageCtor=E.prototype.getRequestMessageCtor;E.prototype.getResponseMessageCtor=E.prototype.getResponseMessageCtor;E.prototype.getMethodType=E.prototype.getMethodType;E.prototype.getName=E.prototype.getName;function za(a){switch(a){case 200:return 0;case 400:return 3;case 401:return 16;case 403:return 7;case 404:return 5;case 409:return 10;case 412:return 9;case 429:return 8;case 499:return 1;case 500:return 2;case 501:return 12;case 503:return 14;case 504:return 4;default:return 2}};function F(a,b,c){c=void 0===c?{}:c;b=Error.call(this,b);this.message=b.message;"stack"in b&&(this.stack=b.stack);this.code=a;this.metadata=c}oa(F,Error);F.prototype.name="RpcError";function Aa(a){this.a=a}Aa.prototype.on=function(a,b){return"data"==a||"error"==a?this:this.a.on(a,b)};Aa.prototype.removeListener=function(a,b){return this.a.removeListener(a,b)};Aa.prototype.cancel=function(){this.a.cancel()};function Ba(a){switch(a){case 0:return"No Error";case 1:return"Access denied to content document";case 2:return"File not found";case 3:return"Firefox silently errored";case 4:return"Application custom error";case 5:return"An exception occurred";case 6:return"Http response at 400 or 500 level";case 7:return"Request was aborted";case 8:return"Request timed out";case 9:return"The resource is not available offline";default:return"Unrecognized error code"}};function G(a){if(Error.captureStackTrace)Error.captureStackTrace(this,G);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}B(G,Error);G.prototype.name="CustomError";function Ca(a,b){a=a.split("%s");for(var c="",d=a.length-1,f=0;f<d;f++)c+=a[f]+(f<b.length?b[f]:"%s");G.call(this,c+a[d])}B(Ca,G);Ca.prototype.name="AssertionError";function Da(a,b){throw new Ca("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};function Ea(){this.l=null;this.i=[];this.m=0;this.b=Fa;this.f=this.a=this.h=0;this.c=null;this.g=0}
function Ga(a,b){function c(l){l==Ha?e.h=l:l==H?e.h=l:Ia(e,h,k,"invalid frame byte");e.b=Ja;e.a=0;e.f=0}function d(l){e.f++;e.a=(e.a<<8)+l;4==e.f&&(e.b=Ka,e.g=0,"undefined"!==typeof Uint8Array?e.c=new Uint8Array(e.a):e.c=Array(e.a),0==e.a&&g())}function f(l){e.c[e.g++]=l;e.g==e.a&&g()}function g(){var l={};l[e.h]=e.c;e.i.push(l);e.b=Fa}var e=a,h,k=0;for(b instanceof Uint8Array||b instanceof Array?h=b:h=new Uint8Array(b);k<h.length;){switch(e.b){case La:Ia(e,h,k,"stream already broken");break;case Fa:c(h[k]);
break;case Ja:d(h[k]);break;case Ka:f(h[k]);break;default:throw Error("unexpected parser state: "+e.b);}e.m++;k++}a=e.i;e.i=[];return 0<a.length?a:null}var Fa=0,Ja=1,Ka=2,La=3,Ha=0,H=128;function Ia(a,b,c,d){a.b=La;a.l="The stream is broken @"+a.m+"/"+c+". Error: "+d+". With input:\n"+b;throw Error(a.l);};var Ma=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};var Na=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function I(a,b){return-1!=a.indexOf(b)}function Oa(a,b){return a<b?-1:a>b?1:0};var J;a:{var Pa=w.navigator;if(Pa){var Qa=Pa.userAgent;if(Qa){J=Qa;break a}}J=""};function Ra(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function Sa(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}var Ta="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Ua(a,b){for(var c,d,f=1;f<arguments.length;f++){d=arguments[f];for(c in d)a[c]=d[c];for(var g=0;g<Ta.length;g++)c=Ta[g],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Va(a){var b=1;a=a.split(":");for(var c=[];0<b&&a.length;)c.push(a.shift()),b--;a.length&&c.push(a.join(":"));return c};function Wa(a){Wa[" "](a);return a}Wa[" "]=ra;function Xa(a){var b=Ya;return Object.prototype.hasOwnProperty.call(b,9)?b[9]:b[9]=a(9)};var Za=I(J,"Opera"),$a=I(J,"Trident")||I(J,"MSIE"),ab=I(J,"Edge"),bb=I(J,"Gecko")&&!(I(J.toLowerCase(),"webkit")&&!I(J,"Edge"))&&!(I(J,"Trident")||I(J,"MSIE"))&&!I(J,"Edge"),cb=I(J.toLowerCase(),"webkit")&&!I(J,"Edge"),db;
a:{var eb="",fb=function(){var a=J;if(bb)return/rv:([^\);]+)(\)|;)/.exec(a);if(ab)return/Edge\/([\d\.]+)/.exec(a);if($a)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(cb)return/WebKit\/(\S+)/.exec(a);if(Za)return/(?:Version)[ \/]?(\S+)/.exec(a)}();fb&&(eb=fb?fb[1]:"");if($a){var gb,hb=w.document;gb=hb?hb.documentMode:void 0;if(null!=gb&&gb>parseFloat(eb)){db=String(gb);break a}}db=eb}var Ya={};
function ib(){return Xa(function(){for(var a=0,b=Na(String(db)).split("."),c=Na("9").split("."),d=Math.max(b.length,c.length),f=0;0==a&&f<d;f++){var g=b[f]||"",e=c[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];e=/(\d*)(\D*)(.*)/.exec(e)||["","","",""];if(0==g[0].length&&0==e[0].length)break;a=Oa(0==g[1].length?0:parseInt(g[1],10),0==e[1].length?0:parseInt(e[1],10))||Oa(0==g[2].length,0==e[2].length)||Oa(g[2],e[2]);g=g[3];e=e[3]}while(0==a)}return 0<=a})};function jb(){0!=kb&&(Object.prototype.hasOwnProperty.call(this,ta)&&this[ta]||(this[ta]=++ua));this.K=this.K}var kb=0;jb.prototype.K=!1;var lb=Object.freeze||function(a){return a};function K(a,b){this.type=a;this.a=this.target=b;this.defaultPrevented=!1}K.prototype.b=function(){this.defaultPrevented=!0};var mb=function(){if(!w.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{w.addEventListener("test",ra,b),w.removeEventListener("test",ra,b)}catch(c){}return a}();function L(a,b){K.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(bb){a:{try{Wa(b.nodeName);var f=!0;break a}catch(g){}f=!1}f||(b=null)}}else"mouseover"==
c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:nb[a.pointerType]||"";this.c=a;a.defaultPrevented&&L.O.b.call(this)}}B(L,K);var nb=lb({2:"touch",3:"pen",4:"mouse"});L.prototype.b=function(){L.O.b.call(this);var a=this.c;a.preventDefault?a.preventDefault():a.returnValue=!1};var ob="closure_listenable_"+(1E6*Math.random()|0);var pb=0;function qb(a,b,c,d,f){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.H=f;this.key=++pb;this.A=this.D=!1}function rb(a){a.A=!0;a.listener=null;a.proxy=null;a.src=null;a.H=null};function sb(a){this.src=a;this.a={};this.b=0}sb.prototype.add=function(a,b,c,d,f){var g=a.toString();a=this.a[g];a||(a=this.a[g]=[],this.b++);var e=tb(a,b,d,f);-1<e?(b=a[e],c||(b.D=!1)):(b=new qb(b,this.src,g,!!d,f),b.D=c,a.push(b));return b};sb.prototype.remove=function(a,b,c,d){a=a.toString();if(!(a in this.a))return!1;var f=this.a[a];b=tb(f,b,c,d);return-1<b?(rb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete this.a[a],this.b--),!0):!1};
function ub(a,b){var c=b.type;if(c in a.a){var d=a.a[c],f=Ma(d,b),g;(g=0<=f)&&Array.prototype.splice.call(d,f,1);g&&(rb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function tb(a,b,c,d){for(var f=0;f<a.length;++f){var g=a[f];if(!g.A&&g.listener==b&&g.capture==!!c&&g.H==d)return f}return-1};var vb="closure_lm_"+(1E6*Math.random()|0),wb={},xb=0;function yb(a,b,c,d,f){if(d&&d.once)zb(a,b,c,d,f);else if(Array.isArray(b))for(var g=0;g<b.length;g++)yb(a,b[g],c,d,f);else c=Ab(c),a&&a[ob]?a.f.add(String(b),c,!1,sa(d)?!!d.capture:!!d,f):Bb(a,b,c,!1,d,f)}
function Bb(a,b,c,d,f,g){if(!b)throw Error("Invalid event type");var e=sa(f)?!!f.capture:!!f,h=Cb(a);h||(a[vb]=h=new sb(a));c=h.add(b,c,d,e,g);if(!c.proxy){d=Db();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)mb||(f=e),void 0===f&&(f=!1),a.addEventListener(b.toString(),d,f);else if(a.attachEvent)a.attachEvent(Eb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");xb++}}
function Db(){function a(c){return b.call(a.src,a.listener,c)}var b=Fb;return a}function zb(a,b,c,d,f){if(Array.isArray(b))for(var g=0;g<b.length;g++)zb(a,b[g],c,d,f);else c=Ab(c),a&&a[ob]?a.f.add(String(b),c,!0,sa(d)?!!d.capture:!!d,f):Bb(a,b,c,!0,d,f)}
function Gb(a,b,c,d,f){if(Array.isArray(b))for(var g=0;g<b.length;g++)Gb(a,b[g],c,d,f);else(d=sa(d)?!!d.capture:!!d,c=Ab(c),a&&a[ob])?a.f.remove(String(b),c,d,f):a&&(a=Cb(a))&&(b=a.a[b.toString()],a=-1,b&&(a=tb(b,c,d,f)),(c=-1<a?b[a]:null)&&Hb(c))}
function Hb(a){if("number"!==typeof a&&a&&!a.A){var b=a.src;if(b&&b[ob])ub(b.f,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(Eb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);xb--;(c=Cb(b))?(ub(c,a),0==c.b&&(c.src=null,b[vb]=null)):rb(a)}}}function Eb(a){return a in wb?wb[a]:wb[a]="on"+a}function Fb(a,b){if(a.A)a=!0;else{b=new L(b,this);var c=a.listener,d=a.H||a.src;a.D&&Hb(a);a=c.call(d,b)}return a}
function Cb(a){a=a[vb];return a instanceof sb?a:null}var Ib="__closure_events_fn_"+(1E9*Math.random()>>>0);function Ab(a){if("function"===typeof a)return a;a[Ib]||(a[Ib]=function(b){return a.handleEvent(b)});return a[Ib]};function M(){jb.call(this);this.f=new sb(this);this.U=this}B(M,jb);M.prototype[ob]=!0;M.prototype.addEventListener=function(a,b,c,d){yb(this,a,b,c,d)};M.prototype.removeEventListener=function(a,b,c,d){Gb(this,a,b,c,d)};function O(a,b){a=a.U;var c=b.type||b;if("string"===typeof b)b=new K(b,a);else if(b instanceof K)b.target=b.target||a;else{var d=b;b=new K(c,a);Ua(b,d)}a=b.a=a;Jb(a,c,!0,b);Jb(a,c,!1,b)}
function Jb(a,b,c,d){if(b=a.f.a[String(b)]){b=b.concat();for(var f=!0,g=0;g<b.length;++g){var e=b[g];if(e&&!e.A&&e.capture==c){var h=e.listener,k=e.H||e.src;e.D&&ub(a.f,e);f=!1!==h.call(k,d)&&f}}}};var Kb=w;function Lb(a,b,c){if("function"===typeof a)c&&(a=A(a,c));else if(a&&"function"==typeof a.handleEvent)a=A(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:Kb.setTimeout(a,b||0)};function Mb(a,b){this.name=a;this.value=b}Mb.prototype.toString=function(){return this.name};var Nb=new Mb("OFF",Infinity),Ob=new Mb("SEVERE",1E3),Pb=new Mb("CONFIG",700),Qb=new Mb("FINE",500);function Rb(){this.clear()}var Sb;Rb.prototype.clear=function(){};function Ub(a,b,c){this.reset(a||Nb,b,c,void 0,void 0)}Ub.prototype.reset=function(){};function Vb(a,b){this.a=null;this.f=[];this.b=(void 0===b?null:b)||null;this.c=[];this.g={getName:function(){return a}}}
function Wb(a){if(a.a)return a.a;if(a.b)return Wb(a.b);Da("Root logger has no level set.");return Nb}function Xb(a,b){for(;a;)a.f.forEach(function(c){c(b)}),a=a.b}function Yb(){this.entries={};var a=new Vb("");a.a=Pb;this.entries[""]=a}var Zb;function $b(a,b,c){var d=a.entries[b];if(d)return void 0!==c&&(d.a=c),d;d=$b(a,b.substr(0,b.lastIndexOf(".")));var f=new Vb(b,d);a.entries[b]=f;d.c.push(f);void 0!==c&&(f.a=c);return f}function ac(){Zb||(Zb=new Yb);return Zb}
function bc(a,b,c){var d;if(d=a)if(d=a&&b){d=b.value;var f=a?Wb($b(ac(),a.getName())):Nb;d=d>=f.value}d&&(b=b||Nb,d=$b(ac(),a.getName()),"function"===typeof c&&(c=c()),Sb||(Sb=new Rb),a=a.getName(),a=new Ub(b,c,a),Xb(d,a))}function P(a,b){a&&bc(a,Qb,b)};function cc(){}cc.prototype.a=null;function dc(a){var b;(b=a.a)||(b={},ec(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var fc;function gc(){}B(gc,cc);function hc(a){return(a=ec(a))?new ActiveXObject(a):new XMLHttpRequest}function ec(a){if(!a.b&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(f){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.b}fc=new gc;t();u();function ic(a,b){this.b=a[w.Symbol.iterator]();this.c=b;this.f=0}ic.prototype[Symbol.iterator]=function(){return this};ic.prototype.next=function(){var a=this.b.next();return{value:a.done?void 0:this.c.call(void 0,a.value,this.f++),done:a.done}};function jc(a,b){return new ic(a,b)}t();u();t();u();var kc="StopIteration"in w?w.StopIteration:{message:"StopIteration",stack:""};function Q(){}Q.prototype.next=function(){return Q.prototype.a.call(this)};Q.prototype.a=function(){throw kc;};Q.prototype.u=function(){return this};function lc(a){if(a instanceof R||a instanceof S||a instanceof T)return a;if("function"==typeof a.next)return new R(function(){return mc(a)});t();u();if("function"==typeof a[Symbol.iterator])return t(),u(),new R(function(){return a[Symbol.iterator]()});if("function"==typeof a.u)return new R(function(){return mc(a.u())});throw Error("Not an iterator or iterable.");}
function mc(a){if(!(a instanceof Q))return a;var b=!1;return{next:function(){for(var c;!b;)try{c=a.a();break}catch(d){if(d!==kc)throw d;b=!0}return{value:c,done:b}}}}t();u();function R(a){this.b=a}R.prototype.u=function(){return new S(this.b())};R.prototype[Symbol.iterator]=function(){return new T(this.b())};R.prototype.c=function(){return new T(this.b())};t();u();function S(a){this.b=a}oa(S,Q);S.prototype.a=function(){var a=this.b.next();if(a.done)throw kc;return a.value};S.prototype.next=function(){return S.prototype.a.call(this)};
S.prototype[Symbol.iterator]=function(){return new T(this.b)};S.prototype.c=function(){return new T(this.b)};function T(a){R.call(this,function(){return a});this.f=a}oa(T,R);T.prototype.next=function(){return this.f.next()};function nc(a,b){this.o={};this.j=[];this.B=this.size=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else a&&this.addAll(a)}n=nc.prototype;n.G=function(){oc(this);return this.j.concat()};n.has=function(a){return U(this.o,a)};n.clear=function(){this.o={};this.B=this.size=this.j.length=0};n.remove=function(a){return this.delete(a)};
n.delete=function(a){return U(this.o,a)?(delete this.o[a],--this.size,this.B++,this.j.length>2*this.size&&oc(this),!0):!1};function oc(a){if(a.size!=a.j.length){for(var b=0,c=0;b<a.j.length;){var d=a.j[b];U(a.o,d)&&(a.j[c++]=d);b++}a.j.length=c}if(a.size!=a.j.length){var f={};for(c=b=0;b<a.j.length;)d=a.j[b],U(f,d)||(a.j[c++]=d,f[d]=1),b++;a.j.length=c}}n.get=function(a,b){return U(this.o,a)?this.o[a]:b};n.set=function(a,b){U(this.o,a)||(this.size+=1,this.j.push(a),this.B++);this.o[a]=b};
n.addAll=function(a){if(a instanceof nc)for(var b=a.G(),c=0;c<b.length;c++)this.set(b[c],a.get(b[c]));else for(b in a)this.set(b,a[b])};n.forEach=function(a,b){for(var c=this.G(),d=0;d<c.length;d++){var f=c[d],g=this.get(f);a.call(b,g,f,this)}};n.clone=function(){return new nc(this)};n.keys=function(){return lc(this.u(!0)).c()};n.values=function(){return lc(this.u(!1)).c()};n.entries=function(){var a=this;return jc(this.keys(),function(b){return[b,a.get(b)]})};
n.u=function(a){oc(this);var b=0,c=this.B,d=this,f=new Q;f.a=function(){if(c!=d.B)throw Error("The map has changed since the iterator was created");if(b>=d.j.length)throw kc;var g=d.j[b++];return a?g:d.o[g]};f.next=f.a.bind(f);return f};function U(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var pc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function qc(a){M.call(this);this.headers=new nc;this.C=a||null;this.c=!1;this.J=this.a=null;this.P=this.v="";this.g=0;this.l="";this.i=this.N=this.s=this.L=!1;this.h=0;this.w=null;this.m=rc;this.I=this.M=!1}B(qc,M);var rc="";qc.prototype.b=$b(ac(),"goog.net.XhrIo",void 0).g;var sc=/^https?$/i,tc=["POST","PUT"];
function uc(a,b,c){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.v+"; newUri="+b);a.v=b;a.l="";a.g=0;a.P="POST";a.L=!1;a.c=!0;a.a=a.C?hc(a.C):hc(fc);a.J=a.C?dc(a.C):dc(fc);a.a.onreadystatechange=A(a.R,a);try{P(a.b,V(a,"Opening Xhr")),a.N=!0,a.a.open("POST",String(b),!0),a.N=!1}catch(g){P(a.b,V(a,"Error opening Xhr: "+g.message));vc(a,g);return}b=c||"";c=a.headers.clone();var d=c.G().find(function(g){return"content-type"==g.toLowerCase()}),f=w.FormData&&b instanceof
w.FormData;!(0<=Ma(tc,"POST"))||d||f||c.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");c.forEach(function(g,e){this.a.setRequestHeader(e,g)},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.M&&(a.a.withCredentials=a.M);try{wc(a),0<a.h&&(a.I=xc(a.a),P(a.b,V(a,"Will abort after "+a.h+"ms if incomplete, xhr2 "+a.I)),a.I?(a.a.timeout=a.h,a.a.ontimeout=A(a.T,a)):a.w=Lb(a.T,a.h,a)),P(a.b,V(a,"Sending request")),a.s=!0,a.a.send(b),a.s=!1}catch(g){P(a.b,
V(a,"Send error: "+g.message)),vc(a,g)}}function xc(a){return $a&&ib()&&"number"===typeof a.timeout&&void 0!==a.ontimeout}n=qc.prototype;n.T=function(){"undefined"!=typeof qa&&this.a&&(this.l="Timed out after "+this.h+"ms, aborting",this.g=8,P(this.b,V(this,this.l)),O(this,"timeout"),this.abort(8))};function vc(a,b){a.c=!1;a.a&&(a.i=!0,a.a.abort(),a.i=!1);a.l=b;a.g=5;yc(a);zc(a)}function yc(a){a.L||(a.L=!0,O(a,"complete"),O(a,"error"))}
n.abort=function(a){this.a&&this.c&&(P(this.b,V(this,"Aborting")),this.c=!1,this.i=!0,this.a.abort(),this.i=!1,this.g=a||7,O(this,"complete"),O(this,"abort"),zc(this))};n.R=function(){this.K||(this.N||this.s||this.i?Ac(this):this.W())};n.W=function(){Ac(this)};
function Ac(a){if(a.c&&"undefined"!=typeof qa)if(a.J[1]&&4==W(a)&&2==a.getStatus())P(a.b,V(a,"Local request error detected and ignored"));else if(a.s&&4==W(a))Lb(a.R,0,a);else if(O(a,"readystatechange"),4==W(a)){P(a.b,V(a,"Request complete"));a.c=!1;try{var b=a.getStatus();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var f;if(f=0===b){var g=String(a.v).match(pc)[1]||null;if(!g&&w.self&&w.self.location){var e=w.self.location.protocol;
g=e.substr(0,e.length-1)}f=!sc.test(g?g.toLowerCase():"")}d=f}if(d)O(a,"complete"),O(a,"success");else{a.g=6;try{var h=2<W(a)?a.a.statusText:""}catch(k){P(a.b,"Can not get status: "+k.message),h=""}a.l=h+" ["+a.getStatus()+"]";yc(a)}}finally{zc(a)}}}function zc(a){if(a.a){wc(a);var b=a.a,c=a.J[0]?ra:null;a.a=null;a.J=null;O(a,"ready");try{b.onreadystatechange=c}catch(d){(a=a.b)&&bc(a,Ob,"Problem encountered resetting onreadystatechange: "+d.message)}}}
function wc(a){a.a&&a.I&&(a.a.ontimeout=null);a.w&&(Kb.clearTimeout(a.w),a.w=null)}function W(a){return a.a?a.a.readyState:0}n.getStatus=function(){try{return 2<W(this)?this.a.status:-1}catch(a){return-1}};
function Bc(a){try{if(!a.a)return null;if("response"in a.a)return a.a.response;switch(a.m){case rc:case "text":return a.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in a.a)return a.a.mozResponseArrayBuffer}var b=a.b;b&&bc(b,Ob,"Response type "+a.m+" is not supported on this browser");return null}catch(c){return P(a.b,"Can not get response: "+c.message),null}}function Cc(a,b){if(a.a&&4==W(a))return a=a.a.getResponseHeader(b),null===a?void 0:a}
function Dc(a){var b={};a=(a.a&&4==W(a)?a.a.getAllResponseHeaders()||"":"").split("\r\n");for(var c=0;c<a.length;c++)if(!/^[\s\xa0]*$/.test(a[c])){var d=Va(a[c]),f=d[0];d=d[1];if("string"===typeof d){d=d.trim();var g=b[f]||[];b[f]=g;g.push(d)}}return Sa(b,function(e){return e.join(", ")})}function V(a,b){return b+" ["+a.P+" "+a.v+" "+a.getStatus()+"]"};var Ec={},Fc=null;function Gc(a){var b=a.length,c=3*b/4;c%3?c=Math.floor(c):I("=.",a[b-1])&&(c=I("=.",a[b-2])?c-2:c-1);var d=new Uint8Array(c),f=0;Hc(a,function(g){d[f++]=g});return d.subarray(0,f)}
function Hc(a,b){function c(k){for(;d<a.length;){var l=a.charAt(d++),m=Fc[l];if(null!=m)return m;if(!/^[\s\xa0]*$/.test(l))throw Error("Unknown base64 encoding at char: "+l);}return k}Ic();for(var d=0;;){var f=c(-1),g=c(0),e=c(64),h=c(64);if(64===h&&-1===f)break;b(f<<2|g>>4);64!=e&&(b(g<<4&240|e>>2),64!=h&&b(e<<6&192|h))}}
function Ic(){if(!Fc){Fc={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));Ec[c]=d;for(var f=0;f<d.length;f++){var g=d[f];void 0===Fc[g]&&(Fc[g]=f)}}}};var Jc=["content-type","grpc-status","grpc-message"];
function X(a){this.a=a.Z;this.m=null;this.b=[];this.h=[];this.g=[];this.f=[];this.c=[];this.l=!1;this.i=0;this.s=new Ea;var b=this;yb(this.a,"readystatechange",function(){var c=b.a;if(c=c.a?c.a.getResponseHeader("Content-Type"):null){c=c.toLowerCase();if(0==c.lastIndexOf("application/grpc-web-text",0)){c=b.a;try{var d=c.a?c.a.responseText:""}catch(k){P(c.b,"Can not get responseText: "+k.message),d=""}c=d||"";d=c.length-c.length%4;c=c.substr(b.i,d-b.i);if(0==c.length)return;b.i=d;c=Gc(c)}else if(0==
c.lastIndexOf("application/grpc",0))c=new Uint8Array(Bc(b.a));else{Y(b,new F(2,"Unknown Content-type received."));return}d=null;try{d=Ga(b.s,c)}catch(k){Y(b,new F(2,"Error in parsing response body"))}if(d)for(c=0;c<d.length;c++){if(Ha in d[c]){var f=d[c][Ha];if(f){var g=void 0;try{g=b.m(f)}catch(k){Y(b,new F(13,"Error when deserializing response data; error: "+k+(", response: "+g)))}if(g){f=b;for(var e=0;e<f.b.length;e++)f.b[e](g)}}}if(H in d[c]&&0<d[c][H].length){f="";for(g=0;g<d[c][H].length;g++)f+=
String.fromCharCode(d[c][H][g]);f=f.trim().split("\r\n");g={};for(e=0;e<f.length;e++){var h=f[e].indexOf(":");g[f[e].substring(0,h).trim()]=f[e].substring(h+1).trim()}f=g;g=0;e="";"grpc-status"in f&&(g=Number(f["grpc-status"]),delete f["grpc-status"]);"grpc-message"in f&&(e=f["grpc-message"],delete f["grpc-message"]);Y(b,new F(g,e,f))}}}});yb(this.a,"complete",function(){var c=b.a.g,d=2,f="",g={},e=Dc(b.a);Object.keys(e).forEach(function(h){Jc.includes(h)||(g[h]=e[h])});Kc(b,g);if(0!=c){switch(c){case 7:d=
10;break;case 8:d=4;break;case 6:d=za(b.a.getStatus());break;default:d=14}10==d&&b.l||Y(b,new F(d,Ba(c)))}else c=!1,"grpc-status"in e&&(d=Number(Cc(b.a,"grpc-status")),"grpc-message"in e&&(f=Cc(b.a,"grpc-message")),0!=d&&(Y(b,new F(d,f||"",e)),c=!0)),c||Lc(b)})}X.prototype.on=function(a,b){"data"==a?this.b.push(b):"status"==a?this.h.push(b):"metadata"==a?this.g.push(b):"end"==a?this.c.push(b):"error"==a&&this.f.push(b);return this};function Mc(a,b){b=a.indexOf(b);-1<b&&a.splice(b,1)}
X.prototype.removeListener=function(a,b){"data"==a?Mc(this.b,b):"status"==a?Mc(this.h,b):"metadata"==a?Mc(this.g,b):"end"==a?Mc(this.c,b):"error"==a&&Mc(this.f,b);return this};X.prototype.cancel=function(){this.l=!0;this.a.abort()};function Y(a,b){if(0!=b.code)for(var c=new F(b.code,decodeURIComponent(b.message||""),b.metadata),d=0;d<a.f.length;d++)a.f[d](c);b={code:b.code,details:decodeURIComponent(b.message||""),metadata:b.metadata};for(c=0;c<a.h.length;c++)a.h[c](b)}
function Kc(a,b){for(var c=0;c<a.g.length;c++)a.g[c](b)}function Lc(a){for(var b=0;b<a.c.length;b++)a.c[b]()}X.prototype.cancel=X.prototype.cancel;X.prototype.removeListener=X.prototype.removeListener;X.prototype.on=X.prototype.on;function Nc(a){var b="";Ra(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n"});return b};function Z(a,b){a=void 0===a?{}:a;this.a=a.format||y("format",a)||"text";this.g=a.aa||y("suppressCorsPreflight",a)||!1;this.f=a.withCredentials||y("withCredentials",a)||!1;this.b=a.$||y("streamInterceptors",a)||[];this.h=a.ba||y("unaryInterceptors",a)||[];this.c=b||null}Z.prototype.X=function(a,b,c,d,f){var g=this,e=a.substr(0,a.length-d.name.length);a=Oc(function(h){return Pc(g,h,e)},this.b).call(this,ya(d,b,c));Qc(a,f,!1);return new Aa(a)};
Z.prototype.S=function(a,b,c,d){var f=this,g=a.substr(0,a.length-d.name.length);return Oc(function(e){return new Promise(function(h,k){var l=Pc(f,e,g),m,p,q;Qc(l,function(x,z,N,Tb){x?k(x):z?q=z:N?p=N:Tb?m=Tb:(x=e.getMethodDescriptor(),z=m,z=void 0===z?{}:z,h(new D(q,x,z,void 0===p?null:p)))},!0)})},this.h).call(this,ya(d,b,c)).then(function(e){return e.getResponseMessage()})};Z.prototype.unaryCall=function(a,b,c,d){return this.S(a,b,c,d)};
Z.prototype.Y=function(a,b,c,d){var f=this,g=a.substr(0,a.length-d.name.length);return Oc(function(e){return Pc(f,e,g)},this.b).call(this,ya(d,b,c))};
function Pc(a,b,c){var d=b.getMethodDescriptor(),f=c+d.getName();c=a.c?a.c:new qc;c.M=a.f;var g=new X({Z:c}),e=d.getResponseDeserializeFn();g.m=e;e=b.getMetadata();for(var h in e)c.headers.set(h,e[h]);"text"==a.a?(c.headers.set("Content-Type","application/grpc-web-text"),c.headers.set("Accept","application/grpc-web-text")):c.headers.set("Content-Type","application/grpc-web+proto");c.headers.set("X-User-Agent","grpc-web-javascript/0.1");c.headers.set("X-Grpc-Web","1");c.headers.has("deadline")&&(h=
Number(c.headers.get("deadline")),h=Math.ceil(h-(new Date).getTime()),c.headers.delete("deadline"),Infinity===h&&(h=0),0<h&&(c.headers.set("grpc-timeout",h+"m"),c.h=Math.max(0,Math.max(1E3,Math.ceil(1.1*h)))));if(a.g){e=c.headers;h={};for(var k=ha(e.keys()),l=k.next();!l.done;l=k.next())l=l.value,h[l]=e.get(l);c.headers.clear();b:{for(m in h){var m=!1;break b}m=!0}if(!m)if(h=Nc(h),"string"===typeof f){if(m=encodeURIComponent("$httpHeaders"),h=null!=h?"="+encodeURIComponent(String(h)):"",m+=h)h=f.indexOf("#"),
0>h&&(h=f.length),e=f.indexOf("?"),0>e||e>h?(e=h,k=""):k=f.substring(e+1,h),f=[f.substr(0,e),k,f.substr(h)],h=f[1],f[1]=m?h?h+"&"+m:m:h,f=f[0]+(f[1]?"?"+f[1]:"")+f[2]}else f.a("$httpHeaders",h)}b=d.getRequestSerializeFn()(b.getRequestMessage());d=b.length;m=[0,0,0,0];h=new Uint8Array(5+d);for(e=3;0<=e;e--)m[e]=d%256,d>>>=8;h.set(new Uint8Array(m),1);h.set(b,5);b=h;if("text"==a.a){a=b;var p;void 0===p&&(p=0);Ic();p=Ec[p];b=Array(Math.floor(a.length/3));d=p[64]||"";for(m=h=0;h<a.length-2;h+=3){l=a[h];
var q=a[h+1];k=a[h+2];e=p[l>>2];l=p[(l&3)<<4|q>>4];q=p[(q&15)<<2|k>>6];k=p[k&63];b[m++]=e+l+q+k}e=0;k=d;switch(a.length-h){case 2:e=a[h+1],k=p[(e&15)<<2]||d;case 1:a=a[h],b[m]=p[a>>2]+p[(a&3)<<4|e>>4]+k+d}b=b.join("")}else"binary"==a.a&&(c.m="arraybuffer");uc(c,f,b);return g}
function Qc(a,b,c){var d=!1,f=null,g=!1;a.on("data",function(e){d=!0;f=e});a.on("error",function(e){0==e.code||g||(g=!0,b(e,null))});a.on("status",function(e){0==e.code||g?c&&b(null,null,e):(g=!0,b({code:e.code,message:e.details,metadata:e.metadata},null))});if(c)a.on("metadata",function(e){b(null,null,null,e)});a.on("end",function(){g||(d?b(null,f):b({code:2,message:"Incomplete response"}));c&&b(null,null)})}
function Oc(a,b){var c=a;b.forEach(function(d){var f=c;c=function(g){return d.intercept(g,f)}});return c}Z.prototype.serverStreaming=Z.prototype.Y;Z.prototype.unaryCall=Z.prototype.unaryCall;Z.prototype.thenableCall=Z.prototype.S;Z.prototype.rpcCall=Z.prototype.X;module.exports.CallOptions=xa;module.exports.MethodDescriptor=E;module.exports.GrpcWebClientBase=Z;module.exports.RpcError=F;module.exports.StatusCode={OK:0,CANCELLED:1,UNKNOWN:2,INVALID_ARGUMENT:3,DEADLINE_EXCEEDED:4,NOT_FOUND:5,ALREADY_EXISTS:6,PERMISSION_DENIED:7,UNAUTHENTICATED:16,RESOURCE_EXHAUSTED:8,FAILED_PRECONDITION:9,ABORTED:10,OUT_OF_RANGE:11,UNIMPLEMENTED:12,INTERNAL:13,UNAVAILABLE:14,DATA_LOSS:15};module.exports.MethodType={UNARY:"unary",SERVER_STREAMING:"server_streaming",BIDI_STREAMING:"bidi_streaming"};
Kb="undefined"!==typeof globalThis&&globalThis||self;


/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "./node_modules/has-tostringtag/shams.js":
/*!***********************************************!*\
  !*** ./node_modules/has-tostringtag/shams.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ "./node_modules/has/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/has/src/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/is-arguments/index.js":
/*!********************************************!*\
  !*** ./node_modules/is-arguments/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ "./node_modules/is-generator-function/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/is-generator-function/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ "./node_modules/is-nan/implementation.js":
/*!***********************************************!*\
  !*** ./node_modules/is-nan/implementation.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ "./node_modules/is-nan/index.js":
/*!**************************************!*\
  !*** ./node_modules/is-nan/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/is-nan/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/is-nan/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/is-nan/shim.js");

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "./node_modules/is-nan/polyfill.js":
/*!*****************************************!*\
  !*** ./node_modules/is-nan/polyfill.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/is-nan/implementation.js");

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ "./node_modules/is-nan/shim.js":
/*!*************************************!*\
  !*** ./node_modules/is-nan/shim.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/is-nan/polyfill.js");

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "./node_modules/is-typed-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/is-typed-array/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(/*! foreach */ "./node_modules/foreach/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "./node_modules/available-typed-arrays/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = __webpack_require__(/*! es-abstract/helpers/getOwnPropertyDescriptor */ "./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};


/***/ }),

/***/ "./node_modules/object-is/implementation.js":
/*!**************************************************!*\
  !*** ./node_modules/object-is/implementation.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ "./node_modules/object-is/index.js":
/*!*****************************************!*\
  !*** ./node_modules/object-is/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");
var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object-is/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/object-is/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/object-is/shim.js");

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "./node_modules/object-is/polyfill.js":
/*!********************************************!*\
  !*** ./node_modules/object-is/polyfill.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object-is/implementation.js");

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ "./node_modules/object-is/shim.js":
/*!****************************************!*\
  !*** ./node_modules/object-is/shim.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/object-is/polyfill.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "./node_modules/object-keys/implementation.js":
/*!****************************************************!*\
  !*** ./node_modules/object-keys/implementation.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/index.js":
/*!*******************************************!*\
  !*** ./node_modules/object-keys/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ "./node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/isArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/object-keys/isArguments.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./src/api/converter.ts":
/*!******************************!*\
  !*** ./src/api/converter.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "converter": () => (/* binding */ converter)
/* harmony export */ });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/index.js");
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/error */ "./src/util/error.ts");
/* harmony import */ var _document_time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../document/time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _document_operation_set_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../document/operation/set_operation */ "./src/document/operation/set_operation.ts");
/* harmony import */ var _document_operation_add_operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../document/operation/add_operation */ "./src/document/operation/add_operation.ts");
/* harmony import */ var _document_operation_move_operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../document/operation/move_operation */ "./src/document/operation/move_operation.ts");
/* harmony import */ var _document_operation_remove_operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../document/operation/remove_operation */ "./src/document/operation/remove_operation.ts");
/* harmony import */ var _document_operation_edit_operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../document/operation/edit_operation */ "./src/document/operation/edit_operation.ts");
/* harmony import */ var _document_operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../document/operation/rich_edit_operation */ "./src/document/operation/rich_edit_operation.ts");
/* harmony import */ var _document_operation_select_operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../document/operation/select_operation */ "./src/document/operation/select_operation.ts");
/* harmony import */ var _document_operation_style_operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../document/operation/style_operation */ "./src/document/operation/style_operation.ts");
/* harmony import */ var _document_change_change_id__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../document/change/change_id */ "./src/document/change/change_id.ts");
/* harmony import */ var _document_change_change__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../document/change/change */ "./src/document/change/change.ts");
/* harmony import */ var _document_change_change_pack__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../document/change/change_pack */ "./src/document/change/change_pack.ts");
/* harmony import */ var _document_change_checkpoint__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../document/change/checkpoint */ "./src/document/change/checkpoint.ts");
/* harmony import */ var _document_json_rht_pq_map__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../document/json/rht_pq_map */ "./src/document/json/rht_pq_map.ts");
/* harmony import */ var _document_json_rga_tree_list__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../document/json/rga_tree_list */ "./src/document/json/rga_tree_list.ts");
/* harmony import */ var _document_json_object__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../document/json/object */ "./src/document/json/object.ts");
/* harmony import */ var _document_json_array__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../document/json/array */ "./src/document/json/array.ts");
/* harmony import */ var _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../document/json/rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/* harmony import */ var _document_json_plain_text__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../document/json/plain_text */ "./src/document/json/plain_text.ts");
/* harmony import */ var _document_json_rich_text__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../document/json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../document/json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _resources_pb__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./resources_pb */ "./src/api/resources_pb.js");
/* harmony import */ var _resources_pb__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_resources_pb__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var _document_operation_increase_operation__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../document/operation/increase_operation */ "./src/document/operation/increase_operation.ts");
/* harmony import */ var _document_json_counter__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../document/json/counter */ "./src/document/json/counter.ts");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/buffer/index.js */ "./node_modules/buffer/index.js")["Buffer"];
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


























/**
 * `fromPresence` converts the given Protobuf format to model format.
 */
function fromPresence(pbPresence) {
    const data = {};
    pbPresence.getDataMap().forEach((value, key) => {
        data[key] = value;
    });
    return {
        clock: pbPresence.getClock(),
        data: data,
    };
}
/**
 * `toClient` converts the given model to Protobuf format.
 */
function toClient(id, presence) {
    const pbPresence = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Presence();
    pbPresence.setClock(presence.clock);
    const pbDataMap = pbPresence.getDataMap();
    for (const [key, value] of Object.entries(presence.data)) {
        pbDataMap.set(key, value);
    }
    const pbClient = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Client();
    pbClient.setId(toUint8Array(id));
    pbClient.setPresence(pbPresence);
    return pbClient;
}
/**
 * `toCheckpoint` converts the given model to Protobuf format.
 */
function toCheckpoint(checkpoint) {
    const pbCheckpoint = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Checkpoint();
    pbCheckpoint.setServerSeq(checkpoint.getServerSeqAsString());
    pbCheckpoint.setClientSeq(checkpoint.getClientSeq());
    return pbCheckpoint;
}
/**
 * `toChangeID` converts the given model to Protobuf format.
 */
function toChangeID(changeID) {
    const pbChangeID = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ChangeID();
    pbChangeID.setClientSeq(changeID.getClientSeq());
    pbChangeID.setLamport(changeID.getLamportAsString());
    pbChangeID.setActorId(toUint8Array(changeID.getActorID()));
    return pbChangeID;
}
/**
 * `toTimeTicket` converts the given model to Protobuf format.
 */
function toTimeTicket(ticket) {
    if (!ticket) {
        return;
    }
    const pbTimeTicket = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.TimeTicket();
    pbTimeTicket.setLamport(ticket.getLamportAsString());
    pbTimeTicket.setDelimiter(ticket.getDelimiter());
    pbTimeTicket.setActorId(toUint8Array(ticket.getActorID()));
    return pbTimeTicket;
}
/**
 * `toValueType` converts the given model to Protobuf format.
 */
function toValueType(valueType) {
    switch (valueType) {
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Null:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.NULL;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Boolean:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.BOOLEAN;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Integer:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.INTEGER;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Long:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.LONG;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Double:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DOUBLE;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.String:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.STRING;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Bytes:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.BYTES;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Date:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DATE;
        default:
            throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unsupported, `unsupported type: ${valueType}`);
    }
}
/**
 * `toCounterType` converts the given model to Protobuf format.
 */
function toCounterType(valueType) {
    switch (valueType) {
        case _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterType.IntegerCnt:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.INTEGER_CNT;
        case _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterType.LongCnt:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.LONG_CNT;
        case _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterType.DoubleCnt:
            return _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DOUBLE_CNT;
        default:
            throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unsupported, `unsupported type: ${valueType}`);
    }
}
/**
 * `toJSONElementSimple` converts the given model to Protobuf format.
 */
function toJSONElementSimple(jsonElement) {
    const pbJSONElement = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElementSimple();
    if (jsonElement instanceof _document_json_object__WEBPACK_IMPORTED_MODULE_17__.ObjectInternal) {
        pbJSONElement.setType(_resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.JSON_OBJECT);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_array__WEBPACK_IMPORTED_MODULE_18__.ArrayInternal) {
        pbJSONElement.setType(_resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.JSON_ARRAY);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_plain_text__WEBPACK_IMPORTED_MODULE_20__.PlainTextInternal) {
        pbJSONElement.setType(_resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.TEXT);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_rich_text__WEBPACK_IMPORTED_MODULE_21__.RichTextInternal) {
        pbJSONElement.setType(_resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.RICH_TEXT);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.JSONPrimitive) {
        const primitive = jsonElement;
        pbJSONElement.setType(toValueType(primitive.getType()));
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
        pbJSONElement.setValue(jsonElement.toBytes());
    }
    else if (jsonElement instanceof _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterInternal) {
        const counter = jsonElement;
        pbJSONElement.setType(toCounterType(counter.getType()));
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
        pbJSONElement.setValue(jsonElement.toBytes());
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented element: ${jsonElement}`);
    }
    return pbJSONElement;
}
/**
 * `toTextNodeID` converts the given model to Protobuf format.
 */
function toTextNodeID(id) {
    const pbTextNodeID = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.TextNodeID();
    pbTextNodeID.setCreatedAt(toTimeTicket(id.getCreatedAt()));
    pbTextNodeID.setOffset(id.getOffset());
    return pbTextNodeID;
}
/**
 * `toTextNodePos` converts the given model to Protobuf format.
 */
function toTextNodePos(pos) {
    const pbTextNodePos = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.TextNodePos();
    pbTextNodePos.setCreatedAt(toTimeTicket(pos.getID().getCreatedAt()));
    pbTextNodePos.setOffset(pos.getID().getOffset());
    pbTextNodePos.setRelativeOffset(pos.getRelativeOffset());
    return pbTextNodePos;
}
/**
 * `toOperation` converts the given model to Protobuf format.
 */
function toOperation(operation) {
    const pbOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation();
    if (operation instanceof _document_operation_set_operation__WEBPACK_IMPORTED_MODULE_3__.SetOperation) {
        const setOperation = operation;
        const pbSetOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Set();
        pbSetOperation.setParentCreatedAt(toTimeTicket(setOperation.getParentCreatedAt()));
        pbSetOperation.setKey(setOperation.getKey());
        pbSetOperation.setValue(toJSONElementSimple(setOperation.getValue()));
        pbSetOperation.setExecutedAt(toTimeTicket(setOperation.getExecutedAt()));
        pbOperation.setSet(pbSetOperation);
    }
    else if (operation instanceof _document_operation_add_operation__WEBPACK_IMPORTED_MODULE_4__.AddOperation) {
        const addOperation = operation;
        const pbAddOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Add();
        pbAddOperation.setParentCreatedAt(toTimeTicket(addOperation.getParentCreatedAt()));
        pbAddOperation.setPrevCreatedAt(toTimeTicket(addOperation.getPrevCreatedAt()));
        pbAddOperation.setValue(toJSONElementSimple(addOperation.getValue()));
        pbAddOperation.setExecutedAt(toTimeTicket(addOperation.getExecutedAt()));
        pbOperation.setAdd(pbAddOperation);
    }
    else if (operation instanceof _document_operation_move_operation__WEBPACK_IMPORTED_MODULE_5__.MoveOperation) {
        const moveOperation = operation;
        const pbMoveOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Move();
        pbMoveOperation.setParentCreatedAt(toTimeTicket(moveOperation.getParentCreatedAt()));
        pbMoveOperation.setPrevCreatedAt(toTimeTicket(moveOperation.getPrevCreatedAt()));
        pbMoveOperation.setCreatedAt(toTimeTicket(moveOperation.getCreatedAt()));
        pbMoveOperation.setExecutedAt(toTimeTicket(moveOperation.getExecutedAt()));
        pbOperation.setMove(pbMoveOperation);
    }
    else if (operation instanceof _document_operation_remove_operation__WEBPACK_IMPORTED_MODULE_6__.RemoveOperation) {
        const removeOperation = operation;
        const pbRemoveOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Remove();
        pbRemoveOperation.setParentCreatedAt(toTimeTicket(removeOperation.getParentCreatedAt()));
        pbRemoveOperation.setCreatedAt(toTimeTicket(removeOperation.getCreatedAt()));
        pbRemoveOperation.setExecutedAt(toTimeTicket(removeOperation.getExecutedAt()));
        pbOperation.setRemove(pbRemoveOperation);
    }
    else if (operation instanceof _document_operation_edit_operation__WEBPACK_IMPORTED_MODULE_7__.EditOperation) {
        const editOperation = operation;
        const pbEditOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Edit();
        pbEditOperation.setParentCreatedAt(toTimeTicket(editOperation.getParentCreatedAt()));
        pbEditOperation.setFrom(toTextNodePos(editOperation.getFromPos()));
        pbEditOperation.setTo(toTextNodePos(editOperation.getToPos()));
        const pbCreatedAtMapByActor = pbEditOperation.getCreatedAtMapByActorMap();
        for (const [key, value] of editOperation.getMaxCreatedAtMapByActor()) {
            pbCreatedAtMapByActor.set(key, toTimeTicket(value));
        }
        pbEditOperation.setContent(editOperation.getContent());
        pbEditOperation.setExecutedAt(toTimeTicket(editOperation.getExecutedAt()));
        pbOperation.setEdit(pbEditOperation);
    }
    else if (operation instanceof _document_operation_select_operation__WEBPACK_IMPORTED_MODULE_9__.SelectOperation) {
        const selectOperation = operation;
        const pbSelectOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Select();
        pbSelectOperation.setParentCreatedAt(toTimeTicket(selectOperation.getParentCreatedAt()));
        pbSelectOperation.setFrom(toTextNodePos(selectOperation.getFromPos()));
        pbSelectOperation.setTo(toTextNodePos(selectOperation.getToPos()));
        pbSelectOperation.setExecutedAt(toTimeTicket(selectOperation.getExecutedAt()));
        pbOperation.setSelect(pbSelectOperation);
    }
    else if (operation instanceof _document_operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_8__.RichEditOperation) {
        const richEditOperation = operation;
        const pbRichEditOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.RichEdit();
        pbRichEditOperation.setParentCreatedAt(toTimeTicket(richEditOperation.getParentCreatedAt()));
        pbRichEditOperation.setFrom(toTextNodePos(richEditOperation.getFromPos()));
        pbRichEditOperation.setTo(toTextNodePos(richEditOperation.getToPos()));
        const pbCreatedAtMapByActor = pbRichEditOperation.getCreatedAtMapByActorMap();
        for (const [key, value] of richEditOperation.getMaxCreatedAtMapByActor()) {
            pbCreatedAtMapByActor.set(key, toTimeTicket(value));
        }
        pbRichEditOperation.setContent(richEditOperation.getContent());
        const pbAttributes = pbRichEditOperation.getAttributesMap();
        for (const [key, value] of richEditOperation.getAttributes()) {
            pbAttributes.set(key, value);
        }
        pbRichEditOperation.setExecutedAt(toTimeTicket(richEditOperation.getExecutedAt()));
        pbOperation.setRichEdit(pbRichEditOperation);
    }
    else if (operation instanceof _document_operation_style_operation__WEBPACK_IMPORTED_MODULE_10__.StyleOperation) {
        const styleOperation = operation;
        const pbStyleOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Style();
        pbStyleOperation.setParentCreatedAt(toTimeTicket(styleOperation.getParentCreatedAt()));
        pbStyleOperation.setFrom(toTextNodePos(styleOperation.getFromPos()));
        pbStyleOperation.setTo(toTextNodePos(styleOperation.getToPos()));
        const pbAttributes = pbStyleOperation.getAttributesMap();
        for (const [key, value] of styleOperation.getAttributes()) {
            pbAttributes.set(key, value);
        }
        pbStyleOperation.setExecutedAt(toTimeTicket(styleOperation.getExecutedAt()));
        pbOperation.setStyle(pbStyleOperation);
    }
    else if (operation instanceof _document_operation_increase_operation__WEBPACK_IMPORTED_MODULE_24__.IncreaseOperation) {
        const increaseOperation = operation;
        const pbIncreaseOperation = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Operation.Increase();
        pbIncreaseOperation.setParentCreatedAt(toTimeTicket(increaseOperation.getParentCreatedAt()));
        pbIncreaseOperation.setValue(toJSONElementSimple(increaseOperation.getValue()));
        pbIncreaseOperation.setExecutedAt(toTimeTicket(increaseOperation.getExecutedAt()));
        pbOperation.setIncrease(pbIncreaseOperation);
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, 'unimplemented operation');
    }
    return pbOperation;
}
/**
 * `toOperations` converts the given model to Protobuf format.
 */
function toOperations(operations) {
    const pbOperations = [];
    for (const operation of operations) {
        pbOperations.push(toOperation(operation));
    }
    return pbOperations;
}
/**
 * `toChange` converts the given model to Protobuf format.
 */
function toChange(change) {
    const pbChange = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.Change();
    pbChange.setId(toChangeID(change.getID()));
    pbChange.setMessage(change.getMessage());
    pbChange.setOperationsList(toOperations(change.getOperations()));
    return pbChange;
}
/**
 * `toChanges` converts the given model to Protobuf format.
 */
function toChanges(changes) {
    const pbChanges = [];
    for (const change of changes) {
        pbChanges.push(toChange(change));
    }
    return pbChanges;
}
/**
 * `toRHTNodes` converts the given model to Protobuf format.
 */
function toRHTNodes(rht) {
    const pbRHTNodes = [];
    for (const rhtNode of rht) {
        const pbRHTNode = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.RHTNode();
        pbRHTNode.setKey(rhtNode.getStrKey());
        // eslint-disable-next-line
        pbRHTNode.setElement(toJSONElement(rhtNode.getValue()));
        pbRHTNodes.push(pbRHTNode);
    }
    return pbRHTNodes;
}
/**
 * `toRGANodes` converts the given model to Protobuf format.
 */
function toRGANodes(rgaTreeList) {
    const pbRGANodes = [];
    for (const rgaTreeListNode of rgaTreeList) {
        const pbRGANode = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.RGANode();
        // eslint-disable-next-line
        pbRGANode.setElement(toJSONElement(rgaTreeListNode.getValue()));
        pbRGANodes.push(pbRGANode);
    }
    return pbRGANodes;
}
/**
 * `toTextNodes` converts the given model to Protobuf format.
 */
function toTextNodes(rgaTreeSplit) {
    const pbTextNodes = [];
    for (const textNode of rgaTreeSplit) {
        const pbTextNode = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.TextNode();
        pbTextNode.setId(toTextNodeID(textNode.getID()));
        pbTextNode.setValue(textNode.getValue());
        pbTextNode.setRemovedAt(toTimeTicket(textNode.getRemovedAt()));
        pbTextNodes.push(pbTextNode);
    }
    return pbTextNodes;
}
/**
 * `toJSONObject` converts the given model to Protobuf format.
 */
function toJSONObject(obj) {
    const pbJSONObject = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement.JSONObject();
    pbJSONObject.setNodesList(toRHTNodes(obj.getRHT()));
    pbJSONObject.setCreatedAt(toTimeTicket(obj.getCreatedAt()));
    pbJSONObject.setMovedAt(toTimeTicket(obj.getMovedAt()));
    pbJSONObject.setRemovedAt(toTimeTicket(obj.getRemovedAt()));
    const pbJSONElement = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement();
    pbJSONElement.setJsonObject(pbJSONObject);
    return pbJSONElement;
}
/**
 * `toJSONArray` converts the given model to Protobuf format.
 */
function toJSONArray(arr) {
    const pbJSONArray = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement.JSONArray();
    pbJSONArray.setNodesList(toRGANodes(arr.getElements()));
    pbJSONArray.setCreatedAt(toTimeTicket(arr.getCreatedAt()));
    pbJSONArray.setMovedAt(toTimeTicket(arr.getMovedAt()));
    pbJSONArray.setRemovedAt(toTimeTicket(arr.getRemovedAt()));
    const pbJSONElement = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement();
    pbJSONElement.setJsonArray(pbJSONArray);
    return pbJSONElement;
}
/**
 * `toJSONPrimitive` converts the given model to Protobuf format.
 */
function toJSONPrimitive(primitive) {
    const pbJSONPrimitive = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement.Primitive();
    pbJSONPrimitive.setType(toValueType(primitive.getType()));
    pbJSONPrimitive.setValue(primitive.toBytes());
    pbJSONPrimitive.setCreatedAt(toTimeTicket(primitive.getCreatedAt()));
    pbJSONPrimitive.setMovedAt(toTimeTicket(primitive.getMovedAt()));
    pbJSONPrimitive.setRemovedAt(toTimeTicket(primitive.getRemovedAt()));
    const pbJSONElement = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement();
    pbJSONElement.setPrimitive(pbJSONPrimitive);
    return pbJSONElement;
}
/**
 * `toPlainText` converts the given model to Protobuf format.
 */
function toPlainText(text) {
    const pbText = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement.Text();
    pbText.setNodesList(toTextNodes(text.getRGATreeSplit()));
    pbText.setCreatedAt(toTimeTicket(text.getCreatedAt()));
    pbText.setMovedAt(toTimeTicket(text.getMovedAt()));
    pbText.setRemovedAt(toTimeTicket(text.getRemovedAt()));
    const pbJSONElement = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement();
    pbJSONElement.setText(pbText);
    return pbJSONElement;
}
/**
 * `toCounter` converts the given model to Protobuf format.
 */
function toCounter(counter) {
    const pbJSONCounter = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement.Counter();
    pbJSONCounter.setType(toCounterType(counter.getType()));
    pbJSONCounter.setValue(counter.toBytes());
    pbJSONCounter.setCreatedAt(toTimeTicket(counter.getCreatedAt()));
    pbJSONCounter.setMovedAt(toTimeTicket(counter.getMovedAt()));
    pbJSONCounter.setRemovedAt(toTimeTicket(counter.getRemovedAt()));
    const pbJSONElement = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement();
    pbJSONElement.setCounter(pbJSONCounter);
    return pbJSONElement;
}
/**
 * `toJSONElement` converts the given model to Protobuf format.
 */
function toJSONElement(jsonElement) {
    if (jsonElement instanceof _document_json_object__WEBPACK_IMPORTED_MODULE_17__.ObjectInternal) {
        return toJSONObject(jsonElement);
    }
    else if (jsonElement instanceof _document_json_array__WEBPACK_IMPORTED_MODULE_18__.ArrayInternal) {
        return toJSONArray(jsonElement);
    }
    else if (jsonElement instanceof _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.JSONPrimitive) {
        return toJSONPrimitive(jsonElement);
    }
    else if (jsonElement instanceof _document_json_plain_text__WEBPACK_IMPORTED_MODULE_20__.PlainTextInternal) {
        return toPlainText(jsonElement);
    }
    else if (jsonElement instanceof _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterInternal) {
        return toCounter(jsonElement);
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented element: ${jsonElement}`);
    }
}
/**
 * `toChangePack` converts the given model to Protobuf format.
 */
function toChangePack(pack) {
    const pbChangePack = new _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ChangePack();
    pbChangePack.setDocumentKey(pack.getDocumentKey());
    pbChangePack.setCheckpoint(toCheckpoint(pack.getCheckpoint()));
    pbChangePack.setChangesList(toChanges(pack.getChanges()));
    pbChangePack.setSnapshot(pack.getSnapshot());
    pbChangePack.setMinSyncedTicket(toTimeTicket(pack.getMinSyncedTicket()));
    return pbChangePack;
}
/**
 * `fromChangeID` converts the given Protobuf format to model format.
 */
function fromChangeID(pbChangeID) {
    return _document_change_change_id__WEBPACK_IMPORTED_MODULE_11__.ChangeID.of(pbChangeID.getClientSeq(), long__WEBPACK_IMPORTED_MODULE_0__["default"].fromString(pbChangeID.getLamport(), true), toHexString(pbChangeID.getActorId_asU8()));
}
/**
 * `fromTimeTicket` converts the given Protobuf format to model format.
 */
function fromTimeTicket(pbTimeTicket) {
    if (!pbTimeTicket) {
        return;
    }
    return _document_time_ticket__WEBPACK_IMPORTED_MODULE_2__.TimeTicket.of(long__WEBPACK_IMPORTED_MODULE_0__["default"].fromString(pbTimeTicket.getLamport(), true), pbTimeTicket.getDelimiter(), toHexString(pbTimeTicket.getActorId_asU8()));
}
/**
 * `fromValueType` converts the given Protobuf format to model format.
 */
function fromValueType(pbValueType) {
    switch (pbValueType) {
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.NULL:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Null;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.BOOLEAN:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Boolean;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.INTEGER:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Integer;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.LONG:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Long;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DOUBLE:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Double;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.STRING:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.String;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.BYTES:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Bytes;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DATE:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.PrimitiveType.Date;
    }
    throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented value type: ${pbValueType}`);
}
/**
 * `fromCounterType` converts the given Protobuf format to model format.
 */
function fromCounterType(pbValueType) {
    switch (pbValueType) {
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.INTEGER_CNT:
            return _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterType.IntegerCnt;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.LONG_CNT:
            return _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterType.LongCnt;
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DOUBLE_CNT:
            return _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterType.DoubleCnt;
    }
    throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented value type: ${pbValueType}`);
}
/**
 * `fromJSONElementSimple` converts the given Protobuf format to model format.
 */
function fromJSONElementSimple(pbJSONElement) {
    switch (pbJSONElement.getType()) {
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.JSON_OBJECT:
            return _document_json_object__WEBPACK_IMPORTED_MODULE_17__.ObjectInternal.create(fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.JSON_ARRAY:
            return _document_json_array__WEBPACK_IMPORTED_MODULE_18__.ArrayInternal.create(fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.TEXT:
            return _document_json_plain_text__WEBPACK_IMPORTED_MODULE_20__.PlainTextInternal.create(_document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplit.create(), fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.RICH_TEXT:
            return _document_json_rich_text__WEBPACK_IMPORTED_MODULE_21__.RichTextInternal.create(_document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplit.create(), fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.NULL:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.BOOLEAN:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.INTEGER:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.LONG:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DOUBLE:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.STRING:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.BYTES:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DATE:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.JSONPrimitive.of(_document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.JSONPrimitive.valueFromBytes(fromValueType(pbJSONElement.getType()), pbJSONElement.getValue_asU8()), fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.INTEGER_CNT:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.DOUBLE_CNT:
        case _resources_pb__WEBPACK_IMPORTED_MODULE_23__.ValueType.LONG_CNT:
            return _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterInternal.of(_document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterInternal.valueFromBytes(fromCounterType(pbJSONElement.getType()), pbJSONElement.getValue_asU8()), fromTimeTicket(pbJSONElement.getCreatedAt()));
    }
    throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented element: ${pbJSONElement}`);
}
/**
 * `fromTextNodePos` converts the given Protobuf format to model format.
 */
function fromTextNodePos(pbTextNodePos) {
    return _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplitNodePos.of(_document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplitNodeID.of(fromTimeTicket(pbTextNodePos.getCreatedAt()), pbTextNodePos.getOffset()), pbTextNodePos.getRelativeOffset());
}
/**
 * `fromTextNodeID` converts the given Protobuf format to model format.
 */
function fromTextNodeID(pbTextNodeID) {
    return _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplitNodeID.of(fromTimeTicket(pbTextNodeID.getCreatedAt()), pbTextNodeID.getOffset());
}
/**
 * `fromTextNode` converts the given Protobuf format to model format.
 */
function fromTextNode(pbTextNode) {
    const textNode = _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplitNode.create(fromTextNodeID(pbTextNode.getId()), pbTextNode.getValue());
    textNode.remove(fromTimeTicket(pbTextNode.getRemovedAt()));
    return textNode;
}
/**
 * `fromRichTextNode` converts the given Protobuf format to model format.
 */
function fromRichTextNode(pbTextNode) {
    const textNode = _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplitNode.create(fromTextNodeID(pbTextNode.getId()), _document_json_rich_text__WEBPACK_IMPORTED_MODULE_21__.RichTextValue.create(pbTextNode.getValue()));
    textNode.remove(fromTimeTicket(pbTextNode.getRemovedAt()));
    return textNode;
}
/**
 * `fromOperations` converts the given Protobuf format to model format.
 */
function fromOperations(pbOperations) {
    const operations = [];
    for (const pbOperation of pbOperations) {
        let operation;
        if (pbOperation.hasSet()) {
            const pbSetOperation = pbOperation.getSet();
            operation = _document_operation_set_operation__WEBPACK_IMPORTED_MODULE_3__.SetOperation.create(pbSetOperation.getKey(), fromJSONElementSimple(pbSetOperation.getValue()), fromTimeTicket(pbSetOperation.getParentCreatedAt()), fromTimeTicket(pbSetOperation.getExecutedAt()));
        }
        else if (pbOperation.hasAdd()) {
            const pbAddOperation = pbOperation.getAdd();
            operation = _document_operation_add_operation__WEBPACK_IMPORTED_MODULE_4__.AddOperation.create(fromTimeTicket(pbAddOperation.getParentCreatedAt()), fromTimeTicket(pbAddOperation.getPrevCreatedAt()), fromJSONElementSimple(pbAddOperation.getValue()), fromTimeTicket(pbAddOperation.getExecutedAt()));
        }
        else if (pbOperation.hasMove()) {
            const pbMoveOperation = pbOperation.getMove();
            operation = _document_operation_move_operation__WEBPACK_IMPORTED_MODULE_5__.MoveOperation.create(fromTimeTicket(pbMoveOperation.getParentCreatedAt()), fromTimeTicket(pbMoveOperation.getPrevCreatedAt()), fromTimeTicket(pbMoveOperation.getCreatedAt()), fromTimeTicket(pbMoveOperation.getExecutedAt()));
        }
        else if (pbOperation.hasRemove()) {
            const pbRemoveOperation = pbOperation.getRemove();
            operation = _document_operation_remove_operation__WEBPACK_IMPORTED_MODULE_6__.RemoveOperation.create(fromTimeTicket(pbRemoveOperation.getParentCreatedAt()), fromTimeTicket(pbRemoveOperation.getCreatedAt()), fromTimeTicket(pbRemoveOperation.getExecutedAt()));
        }
        else if (pbOperation.hasEdit()) {
            const pbEditOperation = pbOperation.getEdit();
            const createdAtMapByActor = new Map();
            pbEditOperation.getCreatedAtMapByActorMap().forEach((value, key) => {
                createdAtMapByActor.set(key, fromTimeTicket(value));
            });
            operation = _document_operation_edit_operation__WEBPACK_IMPORTED_MODULE_7__.EditOperation.create(fromTimeTicket(pbEditOperation.getParentCreatedAt()), fromTextNodePos(pbEditOperation.getFrom()), fromTextNodePos(pbEditOperation.getTo()), createdAtMapByActor, pbEditOperation.getContent(), fromTimeTicket(pbEditOperation.getExecutedAt()));
        }
        else if (pbOperation.hasSelect()) {
            const pbSelectOperation = pbOperation.getSelect();
            operation = _document_operation_select_operation__WEBPACK_IMPORTED_MODULE_9__.SelectOperation.create(fromTimeTicket(pbSelectOperation.getParentCreatedAt()), fromTextNodePos(pbSelectOperation.getFrom()), fromTextNodePos(pbSelectOperation.getTo()), fromTimeTicket(pbSelectOperation.getExecutedAt()));
        }
        else if (pbOperation.hasRichEdit()) {
            const pbEditOperation = pbOperation.getRichEdit();
            const createdAtMapByActor = new Map();
            pbEditOperation.getCreatedAtMapByActorMap().forEach((value, key) => {
                createdAtMapByActor.set(key, fromTimeTicket(value));
            });
            const attributes = new Map();
            pbEditOperation.getAttributesMap().forEach((value, key) => {
                attributes.set(key, value);
            });
            operation = _document_operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_8__.RichEditOperation.create(fromTimeTicket(pbEditOperation.getParentCreatedAt()), fromTextNodePos(pbEditOperation.getFrom()), fromTextNodePos(pbEditOperation.getTo()), createdAtMapByActor, pbEditOperation.getContent(), attributes, fromTimeTicket(pbEditOperation.getExecutedAt()));
        }
        else if (pbOperation.hasStyle()) {
            const pbStyleOperation = pbOperation.getStyle();
            const attributes = new Map();
            pbStyleOperation.getAttributesMap().forEach((value, key) => {
                attributes.set(key, value);
            });
            operation = _document_operation_style_operation__WEBPACK_IMPORTED_MODULE_10__.StyleOperation.create(fromTimeTicket(pbStyleOperation.getParentCreatedAt()), fromTextNodePos(pbStyleOperation.getFrom()), fromTextNodePos(pbStyleOperation.getTo()), attributes, fromTimeTicket(pbStyleOperation.getExecutedAt()));
        }
        else if (pbOperation.hasIncrease()) {
            const pbIncreaseOperation = pbOperation.getIncrease();
            operation = _document_operation_increase_operation__WEBPACK_IMPORTED_MODULE_24__.IncreaseOperation.create(fromTimeTicket(pbIncreaseOperation.getParentCreatedAt()), fromJSONElementSimple(pbIncreaseOperation.getValue()), fromTimeTicket(pbIncreaseOperation.getExecutedAt()));
        }
        else {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented operation`);
        }
        operations.push(operation);
    }
    return operations;
}
/**
 * `fromChanges` converts the given Protobuf format to model format.
 */
function fromChanges(pbChanges) {
    const changes = [];
    for (const pbChange of pbChanges) {
        changes.push(_document_change_change__WEBPACK_IMPORTED_MODULE_12__.Change.create(fromChangeID(pbChange.getId()), fromOperations(pbChange.getOperationsList()), pbChange.getMessage()));
    }
    return changes;
}
/**
 * `fromCheckpoint` converts the given Protobuf format to model format.
 */
function fromCheckpoint(pbCheckpoint) {
    return _document_change_checkpoint__WEBPACK_IMPORTED_MODULE_14__.Checkpoint.of(long__WEBPACK_IMPORTED_MODULE_0__["default"].fromString(pbCheckpoint.getServerSeq(), true), pbCheckpoint.getClientSeq());
}
/**
 * `fromChangePack` converts the given Protobuf format to model format.
 */
function fromChangePack(pbPack) {
    return _document_change_change_pack__WEBPACK_IMPORTED_MODULE_13__.ChangePack.create(pbPack.getDocumentKey(), fromCheckpoint(pbPack.getCheckpoint()), fromChanges(pbPack.getChangesList()), pbPack.getSnapshot_asU8(), fromTimeTicket(pbPack.getMinSyncedTicket()));
}
/**
 * `fromJSONObject` converts the given Protobuf format to model format.
 */
function fromJSONObject(pbObject) {
    const rht = new _document_json_rht_pq_map__WEBPACK_IMPORTED_MODULE_15__.RHTPQMap();
    for (const pbRHTNode of pbObject.getNodesList()) {
        // eslint-disable-next-line
        rht.set(pbRHTNode.getKey(), fromJSONElement(pbRHTNode.getElement()));
    }
    const obj = new _document_json_object__WEBPACK_IMPORTED_MODULE_17__.ObjectInternal(fromTimeTicket(pbObject.getCreatedAt()), rht);
    obj.setMovedAt(fromTimeTicket(pbObject.getMovedAt()));
    obj.setRemovedAt(fromTimeTicket(pbObject.getRemovedAt()));
    return obj;
}
/**
 * `fromJSONArray` converts the given Protobuf format to model format.
 */
function fromJSONArray(pbArray) {
    const rgaTreeList = new _document_json_rga_tree_list__WEBPACK_IMPORTED_MODULE_16__.RGATreeList();
    for (const pbRGANode of pbArray.getNodesList()) {
        // eslint-disable-next-line
        rgaTreeList.insert(fromJSONElement(pbRGANode.getElement()));
    }
    const arr = new _document_json_array__WEBPACK_IMPORTED_MODULE_18__.ArrayInternal(fromTimeTicket(pbArray.getCreatedAt()), rgaTreeList);
    arr.setMovedAt(fromTimeTicket(pbArray.getMovedAt()));
    arr.setRemovedAt(fromTimeTicket(pbArray.getRemovedAt()));
    return arr;
}
/**
 * `fromJSONPrimitive` converts the given Protobuf format to model format.
 */
function fromJSONPrimitive(pbPrimitive) {
    const primitive = _document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.JSONPrimitive.of(_document_json_primitive__WEBPACK_IMPORTED_MODULE_22__.JSONPrimitive.valueFromBytes(fromValueType(pbPrimitive.getType()), pbPrimitive.getValue_asU8()), fromTimeTicket(pbPrimitive.getCreatedAt()));
    primitive.setMovedAt(fromTimeTicket(pbPrimitive.getMovedAt()));
    primitive.setRemovedAt(fromTimeTicket(pbPrimitive.getRemovedAt()));
    return primitive;
}
/**
 * `fromJSONText` converts the given Protobuf format to model format.
 */
function fromJSONText(pbText) {
    const rgaTreeSplit = new _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplit();
    let prev = rgaTreeSplit.getHead();
    for (const pbNode of pbText.getNodesList()) {
        const current = rgaTreeSplit.insertAfter(prev, fromTextNode(pbNode));
        if (pbNode.hasInsPrevId()) {
            current.setInsPrev(rgaTreeSplit.findNode(fromTextNodeID(pbNode.getInsPrevId())));
        }
        prev = current;
    }
    const text = _document_json_plain_text__WEBPACK_IMPORTED_MODULE_20__.PlainTextInternal.create(rgaTreeSplit, fromTimeTicket(pbText.getCreatedAt()));
    text.setMovedAt(fromTimeTicket(pbText.getMovedAt()));
    text.setRemovedAt(fromTimeTicket(pbText.getRemovedAt()));
    return text;
}
/**
 * `fromJSONRichText` converts the given Protobuf format to model format.
 */
function fromJSONRichText(pbText) {
    const rgaTreeSplit = new _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_19__.RGATreeSplit();
    let prev = rgaTreeSplit.getHead();
    for (const pbNode of pbText.getNodesList()) {
        const current = rgaTreeSplit.insertAfter(prev, fromRichTextNode(pbNode));
        if (pbNode.hasInsPrevId()) {
            current.setInsPrev(rgaTreeSplit.findNode(fromTextNodeID(pbNode.getInsPrevId())));
        }
        prev = current;
    }
    const text = _document_json_rich_text__WEBPACK_IMPORTED_MODULE_21__.RichTextInternal.create(rgaTreeSplit, fromTimeTicket(pbText.getCreatedAt()));
    text.setMovedAt(fromTimeTicket(pbText.getMovedAt()));
    text.setRemovedAt(fromTimeTicket(pbText.getRemovedAt()));
    return text;
}
/**
 * `fromCounter` converts the given Protobuf format to model format.
 */
function fromCounter(pbCounter) {
    const counter = _document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterInternal.of(_document_json_counter__WEBPACK_IMPORTED_MODULE_25__.CounterInternal.valueFromBytes(fromCounterType(pbCounter.getType()), pbCounter.getValue_asU8()), fromTimeTicket(pbCounter.getCreatedAt()));
    counter.setMovedAt(fromTimeTicket(pbCounter.getMovedAt()));
    counter.setRemovedAt(fromTimeTicket(pbCounter.getRemovedAt()));
    return counter;
}
/**
 * `fromJSONElement` converts the given Protobuf format to model format.
 */
function fromJSONElement(pbJSONElement) {
    if (pbJSONElement.hasJsonObject()) {
        return fromJSONObject(pbJSONElement.getJsonObject());
    }
    else if (pbJSONElement.hasJsonArray()) {
        return fromJSONArray(pbJSONElement.getJsonArray());
    }
    else if (pbJSONElement.hasPrimitive()) {
        return fromJSONPrimitive(pbJSONElement.getPrimitive());
    }
    else if (pbJSONElement.hasText()) {
        return fromJSONText(pbJSONElement.getText());
    }
    else if (pbJSONElement.hasRichText()) {
        return fromJSONRichText(pbJSONElement.getRichText());
    }
    else if (pbJSONElement.hasCounter()) {
        return fromCounter(pbJSONElement.getCounter());
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented element: ${pbJSONElement}`);
    }
}
/**
 * `bytesToObject` creates an JSONObject from the given byte array.
 */
function bytesToObject(bytes) {
    if (!bytes) {
        return _document_json_object__WEBPACK_IMPORTED_MODULE_17__.ObjectInternal.create(_document_time_ticket__WEBPACK_IMPORTED_MODULE_2__.InitialTimeTicket);
    }
    const pbJSONElement = _resources_pb__WEBPACK_IMPORTED_MODULE_23__.JSONElement.deserializeBinary(bytes);
    return fromJSONObject(pbJSONElement.getJsonObject());
}
/**
 * `objectToBytes` converts the given JSONObject to byte array.
 */
function objectToBytes(obj) {
    return toJSONElement(obj).serializeBinary();
}
/**
 * `toHexString` converts the given byte array to hex string.
 */
function toHexString(bytes) {
    return Buffer.from(bytes).toString('hex');
}
/**
 * `toUnit8Array` converts the given hex string to byte array.
 */
function toUint8Array(hex) {
    return Uint8Array.from(Buffer.from(hex, 'hex'));
}
const converter = {
    fromPresence,
    toClient,
    toChangePack,
    fromChangePack,
    objectToBytes,
    bytesToObject,
    toHexString,
    toUint8Array,
};


/***/ }),

/***/ "./src/core/auth.ts":
/*!**************************!*\
  !*** ./src/core/auth.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthUnaryInterceptor": () => (/* binding */ AuthUnaryInterceptor),
/* harmony export */   "AuthStreamInterceptor": () => (/* binding */ AuthStreamInterceptor)
/* harmony export */ });
/*
 * Copyright 2021 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `AuthUnaryInterceptor` is a unary interceptor to add the Authorization header for each
 * request.
 */
class AuthUnaryInterceptor {
    constructor(apiKey, token) {
        this.apiKey = apiKey;
        this.token = token;
    }
    /**
     * `intercept` intercepts the request and adds the token to the metadata.
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    intercept(request, invoker) {
        const metadata = request.getMetadata();
        if (this.apiKey) {
            metadata['x-api-key'] = this.apiKey;
        }
        if (this.token) {
            metadata['authorization'] = this.token;
        }
        return invoker(request);
    }
}
/**
 * `AuthStreamInterceptor` is a stream interceptor to add the Authorization header for each
 * request.
 */
class AuthStreamInterceptor {
    constructor(apiKey, token) {
        this.apiKey = apiKey;
        this.token = token;
    }
    /**
     * `intercept` intercepts the request and adds the token to the metadata.
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    intercept(request, invoker) {
        const metadata = request.getMetadata();
        if (this.apiKey) {
            metadata['x-api-key'] = this.apiKey;
        }
        if (this.token) {
            metadata['authorization'] = this.token;
        }
        return invoker(request);
    }
}


/***/ }),

/***/ "./src/core/client.ts":
/*!****************************!*\
  !*** ./src/core/client.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientStatus": () => (/* binding */ ClientStatus),
/* harmony export */   "StreamConnectionStatus": () => (/* binding */ StreamConnectionStatus),
/* harmony export */   "DocumentSyncResultType": () => (/* binding */ DocumentSyncResultType),
/* harmony export */   "ClientEventType": () => (/* binding */ ClientEventType),
/* harmony export */   "Client": () => (/* binding */ Client)
/* harmony export */ });
/* harmony import */ var _util_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/observable */ "./src/util/observable.ts");
/* harmony import */ var _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/yorkie_pb */ "./src/api/yorkie_pb.js");
/* harmony import */ var _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/resources_pb */ "./src/api/resources_pb.js");
/* harmony import */ var _api_resources_pb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_api_resources_pb__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _api_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/converter */ "./src/api/converter.ts");
/* harmony import */ var _api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../api/yorkie_grpc_web_pb */ "./src/api/yorkie_grpc_web_pb.js");
/* harmony import */ var _api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/error */ "./src/util/error.ts");
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/uuid */ "./src/util/uuid.ts");
/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./auth */ "./src/core/auth.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * `ClientStatus` is client status types
 * @public
 */
var ClientStatus;
(function (ClientStatus) {
    /**
     * client deactivated status
     */
    ClientStatus["Deactivated"] = "deactivated";
    /**
     * client activated status
     */
    ClientStatus["Activated"] = "activated";
})(ClientStatus || (ClientStatus = {}));
/**
 * `StreamConnectionStatus` is stream connection status types
 * @public
 */
var StreamConnectionStatus;
(function (StreamConnectionStatus) {
    /**
     * stream connected
     */
    StreamConnectionStatus["Connected"] = "connected";
    /**
     * stream disconnected
     */
    StreamConnectionStatus["Disconnected"] = "disconnected";
})(StreamConnectionStatus || (StreamConnectionStatus = {}));
/**
 * `DocumentSyncResultType` is document sync result types
 * @public
 */
var DocumentSyncResultType;
(function (DocumentSyncResultType) {
    /**
     * type when Document synced.
     */
    DocumentSyncResultType["Synced"] = "synced";
    /**
     * type when Document sync failed.
     */
    DocumentSyncResultType["SyncFailed"] = "sync-failed";
})(DocumentSyncResultType || (DocumentSyncResultType = {}));
/**
 * `ClientEventType` is client event types
 * @public
 */
var ClientEventType;
(function (ClientEventType) {
    /**
     * client event type when status changed.
     */
    ClientEventType["StatusChanged"] = "status-changed";
    /**
     * client event type when documents changed.
     */
    ClientEventType["DocumentsChanged"] = "documents-changed";
    /**
     * client event type when peers changed.
     */
    ClientEventType["PeersChanged"] = "peers-changed";
    /**
     * client event type when stream connection changed.
     */
    ClientEventType["StreamConnectionStatusChanged"] = "stream-connection-status-changed";
    /**
     * client event type when document synced.
     */
    ClientEventType["DocumentSynced"] = "document-synced";
})(ClientEventType || (ClientEventType = {}));
/**
 * `DefaultClientOptions` is the default options for Client.
 */
const DefaultClientOptions = {
    syncLoopDuration: 50,
    reconnectStreamDelay: 1000,
};
/**
 * `Client` is a normal client that can communicate with the server.
 * It has documents and sends changes of the documents in local
 * to the server to synchronize with other replicas in remote.
 *
 * @public
 */
class Client {
    constructor(rpcAddr, opts) {
        opts = opts || DefaultClientOptions;
        this.key = opts.key ? opts.key : (0,_util_uuid__WEBPACK_IMPORTED_MODULE_7__.uuid)();
        this.presenceInfo = {
            clock: 0,
            data: opts.presence ? opts.presence : {},
        };
        this.status = ClientStatus.Deactivated;
        this.attachmentMap = new Map();
        this.syncLoopDuration =
            opts.syncLoopDuration || DefaultClientOptions.syncLoopDuration;
        this.reconnectStreamDelay =
            opts.reconnectStreamDelay || DefaultClientOptions.reconnectStreamDelay;
        let rpcOpts;
        if (opts.apiKey || opts.token) {
            rpcOpts = {
                unaryInterceptors: [new _auth__WEBPACK_IMPORTED_MODULE_8__.AuthUnaryInterceptor(opts.apiKey, opts.token)],
                streamInterceptors: [
                    new _auth__WEBPACK_IMPORTED_MODULE_8__.AuthStreamInterceptor(opts.apiKey, opts.token),
                ],
            };
        }
        this.rpcClient = new _api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_4__.YorkieClient(rpcAddr, null, rpcOpts);
        this.eventStream = (0,_util_observable__WEBPACK_IMPORTED_MODULE_0__.createObservable)((observer) => {
            this.eventStreamObserver = observer;
        });
    }
    /**
     * `ativate` activates this client. That is, it register itself to the server
     * and receives a unique ID from the server. The given ID is used to
     * distinguish different clients.
     */
    activate() {
        if (this.isActive()) {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.ActivateClientRequest();
            req.setClientKey(this.key);
            this.rpcClient.activateClient(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[AC] c:"${this.getKey()}" err :`, err);
                    reject(err);
                    return;
                }
                this.id = _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toHexString(res.getClientId_asU8());
                this.status = ClientStatus.Activated;
                this.runSyncLoop();
                this.runWatchLoop();
                this.eventStreamObserver.next({
                    type: ClientEventType.StatusChanged,
                    value: this.status,
                });
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[AC] c:"${this.getKey()}" activated, id:"${this.id}"`);
                resolve();
            });
        });
    }
    /**
     * `deactivate` deactivates this client.
     */
    deactivate() {
        if (this.status === ClientStatus.Deactivated) {
            return Promise.resolve();
        }
        if (this.remoteChangeEventStream) {
            this.remoteChangeEventStream.cancel();
            this.remoteChangeEventStream = undefined;
        }
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.DeactivateClientRequest();
            req.setClientId(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toUint8Array(this.id));
            this.rpcClient.deactivateClient(req, {}, (err) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[DC] c:"${this.getKey()}" err :`, err);
                    reject(err);
                    return;
                }
                this.status = ClientStatus.Deactivated;
                this.eventStreamObserver.next({
                    type: ClientEventType.StatusChanged,
                    value: this.status,
                });
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[DC] c"${this.getKey()}" deactivated`);
                resolve();
            });
        });
    }
    /**
     * `attach` attaches the given document to this client. It tells the server that
     * this client will synchronize the given document.
     */
    attach(doc, isManualSync) {
        if (!this.isActive()) {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_5__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_5__.Code.ClientNotActive, `${this.key} is not active`);
        }
        doc.setActor(this.id);
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.AttachDocumentRequest();
            req.setClientId(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toUint8Array(this.id));
            req.setChangePack(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toChangePack(doc.createChangePack()));
            this.rpcClient.attachDocument(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[AD] c:"${this.getKey()}" err :`, err);
                    reject(err);
                    return;
                }
                const pack = _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.fromChangePack(res.getChangePack());
                doc.applyChangePack(pack);
                this.attachmentMap.set(doc.getKey(), {
                    doc,
                    isRealtimeSync: !isManualSync,
                    peerPresenceMap: new Map(),
                });
                this.runWatchLoop();
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[AD] c:"${this.getKey()}" attaches d:"${doc.getKey()}"`);
                resolve(doc);
            });
        });
    }
    /**
     * `detach` detaches the given document from this client. It tells the
     * server that this client will no longer synchronize the given document.
     *
     * To collect garbage things like CRDT tombstones left on the document, all
     * the changes should be applied to other replicas before GC time. For this,
     * if the document is no longer used by this client, it should be detached.
     */
    detach(doc) {
        if (!this.isActive()) {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_5__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_5__.Code.ClientNotActive, `${this.key} is not active`);
        }
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.DetachDocumentRequest();
            req.setClientId(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toUint8Array(this.id));
            req.setChangePack(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toChangePack(doc.createChangePack()));
            this.rpcClient.detachDocument(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[DD] c:"${this.getKey()}" err :`, err);
                    reject(err);
                    return;
                }
                const pack = _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.fromChangePack(res.getChangePack());
                doc.applyChangePack(pack);
                if (this.attachmentMap.has(doc.getKey())) {
                    this.attachmentMap.delete(doc.getKey());
                }
                this.runWatchLoop();
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[DD] c:"${this.getKey()}" detaches d:"${doc.getKey()}"`);
                resolve(doc);
            });
        });
    }
    /**
     * `sync` pushes local changes of the attached documents to the server and
     * receives changes of the remote replica from the server then apply them to
     * local documents.
     */
    sync() {
        const promises = [];
        for (const [, attachment] of this.attachmentMap) {
            promises.push(this.syncInternal(attachment.doc));
        }
        return Promise.all(promises)
            .then((docs) => {
            return docs;
        })
            .catch((err) => {
            this.eventStreamObserver.next({
                type: ClientEventType.DocumentSynced,
                value: DocumentSyncResultType.SyncFailed,
            });
            throw err;
        });
    }
    /**
     * `updatePresence` updates the presence of this client.
     */
    updatePresence(key, value) {
        if (!this.isActive()) {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_5__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_5__.Code.ClientNotActive, `${this.key} is not active`);
        }
        this.presenceInfo.clock += 1;
        this.presenceInfo.data[key] = value;
        if (this.attachmentMap.size === 0) {
            return Promise.resolve();
        }
        const keys = [];
        for (const [, attachment] of this.attachmentMap) {
            if (!attachment.isRealtimeSync) {
                continue;
            }
            attachment.peerPresenceMap.set(this.getID(), this.presenceInfo);
            keys.push(attachment.doc.getKey());
        }
        const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.UpdatePresenceRequest();
        req.setClient(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toClient(this.id, this.presenceInfo));
        req.setDocumentKeysList(keys);
        return new Promise((resolve, reject) => {
            this.rpcClient.updatePresence(req, {}, (err) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[UM] c:"${this.getKey()}" err :`, err);
                    reject(err);
                    return;
                }
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[UM] c"${this.getKey()}" updated`);
                resolve();
            });
        });
    }
    /**
     * `subscribe` subscribes to the given topics.
     */
    subscribe(nextOrObserver, error, complete) {
        return this.eventStream.subscribe(nextOrObserver, error, complete);
    }
    /**
     * `getID` returns a ActorID of client.
     */
    getID() {
        return this.id;
    }
    /**
     * `getKey` returns a key of client.
     */
    getKey() {
        return this.key;
    }
    /**
     * `isActive` checks if the client is active.
     */
    isActive() {
        return this.status === ClientStatus.Activated;
    }
    /**
     * `getStatus` returns the status of this client.
     */
    getStatus() {
        return this.status;
    }
    /**
     * `getPresence` returns the presence of this client.
     */
    getPresence() {
        return this.presenceInfo.data;
    }
    /**
     * `getPeers` returns the peers of the given document.
     */
    getPeers(key) {
        const peers = {};
        const attachment = this.attachmentMap.get(key);
        for (const [key, value] of attachment.peerPresenceMap) {
            peers[key] = value.data;
        }
        return peers;
    }
    runSyncLoop() {
        const doLoop = () => {
            if (!this.isActive()) {
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`[SL] c:"${this.getKey()}" exit sync loop`);
                return;
            }
            const promises = [];
            for (const [, attachment] of this.attachmentMap) {
                if (attachment.isRealtimeSync &&
                    (attachment.doc.hasLocalChanges() ||
                        attachment.remoteChangeEventReceived)) {
                    attachment.remoteChangeEventReceived = false;
                    promises.push(this.syncInternal(attachment.doc));
                }
            }
            Promise.all(promises)
                .then(() => {
                const syncLoopDuration = this.remoteChangeEventStream
                    ? this.syncLoopDuration
                    : this.reconnectStreamDelay;
                setTimeout(doLoop, syncLoopDuration);
            })
                .catch((err) => {
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[SL] c:"${this.getKey()}" sync failed:`, err);
                this.eventStreamObserver.next({
                    type: ClientEventType.DocumentSynced,
                    value: DocumentSyncResultType.SyncFailed,
                });
                setTimeout(doLoop, this.reconnectStreamDelay);
            });
        };
        _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`[SL] c:"${this.getKey()}" run sync loop`);
        doLoop();
    }
    runWatchLoop() {
        const doLoop = () => {
            if (this.remoteChangeEventStream) {
                this.remoteChangeEventStream.cancel();
                this.remoteChangeEventStream = undefined;
            }
            if (this.watchLoopTimerID) {
                clearTimeout(this.watchLoopTimerID);
                this.watchLoopTimerID = undefined;
            }
            if (!this.isActive()) {
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`[WL] c:"${this.getKey()}" exit watch loop`);
                return;
            }
            const realtimeSyncDocKeys = [];
            for (const [, attachment] of this.attachmentMap) {
                if (attachment.isRealtimeSync) {
                    realtimeSyncDocKeys.push(attachment.doc.getKey());
                }
            }
            if (!realtimeSyncDocKeys.length) {
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`[WL] c:"${this.getKey()}" exit watch loop`);
                return;
            }
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.WatchDocumentsRequest();
            req.setClient(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toClient(this.id, this.presenceInfo));
            req.setDocumentKeysList(realtimeSyncDocKeys);
            const onStreamDisconnect = () => {
                this.remoteChangeEventStream = undefined;
                this.watchLoopTimerID = setTimeout(doLoop, this.reconnectStreamDelay);
                this.eventStreamObserver.next({
                    type: ClientEventType.StreamConnectionStatusChanged,
                    value: StreamConnectionStatus.Disconnected,
                });
            };
            const stream = this.rpcClient.watchDocuments(req, {});
            stream.on('data', (resp) => {
                this.handleWatchDocumentsResponse(realtimeSyncDocKeys, resp);
            });
            stream.on('end', onStreamDisconnect);
            stream.on('error', onStreamDisconnect);
            this.remoteChangeEventStream = stream;
            _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[WD] c:"${this.getKey()}" watches d:"${realtimeSyncDocKeys.map((key) => key)}"`);
        };
        _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`[WL] c:"${this.getKey()}" run watch loop`);
        doLoop();
    }
    handleWatchDocumentsResponse(keys, resp) {
        const getPeers = (peersMap, key) => {
            const attachment = this.attachmentMap.get(key);
            const peers = {};
            for (const [key, value] of attachment.peerPresenceMap) {
                peers[key] = value.data;
            }
            peersMap[key] = peers;
            return peersMap;
        };
        if (resp.hasInitialization()) {
            const pbPeersMap = resp.getInitialization().getPeersMapByDocMap();
            pbPeersMap.forEach((pbPeers, docID) => {
                const attachment = this.attachmentMap.get(docID);
                for (const pbClient of pbPeers.getClientsList()) {
                    attachment.peerPresenceMap.set(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toHexString(pbClient.getId_asU8()), _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.fromPresence(pbClient.getPresence()));
                }
            });
            this.eventStreamObserver.next({
                type: ClientEventType.PeersChanged,
                value: keys.reduce(getPeers, {}),
            });
            return;
        }
        const pbWatchEvent = resp.getEvent();
        const respKeys = pbWatchEvent.getDocumentKeysList();
        const publisher = _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toHexString(pbWatchEvent.getPublisher().getId_asU8());
        const presence = _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.fromPresence(pbWatchEvent.getPublisher().getPresence());
        for (const key of respKeys) {
            const attachment = this.attachmentMap.get(key);
            const peerPresenceMap = attachment.peerPresenceMap;
            switch (pbWatchEvent.getType()) {
                case _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.DOCUMENTS_WATCHED:
                    peerPresenceMap.set(publisher, presence);
                    break;
                case _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.DOCUMENTS_UNWATCHED:
                    peerPresenceMap.delete(publisher);
                    break;
                case _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.DOCUMENTS_CHANGED:
                    attachment.remoteChangeEventReceived = true;
                    break;
                case _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.PRESENCE_CHANGED:
                    if (peerPresenceMap.has(publisher) &&
                        peerPresenceMap.get(publisher).clock > presence.clock) {
                        break;
                    }
                    peerPresenceMap.set(publisher, presence);
                    break;
            }
        }
        if (pbWatchEvent.getType() === _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.DOCUMENTS_CHANGED) {
            this.eventStreamObserver.next({
                type: ClientEventType.DocumentsChanged,
                value: respKeys,
            });
        }
        else if (pbWatchEvent.getType() === _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.DOCUMENTS_WATCHED ||
            pbWatchEvent.getType() === _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.DOCUMENTS_UNWATCHED ||
            pbWatchEvent.getType() === _api_resources_pb__WEBPACK_IMPORTED_MODULE_2__.DocEventType.PRESENCE_CHANGED) {
            this.eventStreamObserver.next({
                type: ClientEventType.PeersChanged,
                value: respKeys.reduce(getPeers, {}),
            });
        }
    }
    syncInternal(doc) {
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__.PushPullRequest();
            req.setClientId(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toUint8Array(this.id));
            const reqPack = doc.createChangePack();
            const localSize = reqPack.getChangeSize();
            req.setChangePack(_api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.toChangePack(reqPack));
            let isRejected = false;
            this.rpcClient
                .pushPull(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(`[PP] c:"${this.getKey()}" err :`, err);
                    isRejected = true;
                    reject(err);
                    return;
                }
                const respPack = _api_converter__WEBPACK_IMPORTED_MODULE_3__.converter.fromChangePack(res.getChangePack());
                doc.applyChangePack(respPack);
                this.eventStreamObserver.next({
                    type: ClientEventType.DocumentSynced,
                    value: DocumentSyncResultType.Synced,
                });
                const docKey = doc.getKey();
                const remoteSize = respPack.getChangeSize();
                _util_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(`[PP] c:"${this.getKey()}" sync d:"${docKey}", push:${localSize} pull:${remoteSize} cp:${respPack
                    .getCheckpoint()
                    .getAnnotatedString()}`);
            })
                .on('end', () => {
                if (isRejected) {
                    return;
                }
                resolve(doc);
            });
        });
    }
}


/***/ }),

/***/ "./src/document/change/change.ts":
/*!***************************************!*\
  !*** ./src/document/change/change.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Change": () => (/* binding */ Change)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `Change` represents a unit of modification in the document.
 */
class Change {
    constructor(id, operations, message) {
        this.id = id;
        this.operations = operations;
        this.message = message;
    }
    /**
     * `create` creates a new instance of Change.
     */
    static create(id, operations, message) {
        return new Change(id, operations, message);
    }
    /**
     * `getID` returns the ID of this change.
     */
    getID() {
        return this.id;
    }
    /**
     * `getMessage` returns the message of this change.
     */
    getMessage() {
        return this.message;
    }
    /**
     * `getOperations` returns the operations of this change.
     */
    getOperations() {
        return this.operations;
    }
    /**
     * `setActor` sets the given actor.
     */
    setActor(actorID) {
        for (const operation of this.operations) {
            operation.setActor(actorID);
        }
        this.id = this.id.setActor(actorID);
    }
    /**
     * `execute` executes the operations of this change to the given root.
     */
    execute(root) {
        for (const operation of this.operations) {
            operation.execute(root);
        }
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data of this change.
     */
    getAnnotatedString() {
        return `${this.operations
            .map((operation) => operation.getAnnotatedString())
            .join(',')}`;
    }
}


/***/ }),

/***/ "./src/document/change/change_id.ts":
/*!******************************************!*\
  !*** ./src/document/change/change_id.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangeID": () => (/* binding */ ChangeID),
/* harmony export */   "InitialChangeID": () => (/* binding */ InitialChangeID)
/* harmony export */ });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/index.js");
/* harmony import */ var _time_actor_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../time/actor_id */ "./src/document/time/actor_id.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `ChangeID` is for identifying the Change. This is immutable.
 */
class ChangeID {
    constructor(clientSeq, lamport, actor) {
        this.clientSeq = clientSeq;
        this.lamport = lamport;
        this.actor = actor;
    }
    /**
     * `of` creates a new instance of ChangeID.
     */
    static of(clientSeq, lamport, actor) {
        return new ChangeID(clientSeq, lamport, actor);
    }
    /**
     * `next` creates a next ID of this ID.
     */
    next() {
        return new ChangeID(this.clientSeq + 1, this.lamport.add(1), this.actor);
    }
    /**
     * `syncLamport` syncs lamport timestamp with the given ID.
     *
     * {@link https://en.wikipedia.org/wiki/Lamport_timestamps#Algorithm}
     */
    syncLamport(otherLamport) {
        if (otherLamport.greaterThan(this.lamport)) {
            return new ChangeID(this.clientSeq, otherLamport, this.actor);
        }
        return new ChangeID(this.clientSeq, this.lamport.add(1), this.actor);
    }
    /**
     * `createTimeTicket` creates a ticket of the given delimiter.
     */
    createTimeTicket(delimiter) {
        return _time_ticket__WEBPACK_IMPORTED_MODULE_2__.TimeTicket.of(this.lamport, delimiter, this.actor);
    }
    /**
     * `setActor` sets the given actor.
     */
    setActor(actorID) {
        return new ChangeID(this.clientSeq, this.lamport, actorID);
    }
    /**
     * `getClientSeq` returns the client sequence of this ID.
     */
    getClientSeq() {
        return this.clientSeq;
    }
    /**
     * `getLamport` returns the lamport clock of this ID.
     */
    getLamport() {
        return this.lamport;
    }
    /**
     * `getLamportAsString` returns the lamport clock of this ID as a string.
     */
    getLamportAsString() {
        return this.lamport.toString();
    }
    /**
     * `getActorID` returns the actor of this ID.
     */
    getActorID() {
        return this.actor;
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data of this ID.
     */
    getAnnotatedString() {
        if (!this.actor) {
            return `${this.lamport.toString()}:nil:${this.clientSeq}`;
        }
        return `${this.lamport.toString()}:${this.actor.substring(22, 24)}:${this.clientSeq}`;
    }
}
/**
 * `InitialChangeID` represents the initial state ID. Usually this is used to
 * represent a state where nothing has been edited.
 */
const InitialChangeID = new ChangeID(0, long__WEBPACK_IMPORTED_MODULE_0__["default"].fromInt(0, true), _time_actor_id__WEBPACK_IMPORTED_MODULE_1__.InitialActorID);


/***/ }),

/***/ "./src/document/change/change_pack.ts":
/*!********************************************!*\
  !*** ./src/document/change/change_pack.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangePack": () => (/* binding */ ChangePack)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `ChangePack` is a unit for delivering changes in a document to the remote.
 *
 * @internal
 */
class ChangePack {
    constructor(key, checkpoint, changes, snapshot, minSyncedTicket) {
        this.documentKey = key;
        this.checkpoint = checkpoint;
        this.changes = changes;
        this.snapshot = snapshot;
        this.minSyncedTicket = minSyncedTicket;
    }
    /**
     * `create` creates a new instance of ChangePack.
     */
    static create(key, checkpoint, changes, snapshot, minSyncedTicket) {
        return new ChangePack(key, checkpoint, changes, snapshot, minSyncedTicket);
    }
    /**
     * `getKey` returns the document key of this pack.
     */
    getDocumentKey() {
        return this.documentKey;
    }
    /**
     * `getCheckpoint` returns the checkpoint of this pack.
     */
    getCheckpoint() {
        return this.checkpoint;
    }
    /**
     * `getChanges` returns the changes of this pack.
     */
    getChanges() {
        return this.changes;
    }
    /**
     * `hasChanges` returns the whether this pack has changes or not.
     */
    hasChanges() {
        return this.changes.length > 0;
    }
    /**
     * `getChangeSize` returns the size of changes this pack has.
     */
    getChangeSize() {
        return this.changes.length;
    }
    /**
     * `hasSnapshot` returns the whether this pack has a snapshot or not.
     */
    hasSnapshot() {
        return !!this.snapshot && !!this.snapshot.length;
    }
    /**
     * `getSnapshot` returns the snapshot of this pack.
     */
    getSnapshot() {
        return this.snapshot;
    }
    /**
     * `getMinSyncedTicket` returns the minimum synced ticket of this pack.
     */
    getMinSyncedTicket() {
        return this.minSyncedTicket;
    }
}


/***/ }),

/***/ "./src/document/change/checkpoint.ts":
/*!*******************************************!*\
  !*** ./src/document/change/checkpoint.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Checkpoint": () => (/* binding */ Checkpoint),
/* harmony export */   "InitialCheckpoint": () => (/* binding */ InitialCheckpoint)
/* harmony export */ });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/index.js");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `Checkpoint` is used to determine the changes sent and received by the
 * client. This is immutable.
 *
 * @internal
 **/
class Checkpoint {
    constructor(serverSeq, clientSeq) {
        this.serverSeq = serverSeq;
        this.clientSeq = clientSeq;
    }
    /**
     * `of` creates a new instance of Checkpoint.
     */
    static of(serverSeq, clientSeq) {
        return new Checkpoint(serverSeq, clientSeq);
    }
    /**
     * `increaseClientSeq` creates a new instance with increased client sequence.
     */
    increaseClientSeq(inc) {
        if (inc === 0) {
            return this;
        }
        return new Checkpoint(this.serverSeq, this.clientSeq + inc);
    }
    /**
     * `forward` updates the given checkpoint with those values when it is greater
     * than the values of internal properties.
     */
    forward(other) {
        if (this.equals(other)) {
            return this;
        }
        const serverSeq = this.serverSeq.greaterThan(other.serverSeq)
            ? this.serverSeq
            : other.serverSeq;
        const clientSeq = Math.max(this.clientSeq, other.clientSeq);
        return Checkpoint.of(serverSeq, clientSeq);
    }
    /**
     * `getServerSeqAsString` returns the server seq of this checkpoint as a
     * string.
     */
    getServerSeqAsString() {
        return this.serverSeq.toString();
    }
    /**
     * `getClientSeq` returns the client seq of this checkpoint.
     */
    getClientSeq() {
        return this.clientSeq;
    }
    /**
     * `getServerSeq` returns the server seq of this checkpoint.
     */
    getServerSeq() {
        return this.serverSeq;
    }
    /**
     * `equals` returns whether the given checkpoint is equal to this checkpoint
     * or not.
     */
    equals(other) {
        return (this.clientSeq === other.clientSeq &&
            this.serverSeq.equals(other.serverSeq));
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data of this
     * checkpoint.
     */
    getAnnotatedString() {
        return `serverSeq=${this.serverSeq}, clientSeq=${this.clientSeq}`;
    }
}
/**
 * `InitialCheckpoint` is the initial value of the checkpoint.
 */
const InitialCheckpoint = new Checkpoint(long__WEBPACK_IMPORTED_MODULE_0__["default"].fromInt(0, true), 0);


/***/ }),

/***/ "./src/document/change/context.ts":
/*!****************************************!*\
  !*** ./src/document/change/context.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangeContext": () => (/* binding */ ChangeContext)
/* harmony export */ });
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _change__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./change */ "./src/document/change/change.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * `ChangeContext` is used to record the context of modification when editing
 * a document. Each time we add an operation, a new time ticket is issued.
 * Finally returns a Change after the modification has been completed.
 */
class ChangeContext {
    constructor(id, root, message) {
        this.id = id;
        this.root = root;
        this.message = message;
        this.operations = [];
        this.delimiter = _time_ticket__WEBPACK_IMPORTED_MODULE_0__.InitialDelimiter;
    }
    /**
     * `create` creates a new instance of ChangeContext.
     */
    static create(id, root, message) {
        return new ChangeContext(id, root, message);
    }
    /**
     * `push` pushes the given operation to this context.
     */
    push(operation) {
        this.operations.push(operation);
    }
    /**
     * `registerElement` registers the given element to the root.
     */
    registerElement(element, parent) {
        this.root.registerElement(element, parent);
    }
    /**
     * `registerRemovedElement` register removed element for garbage collection.
     */
    registerRemovedElement(deleted) {
        this.root.registerRemovedElement(deleted);
    }
    /**
     * `registerRemovedNodeTextElement` register text element has removed node for
     * garbage collection.
     */
    registerRemovedNodeTextElement(text) {
        this.root.registerTextWithGarbage(text);
    }
    /**
     * `getChange` creates a new instance of Change in this context.
     */
    getChange() {
        return _change__WEBPACK_IMPORTED_MODULE_1__.Change.create(this.id, this.operations, this.message);
    }
    /**
     * `hasOperations` returns the whether this context has operations or not.
     */
    hasOperations() {
        return this.operations.length > 0;
    }
    /**
     * `issueTimeTicket` creates a time ticket to be used to create a new operation.
     */
    issueTimeTicket() {
        this.delimiter += 1;
        return this.id.createTimeTicket(this.delimiter);
    }
}


/***/ }),

/***/ "./src/document/document.ts":
/*!**********************************!*\
  !*** ./src/document/document.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocEventType": () => (/* binding */ DocEventType),
/* harmony export */   "DocumentReplica": () => (/* binding */ DocumentReplica)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/observable */ "./src/util/observable.ts");
/* harmony import */ var _change_change_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./change/change_id */ "./src/document/change/change_id.ts");
/* harmony import */ var _change_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./change/context */ "./src/document/change/context.ts");
/* harmony import */ var _api_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../api/converter */ "./src/api/converter.ts");
/* harmony import */ var _change_change_pack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./change/change_pack */ "./src/document/change/change_pack.ts");
/* harmony import */ var _json_root__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json/root */ "./src/document/json/root.ts");
/* harmony import */ var _proxy_proxy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./proxy/proxy */ "./src/document/proxy/proxy.ts");
/* harmony import */ var _change_checkpoint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./change/checkpoint */ "./src/document/change/checkpoint.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * `DocEventType` is document event types
 * @public
 */
var DocEventType;
(function (DocEventType) {
    /**
     * snapshot event type
     */
    DocEventType["Snapshot"] = "snapshot";
    /**
     * local document change event type
     */
    DocEventType["LocalChange"] = "local-change";
    /**
     * remote document change event type
     */
    DocEventType["RemoteChange"] = "remote-change";
})(DocEventType || (DocEventType = {}));
/**
 * `DocumentReplica` is a CRDT-based data type. We can representing the model
 * of the application. And we can edit it even while offline.
 *
 * @public
 */
class DocumentReplica {
    constructor(key) {
        this.key = key;
        this.root = _json_root__WEBPACK_IMPORTED_MODULE_6__.JSONRoot.create();
        this.changeID = _change_change_id__WEBPACK_IMPORTED_MODULE_2__.InitialChangeID;
        this.checkpoint = _change_checkpoint__WEBPACK_IMPORTED_MODULE_8__.InitialCheckpoint;
        this.localChanges = [];
        this.eventStream = (0,_util_observable__WEBPACK_IMPORTED_MODULE_1__.createObservable)((observer) => {
            this.eventStreamObserver = observer;
        });
    }
    /**
     * `create` creates a new instance of Document.
     */
    static create(key) {
        return new DocumentReplica(key);
    }
    /**
     * `update` executes the given updater to update this document.
     */
    update(updater, message) {
        this.ensureClone();
        const context = _change_context__WEBPACK_IMPORTED_MODULE_3__.ChangeContext.create(this.changeID.next(), this.clone, message);
        try {
            const proxy = (0,_proxy_proxy__WEBPACK_IMPORTED_MODULE_7__.createProxy)(context, this.clone.getObject());
            updater(proxy);
        }
        catch (err) {
            // drop clone because it is contaminated.
            this.clone = undefined;
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(err);
            throw err;
        }
        if (context.hasOperations()) {
            if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`trying to update a local change: ${this.toJSON()}`);
            }
            const change = context.getChange();
            change.execute(this.root);
            this.localChanges.push(change);
            this.changeID = change.getID();
            if (this.eventStreamObserver) {
                this.eventStreamObserver.next({
                    type: DocEventType.LocalChange,
                    value: [
                        {
                            change,
                            paths: this.createPaths(change),
                        },
                    ],
                });
            }
            if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`after update a local change: ${this.toJSON()}`);
            }
        }
    }
    /**
     * `subscribe` adds the given observer to the fan-out list.
     */
    subscribe(nextOrObserver, error, complete) {
        return this.eventStream.subscribe(nextOrObserver, error, complete);
    }
    /**
     * `applyChangePack` applies the given change pack into this document.
     * 1. Remove local changes applied to server.
     * 2. Update the checkpoint.
     * 3. Do Garbage collection.
     *
     * @param pack - change pack
     * @internal
     */
    applyChangePack(pack) {
        if (pack.hasSnapshot()) {
            this.applySnapshot(pack.getCheckpoint().getServerSeq(), pack.getSnapshot());
        }
        else if (pack.hasChanges()) {
            this.applyChanges(pack.getChanges());
        }
        // 02. Remove local changes applied to server.
        while (this.localChanges.length) {
            const change = this.localChanges[0];
            if (change.getID().getClientSeq() > pack.getCheckpoint().getClientSeq()) {
                break;
            }
            this.localChanges.shift();
        }
        // 03. Update the checkpoint.
        this.checkpoint = this.checkpoint.forward(pack.getCheckpoint());
        // 04. Do Garbage collection.
        this.garbageCollect(pack.getMinSyncedTicket());
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`${this.root.toJSON()}`);
        }
    }
    /**
     * `getCheckpoint` returns the checkpoint of this document.
     *
     * @internal
     */
    getCheckpoint() {
        return this.checkpoint;
    }
    /**
     * `hasLocalChanges` returns whether this document has local changes or not.
     *
     * @internal
     */
    hasLocalChanges() {
        return this.localChanges.length > 0;
    }
    /**
     * `ensureClone` make a clone of root.
     *
     * @internal
     */
    ensureClone() {
        if (this.clone) {
            return;
        }
        this.clone = this.root.deepcopy();
    }
    /**
     * `createChangePack` create change pack of the local changes to send to the
     * remote server.
     *
     * @internal
     */
    createChangePack() {
        const changes = this.localChanges;
        const checkpoint = this.checkpoint.increaseClientSeq(changes.length);
        return _change_change_pack__WEBPACK_IMPORTED_MODULE_5__.ChangePack.create(this.key, checkpoint, changes);
    }
    /**
     * `setActor` sets actor into this document. This is also applied in the local
     * changes the document has.
     *
     * @internal
     */
    setActor(actorID) {
        for (const change of this.localChanges) {
            change.setActor(actorID);
        }
        this.changeID = this.changeID.setActor(actorID);
        // TODO also apply into root.
    }
    /**
     * `getKey` returns the key of this document.
     *
     * @internal
     */
    getKey() {
        return this.key;
    }
    /**
     * `getClone` return clone object.
     *
     * @internal
     */
    getClone() {
        if (!this.clone) {
            return;
        }
        return this.clone.getObject();
    }
    /**
     * `getRoot` returns a new proxy of cloned root.
     */
    getRoot() {
        this.ensureClone();
        const context = _change_context__WEBPACK_IMPORTED_MODULE_3__.ChangeContext.create(this.changeID.next(), this.clone);
        return (0,_proxy_proxy__WEBPACK_IMPORTED_MODULE_7__.createProxy)(context, this.clone.getObject());
    }
    /**
     * `garbageCollect` purges elements that were removed before the given time.
     *
     * @internal
     */
    garbageCollect(ticket) {
        if (this.clone) {
            this.clone.garbageCollect(ticket);
        }
        return this.root.garbageCollect(ticket);
    }
    /**
     * `getRootObject` returns root object.
     *
     * @internal
     */
    getRootObject() {
        return this.root.getObject();
    }
    /**
     * `getGarbageLen` returns the length of elements should be purged.
     *
     * @internal
     */
    getGarbageLen() {
        return this.root.getGarbageLen();
    }
    /**
     * `toJSON` returns the JSON encoding of this array.
     */
    toJSON() {
        return this.root.toJSON();
    }
    /**
     * `toJSON` returns the sorted JSON encoding of this array.
     */
    toSortedJSON() {
        return this.root.toSortedJSON();
    }
    applySnapshot(serverSeq, snapshot) {
        const obj = _api_converter__WEBPACK_IMPORTED_MODULE_4__.converter.bytesToObject(snapshot);
        this.root = new _json_root__WEBPACK_IMPORTED_MODULE_6__.JSONRoot(obj);
        for (const change of this.localChanges) {
            change.execute(this.root);
        }
        this.changeID = this.changeID.syncLamport(serverSeq);
        // drop clone because it is contaminated.
        this.clone = undefined;
        if (this.eventStreamObserver) {
            this.eventStreamObserver.next({
                type: DocEventType.Snapshot,
                value: snapshot,
            });
        }
    }
    applyChanges(changes) {
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`trying to apply ${changes.length} remote changes.` +
                `elements:${this.root.getElementMapSize()}, ` +
                `removeds:${this.root.getRemovedElementSetSize()}`);
        }
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(changes
                .map((change) => `${change
                .getID()
                .getAnnotatedString()}\t${change.getAnnotatedString()}`)
                .join('\n'));
        }
        this.ensureClone();
        for (const change of changes) {
            change.execute(this.clone);
        }
        for (const change of changes) {
            change.execute(this.root);
            this.changeID = this.changeID.syncLamport(change.getID().getLamport());
        }
        if (changes.length && this.eventStreamObserver) {
            this.eventStreamObserver.next({
                type: DocEventType.RemoteChange,
                value: changes.map((change) => {
                    return {
                        change,
                        paths: this.createPaths(change),
                    };
                }),
            });
        }
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`after appling ${changes.length} remote changes.` +
                `elements:${this.root.getElementMapSize()}, ` +
                ` removeds:${this.root.getRemovedElementSetSize()}`);
        }
    }
    createPaths(change) {
        const paths = [];
        for (const op of change.getOperations()) {
            const createdAt = op.getEffectedCreatedAt();
            if (createdAt) {
                paths.push(this.root.createPath(createdAt));
            }
        }
        return paths;
    }
}


/***/ }),

/***/ "./src/document/json/array.ts":
/*!************************************!*\
  !*** ./src/document/json/array.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrayInternal": () => (/* binding */ ArrayInternal)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rga_tree_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rga_tree_list */ "./src/document/json/rga_tree_list.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * `ArrayInternal` represents JSON array data structure including logical clock.
 *
 * @internal
 */
class ArrayInternal extends _element__WEBPACK_IMPORTED_MODULE_0__.JSONContainer {
    /** @hideconstructor */
    constructor(createdAt, elements) {
        super(createdAt);
        this.elements = elements;
    }
    /**
     * `create` creates a new instance of Array.
     */
    static create(createdAt) {
        return new ArrayInternal(createdAt, _rga_tree_list__WEBPACK_IMPORTED_MODULE_1__.RGATreeList.create());
    }
    /**
     * `keyof` returns key of the given `createdAt` element.
     */
    keyOf(createdAt) {
        return this.elements.keyOf(createdAt);
    }
    /**
     * `purge` physically purge child element.
     */
    purge(element) {
        this.elements.purge(element);
    }
    /**
     * `insertAfter` inserts the given element after the given previous element.
     */
    insertAfter(prevCreatedAt, value) {
        this.elements.insertAfter(prevCreatedAt, value);
    }
    /**
     * `moveAfter` moves the given `createdAt` element after the `prevCreatedAt`.
     */
    moveAfter(prevCreatedAt, createdAt, executedAt) {
        this.elements.moveAfter(prevCreatedAt, createdAt, executedAt);
    }
    /**
     * `get` returns the element of the given createAt.
     */
    get(createdAt) {
        const node = this.elements.get(createdAt);
        if (!node || node.isRemoved()) {
            return;
        }
        return node;
    }
    /**
     * `getByIndex` returns the element of the given index.
     */
    getByIndex(index) {
        const node = this.elements.getByIndex(index);
        if (!node) {
            return;
        }
        return node.getValue();
    }
    /**
     * `getHead` returns dummy head element.
     */
    getHead() {
        return this.elements.getHead();
    }
    /**
     * `getLast` returns last element.
     */
    getLast() {
        return this.elements.getLast();
    }
    /**
     * `getPrevCreatedAt` returns the creation time of
     * the previous element of the given element.
     */
    getPrevCreatedAt(createdAt) {
        return this.elements.getPrevCreatedAt(createdAt);
    }
    /**
     * `delete` deletes the element of the given index.
     */
    delete(createdAt, editedAt) {
        return this.elements.delete(createdAt, editedAt);
    }
    /**
     * `deleteByIndex` deletes the element of given index and editedAt.
     */
    deleteByIndex(index, editedAt) {
        return this.elements.deleteByIndex(index, editedAt);
    }
    /**
     * `getLastCreatedAt` get last created element.
     */
    getLastCreatedAt() {
        return this.elements.getLastCreatedAt();
    }
    /**
     * `length` returns length of this elements.
     */
    get length() {
        return this.elements.length;
    }
    /**
     * eslint-disable-next-line jsdoc/require-jsdoc
     * @internal
     */
    *[Symbol.iterator]() {
        for (const node of this.elements) {
            if (!node.isRemoved()) {
                yield node.getValue();
            }
        }
    }
    /**
     * `getDescendants` traverse the descendants of this array.
     */
    getDescendants(callback) {
        for (const node of this.elements) {
            const element = node.getValue();
            if (callback(element, this)) {
                return;
            }
            if (element instanceof _element__WEBPACK_IMPORTED_MODULE_0__.JSONContainer) {
                element.getDescendants(callback);
            }
        }
    }
    /**
     * `toJSON` returns the JSON encoding of this array.
     */
    toJSON() {
        const json = [];
        for (const value of this) {
            json.push(value.toJSON());
        }
        return `[${json.join(',')}]`;
    }
    /**
     * `toJS` return the javascript object of this array.
     */
    toJS() {
        return JSON.parse(this.toJSON());
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of this array.
     */
    toSortedJSON() {
        return this.toJSON();
    }
    /**
     * `getElements` returns an array of elements contained in this RGATreeList.
     */
    getElements() {
        return this.elements;
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const clone = ArrayInternal.create(this.getCreatedAt());
        for (const node of this.elements) {
            clone.elements.insertAfter(clone.getLastCreatedAt(), node.getValue().deepcopy());
        }
        clone.remove(this.getRemovedAt());
        return clone;
    }
}


/***/ }),

/***/ "./src/document/json/counter.ts":
/*!**************************************!*\
  !*** ./src/document/json/counter.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CounterType": () => (/* binding */ CounterType),
/* harmony export */   "CounterInternal": () => (/* binding */ CounterInternal)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! long */ "./node_modules/long/index.js");
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/error */ "./src/util/error.ts");
/* harmony import */ var _primitive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primitive */ "./src/document/json/primitive.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * @internal
 */
var CounterType;
(function (CounterType) {
    CounterType[CounterType["IntegerCnt"] = 0] = "IntegerCnt";
    CounterType[CounterType["LongCnt"] = 1] = "LongCnt";
    CounterType[CounterType["DoubleCnt"] = 2] = "DoubleCnt";
})(CounterType || (CounterType = {}));
/**
 * `CounterInternal` represents changeable number data type.
 *
 * @internal
 */
class CounterInternal extends _element__WEBPACK_IMPORTED_MODULE_0__.JSONElement {
    constructor(value, createdAt) {
        super(createdAt);
        this.valueType = CounterInternal.getCounterType(value);
        this.value = value;
    }
    /**
     * `of` creates a new instance of Counter.
     */
    static of(value, createdAt) {
        return new CounterInternal(value, createdAt);
    }
    /**
     * `valueFromBytes` parses the given bytes into value.
     */
    static valueFromBytes(counterType, bytes) {
        switch (counterType) {
            case CounterType.IntegerCnt:
                return bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);
            case CounterType.DoubleCnt: {
                const view = new DataView(bytes.buffer);
                bytes.forEach(function (b, i) {
                    view.setUint8(i, b);
                });
                return view.getFloat64(0, true);
            }
            case CounterType.LongCnt:
                return long__WEBPACK_IMPORTED_MODULE_1__["default"].fromBytesLE(Array.from(bytes));
            default:
                throw new _util_error__WEBPACK_IMPORTED_MODULE_2__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_2__.Code.Unimplemented, `unimplemented type: ${counterType}`);
        }
    }
    /**
     * `toJSON` returns the JSON encoding of the value.
     */
    toJSON() {
        return `${this.value}`;
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of the value.
     */
    toSortedJSON() {
        return this.toJSON();
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const counter = CounterInternal.of(this.value, this.getCreatedAt());
        counter.setMovedAt(this.getMovedAt());
        return counter;
    }
    /**
     * `getType` returns the type of the value.
     */
    getType() {
        return this.valueType;
    }
    /**
     * `getCounterType` returns counter type of given value.
     */
    static getCounterType(value) {
        switch (typeof value) {
            case 'number':
                return CounterType.DoubleCnt;
            case 'object':
                if (value instanceof long__WEBPACK_IMPORTED_MODULE_1__["default"]) {
                    return CounterType.LongCnt;
                }
        }
        return;
    }
    /**
     * `isSupport` check if there is a counter type of given value.
     */
    static isSupport(value) {
        return !!CounterInternal.getCounterType(value);
    }
    /**
     * `isInteger` checks if the num is integer.
     */
    static isInteger(num) {
        return num % 1 === 0;
    }
    /**
     * `isNumericType` check numeric type by JSONCounter.
     */
    isNumericType() {
        const t = this.valueType;
        return (t === CounterType.IntegerCnt ||
            t === CounterType.LongCnt ||
            t === CounterType.DoubleCnt);
    }
    /**
     * `getValue` get counter value.
     */
    getValue() {
        return this.value;
    }
    /**
     * `toBytes` creates an array representing the value.
     */
    toBytes() {
        switch (this.valueType) {
            case CounterType.IntegerCnt: {
                const intVal = this.value;
                return new Uint8Array([
                    intVal & 0xff,
                    (intVal >> 8) & 0xff,
                    (intVal >> 16) & 0xff,
                    (intVal >> 24) & 0xff,
                ]);
            }
            case CounterType.DoubleCnt: {
                const doubleVal = this.value;
                const uint8Array = new Uint8Array(8);
                const view = new DataView(uint8Array.buffer);
                view.setFloat64(0, doubleVal, true);
                return uint8Array;
            }
            case CounterType.LongCnt: {
                const longVal = this.value;
                const longToBytes = longVal.toBytesLE();
                return Uint8Array.from(longToBytes);
            }
            default:
                throw new _util_error__WEBPACK_IMPORTED_MODULE_2__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_2__.Code.Unimplemented, `unimplemented type: ${this.valueType}`);
        }
    }
    /**
     * `increase` increases numeric data.
     */
    increase(v) {
        /**
         * `checkNumericType` checks if the given target is a numeric type.
         */
        function checkNumericType(target) {
            if (!target.isNumericType()) {
                throw new TypeError(`Unsupported type of value: ${typeof target.getValue()}`);
            }
        }
        checkNumericType(this);
        checkNumericType(v);
        if (this.valueType === CounterType.LongCnt) {
            this.value = this.value.add(v.getValue());
        }
        else {
            this.value +=
                v.getType() === _primitive__WEBPACK_IMPORTED_MODULE_3__.PrimitiveType.Long
                    ? v.getValue().toNumber()
                    : v.getValue();
        }
        return this;
    }
}


/***/ }),

/***/ "./src/document/json/element.ts":
/*!**************************************!*\
  !*** ./src/document/json/element.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JSONElement": () => (/* binding */ JSONElement),
/* harmony export */   "JSONContainer": () => (/* binding */ JSONContainer),
/* harmony export */   "TextElement": () => (/* binding */ TextElement)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `JSONElement` represents JSON element including logical clock.
 *
 * @internal
 */
class JSONElement {
    constructor(createdAt) {
        this.createdAt = createdAt;
    }
    /**
     * `getCreatedAt` returns the creation time of this element.
     */
    getCreatedAt() {
        return this.createdAt;
    }
    /**
     * `getID` returns the creation time of this element.
     */
    getID() {
        return this.createdAt;
    }
    /**
     * `getMovedAt` returns the move time of this element.
     */
    getMovedAt() {
        return this.movedAt;
    }
    /**
     * `getRemovedAt` returns the removal time of this element.
     */
    getRemovedAt() {
        return this.removedAt;
    }
    /**
     * `setMovedAt` sets the move time of this element.
     */
    setMovedAt(movedAt) {
        if (!this.movedAt || (movedAt && movedAt.after(this.movedAt))) {
            this.movedAt = movedAt;
            return true;
        }
        return false;
    }
    /**
     * `setRemovedAt` sets the remove time of this element.
     */
    setRemovedAt(removedAt) {
        this.removedAt = removedAt;
    }
    /**
     * `remove` removes this element.
     */
    remove(removedAt) {
        if (removedAt &&
            removedAt.after(this.createdAt) &&
            (!this.removedAt || removedAt.after(this.removedAt))) {
            this.removedAt = removedAt;
            return true;
        }
        return false;
    }
    /**
     * `isRemoved` check if this element was removed.
     */
    isRemoved() {
        return !!this.removedAt;
    }
}
/**
 *
 * `JSONContainer` represents Array or Object.
 * @internal
 */
class JSONContainer extends JSONElement {
    constructor(createdAt) {
        super(createdAt);
    }
}
/**
 * `TextElement` represents Text or RichText.
 */
class TextElement extends JSONElement {
}


/***/ }),

/***/ "./src/document/json/object.ts":
/*!*************************************!*\
  !*** ./src/document/json/object.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectInternal": () => (/* binding */ ObjectInternal)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rht_pq_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rht_pq_map */ "./src/document/json/rht_pq_map.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * `ObjectInternal` represents a JSON object, but unlike regular JSON, it has time
 * tickets which is created by logical clock.
 *
 * @internal
 */
class ObjectInternal extends _element__WEBPACK_IMPORTED_MODULE_0__.JSONContainer {
    /** @hideconstructor */
    constructor(createdAt, memberNodes) {
        super(createdAt);
        this.memberNodes = memberNodes;
    }
    /**
     * `create` creates a new instance of Object.
     */
    static create(createdAt) {
        return new ObjectInternal(createdAt, _rht_pq_map__WEBPACK_IMPORTED_MODULE_1__.RHTPQMap.create());
    }
    /**
     * `keyOf` returns a key of RHTPQMap based on the given creation time.
     */
    keyOf(createdAt) {
        return this.memberNodes.keyOf(createdAt);
    }
    /**
     * `purge` physically purges child element.
     */
    purge(value) {
        this.memberNodes.purge(value);
    }
    /**
     * `set` sets the given element of the given key.
     */
    set(key, value) {
        return this.memberNodes.set(key, value);
    }
    /**
     * `delete` deletes the element of the given key.
     */
    delete(createdAt, executedAt) {
        return this.memberNodes.delete(createdAt, executedAt);
    }
    /**
     * `deleteByKey` deletes the element of the given key and execution time.
     */
    deleteByKey(key, executedAt) {
        return this.memberNodes.deleteByKey(key, executedAt);
    }
    /**
     * `get` returns the value of the given key.
     */
    get(key) {
        return this.memberNodes.get(key);
    }
    /**
     * `has` returns whether the element exists of the given key or not.
     */
    has(key) {
        return this.memberNodes.has(key);
    }
    /**
     * `toJSON` returns the JSON encoding of this object.
     */
    toJSON() {
        const json = [];
        for (const [key, value] of this) {
            json.push(`"${key}":${value.toJSON()}`);
        }
        return `{${json.join(',')}}`;
    }
    /**
     * `toJS` return the javascript object of this object.
     */
    toJS() {
        return JSON.parse(this.toJSON());
    }
    /**
     * `getKeys` returns array of this object.
     */
    getKeys() {
        const keys = Array();
        for (const [key] of this) {
            keys.push(key);
        }
        return keys;
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of this object.
     */
    toSortedJSON() {
        const keys = Array();
        for (const [key] of this) {
            keys.push(key);
        }
        const json = [];
        for (const key of keys.sort()) {
            const node = this.memberNodes.get(key);
            json.push(`"${key}":${node.toSortedJSON()}`);
        }
        return `{${json.join(',')}}`;
    }
    /**
     * `getRHT` RHTNodes returns the RHTPQMap nodes.
     */
    getRHT() {
        return this.memberNodes;
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const clone = ObjectInternal.create(this.getCreatedAt());
        for (const node of this.memberNodes) {
            clone.memberNodes.set(node.getStrKey(), node.getValue().deepcopy());
        }
        clone.remove(this.getRemovedAt());
        return clone;
    }
    /**
     * `getDescendants` returns the descendants of this object by traversing.
     */
    getDescendants(callback) {
        for (const node of this.memberNodes) {
            const element = node.getValue();
            if (callback(element, this)) {
                return;
            }
            if (element instanceof _element__WEBPACK_IMPORTED_MODULE_0__.JSONContainer) {
                element.getDescendants(callback);
            }
        }
    }
    /**
     * eslint-disable-next-line jsdoc/require-jsdoc
     * @internal
     */
    *[Symbol.iterator]() {
        const keySet = new Set();
        for (const node of this.memberNodes) {
            if (!keySet.has(node.getStrKey())) {
                keySet.add(node.getStrKey());
                if (!node.isRemoved()) {
                    yield [node.getStrKey(), node.getValue()];
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/document/json/plain_text.ts":
/*!*****************************************!*\
  !*** ./src/document/json/plain_text.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlainTextInternal": () => (/* binding */ PlainTextInternal)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rga_tree_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * `PlainTextInternal` represents plain text element
 * Text is an extended data type for the contents of a text editor
 *
 * @internal
 */
class PlainTextInternal extends _element__WEBPACK_IMPORTED_MODULE_0__.TextElement {
    /** @hideconstructor */
    constructor(rgaTreeSplit, createdAt) {
        super(createdAt);
        this.rgaTreeSplit = rgaTreeSplit;
        this.selectionMap = new Map();
        this.remoteChangeLock = false;
    }
    /**
     * `create` creates a new instance of `PlainText`.
     */
    static create(rgaTreeSplit, createdAt) {
        return new PlainTextInternal(rgaTreeSplit, createdAt);
    }
    /**
     * `editInternal` edits the given range with the given content.
     *
     * @internal
     */
    editInternal(range, content, editedAt, latestCreatedAtMapByActor) {
        const [caretPos, latestCreatedAtMap, changes] = this.rgaTreeSplit.edit(range, editedAt, content, latestCreatedAtMapByActor);
        const selectionChange = this.selectPriv([caretPos, caretPos], editedAt);
        if (selectionChange) {
            changes.push(selectionChange);
        }
        if (this.onChangesHandler) {
            this.remoteChangeLock = true;
            this.onChangesHandler(changes);
            this.remoteChangeLock = false;
        }
        return latestCreatedAtMap;
    }
    /**
     * `selectInternal` updates selection info of the given selection range.
     *
     * @internal
     */
    selectInternal(range, updatedAt) {
        if (this.remoteChangeLock) {
            return;
        }
        const change = this.selectPriv(range, updatedAt);
        if (this.onChangesHandler && change) {
            this.remoteChangeLock = true;
            this.onChangesHandler([change]);
            this.remoteChangeLock = false;
        }
    }
    /**
     * `hasRemoteChangeLock` checks whether remoteChangeLock has.
     */
    hasRemoteChangeLock() {
        return this.remoteChangeLock;
    }
    /**
     * `onChanges` registers a handler of onChanges event.
     */
    onChanges(handler) {
        this.onChangesHandler = handler;
    }
    /**
     * `createRange` returns pair of RGATreeSplitNodePos of the given integer offsets.
     */
    createRange(fromIdx, toIdx) {
        const fromPos = this.rgaTreeSplit.findNodePos(fromIdx);
        if (fromIdx === toIdx) {
            return [fromPos, fromPos];
        }
        return [fromPos, this.rgaTreeSplit.findNodePos(toIdx)];
    }
    /**
     * `toJSON` returns the JSON encoding of this text.
     */
    toJSON() {
        return `"${this.rgaTreeSplit.toJSON()}"`;
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of this text.
     */
    toSortedJSON() {
        return this.toJSON();
    }
    /**
     * `toString` returns the string representation of this text.
     */
    toString() {
        return this.rgaTreeSplit.toJSON();
    }
    /**
     * `getRGATreeSplit` returns the rgaTreeSplit.
     *
     * @internal
     */
    getRGATreeSplit() {
        return this.rgaTreeSplit;
    }
    /**
     * `getAnnotatedString` returns a String containing the meta data of the text.
     */
    getAnnotatedString() {
        return this.rgaTreeSplit.getAnnotatedString();
    }
    /**
     * `getRemovedNodesLen` returns length of removed nodes.
     */
    getRemovedNodesLen() {
        return this.rgaTreeSplit.getRemovedNodesLen();
    }
    /**
     * `purgeTextNodesWithGarbage` physically purges nodes that have been removed.
     *
     * @internal
     */
    purgeTextNodesWithGarbage(ticket) {
        return this.rgaTreeSplit.purgeTextNodesWithGarbage(ticket);
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const text = PlainTextInternal.create(this.rgaTreeSplit.deepcopy(), this.getCreatedAt());
        text.remove(this.getRemovedAt());
        return text;
    }
    selectPriv(range, updatedAt) {
        if (!this.selectionMap.has(updatedAt.getActorID())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_1__.Selection.of(range, updatedAt));
            return;
        }
        const prevSelection = this.selectionMap.get(updatedAt.getActorID());
        if (updatedAt.after(prevSelection.getUpdatedAt())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_1__.Selection.of(range, updatedAt));
            const [from, to] = this.rgaTreeSplit.findIndexesFromRange(range);
            return {
                type: _rga_tree_split__WEBPACK_IMPORTED_MODULE_1__.TextChangeType.Selection,
                actor: updatedAt.getActorID(),
                from,
                to,
            };
        }
    }
}


/***/ }),

/***/ "./src/document/json/primitive.ts":
/*!****************************************!*\
  !*** ./src/document/json/primitive.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrimitiveType": () => (/* binding */ PrimitiveType),
/* harmony export */   "JSONPrimitive": () => (/* binding */ JSONPrimitive)
/* harmony export */ });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/index.js");
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/error */ "./src/util/error.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var PrimitiveType;
(function (PrimitiveType) {
    PrimitiveType[PrimitiveType["Null"] = 0] = "Null";
    PrimitiveType[PrimitiveType["Boolean"] = 1] = "Boolean";
    PrimitiveType[PrimitiveType["Integer"] = 2] = "Integer";
    PrimitiveType[PrimitiveType["Long"] = 3] = "Long";
    PrimitiveType[PrimitiveType["Double"] = 4] = "Double";
    PrimitiveType[PrimitiveType["String"] = 5] = "String";
    PrimitiveType[PrimitiveType["Bytes"] = 6] = "Bytes";
    PrimitiveType[PrimitiveType["Date"] = 7] = "Date";
})(PrimitiveType || (PrimitiveType = {}));
/**
 * `JSONPrimitive` represents JSON primitive data type including logical lock.
 * This is immutable.
 */
class JSONPrimitive extends _element__WEBPACK_IMPORTED_MODULE_2__.JSONElement {
    constructor(value, createdAt) {
        super(createdAt);
        this.valueType = JSONPrimitive.getPrimitiveType(value);
        this.value = value === undefined ? null : value;
    }
    /**
     * `of` creates a new instance of Primitive.
     */
    static of(value, createdAt) {
        return new JSONPrimitive(value, createdAt);
    }
    /**
     * `valueFromBytes` parses the given bytes into value.
     */
    static valueFromBytes(primitiveType, bytes) {
        switch (primitiveType) {
            case PrimitiveType.Null:
                return null;
            case PrimitiveType.Boolean:
                return bytes[0] ? true : false;
            case PrimitiveType.Integer:
                return bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);
            case PrimitiveType.Double: {
                const view = new DataView(bytes.buffer);
                bytes.forEach(function (b, i) {
                    view.setUint8(i, b);
                });
                return view.getFloat64(0, true);
            }
            case PrimitiveType.String:
                return new TextDecoder('utf-8').decode(bytes);
            case PrimitiveType.Long:
                return long__WEBPACK_IMPORTED_MODULE_0__["default"].fromBytesLE(Array.from(bytes));
            case PrimitiveType.Bytes:
                return bytes;
            case PrimitiveType.Date:
                return new Date(long__WEBPACK_IMPORTED_MODULE_0__["default"].fromBytesLE(Array.from(bytes)).toNumber());
            default:
                throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented type: ${primitiveType}`);
        }
    }
    /**
     * `toJSON` returns the JSON encoding of the value.
     */
    toJSON() {
        if (this.valueType === PrimitiveType.String) {
            return `"${this.value}"`;
        }
        return `${this.value}`;
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of the value.
     */
    toSortedJSON() {
        return this.toJSON();
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const primitive = JSONPrimitive.of(this.value, this.getCreatedAt());
        primitive.setMovedAt(this.getMovedAt());
        return primitive;
    }
    /**
     * `getType` returns the type of the value.
     */
    getType() {
        return this.valueType;
    }
    /**
     * `getPrimitiveType` returns the primitive type of the value.
     */
    static getPrimitiveType(value) {
        switch (typeof value) {
            case 'undefined':
                return PrimitiveType.Null;
            case 'boolean':
                return PrimitiveType.Boolean;
            case 'number':
                return PrimitiveType.Double;
            case 'string':
                return PrimitiveType.String;
            case 'object':
                if (value === null) {
                    return PrimitiveType.Null;
                }
                else if (value instanceof long__WEBPACK_IMPORTED_MODULE_0__["default"]) {
                    return PrimitiveType.Long;
                }
                else if (value instanceof Uint8Array) {
                    return PrimitiveType.Bytes;
                }
                else if (value instanceof Date) {
                    return PrimitiveType.Date;
                }
        }
        return;
    }
    /**
     * `isSupport` check if the given value is supported type.
     */
    static isSupport(value) {
        const primitiveType = JSONPrimitive.getPrimitiveType(value);
        if (primitiveType === undefined) {
            return false;
        }
        return true;
    }
    /**
     * `isInteger` checks if the given number is integer.
     */
    static isInteger(num) {
        return num % 1 === 0;
    }
    /**
     * `isNumericType` checks numeric type by JSONPrimitive
     */
    isNumericType() {
        const t = this.valueType;
        return (t === PrimitiveType.Integer ||
            t === PrimitiveType.Long ||
            t === PrimitiveType.Double);
    }
    /**
     * `getValue` returns the value of Primitive.
     */
    getValue() {
        return this.value;
    }
    /**
     * `toBytes` creates an array representing the value.
     */
    toBytes() {
        switch (this.valueType) {
            case PrimitiveType.Null: {
                return new Uint8Array();
            }
            case PrimitiveType.Boolean: {
                const boolVal = this.value;
                return boolVal ? new Uint8Array([1]) : new Uint8Array([0]);
            }
            case PrimitiveType.Integer: {
                const intVal = this.value;
                return new Uint8Array([
                    intVal & 0xff,
                    (intVal >> 8) & 0xff,
                    (intVal >> 16) & 0xff,
                    (intVal >> 24) & 0xff,
                ]);
            }
            case PrimitiveType.Double: {
                const doubleVal = this.value;
                const uint8Array = new Uint8Array(8);
                const view = new DataView(uint8Array.buffer);
                view.setFloat64(0, doubleVal, true);
                return uint8Array;
            }
            case PrimitiveType.String: {
                return new TextEncoder().encode(this.value);
            }
            case PrimitiveType.Long: {
                const longVal = this.value;
                const longToBytes = longVal.toBytesLE();
                return Uint8Array.from(longToBytes);
            }
            case PrimitiveType.Bytes: {
                const bytesVal = this.value;
                return bytesVal;
            }
            case PrimitiveType.Date: {
                const dateVal = this.value;
                const dateToBytes = long__WEBPACK_IMPORTED_MODULE_0__["default"].fromNumber(dateVal.getTime()).toBytesLE();
                return Uint8Array.from(dateToBytes);
            }
            default:
                throw new _util_error__WEBPACK_IMPORTED_MODULE_1__.YorkieError(_util_error__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, `unimplemented type: ${this.valueType}`);
        }
    }
}


/***/ }),

/***/ "./src/document/json/rga_tree_list.ts":
/*!********************************************!*\
  !*** ./src/document/json/rga_tree_list.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RGATreeList": () => (/* binding */ RGATreeList)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/splay_tree */ "./src/util/splay_tree.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _primitive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primitive */ "./src/document/json/primitive.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * `RGATreeListNode` is a node of RGATreeList.
 */
class RGATreeListNode extends _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__.SplayNode {
    constructor(value) {
        super(value);
        this.value = value;
    }
    /**
     * `createAfter` creates a new node after the previous node.
     */
    static createAfter(prev, value) {
        const newNode = new RGATreeListNode(value);
        const prevNext = prev.next;
        prev.next = newNode;
        newNode.prev = prev;
        newNode.next = prevNext;
        if (prevNext) {
            prevNext.prev = newNode;
        }
        return newNode;
    }
    /**
     * `remove` removes value based on removing time.
     */
    remove(removedAt) {
        return this.value.remove(removedAt);
    }
    /**
     * `getCreatedAt` returns creation time of this value
     */
    getCreatedAt() {
        return this.value.getCreatedAt();
    }
    /**
     * `getPositionedAt` returns time this element was positioned in the array.
     */
    getPositionedAt() {
        const movedAt = this.value.getMovedAt();
        if (movedAt) {
            return movedAt;
        }
        return this.value.getCreatedAt();
    }
    /**
     * `release` releases prev and next node.
     */
    release() {
        if (this.prev) {
            this.prev.next = this.next;
        }
        if (this.next) {
            this.next.prev = this.prev;
        }
        this.prev = undefined;
        this.next = undefined;
    }
    /**
     * `getLength` returns the length of this node.
     */
    getLength() {
        return this.value.isRemoved() ? 0 : 1;
    }
    /**
     * `getPrev` returns a previous node.
     */
    getPrev() {
        return this.prev;
    }
    /**
     * `getNext` returns a next node.
     */
    getNext() {
        return this.next;
    }
    /**
     * `getValue` returns a element value.
     */
    getValue() {
        return this.value;
    }
    /**
     * `isRemoved` checks if the value was removed.
     */
    isRemoved() {
        return this.value.isRemoved();
    }
}
/**
 * `RGATreeList` is replicated growable array.
 *
 * @internal
 */
class RGATreeList {
    constructor() {
        const dummyValue = _primitive__WEBPACK_IMPORTED_MODULE_3__.JSONPrimitive.of(0, _time_ticket__WEBPACK_IMPORTED_MODULE_2__.InitialTimeTicket);
        dummyValue.setRemovedAt(_time_ticket__WEBPACK_IMPORTED_MODULE_2__.InitialTimeTicket);
        this.dummyHead = new RGATreeListNode(dummyValue);
        this.last = this.dummyHead;
        this.size = 0;
        this.nodeMapByIndex = new _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__.SplayTree();
        this.nodeMapByCreatedAt = new Map();
        this.nodeMapByIndex.insert(this.dummyHead);
        this.nodeMapByCreatedAt.set(this.dummyHead.getCreatedAt().toIDString(), this.dummyHead);
    }
    /**
     * `create` creates instance of RGATreeList.
     */
    static create() {
        return new RGATreeList();
    }
    /**
     * `length` returns size of RGATreeList.
     */
    get length() {
        return this.size;
    }
    /**
     * `findNextBeforeExecutedAt` returns the node by the given createdAt and
     * executedAt. It passes through nodes created after executedAt from the
     * given node and returns the next node.
     * @param createdAt - created time
     * @param executedAt - executed time
     * @returns next node
     */
    findNextBeforeExecutedAt(createdAt, executedAt) {
        let node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`cant find the given node: ${createdAt.toIDString()}`);
        }
        while (node.getNext() &&
            node.getNext().getPositionedAt().after(executedAt)) {
            node = node.getNext();
        }
        return node;
    }
    release(node) {
        if (this.last === node) {
            this.last = node.getPrev();
        }
        node.release();
        this.nodeMapByIndex.delete(node);
        this.nodeMapByCreatedAt.delete(node.getValue().getCreatedAt().toIDString());
        if (!node.isRemoved()) {
            this.size -= 1;
        }
    }
    /**
     * `insertAfter` adds next element of previously created node.
     */
    insertAfter(prevCreatedAt, value, executedAt = value.getCreatedAt()) {
        const prevNode = this.findNextBeforeExecutedAt(prevCreatedAt, executedAt);
        const newNode = RGATreeListNode.createAfter(prevNode, value);
        if (prevNode === this.last) {
            this.last = newNode;
        }
        this.nodeMapByIndex.insertAfter(prevNode, newNode);
        this.nodeMapByCreatedAt.set(newNode.getCreatedAt().toIDString(), newNode);
        this.size += 1;
    }
    /**
     * `moveAfter` moves the given `createdAt` element
     * after the `prevCreatedAt` element.
     */
    moveAfter(prevCreatedAt, createdAt, executedAt) {
        const prevNode = this.nodeMapByCreatedAt.get(prevCreatedAt.toIDString());
        if (!prevNode) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`cant find the given node: ${prevCreatedAt.toIDString()}`);
        }
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`cant find the given node: ${createdAt.toIDString()}`);
        }
        if (prevNode !== node &&
            (!node.getValue().getMovedAt() ||
                executedAt.after(node.getValue().getMovedAt()))) {
            this.release(node);
            this.insertAfter(prevNode.getCreatedAt(), node.getValue(), executedAt);
            node.getValue().setMovedAt(executedAt);
        }
    }
    /**
     * `insert` adds the given element after  the last creation time.
     */
    insert(value) {
        this.insertAfter(this.last.getCreatedAt(), value);
    }
    /**
     * `get` returns the element of the given index.
     */
    get(createdAt) {
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (!node) {
            return;
        }
        return node.getValue();
    }
    /**
     * `keyOf` key based on the creation time of the node.
     */
    keyOf(createdAt) {
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (!node) {
            return;
        }
        return String(this.nodeMapByIndex.indexOf(node));
    }
    /**
     * `purge` physically purges child element.
     */
    purge(element) {
        const node = this.nodeMapByCreatedAt.get(element.getCreatedAt().toIDString());
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find the given createdAt: ${element
                .getCreatedAt()
                .toIDString()}`);
        }
        this.release(node);
    }
    /**
     * `getByIndex` returns node of the given index.
     */
    getByIndex(idx) {
        if (idx >= this.length) {
            return;
        }
        const [node, offset] = this.nodeMapByIndex.find(idx);
        let rgaNode = node;
        if ((idx === 0 && node === this.dummyHead) || offset > 0) {
            do {
                if (rgaNode) {
                    rgaNode = rgaNode.getNext();
                }
            } while (rgaNode && rgaNode.isRemoved());
        }
        return rgaNode;
    }
    /**
     * `getPrevCreatedAt` returns a creation time of the previous node.
     */
    getPrevCreatedAt(createdAt) {
        let node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        do {
            node = node.getPrev();
        } while (this.dummyHead !== node && node.isRemoved());
        return node.getValue().getCreatedAt();
    }
    /**
     * `delete` deletes the node of the given creation time.
     */
    delete(createdAt, editedAt) {
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        const alreadyRemoved = node.isRemoved();
        if (node.remove(editedAt) && !alreadyRemoved) {
            this.nodeMapByIndex.splayNode(node);
            this.size -= 1;
        }
        return node.getValue();
    }
    /**
     * `deleteByIndex` deletes the node of the given index.
     */
    deleteByIndex(index, editedAt) {
        const node = this.getByIndex(index);
        if (!node) {
            return;
        }
        if (node.remove(editedAt)) {
            this.nodeMapByIndex.splayNode(node);
            this.size -= 1;
        }
        return node.getValue();
    }
    /**
     * `getHead` returns the value of head elements.
     */
    getHead() {
        return this.dummyHead.getValue();
    }
    /**
     * `getLast` returns the value of last elements.
     */
    getLast() {
        return this.last.getValue();
    }
    /**
     * `getLastCreatedAt` returns the creation time of last elements.
     */
    getLastCreatedAt() {
        return this.last.getCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a String containing the meta data of the node id
     * for debugging purpose.
     */
    getAnnotatedString() {
        const json = [];
        for (const node of this) {
            const elem = `${node.getCreatedAt().toIDString()}:${node
                .getValue()
                .toJSON()}`;
            if (node.isRemoved()) {
                json.push(`{${elem}}`);
            }
            else {
                json.push(`[${elem}]`);
            }
        }
        return json.join('');
    }
    // eslint-disable-next-line jsdoc/require-jsdoc
    *[Symbol.iterator]() {
        let node = this.dummyHead.getNext();
        while (node) {
            yield node;
            node = node.getNext();
        }
    }
}


/***/ }),

/***/ "./src/document/json/rga_tree_split.ts":
/*!*********************************************!*\
  !*** ./src/document/json/rga_tree_split.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextChangeType": () => (/* binding */ TextChangeType),
/* harmony export */   "RGATreeSplitNodeID": () => (/* binding */ RGATreeSplitNodeID),
/* harmony export */   "RGATreeSplitNodePos": () => (/* binding */ RGATreeSplitNodePos),
/* harmony export */   "RGATreeSplitNode": () => (/* binding */ RGATreeSplitNode),
/* harmony export */   "RGATreeSplit": () => (/* binding */ RGATreeSplit),
/* harmony export */   "Selection": () => (/* binding */ Selection)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/splay_tree */ "./src/util/splay_tree.ts");
/* harmony import */ var _util_llrb_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/llrb_tree */ "./src/util/llrb_tree.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * `TextChangeType` is the type of TextChange.
 *
 * @internal
 */
var TextChangeType;
(function (TextChangeType) {
    TextChangeType["Content"] = "content";
    TextChangeType["Selection"] = "selection";
    TextChangeType["Style"] = "style";
})(TextChangeType || (TextChangeType = {}));
/**
 * `RGATreeSplitNodeID` is an ID of RGATreeSplitNode.
 */
class RGATreeSplitNodeID {
    constructor(createdAt, offset) {
        this.createdAt = createdAt;
        this.offset = offset;
    }
    /**
     * `of` creates a instance of RGATreeSplitNodeID.
     */
    static of(createdAt, offset) {
        return new RGATreeSplitNodeID(createdAt, offset);
    }
    /**
     * `getCreatedAt` returns the creation time of this ID.
     */
    getCreatedAt() {
        return this.createdAt;
    }
    /**
     * `getOffset` returns returns the offset of this ID.
     */
    getOffset() {
        return this.offset;
    }
    /**
     * `equals` returns whether given ID equals to this ID or not.
     */
    equals(other) {
        return (this.createdAt.compare(other.createdAt) === 0 &&
            this.offset === other.offset);
    }
    /**
     * `hasSameCreatedAt` returns whether given ID has same creation time with this ID.
     */
    hasSameCreatedAt(other) {
        return this.createdAt.compare(other.createdAt) === 0;
    }
    /**
     * `split` creates a new ID with an offset from this ID.
     */
    split(offset) {
        return new RGATreeSplitNodeID(this.createdAt, this.offset + offset);
    }
    /**
     * `getAnnotatedString` returns a String containing
     * the meta data of the node id for debugging purpose.
     */
    getAnnotatedString() {
        return `${this.createdAt.getAnnotatedString()}:${this.offset}`;
    }
}
const InitialRGATreeSplitNodeID = RGATreeSplitNodeID.of(_time_ticket__WEBPACK_IMPORTED_MODULE_3__.InitialTimeTicket, 0);
/**
 * `RGATreeSplitNodePos` is the position of the text inside the node.
 */
class RGATreeSplitNodePos {
    constructor(id, relativeOffset) {
        this.id = id;
        this.relativeOffset = relativeOffset;
    }
    /**
     * `of` creates a instance of RGATreeSplitNodePos.
     */
    static of(id, relativeOffset) {
        return new RGATreeSplitNodePos(id, relativeOffset);
    }
    /**
     * `getID` returns the ID of this RGATreeSplitNodePos.
     */
    getID() {
        return this.id;
    }
    /**
     * `getRelativeOffset` returns the relative offset of this RGATreeSplitNodePos.
     */
    getRelativeOffset() {
        return this.relativeOffset;
    }
    /**
     * `getAbsoluteID` returns the absolute id of this RGATreeSplitNodePos.
     */
    getAbsoluteID() {
        return RGATreeSplitNodeID.of(this.id.getCreatedAt(), this.id.getOffset() + this.relativeOffset);
    }
    /**
     *`getAnnotatedString` returns a String containing
     * the meta data of the position for debugging purpose.
     */
    getAnnotatedString() {
        return `${this.id.getAnnotatedString()}:${this.relativeOffset}`;
    }
    /**
     * `equals` returns whether given pos equal to this pos or not.
     */
    equals(other) {
        if (!this.id.equals(other.id)) {
            return false;
        }
        return this.relativeOffset === other.relativeOffset;
    }
}
/**
 * `RGATreeSplitNode` is a node of RGATreeSplit.
 */
class RGATreeSplitNode extends _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__.SplayNode {
    constructor(id, value, removedAt) {
        super(value);
        this.id = id;
        this.removedAt = removedAt;
    }
    /**
     * `create` creates a instance of RGATreeSplitNode.
     */
    static create(id, value) {
        return new RGATreeSplitNode(id, value);
    }
    /**
     * `createComparator` creates a function to compare two RGATreeSplitNodeID.
     */
    static createComparator() {
        return (p1, p2) => {
            const compare = p1.getCreatedAt().compare(p2.getCreatedAt());
            if (compare !== 0) {
                return compare;
            }
            if (p1.getOffset() > p2.getOffset()) {
                return 1;
            }
            else if (p1.getOffset() < p2.getOffset()) {
                return -1;
            }
            return 0;
        };
    }
    /**
     * `getID` returns the ID of this RGATreeSplitNode.
     */
    getID() {
        return this.id;
    }
    /**
     * `getCreatedAt` returns creation time of the Id of RGATreeSplitNode.
     */
    getCreatedAt() {
        return this.id.getCreatedAt();
    }
    /**
     * `getLength` returns the length of this node.
     */
    getLength() {
        if (this.removedAt) {
            return 0;
        }
        return this.getContentLength();
    }
    /**
     * `getContentLength` returns the length of this value.
     */
    getContentLength() {
        return (this.value && this.value.length) || 0;
    }
    /**
     * `getPrev` returns a previous node of this node.
     */
    getPrev() {
        return this.prev;
    }
    /**
     * `getNext` returns a next node of this node.
     */
    getNext() {
        return this.next;
    }
    /**
     * `getInsPrev` returns a previous node of this node insertion.
     */
    getInsPrev() {
        return this.insPrev;
    }
    /**
     * `getInsNext` returns a next node of this node insertion.
     */
    getInsNext() {
        return this.insNext;
    }
    /**
     * `getInsPrevID` returns a ID of previous node insertion.
     */
    getInsPrevID() {
        return this.insPrev.getID();
    }
    /**
     * `setPrev` sets previous node of this node.
     */
    setPrev(node) {
        this.prev = node;
        if (node) {
            node.next = this;
        }
    }
    /**
     * `setNext` sets next node of this node.
     */
    setNext(node) {
        this.next = node;
        if (node) {
            node.prev = this;
        }
    }
    /**
     * `setInsPrev` sets previous node of this node insertion.
     */
    setInsPrev(node) {
        this.insPrev = node;
        if (node) {
            node.insNext = this;
        }
    }
    /**
     * `setInsNext` sets next node of this node insertion.
     */
    setInsNext(node) {
        this.insNext = node;
        if (node) {
            node.insPrev = this;
        }
    }
    /**
     * `hasNext` checks if next node exists.
     */
    hasNext() {
        return !!this.next;
    }
    /**
     * `hasInsPrev` checks if previous insertion node exists.
     */
    hasInsPrev() {
        return !!this.insPrev;
    }
    /**
     * `isRemoved` checks if removed time exists.
     */
    isRemoved() {
        return !!this.removedAt;
    }
    /**
     * `getRemovedAt` returns the remove time of this node.
     */
    getRemovedAt() {
        return this.removedAt;
    }
    /**
     * `split` creates a new split node of the given offset.
     */
    split(offset) {
        return new RGATreeSplitNode(this.id.split(offset), this.splitValue(offset));
    }
    /**
     * `canDelete` checks if node is able to delete.
     */
    canDelete(editedAt, latestCreatedAt) {
        return (!this.getCreatedAt().after(latestCreatedAt) &&
            (!this.removedAt || editedAt.after(this.removedAt)));
    }
    /**
     * `remove` removes node of given edited time.
     */
    remove(editedAt) {
        this.removedAt = editedAt;
    }
    /**
     * `createRange` creates ranges of RGATreeSplitNodePos.
     */
    createRange() {
        return [
            RGATreeSplitNodePos.of(this.id, 0),
            RGATreeSplitNodePos.of(this.id, this.getLength()),
        ];
    }
    /**
     * `deepcopy` returns a new instance of this RGATreeSplitNode without structural info.
     */
    deepcopy() {
        return new RGATreeSplitNode(this.id, this.value, this.removedAt);
    }
    /**
     * `getAnnotatedString` returns a String containing
     * the meta data of the node for debugging purpose.
     */
    getAnnotatedString() {
        return `${this.id.getAnnotatedString()} ${this.value ? this.value : ''}`;
    }
    splitValue(offset) {
        const value = this.value;
        this.value = value.substring(0, offset);
        return value.substring(offset, value.length);
    }
}
/**
 * `RGATreeSplit` is a block-based list with improved index-based lookup in RGA.
 * The difference from RGATreeList is that it has data on a block basis to
 * reduce the size of CRDT metadata. When an edit occurs on a block,
 * the block is split.
 *
 * @internal
 */
class RGATreeSplit {
    constructor() {
        this.head = RGATreeSplitNode.create(InitialRGATreeSplitNodeID);
        this.treeByIndex = new _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__.SplayTree();
        this.treeByID = new _util_llrb_tree__WEBPACK_IMPORTED_MODULE_2__.LLRBTree(RGATreeSplitNode.createComparator());
        this.removedNodeMap = new Map();
        this.treeByIndex.insert(this.head);
        this.treeByID.put(this.head.getID(), this.head);
    }
    /**
     * `create` creates a instance RGATreeSplit.
     */
    static create() {
        return new RGATreeSplit();
    }
    /**
     * `edit` does following steps
     * 1. split nodes with from and to
     * 2. delete between from and to
     * 3. insert a new node
     * 4. add removed node
     * @param range - range of RGATreeSplitNode
     * @param editedAt - edited time
     * @param value - value
     * @param latestCreatedAtMapByActor - latestCreatedAtMapByActor
     * @returns `[RGATreeSplitNodePos, Map<string, TimeTicket>, Array<Change>]`
     */
    edit(range, editedAt, value, latestCreatedAtMapByActor) {
        // 01. split nodes with from and to
        const [toLeft, toRight] = this.findNodeWithSplit(range[1], editedAt);
        const [fromLeft, fromRight] = this.findNodeWithSplit(range[0], editedAt);
        // 02. delete between from and to
        const nodesToDelete = this.findBetween(fromRight, toRight);
        const [changes, latestCreatedAtMap, removedNodeMapByNodeKey] = this.deleteNodes(nodesToDelete, editedAt, latestCreatedAtMapByActor);
        const caretID = toRight ? toRight.getID() : toLeft.getID();
        let caretPos = RGATreeSplitNodePos.of(caretID, 0);
        // 03. insert a new node
        if (value) {
            const idx = this.findIdxFromNodePos(fromLeft.createRange()[1], true);
            const inserted = this.insertAfter(fromLeft, RGATreeSplitNode.create(RGATreeSplitNodeID.of(editedAt, 0), value));
            changes.push({
                type: TextChangeType.Content,
                actor: editedAt.getActorID(),
                from: idx,
                to: idx,
                content: value.toString(),
            });
            caretPos = RGATreeSplitNodePos.of(inserted.getID(), inserted.getContentLength());
        }
        // 04. add removed node
        for (const [key, removedNode] of removedNodeMapByNodeKey) {
            this.removedNodeMap.set(key, removedNode);
        }
        return [caretPos, latestCreatedAtMap, changes];
    }
    /**
     * `findNodePos` finds RGATreeSplitNodePos of given offset.
     */
    findNodePos(idx) {
        const [node, offset] = this.treeByIndex.find(idx);
        const splitNode = node;
        return RGATreeSplitNodePos.of(splitNode.getID(), offset);
    }
    /**
     * `findIndexesFromRange` finds indexes based on range.
     */
    findIndexesFromRange(range) {
        const [fromPos, toPos] = range;
        return [
            this.findIdxFromNodePos(fromPos, false),
            this.findIdxFromNodePos(toPos, true),
        ];
    }
    /**
     * `findIdxFromNodePos` finds index based on node position.
     */
    findIdxFromNodePos(pos, preferToLeft) {
        const absoluteID = pos.getAbsoluteID();
        const node = preferToLeft
            ? this.findFloorNodePreferToLeft(absoluteID)
            : this.findFloorNode(absoluteID);
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`the node of the given id should be found: ${absoluteID.getAnnotatedString()}`);
        }
        const index = this.treeByIndex.indexOf(node);
        const offset = node.isRemoved()
            ? 0
            : absoluteID.getOffset() - node.getID().getOffset();
        return index + offset;
    }
    /**
     * `findNode` finds node of given id.
     */
    findNode(id) {
        return this.findFloorNode(id);
    }
    /**
     * `toJSON` returns the JSON encoding of this Array.
     */
    toJSON() {
        const json = [];
        for (const node of this) {
            if (!node.isRemoved()) {
                json.push(node.getValue());
            }
        }
        return json.join('');
    }
    // eslint-disable-next-line jsdoc/require-jsdoc
    *[Symbol.iterator]() {
        let node = this.head.getNext();
        while (node) {
            yield node;
            node = node.getNext();
        }
    }
    /**
     * `getHead` returns head of RGATreeSplitNode.
     */
    getHead() {
        return this.head;
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const clone = new RGATreeSplit();
        let node = this.head.getNext();
        let prev = clone.head;
        let current;
        while (node) {
            current = clone.insertAfter(prev, node.deepcopy());
            if (node.hasInsPrev()) {
                const insPrevNode = clone.findNode(node.getInsPrevID());
                current.setInsPrev(insPrevNode);
            }
            prev = current;
            node = node.getNext();
        }
        return clone;
    }
    /**
     * `getAnnotatedString` returns a String containing the meta data of the node
     * for debugging purpose.
     */
    getAnnotatedString() {
        const result = [];
        let node = this.head;
        while (node) {
            if (node.isRemoved()) {
                result.push(`{${node.getAnnotatedString()}}`);
            }
            else {
                result.push(`[${node.getAnnotatedString()}]`);
            }
            node = node.getNext();
        }
        return result.join('');
    }
    /**
     * `insertAfter` inserts the given node after the given previous node.
     */
    insertAfter(prevNode, newNode) {
        const next = prevNode.getNext();
        newNode.setPrev(prevNode);
        if (next) {
            next.setPrev(newNode);
        }
        this.treeByID.put(newNode.getID(), newNode);
        this.treeByIndex.insertAfter(prevNode, newNode);
        return newNode;
    }
    /**
     * `findNodeWithSplit` splits and return nodes of the given position.
     */
    findNodeWithSplit(pos, editedAt) {
        const absoluteID = pos.getAbsoluteID();
        let node = this.findFloorNodePreferToLeft(absoluteID);
        const relativeOffset = absoluteID.getOffset() - node.getID().getOffset();
        this.splitNode(node, relativeOffset);
        while (node.hasNext() && node.getNext().getCreatedAt().after(editedAt)) {
            node = node.getNext();
        }
        return [node, node.getNext()];
    }
    findFloorNodePreferToLeft(id) {
        let node = this.findFloorNode(id);
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`the node of the given id should be found: ${id.getAnnotatedString()}`);
        }
        if (id.getOffset() > 0 && node.getID().getOffset() == id.getOffset()) {
            // NOTE: InsPrev may not be present due to GC.
            if (!node.hasInsPrev()) {
                return node;
            }
            node = node.getInsPrev();
        }
        return node;
    }
    findFloorNode(id) {
        const entry = this.treeByID.floorEntry(id);
        if (!entry) {
            return;
        }
        if (!entry.key.equals(id) && !entry.key.hasSameCreatedAt(id)) {
            return;
        }
        return entry.value;
    }
    /**
     * `findBetween` returns nodes between fromNode and toNode.
     */
    findBetween(fromNode, toNode) {
        const nodes = [];
        let current = fromNode;
        while (current && current !== toNode) {
            nodes.push(current);
            current = current.getNext();
        }
        return nodes;
    }
    splitNode(node, offset) {
        if (offset > node.getContentLength()) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('offset should be less than or equal to length');
        }
        if (offset === 0) {
            return node;
        }
        else if (offset === node.getContentLength()) {
            return node.getNext();
        }
        const splitNode = node.split(offset);
        this.treeByIndex.updateSubtree(splitNode);
        this.insertAfter(node, splitNode);
        const insNext = node.getInsNext();
        if (insNext) {
            insNext.setInsPrev(splitNode);
        }
        splitNode.setInsPrev(node);
        return splitNode;
    }
    deleteNodes(candidates, editedAt, latestCreatedAtMapByActor) {
        const isRemote = !!latestCreatedAtMapByActor;
        const changes = [];
        const createdAtMapByActor = new Map();
        const removedNodeMap = new Map();
        const nodesToDelete = [];
        // NOTE: We need to collect indexes for change first then delete the nodes.
        for (const node of candidates) {
            const actorID = node.getCreatedAt().getActorID();
            const latestCreatedAt = isRemote
                ? latestCreatedAtMapByActor.has(actorID)
                    ? latestCreatedAtMapByActor.get(actorID)
                    : _time_ticket__WEBPACK_IMPORTED_MODULE_3__.InitialTimeTicket
                : _time_ticket__WEBPACK_IMPORTED_MODULE_3__.MaxTimeTicket;
            // Delete nodes created before the latest time remaining in the replica that performed the deletion.
            if (node.canDelete(editedAt, latestCreatedAt)) {
                nodesToDelete.push(node);
                if (!node.isRemoved()) {
                    const [fromIdx, toIdx] = this.findIndexesFromRange(node.createRange());
                    const change = {
                        type: TextChangeType.Content,
                        actor: editedAt.getActorID(),
                        from: fromIdx,
                        to: toIdx,
                    };
                    // Reduce adjacent deletions: i.g) [(1, 2), (2, 3)] => [(1, 3)]
                    if (changes.length && changes[0].to === change.from) {
                        changes[0].to = change.to;
                    }
                    else {
                        changes.unshift(change);
                    }
                }
                if (!createdAtMapByActor.has(actorID) ||
                    node.getID().getCreatedAt().after(createdAtMapByActor.get(actorID))) {
                    createdAtMapByActor.set(actorID, node.getID().getCreatedAt());
                }
                removedNodeMap.set(node.getID().getAnnotatedString(), node);
            }
        }
        for (const node of nodesToDelete) {
            node.remove(editedAt);
            this.treeByIndex.splayNode(node);
        }
        return [changes, createdAtMapByActor, removedNodeMap];
    }
    /**
     * `getRemovedNodesLen` returns size of removed nodes.
     */
    getRemovedNodesLen() {
        return this.removedNodeMap.size;
    }
    /**
     * `purgeTextNodesWithGarbage` physically purges nodes that have been removed.
     */
    purgeTextNodesWithGarbage(ticket) {
        let count = 0;
        for (const [, node] of this.removedNodeMap) {
            if (node.getRemovedAt() && ticket.compare(node.getRemovedAt()) >= 0) {
                this.treeByIndex.delete(node);
                this.purge(node);
                this.treeByID.remove(node.getID());
                this.removedNodeMap.delete(node.getID().getAnnotatedString());
                count++;
            }
        }
        return count;
    }
    /**
     * `purge` physically purges the given node from RGATreeSplit.
     */
    purge(node) {
        const prev = node.getPrev();
        const next = node.getNext();
        const insPrev = node.getInsPrev();
        const insNext = node.getInsNext();
        if (prev) {
            prev.setNext(next);
        }
        if (next) {
            next.setPrev(prev);
        }
        node.setPrev(undefined);
        node.setNext(undefined);
        if (insPrev) {
            insPrev.setInsNext(insNext);
        }
        if (insNext) {
            insNext.setInsPrev(insPrev);
        }
        node.setInsPrev(undefined);
        node.setInsNext(undefined);
    }
}
/**
 * `Selection` represents the selection of text range in the editor.
 */
class Selection {
    constructor(from, to, updatedAt) {
        this.from = from;
        this.to = to;
        this.updatedAt = updatedAt;
    }
    /**
     * `of` creates a new instance of Selection.
     */
    static of(range, updatedAt) {
        return new Selection(range[0], range[1], updatedAt);
    }
    /**
     * `getUpdatedAt` returns update time of this selection.
     */
    getUpdatedAt() {
        return this.updatedAt;
    }
}


/***/ }),

/***/ "./src/document/json/rht.ts":
/*!**********************************!*\
  !*** ./src/document/json/rht.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RHTNode": () => (/* binding */ RHTNode),
/* harmony export */   "RHT": () => (/* binding */ RHT)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `RHTNode` is a node of RHT(Replicated Hashtable).
 */
class RHTNode {
    constructor(key, value, updatedAt) {
        this.key = key;
        this.value = value;
        this.updatedAt = updatedAt;
    }
    /**
     * `of` creates a new instance of RHTNode.
     */
    static of(key, value, createdAt) {
        return new RHTNode(key, value, createdAt);
    }
    /**
     * `getKey` returns a key of node.
     */
    getKey() {
        return this.key;
    }
    /**
     * `getValue` returns a value of node.
     */
    getValue() {
        return this.value;
    }
    /**
     * `getUpdatedAt `returns updated time of node.
     */
    getUpdatedAt() {
        return this.updatedAt;
    }
}
/**
 * RHT is replicated hash table by creation time.
 * For more details about RHT: @see http://csl.skku.edu/papers/jpdc11.pdf
 */
class RHT {
    constructor() {
        this.nodeMapByKey = new Map();
        this.nodeMapByCreatedAt = new Map();
    }
    /**
     * `create` creates a new instance of RHT.
     */
    static create() {
        return new RHT();
    }
    /**
     * `set` sets the value of the given key.
     */
    set(key, value, executedAt) {
        const prev = this.nodeMapByKey.get(key);
        if (prev === undefined || executedAt.after(prev.getUpdatedAt())) {
            const node = RHTNode.of(key, value, executedAt);
            this.nodeMapByKey.set(key, node);
            this.nodeMapByCreatedAt.set(executedAt.toIDString(), node);
        }
    }
    /**
     * `has` returns whether the element exists of the given key or not.
     */
    has(key) {
        return this.nodeMapByKey.has(key);
    }
    /**
     * `get` returns the value of the given key.
     */
    get(key) {
        if (!this.nodeMapByKey.has(key)) {
            return;
        }
        return this.nodeMapByKey.get(key).getValue();
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const rht = new RHT();
        for (const [, node] of this.nodeMapByKey) {
            rht.set(node.getKey(), node.getValue(), node.getUpdatedAt());
        }
        return rht;
    }
    /**
     * `toJSON` returns the JSON encoding of this hashtable.
     */
    toJSON() {
        const items = [];
        for (const [key, node] of this.nodeMapByKey) {
            items.push(`"${key}":"${node.getValue()}"`);
        }
        return `{${items.join(',')}}`;
    }
    /**
     * `toObject` returns the object of this hashtable.
     */
    toObject() {
        const obj = {};
        for (const [key, node] of this.nodeMapByKey) {
            obj[key] = node.getValue();
        }
        return obj;
    }
    // eslint-disable-next-line jsdoc/require-jsdoc
    *[Symbol.iterator]() {
        for (const [, node] of this.nodeMapByKey) {
            yield node;
        }
    }
}


/***/ }),

/***/ "./src/document/json/rht_pq_map.ts":
/*!*****************************************!*\
  !*** ./src/document/json/rht_pq_map.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RHTPQMapNode": () => (/* binding */ RHTPQMapNode),
/* harmony export */   "RHTPQMap": () => (/* binding */ RHTPQMap)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_heap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/heap */ "./src/util/heap.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `RHTPQMapNode` is a node of RHTPQMap.
 */
class RHTPQMapNode extends _util_heap__WEBPACK_IMPORTED_MODULE_1__.HeapNode {
    constructor(strKey, value) {
        super(value.getCreatedAt(), value);
        this.strKey = strKey;
    }
    /**
     * `of` creates a instance of RHTPQMapNode.
     */
    static of(strKey, value) {
        return new RHTPQMapNode(strKey, value);
    }
    /**
     * `isRemoved` checks whether this value was removed.
     */
    isRemoved() {
        return this.getValue().isRemoved();
    }
    /**
     * `getStrKey` returns the key of this node.
     */
    getStrKey() {
        return this.strKey;
    }
    /**
     * `remove` removes a value base on removing time.
     */
    remove(removedAt) {
        this.getValue().remove(removedAt);
    }
}
/**
 * RHTPQMap is replicated hash table with priority queue by creation time.
 *
 * @internal
 */
class RHTPQMap {
    constructor() {
        this.elementQueueMapByKey = new Map();
        this.nodeMapByCreatedAt = new Map();
    }
    /**
     * `create` creates a instance of RHTPQMap.
     */
    static create() {
        return new RHTPQMap();
    }
    /**
     * `set` sets the value of the given key.
     */
    set(key, value) {
        let removed;
        const queue = this.elementQueueMapByKey.get(key);
        if (queue && queue.len()) {
            const node = queue.peek();
            if (!node.isRemoved() && node.remove(value.getCreatedAt())) {
                removed = node.getValue();
            }
        }
        this.setInternal(key, value);
        return removed;
    }
    /**
     * `setInternal` sets the value of the given key.
     */
    setInternal(key, value) {
        if (!this.elementQueueMapByKey.has(key)) {
            this.elementQueueMapByKey.set(key, new _util_heap__WEBPACK_IMPORTED_MODULE_1__.Heap(_time_ticket__WEBPACK_IMPORTED_MODULE_2__.TicketComparator));
        }
        const node = RHTPQMapNode.of(key, value);
        this.elementQueueMapByKey.get(key).push(node);
        this.nodeMapByCreatedAt.set(value.getCreatedAt().toIDString(), node);
    }
    /**
     * `delete` deletes deletes the Element of the given key.
     */
    delete(createdAt, executedAt) {
        if (!this.nodeMapByCreatedAt.has(createdAt.toIDString())) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${createdAt.toIDString()}`);
        }
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        node.remove(executedAt);
        return node.getValue();
    }
    /**
     * `keyOf` returns a key of node based on creation time
     */
    keyOf(createdAt) {
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (!node) {
            return;
        }
        return node.getStrKey();
    }
    /**
     * `purge` physically purge child element.
     */
    purge(element) {
        const node = this.nodeMapByCreatedAt.get(element.getCreatedAt().toIDString());
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${element.getCreatedAt().toIDString()}`);
            return;
        }
        const queue = this.elementQueueMapByKey.get(node.getStrKey());
        if (!queue) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find queue of ${element.getCreatedAt().toIDString()}`);
            return;
        }
        queue.release(node);
        this.nodeMapByCreatedAt.delete(node.getValue().getCreatedAt().toIDString());
    }
    /**
     * `deleteByKey` deletes the Element of the given key and removed time.
     */
    deleteByKey(key, removedAt) {
        if (!this.elementQueueMapByKey.has(key)) {
            return;
        }
        const node = this.elementQueueMapByKey.get(key).peek();
        node.remove(removedAt);
        return node.getValue();
    }
    /**
     * `has` returns whether the element exists of the given key or not.
     */
    has(key) {
        if (!this.elementQueueMapByKey.has(key)) {
            return false;
        }
        const node = this.elementQueueMapByKey.get(key).peek();
        return !node.isRemoved();
    }
    /**
     * `get` returns the value of the given key.
     */
    get(key) {
        if (!this.elementQueueMapByKey.has(key)) {
            return;
        }
        return this.elementQueueMapByKey.get(key).peek().getValue();
    }
    // eslint-disable-next-line jsdoc/require-jsdoc
    *[Symbol.iterator]() {
        for (const [, heap] of this.elementQueueMapByKey) {
            for (const node of heap) {
                yield node;
            }
        }
    }
}


/***/ }),

/***/ "./src/document/json/rich_text.ts":
/*!****************************************!*\
  !*** ./src/document/json/rich_text.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RichTextValue": () => (/* binding */ RichTextValue),
/* harmony export */   "RichTextInternal": () => (/* binding */ RichTextInternal)
/* harmony export */ });
/* harmony import */ var _rht__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rht */ "./src/document/json/rht.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `RichTextValue` is a value of RichText
 * which has a attributes that expresses the text style.
 *
 * @internal
 */
class RichTextValue {
    /** @hideconstructor */
    constructor(content) {
        this.attributes = _rht__WEBPACK_IMPORTED_MODULE_0__.RHT.create();
        this.content = content;
    }
    /**
     * `create` creates a instance of RichTextValue.
     */
    static create(content) {
        return new RichTextValue(content);
    }
    /**
     * `length` returns the length of content.
     */
    get length() {
        return this.content.length;
    }
    /**
     * `substring` returns a sub-string value of the given range.
     */
    substring(indexStart, indexEnd) {
        const value = new RichTextValue(this.content.substring(indexStart, indexEnd));
        value.attributes = this.attributes.deepcopy();
        return value;
    }
    /**
     * `setAttr` sets attribute of the given key, updated time and value.
     */
    setAttr(key, value, updatedAt) {
        this.attributes.set(key, value, updatedAt);
    }
    /**
     * `toString` returns content.
     */
    toString() {
        return this.content;
    }
    /**
     * `toJSON` returns the JSON encoding of this .
     */
    toJSON() {
        return `{"attrs":${this.attributes.toJSON()},"content":${this.content}}`;
    }
    /**
     * `getAttributes` returns the attributes of this value.
     */
    getAttributes() {
        return this.attributes.toObject();
    }
    /**
     * `getContent` returns content.
     */
    getContent() {
        return this.content;
    }
}
/**
 *  `RichTextInternal` is an extended data type for the contents of a text editor.
 *
 * @internal
 */
class RichTextInternal extends _element__WEBPACK_IMPORTED_MODULE_1__.TextElement {
    constructor(rgaTreeSplit, createdAt) {
        super(createdAt);
        this.rgaTreeSplit = rgaTreeSplit;
        this.selectionMap = new Map();
        this.remoteChangeLock = false;
    }
    /**
     * `create` a instance of RichText.
     */
    static create(rgaTreeSplit, createdAt) {
        const text = new RichTextInternal(rgaTreeSplit, createdAt);
        const range = text.createRange(0, 0);
        text.editInternal(range, '\n', createdAt);
        return text;
    }
    /**
     * `editInternal` edits the given range with the given content and attributes.
     *
     * @internal
     */
    editInternal(range, content, editedAt, attributes, latestCreatedAtMapByActor) {
        const value = content ? RichTextValue.create(content) : undefined;
        if (content && attributes) {
            for (const [k, v] of Object.entries(attributes)) {
                value.setAttr(k, v, editedAt);
            }
        }
        const [caretPos, latestCreatedAtMap, changes] = this.rgaTreeSplit.edit(range, editedAt, value, latestCreatedAtMapByActor);
        if (content && attributes) {
            const change = changes[changes.length - 1];
            change.attributes = attributes;
        }
        const selectionChange = this.selectPriv([caretPos, caretPos], editedAt);
        if (selectionChange) {
            changes.push(selectionChange);
        }
        if (this.onChangesHandler) {
            this.remoteChangeLock = true;
            this.onChangesHandler(changes);
            this.remoteChangeLock = false;
        }
        return latestCreatedAtMap;
    }
    /**
     * `setStyleInternal` applies the style of the given range.
     * 01. split nodes with from and to
     * 02. style nodes between from and to
     *
     * @param range - range of RGATreeSplitNode
     * @param attributes - style attributes
     * @param editedAt - edited time
     * @internal
     */
    setStyleInternal(range, attributes, editedAt) {
        // 01. split nodes with from and to
        const [, toRight] = this.rgaTreeSplit.findNodeWithSplit(range[1], editedAt);
        const [, fromRight] = this.rgaTreeSplit.findNodeWithSplit(range[0], editedAt);
        // 02. style nodes between from and to
        const changes = [];
        const nodes = this.rgaTreeSplit.findBetween(fromRight, toRight);
        for (const node of nodes) {
            if (node.isRemoved()) {
                continue;
            }
            const [fromIdx, toIdx] = this.rgaTreeSplit.findIndexesFromRange(node.createRange());
            changes.push({
                type: _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__.TextChangeType.Style,
                actor: editedAt.getActorID(),
                from: fromIdx,
                to: toIdx,
                attributes,
            });
            for (const [key, value] of Object.entries(attributes)) {
                node.getValue().setAttr(key, value, editedAt);
            }
        }
        if (this.onChangesHandler) {
            this.remoteChangeLock = true;
            this.onChangesHandler(changes);
            this.remoteChangeLock = false;
        }
    }
    /**
     * `selectInternal` stores that the given range has been selected.
     *
     * @internal
     */
    selectInternal(range, updatedAt) {
        if (this.remoteChangeLock) {
            return;
        }
        const change = this.selectPriv(range, updatedAt);
        if (this.onChangesHandler && change) {
            this.remoteChangeLock = true;
            this.onChangesHandler([change]);
            this.remoteChangeLock = false;
        }
    }
    /**
     * `hasRemoteChangeLock` checks whether remoteChangeLock has.
     */
    hasRemoteChangeLock() {
        return this.remoteChangeLock;
    }
    /**
     * `onChanges` registers a handler of onChanges event.
     */
    onChanges(handler) {
        this.onChangesHandler = handler;
    }
    /**
     * `createRange` returns pair of RGATreeSplitNodePos of the given integer offsets.
     */
    createRange(fromIdx, toIdx) {
        const fromPos = this.rgaTreeSplit.findNodePos(fromIdx);
        if (fromIdx === toIdx) {
            return [fromPos, fromPos];
        }
        return [fromPos, this.rgaTreeSplit.findNodePos(toIdx)];
    }
    /**
     * `toJSON` returns the JSON encoding of this rich text.
     */
    toJSON() {
        const json = [];
        for (const node of this.rgaTreeSplit) {
            if (!node.isRemoved()) {
                json.push(node.getValue().toJSON());
            }
        }
        return `[${json.join(',')}]`;
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of this rich text.
     */
    toSortedJSON() {
        return this.toJSON();
    }
    /**
     * `values` returns value array of this RichTextVal.
     */
    values() {
        const values = [];
        for (const node of this.rgaTreeSplit) {
            if (!node.isRemoved()) {
                const value = node.getValue();
                values.push({
                    attributes: value.getAttributes(),
                    content: value.getContent(),
                });
            }
        }
        return values;
    }
    /**
     * `getRGATreeSplit` returns rgaTreeSplit.
     *
     * @internal
     */
    getRGATreeSplit() {
        return this.rgaTreeSplit;
    }
    /**
     * `getAnnotatedString` returns a String containing the meta data of this value
     * for debugging purpose.
     */
    getAnnotatedString() {
        return this.rgaTreeSplit.getAnnotatedString();
    }
    /**
     * `getRemovedNodesLen` returns length of removed nodes
     */
    getRemovedNodesLen() {
        return this.rgaTreeSplit.getRemovedNodesLen();
    }
    /**
     * `purgeTextNodesWithGarbage` physically purges nodes that have been removed.
     *
     * @internal
     */
    purgeTextNodesWithGarbage(ticket) {
        return this.rgaTreeSplit.purgeTextNodesWithGarbage(ticket);
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        const text = new RichTextInternal(this.rgaTreeSplit.deepcopy(), this.getCreatedAt());
        text.remove(this.getRemovedAt());
        return text;
    }
    selectPriv(range, updatedAt) {
        if (!this.selectionMap.has(updatedAt.getActorID())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__.Selection.of(range, updatedAt));
            return;
        }
        const prevSelection = this.selectionMap.get(updatedAt.getActorID());
        if (updatedAt.after(prevSelection.getUpdatedAt())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__.Selection.of(range, updatedAt));
            const [from, to] = this.rgaTreeSplit.findIndexesFromRange(range);
            return {
                type: _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__.TextChangeType.Selection,
                actor: updatedAt.getActorID(),
                from,
                to,
            };
        }
    }
}


/***/ }),

/***/ "./src/document/json/root.ts":
/*!***********************************!*\
  !*** ./src/document/json/root.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JSONRoot": () => (/* binding */ JSONRoot)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object */ "./src/document/json/object.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * `JSONRoot` is a structure represents the root of JSON. It has a hash table of
 * all JSON elements to find a specific element when applying remote changes
 * received from server.
 *
 * Every element has a unique time ticket at creation, which allows us to find
 * a particular element.
 */
class JSONRoot {
    constructor(rootObject) {
        this.rootObject = rootObject;
        this.elementPairMapByCreatedAt = new Map();
        this.removedElementSetByCreatedAt = new Set();
        this.textWithGarbageSetByCreatedAt = new Set();
        this.elementPairMapByCreatedAt.set(this.rootObject.getCreatedAt().toIDString(), { element: this.rootObject });
        rootObject.getDescendants((elem, parent) => {
            this.registerElement(elem, parent);
            return false;
        });
    }
    /**
     * `create` creates a new instance of Root.
     */
    static create() {
        return new JSONRoot(_object__WEBPACK_IMPORTED_MODULE_3__.ObjectInternal.create(_time_ticket__WEBPACK_IMPORTED_MODULE_1__.InitialTimeTicket));
    }
    /**
     * `findByCreatedAt` returns the element of given creation time.
     */
    findByCreatedAt(createdAt) {
        const pair = this.elementPairMapByCreatedAt.get(createdAt.toIDString());
        if (!pair) {
            return;
        }
        return pair.element;
    }
    /**
     * `createPath` creates path of the given element.
     */
    createPath(createdAt) {
        let pair = this.elementPairMapByCreatedAt.get(createdAt.toIDString());
        if (!pair) {
            return;
        }
        const keys = [];
        while (pair.parent) {
            const createdAt = pair.element.getCreatedAt();
            let key = pair.parent.keyOf(createdAt);
            if (key === undefined) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`cant find the given element: ${createdAt.toIDString()}`);
            }
            else {
                key = key.replace(/[$.]/g, '\\$&');
            }
            keys.unshift(key);
            pair = this.elementPairMapByCreatedAt.get(pair.parent.getCreatedAt().toIDString());
        }
        keys.unshift('$');
        return keys.join('.');
    }
    /**
     * `registerElement` registers the given element to hash table.
     */
    registerElement(element, parent) {
        this.elementPairMapByCreatedAt.set(element.getCreatedAt().toIDString(), {
            parent,
            element,
        });
    }
    /**
     * `deregisterElement` deregister the given element from hash table.
     */
    deregisterElement(element) {
        this.elementPairMapByCreatedAt.delete(element.getCreatedAt().toIDString());
        this.removedElementSetByCreatedAt.delete(element.getCreatedAt().toIDString());
    }
    /**
     * `registerRemovedElement` registers the given element to hash table.
     */
    registerRemovedElement(element) {
        this.removedElementSetByCreatedAt.add(element.getCreatedAt().toIDString());
    }
    /**
     * `registerTextWithGarbage` registers the given text to hash set.
     */
    registerTextWithGarbage(text) {
        this.textWithGarbageSetByCreatedAt.add(text.getCreatedAt().toIDString());
    }
    /**
     * `getElementMapSize` returns the size of element map.
     */
    getElementMapSize() {
        return this.elementPairMapByCreatedAt.size;
    }
    /**
     * `getRemovedElementSetSize()` returns the size of removed element set.
     */
    getRemovedElementSetSize() {
        return this.removedElementSetByCreatedAt.size;
    }
    /**
     * `getObject` returns root object.
     */
    getObject() {
        return this.rootObject;
    }
    /**
     * `getGarbageLen` returns length of nodes which should garbage collection task
     */
    getGarbageLen() {
        let count = 0;
        for (const createdAt of this.removedElementSetByCreatedAt) {
            count++;
            const pair = this.elementPairMapByCreatedAt.get(createdAt);
            if (pair.element instanceof _element__WEBPACK_IMPORTED_MODULE_2__.JSONContainer) {
                pair.element.getDescendants(() => {
                    count++;
                    return false;
                });
            }
        }
        for (const createdAt of this.textWithGarbageSetByCreatedAt) {
            const pair = this.elementPairMapByCreatedAt.get(createdAt);
            const text = pair.element;
            count += text.getRemovedNodesLen();
        }
        return count;
    }
    /**
     * `deepcopy` copies itself deeply.
     */
    deepcopy() {
        return new JSONRoot(this.rootObject.deepcopy());
    }
    /**
     * `garbageCollect` purges elements that were removed before the given time.
     */
    garbageCollect(ticket) {
        let count = 0;
        for (const createdAt of this.removedElementSetByCreatedAt) {
            const pair = this.elementPairMapByCreatedAt.get(createdAt);
            if (pair.element.getRemovedAt() &&
                ticket.compare(pair.element.getRemovedAt()) >= 0) {
                pair.parent.purge(pair.element);
                count += this.garbageCollectInternal(pair.element);
            }
        }
        for (const createdAt of this.textWithGarbageSetByCreatedAt) {
            const pair = this.elementPairMapByCreatedAt.get(createdAt);
            const text = pair.element;
            const removedNodeCnt = text.purgeTextNodesWithGarbage(ticket);
            if (removedNodeCnt > 0) {
                this.textWithGarbageSetByCreatedAt.delete(text.getCreatedAt().toIDString());
            }
            count += removedNodeCnt;
        }
        return count;
    }
    garbageCollectInternal(element) {
        let count = 0;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const callback = (elem, parent) => {
            this.deregisterElement(elem);
            count++;
            return false;
        };
        callback(element);
        if (element instanceof _element__WEBPACK_IMPORTED_MODULE_2__.JSONContainer) {
            element.getDescendants(callback);
        }
        return count;
    }
    /**
     * `toJSON` returns the JSON encoding of this root object.
     */
    toJSON() {
        return this.rootObject.toJSON();
    }
    /**
     * `toSortedJSON` returns the sorted JSON encoding of this root object.
     */
    toSortedJSON() {
        return this.rootObject.toSortedJSON();
    }
}


/***/ }),

/***/ "./src/document/operation/add_operation.ts":
/*!*************************************************!*\
  !*** ./src/document/operation/add_operation.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddOperation": () => (/* binding */ AddOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `AddOperation` is an operation representing adding an element to an Array.
 */
class AddOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__.Operation {
    constructor(parentCreatedAt, prevCreatedAt, value, executedAt) {
        super(parentCreatedAt, executedAt);
        this.prevCreatedAt = prevCreatedAt;
        this.value = value;
    }
    /**
     * `create` creates a new instance of AddOperation.
     */
    static create(parentCreatedAt, prevCreatedAt, value, executedAt) {
        return new AddOperation(parentCreatedAt, prevCreatedAt, value, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_array__WEBPACK_IMPORTED_MODULE_1__.ArrayInternal) {
            const array = parentObject;
            const value = this.value.deepcopy();
            array.insertAfter(this.prevCreatedAt, value);
            root.registerElement(value, array);
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only array can execute add`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.value.getCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.ADD`;
    }
    /**
     * `getPrevCreatedAt` returns the creation time of previous element.
     */
    getPrevCreatedAt() {
        return this.prevCreatedAt;
    }
    /**
     * `getValue` returns the value of this operation.
     */
    getValue() {
        return this.value;
    }
}


/***/ }),

/***/ "./src/document/operation/edit_operation.ts":
/*!**************************************************!*\
  !*** ./src/document/operation/edit_operation.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditOperation": () => (/* binding */ EditOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_plain_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/plain_text */ "./src/document/json/plain_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `EditOperation` is an operation representing editing Text.
 */
class EditOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__.Operation {
    constructor(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
        this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;
        this.content = content;
    }
    /**
     * `create` creates a new instance of EditOperation.
     */
    static create(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, executedAt) {
        return new EditOperation(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_plain_text__WEBPACK_IMPORTED_MODULE_1__.PlainTextInternal) {
            const text = parentObject;
            text.editInternal([this.fromPos, this.toPos], this.content, this.getExecutedAt(), this.maxCreatedAtMapByActor);
            if (!this.fromPos.equals(this.toPos)) {
                root.registerTextWithGarbage(text);
            }
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only PlainText can execute edit`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.getParentCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        const content = this.content;
        return `${parent}.EDIT(${fromPos},${toPos},${content})`;
    }
    /**
     * `getFromPos` returns the start point of the editing range.
     */
    getFromPos() {
        return this.fromPos;
    }
    /**
     * `getToPos` returns the end point of the editing range.
     */
    getToPos() {
        return this.toPos;
    }
    /**
     * `getContent` returns the content of Edit.
     */
    getContent() {
        return this.content;
    }
    /**
     * `getMaxCreatedAtMapByActor` returns the map that stores the latest creation time
     * by actor for the nodes included in the editing range.
     */
    getMaxCreatedAtMapByActor() {
        return this.maxCreatedAtMapByActor;
    }
}


/***/ }),

/***/ "./src/document/operation/increase_operation.ts":
/*!******************************************************!*\
  !*** ./src/document/operation/increase_operation.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IncreaseOperation": () => (/* binding */ IncreaseOperation)
/* harmony export */ });
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_counter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/counter */ "./src/document/json/counter.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `IncreaseOperation` represents an operation that increments a numeric value to Counter.
 * Among Primitives, numeric types Integer, Long, and Double are used as values.
 */
class IncreaseOperation extends _operation__WEBPACK_IMPORTED_MODULE_0__.Operation {
    constructor(parentCreatedAt, value, executedAt) {
        super(parentCreatedAt, executedAt);
        this.value = value;
    }
    /**
     * `create` creates a new instance of IncreaseOperation.
     */
    static create(parentCreatedAt, value, executedAt) {
        return new IncreaseOperation(parentCreatedAt, value, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_counter__WEBPACK_IMPORTED_MODULE_2__.CounterInternal) {
            const counter = parentObject;
            const value = this.value.deepcopy();
            counter.increase(value);
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_1__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_1__.logger.fatal(`fail to execute, only Counter can execute increase`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.getParentCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.INCREASE`;
    }
    /**
     * `getValue` returns the value of this operation.
     */
    getValue() {
        return this.value;
    }
}


/***/ }),

/***/ "./src/document/operation/move_operation.ts":
/*!**************************************************!*\
  !*** ./src/document/operation/move_operation.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MoveOperation": () => (/* binding */ MoveOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `MoveOperation` is an operation representing moving an element to an Array.
 */
class MoveOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__.Operation {
    constructor(parentCreatedAt, prevCreatedAt, createdAt, executedAt) {
        super(parentCreatedAt, executedAt);
        this.prevCreatedAt = prevCreatedAt;
        this.createdAt = createdAt;
    }
    /**
     * `create` creates a new instance of MoveOperation.
     */
    static create(parentCreatedAt, prevCreatedAt, createdAt, executedAt) {
        return new MoveOperation(parentCreatedAt, prevCreatedAt, createdAt, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_array__WEBPACK_IMPORTED_MODULE_1__.ArrayInternal) {
            const array = parentObject;
            array.moveAfter(this.prevCreatedAt, this.createdAt, this.getExecutedAt());
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only array can execute add`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.createdAt;
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.MOV`;
    }
    /**
     * `getPrevCreatedAt` returns the creation time of previous element.
     */
    getPrevCreatedAt() {
        return this.prevCreatedAt;
    }
    /**
     * `getCreatedAt` returns the creation time of the target element.
     */
    getCreatedAt() {
        return this.createdAt;
    }
}


/***/ }),

/***/ "./src/document/operation/operation.ts":
/*!*********************************************!*\
  !*** ./src/document/operation/operation.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Operation": () => (/* binding */ Operation)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `Operation` represents an operation to be executed on a document.
 */
class Operation {
    constructor(parentCreatedAt, executedAt) {
        this.parentCreatedAt = parentCreatedAt;
        this.executedAt = executedAt;
    }
    /**
     * `getParentCreatedAt` returns the creation time of the target element to
     * execute the operation.
     */
    getParentCreatedAt() {
        return this.parentCreatedAt;
    }
    /**
     * `getExecutedAt` returns execution time of this operation.
     */
    getExecutedAt() {
        return this.executedAt;
    }
    /**
     * `setActor` sets the given actor to this operation.
     */
    setActor(actorID) {
        this.executedAt = this.executedAt.setActor(actorID);
    }
}


/***/ }),

/***/ "./src/document/operation/remove_operation.ts":
/*!****************************************************!*\
  !*** ./src/document/operation/remove_operation.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RemoveOperation": () => (/* binding */ RemoveOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/* harmony import */ var _json_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/element */ "./src/document/json/element.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `RemoveOperation` is an operation representing removes an element from Container.
 */
class RemoveOperation extends _operation__WEBPACK_IMPORTED_MODULE_1__.Operation {
    constructor(parentCreatedAt, createdAt, executedAt) {
        super(parentCreatedAt, executedAt);
        this.createdAt = createdAt;
    }
    /**
     * `create` creates a new instance of RemoveOperation.
     */
    static create(parentCreatedAt, createdAt, executedAt) {
        return new RemoveOperation(parentCreatedAt, createdAt, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_element__WEBPACK_IMPORTED_MODULE_2__.JSONContainer) {
            const obj = parentObject;
            const elem = obj.delete(this.createdAt, this.getExecutedAt());
            root.registerRemovedElement(elem);
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`only object and array can execute remove: ${parentObject}`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.getParentCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.REMOVE`;
    }
    /**
     * `getCreatedAt` returns the creation time of the target element.
     */
    getCreatedAt() {
        return this.createdAt;
    }
}


/***/ }),

/***/ "./src/document/operation/rich_edit_operation.ts":
/*!*******************************************************!*\
  !*** ./src/document/operation/rich_edit_operation.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RichEditOperation": () => (/* binding */ RichEditOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `RichEditOperation` is an operation representing editing RichText. Most of the same as
 * Edit, but with additional style properties, attributes.
 */
class RichEditOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__.Operation {
    constructor(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, attributes, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
        this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;
        this.content = content;
        this.attributes = attributes;
    }
    /**
     * `create` creates a new instance of RichEditOperation.
     */
    static create(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, attributes, executedAt) {
        return new RichEditOperation(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, attributes, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_1__.RichTextInternal) {
            const text = parentObject;
            text.editInternal([this.fromPos, this.toPos], this.content, this.getExecutedAt(), Object.fromEntries(this.attributes), this.maxCreatedAtMapByActor);
            if (!this.fromPos.equals(this.toPos)) {
                root.registerTextWithGarbage(text);
            }
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only RichText can execute edit`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.getParentCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        const content = this.content;
        return `${parent}.EDIT(${fromPos},${toPos},${content})`;
    }
    /**
     * `getFromPos` returns the start point of the editing range.
     */
    getFromPos() {
        return this.fromPos;
    }
    /**
     * `getToPos` returns the end point of the editing range.
     */
    getToPos() {
        return this.toPos;
    }
    /**
     * `getContent` returns the content of RichEdit.
     */
    getContent() {
        return this.content;
    }
    /**
     * `getAttributes` returns the attributes of this Edit.
     */
    getAttributes() {
        return this.attributes || new Map();
    }
    /**
     * `getMaxCreatedAtMapByActor` returns the map that stores the latest creation time
     * by actor for the nodes included in the editing range.
     */
    getMaxCreatedAtMapByActor() {
        return this.maxCreatedAtMapByActor;
    }
}


/***/ }),

/***/ "./src/document/operation/select_operation.ts":
/*!****************************************************!*\
  !*** ./src/document/operation/select_operation.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectOperation": () => (/* binding */ SelectOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_plain_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/plain_text */ "./src/document/json/plain_text.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 *  `SelectOperation` represents an operation that selects an area in the text.
 */
class SelectOperation extends _operation__WEBPACK_IMPORTED_MODULE_3__.Operation {
    constructor(parentCreatedAt, fromPos, toPos, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
    }
    /**
     * `create` creates a new instance of SelectOperation.
     */
    static create(parentCreatedAt, fromPos, toPos, executedAt) {
        return new SelectOperation(parentCreatedAt, fromPos, toPos, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_plain_text__WEBPACK_IMPORTED_MODULE_1__.PlainTextInternal) {
            const text = parentObject;
            text.selectInternal([this.fromPos, this.toPos], this.getExecutedAt());
        }
        else if (parentObject instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_2__.RichTextInternal) {
            const text = parentObject;
            text.selectInternal([this.fromPos, this.toPos], this.getExecutedAt());
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only PlainText, RichText can execute select`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.getParentCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        return `${parent}.SELT(${fromPos},${toPos})`;
    }
    /**
     * `getFromPos` returns the start point of the editing range.
     */
    getFromPos() {
        return this.fromPos;
    }
    /**
     * `getToPos` returns the end point of the editing range.
     */
    getToPos() {
        return this.toPos;
    }
}


/***/ }),

/***/ "./src/document/operation/set_operation.ts":
/*!*************************************************!*\
  !*** ./src/document/operation/set_operation.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetOperation": () => (/* binding */ SetOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `SetOperation` represents an operation that stores the value corresponding to the
 * given key in the Object.
 */
class SetOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__.Operation {
    constructor(key, value, parentCreatedAt, executedAt) {
        super(parentCreatedAt, executedAt);
        this.key = key;
        this.value = value;
    }
    /**
     * `create` creates a new instance of SetOperation.
     */
    static create(key, value, parentCreatedAt, executedAt) {
        return new SetOperation(key, value, parentCreatedAt, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_object__WEBPACK_IMPORTED_MODULE_1__.ObjectInternal) {
            const obj = parentObject;
            const value = this.value.deepcopy();
            obj.set(this.key, value);
            root.registerElement(value, obj);
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only object can execute set`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.value.getCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.SET`;
    }
    /**
     * `getKey` returns the key of this operation.
     */
    getKey() {
        return this.key;
    }
    /**
     * `getValue` returns the value of this operation.
     */
    getValue() {
        return this.value;
    }
}


/***/ }),

/***/ "./src/document/operation/style_operation.ts":
/*!***************************************************!*\
  !*** ./src/document/operation/style_operation.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleOperation": () => (/* binding */ StyleOperation)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 *  `StyleOperation` is an operation applies the style of the given range to RichText.
 */
class StyleOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__.Operation {
    constructor(parentCreatedAt, fromPos, toPos, attributes, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
        this.attributes = attributes;
    }
    /**
     * `create` creates a new instance of StyleOperation.
     */
    static create(parentCreatedAt, fromPos, toPos, attributes, executedAt) {
        return new StyleOperation(parentCreatedAt, fromPos, toPos, attributes, executedAt);
    }
    /**
     * `execute` executes this operation on the given document(`root`).
     */
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_1__.RichTextInternal) {
            const text = parentObject;
            text.setStyleInternal([this.fromPos, this.toPos], this.attributes ? Object.fromEntries(this.attributes) : {}, this.getExecutedAt());
        }
        else {
            if (!parentObject) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to find ${this.getParentCreatedAt()}`);
            }
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`fail to execute, only PlainText can execute edit`);
        }
    }
    /**
     * `getEffectedCreatedAt` returns the time of the effected element.
     */
    getEffectedCreatedAt() {
        return this.getParentCreatedAt();
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data.
     */
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        const attributes = this.attributes;
        return `${parent}.STYL(${fromPos},${toPos},${JSON.stringify(attributes)})`;
    }
    /**
     * `getFromPos` returns the start point of the editing range.
     */
    getFromPos() {
        return this.fromPos;
    }
    /**
     * `getToPos` returns the end point of the editing range.
     */
    getToPos() {
        return this.toPos;
    }
    /**
     * `getAttributes` returns the attributes of this operation.
     */
    getAttributes() {
        return this.attributes;
    }
}


/***/ }),

/***/ "./src/document/proxy/array_proxy.ts":
/*!*******************************************!*\
  !*** ./src/document/proxy/array_proxy.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrayProxy": () => (/* binding */ ArrayProxy)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_add_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/add_operation */ "./src/document/operation/add_operation.ts");
/* harmony import */ var _operation_move_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/move_operation */ "./src/document/operation/move_operation.ts");
/* harmony import */ var _operation_remove_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation/remove_operation */ "./src/document/operation/remove_operation.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _object_proxy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./object_proxy */ "./src/document/proxy/object_proxy.ts");
/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./proxy */ "./src/document/proxy/proxy.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * `isNumericString` checks if value is numeric string.
 */
function isNumericString(val) {
    if (typeof val === 'string' || val instanceof String) {
        return !isNaN(val);
    }
    return false;
}
/**
 * `ArrayProxy` is a proxy representing Array.
 */
class ArrayProxy {
    constructor(context, array) {
        this.context = context;
        this.array = array;
        this.handlers = {
            get: (target, method, receiver) => {
                // Yorkie extension API
                if (method === 'getID') {
                    return () => {
                        return target.getCreatedAt();
                    };
                }
                else if (method === 'getElementByID') {
                    return (createdAt) => {
                        return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, target.get(createdAt));
                    };
                }
                else if (method === 'getElementByIndex') {
                    return (index) => {
                        const elem = target.getByIndex(index);
                        if (elem instanceof _json_primitive__WEBPACK_IMPORTED_MODULE_6__.JSONPrimitive) {
                            return elem;
                        }
                        return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, elem);
                    };
                }
                else if (method === 'getLast') {
                    return () => {
                        return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, target.getLast());
                    };
                }
                else if (method === 'deleteByID') {
                    return (createdAt) => {
                        const deleted = ArrayProxy.deleteInternalByID(context, target, createdAt);
                        return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, deleted);
                    };
                }
                else if (method === 'insertAfter') {
                    return (prevID, value) => {
                        const inserted = ArrayProxy.insertAfterInternal(context, target, prevID, value);
                        return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, inserted);
                    };
                }
                else if (method === 'insertBefore') {
                    return (nextID, value) => {
                        const inserted = ArrayProxy.insertBeforeInternal(context, target, nextID, value);
                        return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, inserted);
                    };
                }
                else if (method === 'moveBefore') {
                    return (nextID, id) => {
                        ArrayProxy.moveBeforeInternal(context, target, nextID, id);
                    };
                    // JavaScript Native API
                }
                else if (method === 'moveAfter') {
                    return (prevID, id) => {
                        ArrayProxy.moveAfterInternal(context, target, prevID, id);
                    };
                }
                else if (method === 'moveFront') {
                    return (id) => {
                        ArrayProxy.moveFrontInternal(context, target, id);
                    };
                }
                else if (method === 'moveLast') {
                    return (id) => {
                        ArrayProxy.moveLastInternal(context, target, id);
                    };
                }
                else if (isNumericString(method)) {
                    return (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, target.getByIndex(+method));
                }
                else if (method === 'push') {
                    return (value) => {
                        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`array.push(${JSON.stringify(value)})`);
                        }
                        return ArrayProxy.pushInternal(context, target, value);
                    };
                }
                else if (method === 'filter') {
                    return (callback) => {
                        return Array.from(target)
                            .map((e) => (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, e))
                            .filter(callback);
                    };
                }
                else if (method === 'reduce') {
                    return (callback, accumulator) => {
                        return Array.from(target)
                            .map((e) => (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(context, e))
                            .reduce(callback, accumulator);
                    };
                }
                else if (method === 'length') {
                    return target.length;
                }
                else if (typeof method === 'symbol' && method === Symbol.iterator) {
                    return ArrayProxy.iteratorInternal.bind(this, context, target);
                }
                // TODO we need to distinguish between the case we need to call default
                // behavior and the case where we need to call an internal method
                // throw new TypeError(`Unsupported method: ${String(method)}`);
                return Reflect.get(target, method, receiver);
            },
            deleteProperty: (target, key) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`array[${key}]`);
                }
                ArrayProxy.deleteInternalByIndex(context, target, Number.parseInt(key));
                return true;
            },
        };
    }
    // eslint-disable-next-line jsdoc/require-jsdoc
    static *iteratorInternal(change, target) {
        for (const elem of target) {
            yield (0,_proxy__WEBPACK_IMPORTED_MODULE_8__.toProxy)(change, elem);
        }
    }
    /**
     * `create` creates a new instance of ArrayProxy.
     */
    static create(context, target) {
        const arrayProxy = new ArrayProxy(context, target);
        return new Proxy(target, arrayProxy.getHandlers());
    }
    /**
     * `pushInternal` pushes the value to the target array.
     */
    static pushInternal(context, target, value) {
        ArrayProxy.insertAfterInternal(context, target, target.getLastCreatedAt(), value);
        return target.length;
    }
    /**
     * `moveBeforeInternal` moves the given `createdAt` element
     * after the previously created element.
     */
    static moveBeforeInternal(context, target, nextCreatedAt, createdAt) {
        const ticket = context.issueTimeTicket();
        const prevCreatedAt = target.getPrevCreatedAt(nextCreatedAt);
        target.moveAfter(prevCreatedAt, createdAt, ticket);
        context.push(_operation_move_operation__WEBPACK_IMPORTED_MODULE_2__.MoveOperation.create(target.getCreatedAt(), prevCreatedAt, createdAt, ticket));
    }
    /**
     * `moveAfterInternal` moves the given `createdAt` element
     * after the specific element.
     */
    static moveAfterInternal(context, target, prevCreatedAt, createdAt) {
        const ticket = context.issueTimeTicket();
        target.moveAfter(prevCreatedAt, createdAt, ticket);
        context.push(_operation_move_operation__WEBPACK_IMPORTED_MODULE_2__.MoveOperation.create(target.getCreatedAt(), prevCreatedAt, createdAt, ticket));
    }
    /**
     * `moveFrontInternal` moves the given `createdAt` element
     * at the first of array.
     */
    static moveFrontInternal(context, target, createdAt) {
        const ticket = context.issueTimeTicket();
        const head = target.getHead();
        target.moveAfter(head.getCreatedAt(), createdAt, ticket);
        context.push(_operation_move_operation__WEBPACK_IMPORTED_MODULE_2__.MoveOperation.create(target.getCreatedAt(), head.getCreatedAt(), createdAt, ticket));
    }
    /**
     * `moveAfterInternal` moves the given `createdAt` element
     * at the last of array.
     */
    static moveLastInternal(context, target, createdAt) {
        const ticket = context.issueTimeTicket();
        const last = target.getLastCreatedAt();
        target.moveAfter(last, createdAt, ticket);
        context.push(_operation_move_operation__WEBPACK_IMPORTED_MODULE_2__.MoveOperation.create(target.getCreatedAt(), last, createdAt, ticket));
    }
    /**
     * `insertAfterInternal` inserts the value after the previously created element.
     */
    static insertAfterInternal(context, target, prevCreatedAt, value) {
        const ticket = context.issueTimeTicket();
        if (_json_primitive__WEBPACK_IMPORTED_MODULE_6__.JSONPrimitive.isSupport(value)) {
            const primitive = _json_primitive__WEBPACK_IMPORTED_MODULE_6__.JSONPrimitive.of(value, ticket);
            const clone = primitive.deepcopy();
            target.insertAfter(prevCreatedAt, clone);
            context.registerElement(clone, target);
            context.push(_operation_add_operation__WEBPACK_IMPORTED_MODULE_1__.AddOperation.create(target.getCreatedAt(), prevCreatedAt, primitive, ticket));
            return primitive;
        }
        else if (Array.isArray(value)) {
            const array = _json_array__WEBPACK_IMPORTED_MODULE_5__.ArrayInternal.create(ticket);
            const clone = array.deepcopy();
            target.insertAfter(prevCreatedAt, clone);
            context.registerElement(clone, target);
            context.push(_operation_add_operation__WEBPACK_IMPORTED_MODULE_1__.AddOperation.create(target.getCreatedAt(), prevCreatedAt, array, ticket));
            for (const element of value) {
                ArrayProxy.pushInternal(context, clone, element);
            }
            return array;
        }
        else if (typeof value === 'object') {
            const obj = _json_object__WEBPACK_IMPORTED_MODULE_4__.ObjectInternal.create(ticket);
            target.insertAfter(prevCreatedAt, obj);
            context.registerElement(obj, target);
            context.push(_operation_add_operation__WEBPACK_IMPORTED_MODULE_1__.AddOperation.create(target.getCreatedAt(), prevCreatedAt, obj, ticket));
            for (const [k, v] of Object.entries(value)) {
                _object_proxy__WEBPACK_IMPORTED_MODULE_7__.ObjectProxy.setInternal(context, obj, k, v);
            }
            return obj;
        }
        else {
            throw new TypeError(`Unsupported type of value: ${typeof value}`);
        }
    }
    /**
     * `insertBeforeInternal` inserts the value before the previously created element.
     */
    static insertBeforeInternal(context, target, nextCreatedAt, value) {
        return ArrayProxy.insertAfterInternal(context, target, target.getPrevCreatedAt(nextCreatedAt), value);
    }
    /**
     * `deleteInternalByIndex` deletes target element of given index.
     */
    static deleteInternalByIndex(context, target, index) {
        const ticket = context.issueTimeTicket();
        const deleted = target.deleteByIndex(index, ticket);
        if (!deleted) {
            return;
        }
        context.push(_operation_remove_operation__WEBPACK_IMPORTED_MODULE_3__.RemoveOperation.create(target.getCreatedAt(), deleted.getCreatedAt(), ticket));
        context.registerRemovedElement(deleted);
        return deleted;
    }
    /**
     * `deleteInternalByID` deletes the element of the given index.
     */
    static deleteInternalByID(context, target, createdAt) {
        const ticket = context.issueTimeTicket();
        const deleted = target.delete(createdAt, ticket);
        context.push(_operation_remove_operation__WEBPACK_IMPORTED_MODULE_3__.RemoveOperation.create(target.getCreatedAt(), deleted.getCreatedAt(), ticket));
        context.registerRemovedElement(deleted);
        return deleted;
    }
    /**
     * `getHandlers` gets handlers.
     */
    getHandlers() {
        return this.handlers;
    }
}


/***/ }),

/***/ "./src/document/proxy/counter_proxy.ts":
/*!*********************************************!*\
  !*** ./src/document/proxy/counter_proxy.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Counter": () => (/* binding */ Counter)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _operation_increase_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/increase_operation */ "./src/document/operation/increase_operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `Counter` is the counter.
 */
class Counter {
    constructor(value) {
        this.value = value;
    }
    /**
     * `initialize` initialize this text with context and internal text.
     * @internal
     */
    initialize(context, counter) {
        this.context = context;
        this.counter = counter;
    }
    /**
     * `getValue` returns the value of this counter;
     * @internal
     */
    getValue() {
        return this.value;
    }
    /**
     * `increase` increases numeric data.
     */
    increase(v) {
        if (!this.context || !this.counter) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            // @ts-ignore
            return;
        }
        const ticket = this.context.issueTimeTicket();
        const value = _json_primitive__WEBPACK_IMPORTED_MODULE_1__.JSONPrimitive.of(v, ticket);
        if (!value.isNumericType()) {
            throw new TypeError(`Unsupported type of value: ${typeof value.getValue()}`);
        }
        this.context.push(_operation_increase_operation__WEBPACK_IMPORTED_MODULE_2__.IncreaseOperation.create(this.counter.getCreatedAt(), value, ticket));
        return this;
    }
}


/***/ }),

/***/ "./src/document/proxy/object_proxy.ts":
/*!********************************************!*\
  !*** ./src/document/proxy/object_proxy.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectProxy": () => (/* binding */ ObjectProxy)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_set_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/set_operation */ "./src/document/operation/set_operation.ts");
/* harmony import */ var _operation_remove_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/remove_operation */ "./src/document/operation/remove_operation.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../json/rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/* harmony import */ var _json_plain_text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../json/plain_text */ "./src/document/json/plain_text.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _array_proxy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./array_proxy */ "./src/document/proxy/array_proxy.ts");
/* harmony import */ var _text_proxy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./text_proxy */ "./src/document/proxy/text_proxy.ts");
/* harmony import */ var _rich_text_proxy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rich_text_proxy */ "./src/document/proxy/rich_text_proxy.ts");
/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./proxy */ "./src/document/proxy/proxy.ts");
/* harmony import */ var _json_counter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../json/counter */ "./src/document/json/counter.ts");
/* harmony import */ var _counter_proxy__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./counter_proxy */ "./src/document/proxy/counter_proxy.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */















/**
 * `ObjectProxy` is a proxy representing `Object`.
 */
class ObjectProxy {
    constructor(context) {
        this.context = context;
        this.handlers = {
            set: (target, key, value) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`obj[${key}]=${JSON.stringify(value)}`);
                }
                ObjectProxy.setInternal(context, target, key, value);
                return true;
            },
            get: (target, keyOrMethod) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`obj[${keyOrMethod}]`);
                }
                if (keyOrMethod === 'getID') {
                    return () => {
                        return target.getCreatedAt();
                    };
                }
                else if (keyOrMethod === 'toJSON') {
                    return () => {
                        return target.toJSON();
                    };
                }
                return (0,_proxy__WEBPACK_IMPORTED_MODULE_12__.toProxy)(context, target.get(keyOrMethod));
            },
            ownKeys: (target) => {
                return target.getKeys();
            },
            getOwnPropertyDescriptor: () => {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            deleteProperty: (target, key) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.trivial(`obj[${key}]`);
                }
                ObjectProxy.deleteInternal(context, target, key);
                return true;
            },
        };
    }
    /**
     * `create` creates a new instance of ObjectProxy.
     */
    static create(context, target) {
        const objectProxy = new ObjectProxy(context);
        return new Proxy(target, objectProxy.getHandlers());
    }
    /**
     * `setInternal` sets a new Object for the given key
     */
    static setInternal(context, target, key, value) {
        const ticket = context.issueTimeTicket();
        const setAndRegister = function (elem) {
            const removed = target.set(key, elem);
            context.registerElement(elem, target);
            if (removed) {
                context.registerRemovedElement(removed);
            }
        };
        if (_json_primitive__WEBPACK_IMPORTED_MODULE_5__.JSONPrimitive.isSupport(value)) {
            const primitive = _json_primitive__WEBPACK_IMPORTED_MODULE_5__.JSONPrimitive.of(value, ticket);
            setAndRegister(primitive);
            context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, primitive, target.getCreatedAt(), ticket));
        }
        else if (Array.isArray(value)) {
            const array = _json_array__WEBPACK_IMPORTED_MODULE_4__.ArrayInternal.create(ticket);
            setAndRegister(array);
            context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, array.deepcopy(), target.getCreatedAt(), ticket));
            for (const element of value) {
                _array_proxy__WEBPACK_IMPORTED_MODULE_9__.ArrayProxy.pushInternal(context, array, element);
            }
        }
        else if (typeof value === 'object') {
            if (value instanceof _text_proxy__WEBPACK_IMPORTED_MODULE_10__.PlainText) {
                const text = _json_plain_text__WEBPACK_IMPORTED_MODULE_7__.PlainTextInternal.create(_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__.RGATreeSplit.create(), ticket);
                target.set(key, text);
                context.registerElement(text, target);
                context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, text.deepcopy(), target.getCreatedAt(), ticket));
                value.initialize(context, text);
            }
            else if (value instanceof _rich_text_proxy__WEBPACK_IMPORTED_MODULE_11__.RichText) {
                const text = _json_rich_text__WEBPACK_IMPORTED_MODULE_8__.RichTextInternal.create(_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__.RGATreeSplit.create(), ticket);
                target.set(key, text);
                context.registerElement(text, target);
                context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, text.deepcopy(), target.getCreatedAt(), ticket));
                value.initialize(context, text);
            }
            else if (value instanceof _counter_proxy__WEBPACK_IMPORTED_MODULE_14__.Counter) {
                const counter = _json_counter__WEBPACK_IMPORTED_MODULE_13__.CounterInternal.of(value.getValue(), ticket);
                target.set(key, counter);
                context.registerElement(counter, target);
                context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, counter.deepcopy(), target.getCreatedAt(), ticket));
                value.initialize(context, counter);
            }
            else {
                const obj = _json_object__WEBPACK_IMPORTED_MODULE_3__.ObjectInternal.create(ticket);
                setAndRegister(obj);
                context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, obj.deepcopy(), target.getCreatedAt(), ticket));
                for (const [k, v] of Object.entries(value)) {
                    ObjectProxy.setInternal(context, obj, k, v);
                }
            }
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`unsupported type of value: ${typeof value}`);
        }
    }
    /**
     * `createText` creates a new Text for the given key
     */
    static createText(context, target, key) {
        const ticket = context.issueTimeTicket();
        const text = _json_plain_text__WEBPACK_IMPORTED_MODULE_7__.PlainTextInternal.create(_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__.RGATreeSplit.create(), ticket);
        target.set(key, text);
        context.registerElement(text, target);
        context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, text.deepcopy(), target.getCreatedAt(), ticket));
        return new _text_proxy__WEBPACK_IMPORTED_MODULE_10__.PlainText(context, text);
    }
    /**
     * `createRichText` a new RichText for the given key.
     */
    static createRichText(context, target, key) {
        const ticket = context.issueTimeTicket();
        const text = _json_rich_text__WEBPACK_IMPORTED_MODULE_8__.RichTextInternal.create(_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__.RGATreeSplit.create(), ticket);
        target.set(key, text);
        context.registerElement(text, target);
        context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, text.deepcopy(), target.getCreatedAt(), ticket));
        return new _rich_text_proxy__WEBPACK_IMPORTED_MODULE_11__.RichText(context, text);
    }
    /**
     * `createCounter` a new Counter for the given key.
     */
    static createCounter(context, target, key, value) {
        const ticket = context.issueTimeTicket();
        const counterInternal = _json_counter__WEBPACK_IMPORTED_MODULE_13__.CounterInternal.of(value, ticket);
        target.set(key, counterInternal);
        context.registerElement(counterInternal, target);
        context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__.SetOperation.create(key, counterInternal.deepcopy(), target.getCreatedAt(), ticket));
        const counter = new _counter_proxy__WEBPACK_IMPORTED_MODULE_14__.Counter(0);
        counter.initialize(context, counterInternal);
        return counter;
    }
    /**
     * `deleteInternal` deletes the value of the given key.
     */
    static deleteInternal(context, target, key) {
        const ticket = context.issueTimeTicket();
        const deleted = target.deleteByKey(key, ticket);
        if (!deleted) {
            return;
        }
        context.push(_operation_remove_operation__WEBPACK_IMPORTED_MODULE_2__.RemoveOperation.create(target.getCreatedAt(), deleted.getCreatedAt(), ticket));
        context.registerRemovedElement(deleted);
    }
    /**
     * `getHandlers` gets handlers.
     */
    getHandlers() {
        return this.handlers;
    }
}


/***/ }),

/***/ "./src/document/proxy/proxy.ts":
/*!*************************************!*\
  !*** ./src/document/proxy/proxy.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createProxy": () => (/* binding */ createProxy),
/* harmony export */   "toProxy": () => (/* binding */ toProxy)
/* harmony export */ });
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _json_plain_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/plain_text */ "./src/document/json/plain_text.ts");
/* harmony import */ var _object_proxy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object_proxy */ "./src/document/proxy/object_proxy.ts");
/* harmony import */ var _array_proxy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./array_proxy */ "./src/document/proxy/array_proxy.ts");
/* harmony import */ var _text_proxy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./text_proxy */ "./src/document/proxy/text_proxy.ts");
/* harmony import */ var _rich_text_proxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rich_text_proxy */ "./src/document/proxy/rich_text_proxy.ts");
/* harmony import */ var _counter_proxy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./counter_proxy */ "./src/document/proxy/counter_proxy.ts");
/* harmony import */ var _json_counter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../json/counter */ "./src/document/json/counter.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */











/**
 * `createProxy` create a new instance of ObjectProxy.
 */
function createProxy(context, target) {
    return _object_proxy__WEBPACK_IMPORTED_MODULE_5__.ObjectProxy.create(context, target);
}
/**
 * `toProxy` returns a proxy based on element.
 */
function toProxy(context, elem) {
    if (elem instanceof _json_primitive__WEBPACK_IMPORTED_MODULE_2__.JSONPrimitive) {
        const primitive = elem;
        return primitive.getValue();
    }
    else if (elem instanceof _json_object__WEBPACK_IMPORTED_MODULE_0__.ObjectInternal) {
        const obj = elem;
        return _object_proxy__WEBPACK_IMPORTED_MODULE_5__.ObjectProxy.create(context, obj);
    }
    else if (elem instanceof _json_array__WEBPACK_IMPORTED_MODULE_1__.ArrayInternal) {
        const array = elem;
        return _array_proxy__WEBPACK_IMPORTED_MODULE_6__.ArrayProxy.create(context, array);
    }
    else if (elem instanceof _json_plain_text__WEBPACK_IMPORTED_MODULE_4__.PlainTextInternal) {
        const text = elem;
        return new _text_proxy__WEBPACK_IMPORTED_MODULE_7__.PlainText(context, text);
    }
    else if (elem instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_3__.RichTextInternal) {
        const text = elem;
        return new _rich_text_proxy__WEBPACK_IMPORTED_MODULE_8__.RichText(context, text);
    }
    else if (elem instanceof _json_counter__WEBPACK_IMPORTED_MODULE_10__.CounterInternal) {
        const counterInternal = elem;
        const counter = new _counter_proxy__WEBPACK_IMPORTED_MODULE_9__.Counter(0);
        counter.initialize(context, counterInternal);
        return counter;
    }
    else if (!elem) {
        return;
    }
    else {
        throw new TypeError(`Unsupported type of element: ${typeof elem}`);
    }
}


/***/ }),

/***/ "./src/document/proxy/rich_text_proxy.ts":
/*!***********************************************!*\
  !*** ./src/document/proxy/rich_text_proxy.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RichText": () => (/* binding */ RichText)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/rich_edit_operation */ "./src/document/operation/rich_edit_operation.ts");
/* harmony import */ var _operation_style_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/style_operation */ "./src/document/operation/style_operation.ts");
/* harmony import */ var _operation_select_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation/select_operation */ "./src/document/operation/select_operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * `RichText` is an extended data type for the contents of a text editor.
 */
class RichText {
    constructor(context, text) {
        this.context = context;
        this.text = text;
    }
    /**
     * `initialize` initialize this rich text with context and internal text.
     * @internal
     */
    initialize(context, text) {
        this.context = context;
        this.text = text;
    }
    /**
     * `edit` edits this text with the given content.
     */
    edit(fromIdx, toIdx, content, attributes) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return false;
        }
        if (fromIdx > toIdx) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('from should be less than or equal to to');
            return false;
        }
        const range = this.text.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`EDIT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()} c:${content}`);
        }
        const ticket = this.context.issueTimeTicket();
        const maxCreatedAtMapByActor = this.text.editInternal(range, content, ticket, attributes);
        this.context.push(new _operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_1__.RichEditOperation(this.text.getCreatedAt(), range[0], range[1], maxCreatedAtMapByActor, content, attributes ? new Map(Object.entries(attributes)) : new Map(), ticket));
        if (!range[0].equals(range[1])) {
            this.context.registerRemovedNodeTextElement(this.text);
        }
        return true;
    }
    /**
     * `setStyle` styles this text with the given attributes.
     */
    setStyle(fromIdx, toIdx, attributes) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return false;
        }
        if (fromIdx > toIdx) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('from should be less than or equal to to');
            return false;
        }
        const range = this.text.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`STYL: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()} a:${JSON.stringify(attributes)}`);
        }
        const ticket = this.context.issueTimeTicket();
        this.text.setStyleInternal(range, attributes, ticket);
        this.context.push(new _operation_style_operation__WEBPACK_IMPORTED_MODULE_2__.StyleOperation(this.text.getCreatedAt(), range[0], range[1], new Map(Object.entries(attributes)), ticket));
        return true;
    }
    /**
     * `select` selects the given range.
     */
    select(fromIdx, toIdx) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return false;
        }
        const range = this.text.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`SELT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()}`);
        }
        const ticket = this.context.issueTimeTicket();
        this.text.selectInternal(range, ticket);
        this.context.push(new _operation_select_operation__WEBPACK_IMPORTED_MODULE_3__.SelectOperation(this.text.getCreatedAt(), range[0], range[1], ticket));
        return true;
    }
    /**
     * `getAnnotatedString` returns a String containing the meta data of the node
     * for debugging purpose.
     */
    getAnnotatedString() {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return '';
        }
        return this.text.getAnnotatedString();
    }
    /**
     * `values` returns values of this text.
     */
    values() {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            // @ts-ignore
            return;
        }
        return this.text.values();
    }
    /**
     * `createRange` returns pair of RGATreeSplitNodePos of the given integer offsets.
     */
    createRange(fromIdx, toIdx) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            // @ts-ignore
            return;
        }
        return this.text.createRange(fromIdx, toIdx);
    }
    /**
     * `onChanges` registers a handler of onChanges event.
     */
    onChanges(handler) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return;
        }
        this.text.onChanges(handler);
    }
}


/***/ }),

/***/ "./src/document/proxy/text_proxy.ts":
/*!******************************************!*\
  !*** ./src/document/proxy/text_proxy.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlainText": () => (/* binding */ PlainText)
/* harmony export */ });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_edit_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/edit_operation */ "./src/document/operation/edit_operation.ts");
/* harmony import */ var _operation_select_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/select_operation */ "./src/document/operation/select_operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * `PlainText` represents plain text element for representing contents of a text editor.
 */
class PlainText {
    constructor(context, text) {
        this.context = context;
        this.text = text;
    }
    /**
     * `initialize` initialize this text with context and internal text.
     * @internal
     */
    initialize(context, text) {
        this.context = context;
        this.text = text;
    }
    /**
     * `edit` edits this text with the given content.
     */
    edit(fromIdx, toIdx, content) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return false;
        }
        if (fromIdx > toIdx) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('from should be less than or equal to to');
        }
        const range = this.text.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`EDIT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()} c:${content}`);
        }
        const ticket = this.context.issueTimeTicket();
        const maxCreatedAtMapByActor = this.text.editInternal(range, content, ticket);
        this.context.push(new _operation_edit_operation__WEBPACK_IMPORTED_MODULE_1__.EditOperation(this.text.getCreatedAt(), range[0], range[1], maxCreatedAtMapByActor, content, ticket));
        if (!range[0].equals(range[1])) {
            this.context.registerRemovedNodeTextElement(this.text);
        }
        return true;
    }
    /**
     * `select` selects the given range.
     */
    select(fromIdx, toIdx) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return false;
        }
        const range = this.text.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`SELT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()}`);
        }
        const ticket = this.context.issueTimeTicket();
        this.text.selectInternal(range, ticket);
        this.context.push(new _operation_select_operation__WEBPACK_IMPORTED_MODULE_2__.SelectOperation(this.text.getCreatedAt(), range[0], range[1], ticket));
        return true;
    }
    /**
     * `getAnnotatedString` returns a String containing the meta data of the node
     * for debugging purpose.
     */
    getAnnotatedString() {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return '';
        }
        return this.text.getAnnotatedString();
    }
    /**
     * `toString` returns the string representation of this text.
     */
    toString() {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return '';
        }
        return this.text.toString();
    }
    /**
     * `createRange` returns pair of RGATreeSplitNodePos of the given integer offsets.
     */
    createRange(fromIdx, toIdx) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            // @ts-ignore
            return;
        }
        return this.text.createRange(fromIdx, toIdx);
    }
    /**
     * `onChanges` registers a handler of onChanges event.
     */
    onChanges(handler) {
        if (!this.context || !this.text) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('it is not initialized yet');
            return;
        }
        this.text.onChanges(handler);
    }
}


/***/ }),

/***/ "./src/document/time/actor_id.ts":
/*!***************************************!*\
  !*** ./src/document/time/actor_id.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InitialActorID": () => (/* binding */ InitialActorID),
/* harmony export */   "MaxActorID": () => (/* binding */ MaxActorID)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `InitialActorID` is the initial value of ActorID.
 */
const InitialActorID = '000000000000000000000000';
/**
 * `MaxActorID` is the maximum value of ActorID.
 */
const MaxActorID = 'FFFFFFFFFFFFFFFFFFFFFFFF';


/***/ }),

/***/ "./src/document/time/ticket.ts":
/*!*************************************!*\
  !*** ./src/document/time/ticket.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TicketComparator": () => (/* binding */ TicketComparator),
/* harmony export */   "TimeTicket": () => (/* binding */ TimeTicket),
/* harmony export */   "InitialDelimiter": () => (/* binding */ InitialDelimiter),
/* harmony export */   "MaxDelemiter": () => (/* binding */ MaxDelemiter),
/* harmony export */   "MaxLamport": () => (/* binding */ MaxLamport),
/* harmony export */   "InitialTimeTicket": () => (/* binding */ InitialTimeTicket),
/* harmony export */   "MaxTimeTicket": () => (/* binding */ MaxTimeTicket)
/* harmony export */ });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/index.js");
/* harmony import */ var _actor_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actor_id */ "./src/document/time/actor_id.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const TicketComparator = (p1, p2) => {
    return p1.compare(p2);
};
/**
 * `TimeTicket` is a timestamp of the logical clock. Ticket is immutable.
 * It is created by `ChangeID`.
 *
 * @public
 */
class TimeTicket {
    /** @hideconstructor */
    constructor(lamport, delimiter, actorID) {
        this.lamport = lamport;
        this.delimiter = delimiter;
        this.actorID = actorID;
    }
    /**
     * `of` creates an instance of Ticket.
     */
    static of(lamport, delimiter, actorID) {
        return new TimeTicket(lamport, delimiter, actorID);
    }
    /**
     * `toIDString` returns the lamport string for this Ticket.
     */
    toIDString() {
        if (!this.actorID) {
            return `${this.lamport.toString()}:nil:${this.delimiter}`;
        }
        return `${this.lamport.toString()}:${this.actorID}:${this.delimiter}`;
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data of the ticket
     * for debugging purpose.
     */
    getAnnotatedString() {
        if (!this.actorID) {
            return `${this.lamport.toString()}:nil:${this.delimiter}`;
        }
        return `${this.lamport.toString()}:${this.actorID.substring(22, 24)}:${this.delimiter}`;
    }
    /**
     * `setActor` creates a new instance of Ticket with the given actorID.
     */
    setActor(actorID) {
        return new TimeTicket(this.lamport, this.delimiter, actorID);
    }
    /**
     * `getLamportAsString` returns the lamport string.
     */
    getLamportAsString() {
        return this.lamport.toString();
    }
    /**
     * `getDelimiter` returns delimiter.
     */
    getDelimiter() {
        return this.delimiter;
    }
    /**
     * `getActorID` returns actorID.
     */
    getActorID() {
        return this.actorID;
    }
    /**
     * `after` returns whether the given ticket was created later.
     */
    after(other) {
        return this.compare(other) > 0;
    }
    /**
     * `equals` returns whether the given ticket was created.
     */
    equals(other) {
        return this.compare(other) === 0;
    }
    /**
     * `compare` returns an integer comparing two Ticket.
     *  The result will be 0 if id==other, -1 if `id < other`, and +1 if `id > other`.
     *  If the receiver or argument is nil, it would panic at runtime.
     */
    compare(other) {
        if (this.lamport.greaterThan(other.lamport)) {
            return 1;
        }
        else if (other.lamport.greaterThan(this.lamport)) {
            return -1;
        }
        const compare = this.actorID.localeCompare(other.actorID);
        if (compare !== 0) {
            return compare;
        }
        if (this.delimiter > other.delimiter) {
            return 1;
        }
        else if (other.delimiter > this.delimiter) {
            return -1;
        }
        return 0;
    }
}
const InitialDelimiter = 0;
const MaxDelemiter = 4294967295;
const MaxLamport = long__WEBPACK_IMPORTED_MODULE_0__["default"].fromString('18446744073709551615', true);
const InitialTimeTicket = new TimeTicket(long__WEBPACK_IMPORTED_MODULE_0__["default"].fromNumber(0, true), InitialDelimiter, _actor_id__WEBPACK_IMPORTED_MODULE_1__.InitialActorID);
const MaxTimeTicket = new TimeTicket(MaxLamport, MaxDelemiter, _actor_id__WEBPACK_IMPORTED_MODULE_1__.MaxActorID);


/***/ }),

/***/ "./src/util/comparator.ts":
/*!********************************!*\
  !*** ./src/util/comparator.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultComparator": () => (/* binding */ DefaultComparator)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const DefaultComparator = (a, b) => {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
};


/***/ }),

/***/ "./src/util/error.ts":
/*!***************************!*\
  !*** ./src/util/error.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Code": () => (/* binding */ Code),
/* harmony export */   "YorkieError": () => (/* binding */ YorkieError)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Code;
(function (Code) {
    Code["Ok"] = "ok";
    Code["ClientNotActive"] = "client-not-active";
    Code["Unimplemented"] = "unimplemented";
    Code["Unsupported"] = "unsupported";
})(Code || (Code = {}));
/**
 * `YorkieError` is an error returned by a Yorkie operation.
 */
class YorkieError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        this.message = message;
        this.name = 'YorkieError';
        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
    }
}


/***/ }),

/***/ "./src/util/heap.ts":
/*!**************************!*\
  !*** ./src/util/heap.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeapNode": () => (/* binding */ HeapNode),
/* harmony export */   "Heap": () => (/* binding */ Heap)
/* harmony export */ });
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comparator */ "./src/util/comparator.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `HeapNode` is a node of `Heap`.
 */
class HeapNode {
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
    /**
     * `getKey` returns a key of HeapNode.
     */
    getKey() {
        return this.key;
    }
    /**
     * `getValue` returns a value of HeapNode.
     */
    getValue() {
        return this.value;
    }
}
/**
 * `Heap` is a heap implemented with max heap.
 */
class Heap {
    constructor(comparator) {
        this.comparator = comparator || _comparator__WEBPACK_IMPORTED_MODULE_0__.DefaultComparator;
        this.nodes = [];
    }
    /**
     * `peek` returns the maximum element from this Heap.
     */
    peek() {
        if (!this.nodes.length) {
            return;
        }
        return this.nodes[0];
    }
    /**
     * `len` is the number of elements in this Heap.
     */
    len() {
        return this.nodes.length;
    }
    /**
     * `release` deletes the given value from this Heap.
     */
    release(node) {
        const targetIndex = this.nodes.findIndex((_node) => _node.getValue() === node.getValue());
        const lastNode = this.nodes.pop();
        if (targetIndex < 0 || !this.len()) {
            return;
        }
        this.nodes[targetIndex] = lastNode;
        this.heapify(this.getParentIndex(targetIndex), targetIndex);
    }
    /**
     * `push` pushes the given node onto this Heap.
     */
    push(node) {
        this.nodes.push(node);
        this.moveUp(this.nodes.length - 1);
    }
    /**
     * `pop` removes and returns the maximum element from this Heap.
     */
    pop() {
        const count = this.nodes.length;
        const head = this.nodes[0];
        if (count <= 0) {
            return;
        }
        else if (count == 1) {
            // clear array
            this.nodes.length = 0;
        }
        else {
            this.nodes[0] = this.nodes.pop();
            this.moveDown(0);
        }
        return head;
    }
    // eslint-disable-next-line jsdoc/require-jsdoc
    *[Symbol.iterator]() {
        for (const node of this.nodes) {
            yield node;
        }
    }
    heapify(parentIndex, targetIndex) {
        if (parentIndex > -1 &&
            this.comparator(this.nodes[parentIndex].getKey(), this.nodes[targetIndex].getKey()) < 0) {
            this.moveUp(targetIndex);
        }
        else {
            this.moveDown(targetIndex);
        }
    }
    moveUp(index) {
        const node = this.nodes[index];
        while (index > 0) {
            const parentIndex = this.getParentIndex(index);
            if (this.comparator(this.nodes[parentIndex].getKey(), node.getKey()) < 0) {
                this.nodes[index] = this.nodes[parentIndex];
                index = parentIndex;
            }
            else {
                break;
            }
        }
        this.nodes[index] = node;
    }
    moveDown(index) {
        const count = this.nodes.length;
        const node = this.nodes[index];
        while (index < count >> 1) {
            const leftChildIndex = this.getLeftChildIndex(index);
            const rightChildIndex = this.getRightChildIndex(index);
            const smallerChildIndex = rightChildIndex < count &&
                this.comparator(this.nodes[leftChildIndex].getKey(), this.nodes[rightChildIndex].getKey()) < 0
                ? rightChildIndex
                : leftChildIndex;
            if (this.comparator(this.nodes[smallerChildIndex].getKey(), node.getKey()) <
                0) {
                break;
            }
            this.nodes[index] = this.nodes[smallerChildIndex];
            index = smallerChildIndex;
        }
        this.nodes[index] = node;
    }
    getParentIndex(index) {
        return (index - 1) >> 1;
    }
    getLeftChildIndex(index) {
        return index * 2 + 1;
    }
    getRightChildIndex(index) {
        return index * 2 + 2;
    }
}


/***/ }),

/***/ "./src/util/llrb_tree.ts":
/*!*******************************!*\
  !*** ./src/util/llrb_tree.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SortedMapIterator": () => (/* binding */ SortedMapIterator),
/* harmony export */   "LLRBTree": () => (/* binding */ LLRBTree)
/* harmony export */ });
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comparator */ "./src/util/comparator.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `LLRBNode` is node of LLRBTree.
 */
class LLRBNode {
    constructor(key, value, isRed) {
        this.key = key;
        this.value = value;
        this.isRed = isRed;
    }
}
/**
 * `SortedMapIterator` is a interator for traversing LLRBTree.
 */
class SortedMapIterator {
    constructor(root) {
        this.stack = [];
        this.traverseInorder(root);
    }
    // TODO: Replace with iterative approach, if we encounter performance problem.
    traverseInorder(node) {
        if (!node) {
            return;
        }
        this.traverseInorder(node.left);
        this.stack.push({
            key: node.key,
            value: node.value,
        });
        this.traverseInorder(node.right);
    }
}
/**
 * LLRBTree is an implementation of Left-learning Red-Black Tree.
 *
 * Original paper on Left-leaning Red-Black Trees:
 * @see http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf
 *
 * Invariant 1: No red node has a red child
 * Invariant 2: Every leaf path has the same number of black nodes
 * Invariant 3: Only the left child can be red (left leaning)
 */
class LLRBTree {
    constructor(comparator) {
        this.comparator =
            typeof comparator !== 'undefined' ? comparator : _comparator__WEBPACK_IMPORTED_MODULE_0__.DefaultComparator;
        this.counter = 0;
    }
    /**
     * `put` puts the value of the given key.
     */
    put(key, value) {
        this.root = this.putInternal(key, value, this.root);
        this.root.isRed = false;
        return value;
    }
    /**
     * `get` gets a value of the given key.
     */
    get(key) {
        const node = this.getInternal(key, this.root);
        return node ? node.value : undefined;
    }
    /**
     * `remove` removes a element of key.
     */
    remove(key) {
        if (!this.isRed(this.root.left) && !this.isRed(this.root.right)) {
            this.root.isRed = true;
        }
        this.root = this.removeInternal(this.root, key);
        if (this.root) {
            this.root.isRed = false;
        }
    }
    /**
     * `getIterator` returns a new instance of SortedMapIterator.
     */
    getIterator() {
        return new SortedMapIterator(this.root);
    }
    /**
     * `values` returns value array of LLRBTree.
     */
    values() {
        const values = [];
        for (const entry of this.getIterator().stack) {
            values.push(entry.value);
        }
        return values;
    }
    /**
     * `floorEntry` returns the entry for the greatest key less than or equal to the
     *  given key. If there is no such key, returns `undefined`.
     */
    floorEntry(key) {
        let node = this.root;
        while (node) {
            const compare = this.comparator(key, node.key);
            if (compare > 0) {
                if (node.right) {
                    node.right.parent = node;
                    node = node.right;
                }
                else {
                    return node;
                }
            }
            else if (compare < 0) {
                if (node.left) {
                    node.left.parent = node;
                    node = node.left;
                }
                else {
                    let parent = node.parent;
                    let childNode = node;
                    while (parent && childNode === parent.left) {
                        childNode = parent;
                        parent = parent.parent;
                    }
                    return parent;
                }
            }
            else {
                return node;
            }
        }
        return;
    }
    /**
     * `lastEntry` returns last entry of LLRBTree.
     */
    lastEntry() {
        if (!this.root) {
            return this.root;
        }
        let node = this.root;
        while (node.right) {
            node = node.right;
        }
        return node;
    }
    /**
     * `size` is a size of LLRBTree.
     */
    size() {
        return this.counter;
    }
    /**
     * `isEmpty` checks if size is empty.
     */
    isEmpty() {
        return this.counter === 0;
    }
    getInternal(key, node) {
        while (node) {
            const compare = this.comparator(key, node.key);
            if (compare === 0) {
                return node;
            }
            else if (compare < 0) {
                node = node.left;
            }
            else if (compare > 0) {
                node = node.right;
            }
        }
        return;
    }
    putInternal(key, value, node) {
        if (!node) {
            this.counter += 1;
            return new LLRBNode(key, value, true);
        }
        const compare = this.comparator(key, node.key);
        if (compare < 0) {
            node.left = this.putInternal(key, value, node.left);
        }
        else if (compare > 0) {
            node.right = this.putInternal(key, value, node.right);
        }
        else {
            node.value = value;
        }
        if (this.isRed(node.right) && !this.isRed(node.left)) {
            node = this.rotateLeft(node);
        }
        if (this.isRed(node.left) && this.isRed(node.left.left)) {
            node = this.rotateRight(node);
        }
        if (this.isRed(node.left) && this.isRed(node.right)) {
            this.flipColors(node);
        }
        return node;
    }
    removeInternal(node, key) {
        if (this.comparator(key, node.key) < 0) {
            if (!this.isRed(node.left) && !this.isRed(node.left.left)) {
                node = this.moveRedLeft(node);
            }
            node.left = this.removeInternal(node.left, key);
        }
        else {
            if (this.isRed(node.left)) {
                node = this.rotateRight(node);
            }
            if (this.comparator(key, node.key) === 0 && !node.right) {
                this.counter -= 1;
                return;
            }
            if (!this.isRed(node.right) && !this.isRed(node.right.left)) {
                node = this.moveRedRight(node);
            }
            if (this.comparator(key, node.key) === 0) {
                this.counter -= 1;
                const smallest = this.min(node.right);
                node.value = smallest.value;
                node.key = smallest.key;
                node.right = this.removeMin(node.right);
            }
            else {
                node.right = this.removeInternal(node.right, key);
            }
        }
        return this.fixUp(node);
    }
    min(node) {
        if (!node.left) {
            return node;
        }
        else {
            return this.min(node.left);
        }
    }
    removeMin(node) {
        if (!node.left) {
            return;
        }
        if (!this.isRed(node.left) && !this.isRed(node.left.left)) {
            node = this.moveRedLeft(node);
        }
        node.left = this.removeMin(node.left);
        return this.fixUp(node);
    }
    fixUp(node) {
        if (this.isRed(node.right)) {
            node = this.rotateLeft(node);
        }
        if (this.isRed(node.left) && this.isRed(node.left.left)) {
            node = this.rotateRight(node);
        }
        if (this.isRed(node.left) && this.isRed(node.right)) {
            this.flipColors(node);
        }
        return node;
    }
    moveRedLeft(node) {
        this.flipColors(node);
        if (this.isRed(node.right.left)) {
            node.right = this.rotateRight(node.right);
            node = this.rotateLeft(node);
            this.flipColors(node);
        }
        return node;
    }
    moveRedRight(node) {
        this.flipColors(node);
        if (this.isRed(node.left.left)) {
            node = this.rotateRight(node);
            this.flipColors(node);
        }
        return node;
    }
    isRed(node) {
        return node && node.isRed;
    }
    rotateLeft(node) {
        const x = node.right;
        node.right = x.left;
        x.left = node;
        x.isRed = x.left.isRed;
        x.left.isRed = true;
        return x;
    }
    rotateRight(node) {
        const x = node.left;
        node.left = x.right;
        x.right = node;
        x.isRed = x.right.isRed;
        x.right.isRed = true;
        return x;
    }
    flipColors(node) {
        node.isRed = !node.isRed;
        node.left.isRed = !node.left.isRed;
        node.right.isRed = !node.right.isRed;
    }
}


/***/ }),

/***/ "./src/util/logger.ts":
/*!****************************!*\
  !*** ./src/util/logger.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LogLevel": () => (/* binding */ LogLevel),
/* harmony export */   "setLogLevel": () => (/* binding */ setLogLevel),
/* harmony export */   "logger": () => (/* binding */ logger)
/* harmony export */ });
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trivial"] = 0] = "Trivial";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Warn"] = 3] = "Warn";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Fatal"] = 5] = "Fatal";
})(LogLevel || (LogLevel = {}));
let level = LogLevel.Debug;
/**
 * `setLogLevel` sets log level.
 */
function setLogLevel(l) {
    level = l;
}
const logger = {
    trivial: (...messages) => {
        if (level > LogLevel.Trivial) {
            return;
        }
        if (typeof console != 'undefined') {
            console.log('YORKIE T:', ...messages);
        }
    },
    debug: (...messages) => {
        if (level > LogLevel.Debug) {
            return;
        }
        if (typeof console != 'undefined') {
            console.log('YORKIE D:', ...messages);
        }
    },
    info: (...messages) => {
        if (level > LogLevel.Info) {
            return;
        }
        if (typeof console != 'undefined') {
            console.log('YORKIE I:', ...messages);
        }
    },
    warn: (...messages) => {
        if (level > LogLevel.Warn) {
            return;
        }
        if (typeof console != 'undefined') {
            if (typeof console.warn !== 'undefined') {
                console.warn('YORKIE W:', ...messages);
            }
            else {
                console.log('YORKIE W:', ...messages);
            }
        }
    },
    error: (...messages) => {
        if (level > LogLevel.Error) {
            return;
        }
        if (typeof console != 'undefined') {
            if (typeof console.error !== 'undefined') {
                console.error('YORKIE E:', ...messages);
            }
            else {
                console.log('YORKIE E:', ...messages);
            }
        }
    },
    fatal: (message, ...messages) => {
        if (typeof console != 'undefined') {
            if (typeof console.error !== 'undefined') {
                console.error('YORKIE F:', ...messages);
            }
            else {
                console.log('YORKIE F:', ...messages);
            }
        }
        throw new Error(`YORKIE F: ${message}`);
    },
    isEnabled: (l) => {
        return level <= l;
    },
};


/***/ }),

/***/ "./src/util/observable.ts":
/*!********************************!*\
  !*** ./src/util/observable.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createObservable": () => (/* binding */ createObservable)
/* harmony export */ });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/util/logger.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const Noop = () => {
    // Do nothing
};
/**
 * `ObserverProxy` is proxy of `Observer`.
 */
class ObserverProxy {
    constructor(executor, onNoObservers) {
        this.finalized = false;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.onNoObservers = onNoObservers;
        this.task
            .then(() => {
            executor(this);
        })
            .catch((error) => {
            this.error(error);
        });
    }
    /**
     * `next` iterates next observer.
     */
    next(value) {
        this.forEachObserver((observer) => {
            observer.next(value);
        });
    }
    /**
     * `error` invoke error.
     */
    error(error) {
        this.forEachObserver((observer) => {
            observer.error(error);
        });
        this.close(error);
    }
    /**
     * `complete` completes observer.
     */
    complete() {
        this.forEachObserver((observer) => {
            observer.complete();
        });
        this.close();
    }
    /**
     * `subscribe` is a function for subscribing observer.
     */
    subscribe(nextOrObserver, error, complete) {
        let observer;
        if (!nextOrObserver) {
            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('missing observer');
        }
        if (this.finalized) {
            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal('observable is finalized due to previous error');
        }
        if (typeof nextOrObserver === 'object') {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error,
                complete,
            };
        }
        if (observer.next === undefined) {
            observer.next = Noop;
        }
        if (observer.error === undefined) {
            observer.error = Noop;
        }
        if (observer.complete === undefined) {
            observer.complete = Noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
            this.task.then(() => {
                try {
                    if (this.finalError) {
                        observer.error(this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (err) {
                    // nothing
                    _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(err);
                }
                return;
            });
        }
        this.observers.push(observer);
        this.observerCount += 1;
        return unsub;
    }
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    }
    forEachObserver(fn) {
        if (this.finalized) {
            return;
        }
        for (let i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    }
    sendOne(i, fn) {
        this.task.then(() => {
            if (this.observers !== undefined && this.observers[i] !== undefined) {
                try {
                    fn(this.observers[i]);
                }
                catch (err) {
                    _logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(err);
                }
            }
        });
    }
    close(err) {
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        this.task.then(() => {
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/**
 * `createObservable` creates a new instance of ObserverProxy
 * and subscribe the instance.
 */
function createObservable(executor) {
    const proxy = new ObserverProxy(executor);
    return {
        subscribe: proxy.subscribe.bind(proxy),
        getProxy: () => {
            return proxy;
        },
    };
}


/***/ }),

/***/ "./src/util/splay_tree.ts":
/*!********************************!*\
  !*** ./src/util/splay_tree.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SplayNode": () => (/* binding */ SplayNode),
/* harmony export */   "SplayTree": () => (/* binding */ SplayTree)
/* harmony export */ });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/util/logger.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `SplayNode` is a node of SplayTree.
 */
class SplayNode {
    constructor(value) {
        this.value = value;
        this.initWeight();
    }
    /**
     * `getNodeString` returns a string of weight and value of this node.
     */
    getNodeString() {
        return `${this.weight}${this.value}`;
    }
    /**
     * `getValue` returns value of this node.
     */
    getValue() {
        return this.value;
    }
    /**
     * `getLeftWeight` returns left weight of this node.
     */
    getLeftWeight() {
        return !this.hasLeft() ? 0 : this.left.getWeight();
    }
    /**
     * `getRightWeight` returns right weight of this node.
     */
    getRightWeight() {
        return !this.hasRight() ? 0 : this.right.getWeight();
    }
    /**
     * `getWeight` returns weight of this node.
     */
    getWeight() {
        return this.weight;
    }
    /**
     * `getLeft` returns a left node.
     */
    getLeft() {
        return this.left;
    }
    /**
     * `getRight` returns a right node.
     */
    getRight() {
        return this.right;
    }
    /**
     * `setRight` sets a right node.
     */
    setRight(right) {
        this.right = right;
    }
    /**
     * `hasLeft` check if the left node exists
     */
    hasLeft() {
        return !!this.left;
    }
    /**
     * `hasRight` check if the right node exists
     */
    hasRight() {
        return !!this.right;
    }
    /**
     * `hasParent` check if the parent node exists
     */
    hasParent() {
        return !!this.parent;
    }
    /**
     * `setParent` sets a parent node.
     */
    setParent(parent) {
        this.parent = parent;
    }
    /**
     * `setLeft` sets a left node.
     */
    setLeft(left) {
        this.left = left;
    }
    /**
     * `getParent` returns parent of this node.
     */
    getParent() {
        return this.parent;
    }
    /**
     * `unlink` unlink parent, right and left node.
     */
    unlink() {
        this.parent = undefined;
        this.right = undefined;
        this.left = undefined;
    }
    /**
     * `hasLinks` checks if parent, right and left node exists.
     */
    hasLinks() {
        return this.hasParent() || this.hasLeft() || this.hasRight();
    }
    /**
     * `increaseWeight` increases weight.
     */
    increaseWeight(weight) {
        this.weight += weight;
    }
    /**
     * `initWeight` set initial weight of this node.
     */
    initWeight() {
        this.weight = this.getLength();
    }
}
/**
 * SplayTree is weighted binary search tree which is based on Splay tree.
 * original paper on Splay Trees:
 * @see https://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf
 */
class SplayTree {
    constructor(root) {
        this.root = root;
    }
    /**
     * `find` returns the Node and offset of the given index.
     */
    find(pos) {
        if (!this.root) {
            return [undefined, 0];
        }
        let node = this.root;
        for (;;) {
            if (node.hasLeft() && pos <= node.getLeftWeight()) {
                node = node.getLeft();
            }
            else if (node.hasRight() &&
                node.getLeftWeight() + node.getLength() < pos) {
                pos -= node.getLeftWeight() + node.getLength();
                node = node.getRight();
            }
            else {
                pos -= node.getLeftWeight();
                break;
            }
        }
        if (pos > node.getLength()) {
            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.fatal(`out of index range: pos: ${pos} > node.length: ${node.getLength()}`);
        }
        return [node, pos];
    }
    /**
     * Find the index of the given node in BST.
     *
     * @param node - the given node
     * @returns the index of given node
     */
    indexOf(node) {
        if (!node || !node.hasLinks()) {
            return -1;
        }
        let index = 0;
        let current = node;
        let prev;
        while (current) {
            if (!prev || prev === current.getRight()) {
                index +=
                    current.getLength() +
                        (current.hasLeft() ? current.getLeftWeight() : 0);
            }
            prev = current;
            current = current.getParent();
        }
        return index - node.getLength();
    }
    /**
     * `getRoot` returns root of this tree.
     */
    getRoot() {
        return this.root;
    }
    /**
     * `insert` inserts the node at the last.
     */
    insert(newNode) {
        return this.insertAfter(this.root, newNode);
    }
    /**
     * `insertAfter` inserts the node after the given previous node.
     */
    insertAfter(target, newNode) {
        if (!target) {
            this.root = newNode;
            return newNode;
        }
        this.splayNode(target);
        this.root = newNode;
        newNode.setRight(target.getRight());
        if (target.hasRight()) {
            target.getRight().setParent(newNode);
        }
        newNode.setLeft(target);
        target.setParent(newNode);
        target.setRight();
        this.updateSubtree(target);
        this.updateSubtree(newNode);
        return newNode;
    }
    /**
     * `updateSubtree` recalculates weights with left and right nodes.
     */
    updateSubtree(node) {
        node.initWeight();
        if (node.hasLeft()) {
            node.increaseWeight(node.getLeftWeight());
        }
        if (node.hasRight()) {
            node.increaseWeight(node.getRightWeight());
        }
    }
    /**
     * `splayNode` moves the given node to the root.
     */
    splayNode(node) {
        if (!node) {
            return;
        }
        for (;;) {
            if (this.isLeftChild(node.getParent()) && this.isRightChild(node)) {
                // zig-zag
                this.rotateLeft(node);
                this.rotateRight(node);
            }
            else if (this.isRightChild(node.getParent()) &&
                this.isLeftChild(node)) {
                // zig-zag
                this.rotateRight(node);
                this.rotateLeft(node);
            }
            else if (this.isLeftChild(node.getParent()) && this.isLeftChild(node)) {
                // zig-zig
                this.rotateRight(node.getParent());
                this.rotateRight(node);
            }
            else if (this.isRightChild(node.getParent()) &&
                this.isRightChild(node)) {
                // zig-zig
                this.rotateLeft(node.getParent());
                this.rotateLeft(node);
            }
            else {
                // zig
                if (this.isLeftChild(node)) {
                    this.rotateRight(node);
                }
                else if (this.isRightChild(node)) {
                    this.rotateLeft(node);
                }
                return;
            }
        }
    }
    /**
     * `delete` deletes target node of this tree.
     */
    delete(node) {
        this.splayNode(node);
        const leftTree = new SplayTree(node.getLeft());
        if (leftTree.root) {
            leftTree.root.setParent();
        }
        const rightTree = new SplayTree(node.getRight());
        if (rightTree.root) {
            rightTree.root.setParent();
        }
        if (leftTree.root) {
            const maxNode = leftTree.getMaximum();
            leftTree.splayNode(maxNode);
            leftTree.root.setRight(rightTree.root);
            if (rightTree.root) {
                rightTree.root.setParent(leftTree.root);
            }
            this.root = leftTree.root;
        }
        else {
            this.root = rightTree.root;
        }
        node.unlink();
        if (this.root) {
            this.updateSubtree(this.root);
        }
    }
    /**
     * `getAnnotatedString` returns a string containing the meta data of the Node
     * for debugging purpose.
     */
    getAnnotatedString() {
        const metaString = [];
        this.traverseInorder(this.root, metaString);
        return metaString
            .map((n) => `[${n.getWeight()},${n.getLength()}]${n.getValue() || ''}`)
            .join('');
    }
    getMaximum() {
        let node = this.root;
        while (node.hasRight()) {
            node = node.getRight();
        }
        return node;
    }
    traverseInorder(node, stack) {
        if (!node) {
            return;
        }
        this.traverseInorder(node.getLeft(), stack);
        stack.push(node);
        this.traverseInorder(node.getRight(), stack);
    }
    rotateLeft(pivot) {
        const root = pivot.getParent();
        if (root.hasParent()) {
            if (root === root.getParent().getLeft()) {
                root.getParent().setLeft(pivot);
            }
            else {
                root.getParent().setRight(pivot);
            }
        }
        else {
            this.root = pivot;
        }
        pivot.setParent(root.getParent());
        root.setRight(pivot.getLeft());
        if (root.hasRight()) {
            root.getRight().setParent(root);
        }
        pivot.setLeft(root);
        pivot.getLeft().setParent(pivot);
        this.updateSubtree(root);
        this.updateSubtree(pivot);
    }
    rotateRight(pivot) {
        const root = pivot.getParent();
        if (root.hasParent()) {
            if (root === root.getParent().getLeft()) {
                root.getParent().setLeft(pivot);
            }
            else {
                root.getParent().setRight(pivot);
            }
        }
        else {
            this.root = pivot;
        }
        pivot.setParent(root.getParent());
        root.setLeft(pivot.getRight());
        if (root.hasLeft()) {
            root.getLeft().setParent(root);
        }
        pivot.setRight(root);
        pivot.getRight().setParent(pivot);
        this.updateSubtree(root);
        this.updateSubtree(pivot);
    }
    isLeftChild(node) {
        if (node && node.hasParent()) {
            return node.getParent().getLeft() === node;
        }
        return false;
    }
    isRightChild(node) {
        if (node && node.hasParent()) {
            return node.getParent().getRight() === node;
        }
        return false;
    }
}


/***/ }),

/***/ "./src/util/uuid.ts":
/*!**************************!*\
  !*** ./src/util/uuid.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uuid": () => (/* binding */ uuid)
/* harmony export */ });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * `uuid` generates uuid string
 * @see http://www.ietf.org/rfc/rfc4122.txt
 */
function uuid() {
    return 'xxxxxxxx-xxxx-4xxxy-xxxx-xxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        const v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/support/types.js":
/*!********************************************!*\
  !*** ./node_modules/util/support/types.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(/*! is-arguments */ "./node_modules/is-arguments/index.js");
var isGeneratorFunction = __webpack_require__(/*! is-generator-function */ "./node_modules/is-generator-function/index.js");
var whichTypedArray = __webpack_require__(/*! which-typed-array */ "./node_modules/which-typed-array/index.js");
var isTypedArray = __webpack_require__(/*! is-typed-array */ "./node_modules/is-typed-array/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(/*! ./support/types */ "./node_modules/util/support/types.js");

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ "./node_modules/which-typed-array/index.js":
/*!*************************************************!*\
  !*** ./node_modules/which-typed-array/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(/*! foreach */ "./node_modules/foreach/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "./node_modules/available-typed-arrays/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = __webpack_require__(/*! es-abstract/helpers/getOwnPropertyDescriptor */ "./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js");
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = __webpack_require__(/*! is-typed-array */ "./node_modules/is-typed-array/index.js");

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};


/***/ }),

/***/ "./src/api/resources_pb.js":
/*!*********************************!*\
  !*** ./src/api/resources_pb.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// source: resources.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = __webpack_require__(/*! google-protobuf */ "./node_modules/google-protobuf/google-protobuf.js");
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = __webpack_require__(/*! google-protobuf/google/protobuf/timestamp_pb.js */ "./node_modules/google-protobuf/google/protobuf/timestamp_pb.js");
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.api.Change', null, global);
goog.exportSymbol('proto.api.ChangeID', null, global);
goog.exportSymbol('proto.api.ChangePack', null, global);
goog.exportSymbol('proto.api.Checkpoint', null, global);
goog.exportSymbol('proto.api.Client', null, global);
goog.exportSymbol('proto.api.Clients', null, global);
goog.exportSymbol('proto.api.DocEvent', null, global);
goog.exportSymbol('proto.api.DocEventType', null, global);
goog.exportSymbol('proto.api.DocumentSummary', null, global);
goog.exportSymbol('proto.api.JSONElement', null, global);
goog.exportSymbol('proto.api.JSONElement.BodyCase', null, global);
goog.exportSymbol('proto.api.JSONElement.Counter', null, global);
goog.exportSymbol('proto.api.JSONElement.JSONArray', null, global);
goog.exportSymbol('proto.api.JSONElement.JSONObject', null, global);
goog.exportSymbol('proto.api.JSONElement.Primitive', null, global);
goog.exportSymbol('proto.api.JSONElement.RichText', null, global);
goog.exportSymbol('proto.api.JSONElement.Text', null, global);
goog.exportSymbol('proto.api.JSONElementSimple', null, global);
goog.exportSymbol('proto.api.Operation', null, global);
goog.exportSymbol('proto.api.Operation.Add', null, global);
goog.exportSymbol('proto.api.Operation.BodyCase', null, global);
goog.exportSymbol('proto.api.Operation.Edit', null, global);
goog.exportSymbol('proto.api.Operation.Increase', null, global);
goog.exportSymbol('proto.api.Operation.Move', null, global);
goog.exportSymbol('proto.api.Operation.Remove', null, global);
goog.exportSymbol('proto.api.Operation.RichEdit', null, global);
goog.exportSymbol('proto.api.Operation.Select', null, global);
goog.exportSymbol('proto.api.Operation.Set', null, global);
goog.exportSymbol('proto.api.Operation.Style', null, global);
goog.exportSymbol('proto.api.Presence', null, global);
goog.exportSymbol('proto.api.Project', null, global);
goog.exportSymbol('proto.api.RGANode', null, global);
goog.exportSymbol('proto.api.RHTNode', null, global);
goog.exportSymbol('proto.api.RichTextNode', null, global);
goog.exportSymbol('proto.api.RichTextNodeAttr', null, global);
goog.exportSymbol('proto.api.TextNode', null, global);
goog.exportSymbol('proto.api.TextNodeID', null, global);
goog.exportSymbol('proto.api.TextNodePos', null, global);
goog.exportSymbol('proto.api.TimeTicket', null, global);
goog.exportSymbol('proto.api.ValueType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ChangePack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ChangePack.repeatedFields_, null);
};
goog.inherits(proto.api.ChangePack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ChangePack.displayName = 'proto.api.ChangePack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Change = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Change.repeatedFields_, null);
};
goog.inherits(proto.api.Change, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Change.displayName = 'proto.api.Change';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ChangeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ChangeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ChangeID.displayName = 'proto.api.ChangeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.Operation.oneofGroups_);
};
goog.inherits(proto.api.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.displayName = 'proto.api.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Set.displayName = 'proto.api.Operation.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Add = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Add, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Add.displayName = 'proto.api.Operation.Add';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Move.displayName = 'proto.api.Operation.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Remove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Remove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Remove.displayName = 'proto.api.Operation.Remove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Edit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Edit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Edit.displayName = 'proto.api.Operation.Edit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Select = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Select, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Select.displayName = 'proto.api.Operation.Select';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.RichEdit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.RichEdit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.RichEdit.displayName = 'proto.api.Operation.RichEdit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Style = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Style, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Style.displayName = 'proto.api.Operation.Style';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Increase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Increase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Increase.displayName = 'proto.api.Operation.Increase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElementSimple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.JSONElementSimple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElementSimple.displayName = 'proto.api.JSONElementSimple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.JSONElement.oneofGroups_);
};
goog.inherits(proto.api.JSONElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.displayName = 'proto.api.JSONElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.JSONObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.JSONObject.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.JSONObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.JSONObject.displayName = 'proto.api.JSONElement.JSONObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.JSONArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.JSONArray.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.JSONArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.JSONArray.displayName = 'proto.api.JSONElement.JSONArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Primitive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.JSONElement.Primitive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Primitive.displayName = 'proto.api.JSONElement.Primitive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.Text.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Text.displayName = 'proto.api.JSONElement.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.RichText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.RichText.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.RichText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.RichText.displayName = 'proto.api.JSONElement.RichText';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Counter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.JSONElement.Counter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Counter.displayName = 'proto.api.JSONElement.Counter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RHTNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RHTNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RHTNode.displayName = 'proto.api.RHTNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RGANode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RGANode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RGANode.displayName = 'proto.api.RGANode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TextNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TextNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TextNode.displayName = 'proto.api.TextNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RichTextNodeAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RichTextNodeAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RichTextNodeAttr.displayName = 'proto.api.RichTextNodeAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RichTextNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RichTextNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RichTextNode.displayName = 'proto.api.RichTextNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TextNodeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TextNodeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TextNodeID.displayName = 'proto.api.TextNodeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Project.repeatedFields_, null);
};
goog.inherits(proto.api.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Project.displayName = 'proto.api.Project';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DocumentSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DocumentSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DocumentSummary.displayName = 'proto.api.DocumentSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Presence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Presence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Presence.displayName = 'proto.api.Presence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Client = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Client, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Client.displayName = 'proto.api.Client';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Clients = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Clients.repeatedFields_, null);
};
goog.inherits(proto.api.Clients, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Clients.displayName = 'proto.api.Clients';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Checkpoint.displayName = 'proto.api.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TextNodePos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TextNodePos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TextNodePos.displayName = 'proto.api.TextNodePos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TimeTicket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TimeTicket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TimeTicket.displayName = 'proto.api.TimeTicket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DocEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.DocEvent.repeatedFields_, null);
};
goog.inherits(proto.api.DocEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DocEvent.displayName = 'proto.api.DocEvent';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ChangePack.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ChangePack.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ChangePack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ChangePack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangePack.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    checkpoint: (f = msg.getCheckpoint()) && proto.api.Checkpoint.toObject(includeInstance, f),
    snapshot: msg.getSnapshot_asB64(),
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.api.Change.toObject, includeInstance),
    minSyncedTicket: (f = msg.getMinSyncedTicket()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ChangePack}
 */
proto.api.ChangePack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ChangePack;
  return proto.api.ChangePack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ChangePack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ChangePack}
 */
proto.api.ChangePack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentKey(value);
      break;
    case 2:
      var value = new proto.api.Checkpoint;
      reader.readMessage(value,proto.api.Checkpoint.deserializeBinaryFromReader);
      msg.setCheckpoint(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSnapshot(value);
      break;
    case 4:
      var value = new proto.api.Change;
      reader.readMessage(value,proto.api.Change.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMinSyncedTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ChangePack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ChangePack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ChangePack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangePack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCheckpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Checkpoint.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.Change.serializeBinaryToWriter
    );
  }
  f = message.getMinSyncedTicket();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional string document_key = 1;
 * @return {string}
 */
proto.api.ChangePack.prototype.getDocumentKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.setDocumentKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Checkpoint checkpoint = 2;
 * @return {?proto.api.Checkpoint}
 */
proto.api.ChangePack.prototype.getCheckpoint = function() {
  return /** @type{?proto.api.Checkpoint} */ (
    jspb.Message.getWrapperField(this, proto.api.Checkpoint, 2));
};


/**
 * @param {?proto.api.Checkpoint|undefined} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setCheckpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearCheckpoint = function() {
  return this.setCheckpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ChangePack.prototype.hasCheckpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes snapshot = 3;
 * @return {string}
 */
proto.api.ChangePack.prototype.getSnapshot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes snapshot = 3;
 * This is a type-conversion wrapper around `getSnapshot()`
 * @return {string}
 */
proto.api.ChangePack.prototype.getSnapshot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSnapshot()));
};


/**
 * optional bytes snapshot = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSnapshot()`
 * @return {!Uint8Array}
 */
proto.api.ChangePack.prototype.getSnapshot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSnapshot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.setSnapshot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Change changes = 4;
 * @return {!Array<!proto.api.Change>}
 */
proto.api.ChangePack.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.api.Change>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Change, 4));
};


/**
 * @param {!Array<!proto.api.Change>} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.Change=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Change}
 */
proto.api.ChangePack.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.Change, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};


/**
 * optional TimeTicket min_synced_ticket = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.ChangePack.prototype.getMinSyncedTicket = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setMinSyncedTicket = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearMinSyncedTicket = function() {
  return this.setMinSyncedTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ChangePack.prototype.hasMinSyncedTicket = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Change.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Change.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Change.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Change} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Change.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.api.ChangeID.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.api.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Change}
 */
proto.api.Change.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Change;
  return proto.api.Change.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Change} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Change}
 */
proto.api.Change.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ChangeID;
      reader.readMessage(value,proto.api.ChangeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.api.Operation;
      reader.readMessage(value,proto.api.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Change.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Change.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Change} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Change.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ChangeID.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChangeID id = 1;
 * @return {?proto.api.ChangeID}
 */
proto.api.Change.prototype.getId = function() {
  return /** @type{?proto.api.ChangeID} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangeID, 1));
};


/**
 * @param {?proto.api.ChangeID|undefined} value
 * @return {!proto.api.Change} returns this
*/
proto.api.Change.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Change} returns this
 */
proto.api.Change.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Change.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.api.Change.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Change} returns this
 */
proto.api.Change.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Operation operations = 3;
 * @return {!Array<!proto.api.Operation>}
 */
proto.api.Change.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.api.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Operation, 3));
};


/**
 * @param {!Array<!proto.api.Operation>} value
 * @return {!proto.api.Change} returns this
*/
proto.api.Change.prototype.setOperationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Operation}
 */
proto.api.Change.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Change} returns this
 */
proto.api.Change.prototype.clearOperationsList = function() {
  return this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ChangeID.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ChangeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ChangeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientSeq: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverSeq: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    lamport: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    actorId: msg.getActorId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ChangeID}
 */
proto.api.ChangeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ChangeID;
  return proto.api.ChangeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ChangeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ChangeID}
 */
proto.api.ChangeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientSeq(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setServerSeq(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLamport(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ChangeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ChangeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ChangeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientSeq();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getServerSeq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getLamport();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getActorId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint32 client_seq = 1;
 * @return {number}
 */
proto.api.ChangeID.prototype.getClientSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setClientSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 server_seq = 2;
 * @return {string}
 */
proto.api.ChangeID.prototype.getServerSeq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setServerSeq = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 lamport = 3;
 * @return {string}
 */
proto.api.ChangeID.prototype.getLamport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setLamport = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional bytes actor_id = 4;
 * @return {string}
 */
proto.api.ChangeID.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes actor_id = 4;
 * This is a type-conversion wrapper around `getActorId()`
 * @return {string}
 */
proto.api.ChangeID.prototype.getActorId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActorId()));
};


/**
 * optional bytes actor_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActorId()`
 * @return {!Uint8Array}
 */
proto.api.ChangeID.prototype.getActorId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActorId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setActorId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.Operation.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.api.Operation.BodyCase = {
  BODY_NOT_SET: 0,
  SET: 1,
  ADD: 2,
  MOVE: 3,
  REMOVE: 4,
  EDIT: 5,
  SELECT: 6,
  RICH_EDIT: 7,
  STYLE: 8,
  INCREASE: 9
};

/**
 * @return {proto.api.Operation.BodyCase}
 */
proto.api.Operation.prototype.getBodyCase = function() {
  return /** @type {proto.api.Operation.BodyCase} */(jspb.Message.computeOneofCase(this, proto.api.Operation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    set: (f = msg.getSet()) && proto.api.Operation.Set.toObject(includeInstance, f),
    add: (f = msg.getAdd()) && proto.api.Operation.Add.toObject(includeInstance, f),
    move: (f = msg.getMove()) && proto.api.Operation.Move.toObject(includeInstance, f),
    remove: (f = msg.getRemove()) && proto.api.Operation.Remove.toObject(includeInstance, f),
    edit: (f = msg.getEdit()) && proto.api.Operation.Edit.toObject(includeInstance, f),
    select: (f = msg.getSelect()) && proto.api.Operation.Select.toObject(includeInstance, f),
    richEdit: (f = msg.getRichEdit()) && proto.api.Operation.RichEdit.toObject(includeInstance, f),
    style: (f = msg.getStyle()) && proto.api.Operation.Style.toObject(includeInstance, f),
    increase: (f = msg.getIncrease()) && proto.api.Operation.Increase.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation}
 */
proto.api.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation;
  return proto.api.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation}
 */
proto.api.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Operation.Set;
      reader.readMessage(value,proto.api.Operation.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 2:
      var value = new proto.api.Operation.Add;
      reader.readMessage(value,proto.api.Operation.Add.deserializeBinaryFromReader);
      msg.setAdd(value);
      break;
    case 3:
      var value = new proto.api.Operation.Move;
      reader.readMessage(value,proto.api.Operation.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 4:
      var value = new proto.api.Operation.Remove;
      reader.readMessage(value,proto.api.Operation.Remove.deserializeBinaryFromReader);
      msg.setRemove(value);
      break;
    case 5:
      var value = new proto.api.Operation.Edit;
      reader.readMessage(value,proto.api.Operation.Edit.deserializeBinaryFromReader);
      msg.setEdit(value);
      break;
    case 6:
      var value = new proto.api.Operation.Select;
      reader.readMessage(value,proto.api.Operation.Select.deserializeBinaryFromReader);
      msg.setSelect(value);
      break;
    case 7:
      var value = new proto.api.Operation.RichEdit;
      reader.readMessage(value,proto.api.Operation.RichEdit.deserializeBinaryFromReader);
      msg.setRichEdit(value);
      break;
    case 8:
      var value = new proto.api.Operation.Style;
      reader.readMessage(value,proto.api.Operation.Style.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 9:
      var value = new proto.api.Operation.Increase;
      reader.readMessage(value,proto.api.Operation.Increase.deserializeBinaryFromReader);
      msg.setIncrease(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Operation.Set.serializeBinaryToWriter
    );
  }
  f = message.getAdd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Operation.Add.serializeBinaryToWriter
    );
  }
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Operation.Move.serializeBinaryToWriter
    );
  }
  f = message.getRemove();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Operation.Remove.serializeBinaryToWriter
    );
  }
  f = message.getEdit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Operation.Edit.serializeBinaryToWriter
    );
  }
  f = message.getSelect();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.Operation.Select.serializeBinaryToWriter
    );
  }
  f = message.getRichEdit();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.Operation.RichEdit.serializeBinaryToWriter
    );
  }
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.api.Operation.Style.serializeBinaryToWriter
    );
  }
  f = message.getIncrease();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.api.Operation.Increase.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Set.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: (f = msg.getValue()) && proto.api.JSONElementSimple.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Set}
 */
proto.api.Operation.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Set;
  return proto.api.Operation.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Set}
 */
proto.api.Operation.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new proto.api.JSONElementSimple;
      reader.readMessage(value,proto.api.JSONElementSimple.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.JSONElementSimple.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Set.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Set} returns this
*/
proto.api.Operation.Set.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Set.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.api.Operation.Set.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional JSONElementSimple value = 3;
 * @return {?proto.api.JSONElementSimple}
 */
proto.api.Operation.Set.prototype.getValue = function() {
  return /** @type{?proto.api.JSONElementSimple} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElementSimple, 3));
};


/**
 * @param {?proto.api.JSONElementSimple|undefined} value
 * @return {!proto.api.Operation.Set} returns this
*/
proto.api.Operation.Set.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Set.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Set.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Set} returns this
*/
proto.api.Operation.Set.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Set.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Add.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Add.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Add} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Add.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    prevCreatedAt: (f = msg.getPrevCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.api.JSONElementSimple.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Add}
 */
proto.api.Operation.Add.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Add;
  return proto.api.Operation.Add.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Add} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Add}
 */
proto.api.Operation.Add.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setPrevCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.JSONElementSimple;
      reader.readMessage(value,proto.api.JSONElementSimple.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Add.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Add.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Add} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Add.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getPrevCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.JSONElementSimple.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Add.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket prev_created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Add.prototype.getPrevCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setPrevCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearPrevCreatedAt = function() {
  return this.setPrevCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasPrevCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JSONElementSimple value = 3;
 * @return {?proto.api.JSONElementSimple}
 */
proto.api.Operation.Add.prototype.getValue = function() {
  return /** @type{?proto.api.JSONElementSimple} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElementSimple, 3));
};


/**
 * @param {?proto.api.JSONElementSimple|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Add.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    prevCreatedAt: (f = msg.getPrevCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Move}
 */
proto.api.Operation.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Move;
  return proto.api.Operation.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Move}
 */
proto.api.Operation.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setPrevCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getPrevCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket prev_created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getPrevCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setPrevCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearPrevCreatedAt = function() {
  return this.setPrevCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasPrevCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket created_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Remove.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Remove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Remove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Remove.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Remove}
 */
proto.api.Operation.Remove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Remove;
  return proto.api.Operation.Remove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Remove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Remove}
 */
proto.api.Operation.Remove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Remove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Remove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Remove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Remove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Remove.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Remove} returns this
*/
proto.api.Operation.Remove.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Remove} returns this
 */
proto.api.Operation.Remove.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Remove.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Remove.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Remove} returns this
*/
proto.api.Operation.Remove.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Remove} returns this
 */
proto.api.Operation.Remove.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Remove.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket executed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Remove.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Remove} returns this
*/
proto.api.Operation.Remove.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Remove} returns this
 */
proto.api.Operation.Remove.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Remove.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Edit.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Edit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Edit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Edit.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    createdAtMapByActorMap: (f = msg.getCreatedAtMapByActorMap()) ? f.toObject(includeInstance, proto.api.TimeTicket.toObject) : [],
    content: jspb.Message.getFieldWithDefault(msg, 5, ""),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Edit}
 */
proto.api.Operation.Edit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Edit;
  return proto.api.Operation.Edit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Edit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Edit}
 */
proto.api.Operation.Edit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = msg.getCreatedAtMapByActorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.TimeTicket.deserializeBinaryFromReader, "", new proto.api.TimeTicket());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 6:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Edit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Edit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Edit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Edit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAtMapByActorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.TimeTicket.serializeBinaryToWriter);
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Edit.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Edit.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Edit.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TimeTicket> created_at_map_by_actor = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.TimeTicket>}
 */
proto.api.Operation.Edit.prototype.getCreatedAtMapByActorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.TimeTicket>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.api.TimeTicket));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearCreatedAtMapByActorMap = function() {
  this.getCreatedAtMapByActorMap().clear();
  return this;};


/**
 * optional string content = 5;
 * @return {string}
 */
proto.api.Operation.Edit.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional TimeTicket executed_at = 6;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Edit.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 6));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Select.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Select.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Select} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Select.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Select}
 */
proto.api.Operation.Select.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Select;
  return proto.api.Operation.Select.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Select} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Select}
 */
proto.api.Operation.Select.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Select.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Select.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Select} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Select.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Select.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Select.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Select.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Select.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.RichEdit.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.RichEdit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.RichEdit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.RichEdit.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    createdAtMapByActorMap: (f = msg.getCreatedAtMapByActorMap()) ? f.toObject(includeInstance, proto.api.TimeTicket.toObject) : [],
    content: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.RichEdit}
 */
proto.api.Operation.RichEdit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.RichEdit;
  return proto.api.Operation.RichEdit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.RichEdit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.RichEdit}
 */
proto.api.Operation.RichEdit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = msg.getCreatedAtMapByActorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.TimeTicket.deserializeBinaryFromReader, "", new proto.api.TimeTicket());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 6:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 7:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.RichEdit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.RichEdit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.RichEdit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.RichEdit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAtMapByActorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.TimeTicket.serializeBinaryToWriter);
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.RichEdit.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.RichEdit.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.RichEdit.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TimeTicket> created_at_map_by_actor = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.TimeTicket>}
 */
proto.api.Operation.RichEdit.prototype.getCreatedAtMapByActorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.TimeTicket>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.api.TimeTicket));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearCreatedAtMapByActorMap = function() {
  this.getCreatedAtMapByActorMap().clear();
  return this;};


/**
 * optional string content = 5;
 * @return {string}
 */
proto.api.Operation.RichEdit.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * map<string, string> attributes = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Operation.RichEdit.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional TimeTicket executed_at = 7;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.RichEdit.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 7));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Style.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Style.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Style} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Style.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Style}
 */
proto.api.Operation.Style.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Style;
  return proto.api.Operation.Style.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Style} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Style}
 */
proto.api.Operation.Style.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Style.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Style.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Style} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Style.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Style.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Style.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Style.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> attributes = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Operation.Style.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional TimeTicket executed_at = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Style.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Increase.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Increase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Increase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Increase.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.api.JSONElementSimple.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Increase}
 */
proto.api.Operation.Increase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Increase;
  return proto.api.Operation.Increase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Increase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Increase}
 */
proto.api.Operation.Increase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.JSONElementSimple;
      reader.readMessage(value,proto.api.JSONElementSimple.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Increase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Increase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Increase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Increase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElementSimple.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Increase.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Increase} returns this
*/
proto.api.Operation.Increase.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Increase} returns this
 */
proto.api.Operation.Increase.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Increase.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JSONElementSimple value = 2;
 * @return {?proto.api.JSONElementSimple}
 */
proto.api.Operation.Increase.prototype.getValue = function() {
  return /** @type{?proto.api.JSONElementSimple} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElementSimple, 2));
};


/**
 * @param {?proto.api.JSONElementSimple|undefined} value
 * @return {!proto.api.Operation.Increase} returns this
*/
proto.api.Operation.Increase.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Increase} returns this
 */
proto.api.Operation.Increase.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Increase.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket executed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Increase.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Increase} returns this
*/
proto.api.Operation.Increase.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Increase} returns this
 */
proto.api.Operation.Increase.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Increase.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Set set = 1;
 * @return {?proto.api.Operation.Set}
 */
proto.api.Operation.prototype.getSet = function() {
  return /** @type{?proto.api.Operation.Set} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Set, 1));
};


/**
 * @param {?proto.api.Operation.Set|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setSet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasSet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Add add = 2;
 * @return {?proto.api.Operation.Add}
 */
proto.api.Operation.prototype.getAdd = function() {
  return /** @type{?proto.api.Operation.Add} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Add, 2));
};


/**
 * @param {?proto.api.Operation.Add|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setAdd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearAdd = function() {
  return this.setAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasAdd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Move move = 3;
 * @return {?proto.api.Operation.Move}
 */
proto.api.Operation.prototype.getMove = function() {
  return /** @type{?proto.api.Operation.Move} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Move, 3));
};


/**
 * @param {?proto.api.Operation.Move|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasMove = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Remove remove = 4;
 * @return {?proto.api.Operation.Remove}
 */
proto.api.Operation.prototype.getRemove = function() {
  return /** @type{?proto.api.Operation.Remove} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Remove, 4));
};


/**
 * @param {?proto.api.Operation.Remove|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setRemove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearRemove = function() {
  return this.setRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasRemove = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Edit edit = 5;
 * @return {?proto.api.Operation.Edit}
 */
proto.api.Operation.prototype.getEdit = function() {
  return /** @type{?proto.api.Operation.Edit} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Edit, 5));
};


/**
 * @param {?proto.api.Operation.Edit|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setEdit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearEdit = function() {
  return this.setEdit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasEdit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Select select = 6;
 * @return {?proto.api.Operation.Select}
 */
proto.api.Operation.prototype.getSelect = function() {
  return /** @type{?proto.api.Operation.Select} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Select, 6));
};


/**
 * @param {?proto.api.Operation.Select|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setSelect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearSelect = function() {
  return this.setSelect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasSelect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RichEdit rich_edit = 7;
 * @return {?proto.api.Operation.RichEdit}
 */
proto.api.Operation.prototype.getRichEdit = function() {
  return /** @type{?proto.api.Operation.RichEdit} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.RichEdit, 7));
};


/**
 * @param {?proto.api.Operation.RichEdit|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setRichEdit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearRichEdit = function() {
  return this.setRichEdit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasRichEdit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Style style = 8;
 * @return {?proto.api.Operation.Style}
 */
proto.api.Operation.prototype.getStyle = function() {
  return /** @type{?proto.api.Operation.Style} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Style, 8));
};


/**
 * @param {?proto.api.Operation.Style|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setStyle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearStyle = function() {
  return this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Increase increase = 9;
 * @return {?proto.api.Operation.Increase}
 */
proto.api.Operation.prototype.getIncrease = function() {
  return /** @type{?proto.api.Operation.Increase} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Increase, 9));
};


/**
 * @param {?proto.api.Operation.Increase|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setIncrease = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearIncrease = function() {
  return this.setIncrease(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasIncrease = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElementSimple.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElementSimple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElementSimple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElementSimple.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElementSimple}
 */
proto.api.JSONElementSimple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElementSimple;
  return proto.api.JSONElementSimple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElementSimple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElementSimple}
 */
proto.api.JSONElementSimple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    case 4:
      var value = /** @type {!proto.api.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElementSimple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElementSimple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElementSimple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElementSimple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional TimeTicket created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElementSimple.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElementSimple} returns this
*/
proto.api.JSONElementSimple.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElementSimple.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket moved_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElementSimple.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElementSimple} returns this
*/
proto.api.JSONElementSimple.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElementSimple.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket removed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElementSimple.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElementSimple} returns this
*/
proto.api.JSONElementSimple.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElementSimple.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ValueType type = 4;
 * @return {!proto.api.ValueType}
 */
proto.api.JSONElementSimple.prototype.getType = function() {
  return /** @type {!proto.api.ValueType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.api.ValueType} value
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes value = 5;
 * @return {string}
 */
proto.api.JSONElementSimple.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes value = 5;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.JSONElementSimple.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.JSONElementSimple.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.JSONElement.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.api.JSONElement.BodyCase = {
  BODY_NOT_SET: 0,
  JSON_OBJECT: 1,
  JSON_ARRAY: 2,
  PRIMITIVE: 3,
  TEXT: 4,
  RICH_TEXT: 5,
  COUNTER: 6
};

/**
 * @return {proto.api.JSONElement.BodyCase}
 */
proto.api.JSONElement.prototype.getBodyCase = function() {
  return /** @type {proto.api.JSONElement.BodyCase} */(jspb.Message.computeOneofCase(this, proto.api.JSONElement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonObject: (f = msg.getJsonObject()) && proto.api.JSONElement.JSONObject.toObject(includeInstance, f),
    jsonArray: (f = msg.getJsonArray()) && proto.api.JSONElement.JSONArray.toObject(includeInstance, f),
    primitive: (f = msg.getPrimitive()) && proto.api.JSONElement.Primitive.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.api.JSONElement.Text.toObject(includeInstance, f),
    richText: (f = msg.getRichText()) && proto.api.JSONElement.RichText.toObject(includeInstance, f),
    counter: (f = msg.getCounter()) && proto.api.JSONElement.Counter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement}
 */
proto.api.JSONElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement;
  return proto.api.JSONElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement}
 */
proto.api.JSONElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.JSONElement.JSONObject;
      reader.readMessage(value,proto.api.JSONElement.JSONObject.deserializeBinaryFromReader);
      msg.setJsonObject(value);
      break;
    case 2:
      var value = new proto.api.JSONElement.JSONArray;
      reader.readMessage(value,proto.api.JSONElement.JSONArray.deserializeBinaryFromReader);
      msg.setJsonArray(value);
      break;
    case 3:
      var value = new proto.api.JSONElement.Primitive;
      reader.readMessage(value,proto.api.JSONElement.Primitive.deserializeBinaryFromReader);
      msg.setPrimitive(value);
      break;
    case 4:
      var value = new proto.api.JSONElement.Text;
      reader.readMessage(value,proto.api.JSONElement.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 5:
      var value = new proto.api.JSONElement.RichText;
      reader.readMessage(value,proto.api.JSONElement.RichText.deserializeBinaryFromReader);
      msg.setRichText(value);
      break;
    case 6:
      var value = new proto.api.JSONElement.Counter;
      reader.readMessage(value,proto.api.JSONElement.Counter.deserializeBinaryFromReader);
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsonObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.JSONElement.JSONObject.serializeBinaryToWriter
    );
  }
  f = message.getJsonArray();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElement.JSONArray.serializeBinaryToWriter
    );
  }
  f = message.getPrimitive();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.JSONElement.Primitive.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.JSONElement.Text.serializeBinaryToWriter
    );
  }
  f = message.getRichText();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.JSONElement.RichText.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.JSONElement.Counter.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.JSONObject.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.JSONObject.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.JSONObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.JSONObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.JSONObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.RHTNode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.JSONObject}
 */
proto.api.JSONElement.JSONObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.JSONObject;
  return proto.api.JSONElement.JSONObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.JSONObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.JSONObject}
 */
proto.api.JSONElement.JSONObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RHTNode;
      reader.readMessage(value,proto.api.RHTNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.JSONObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.JSONObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.JSONObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.JSONObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.RHTNode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RHTNode nodes = 1;
 * @return {!Array<!proto.api.RHTNode>}
 */
proto.api.JSONElement.JSONObject.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.RHTNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.RHTNode, 1));
};


/**
 * @param {!Array<!proto.api.RHTNode>} value
 * @return {!proto.api.JSONElement.JSONObject} returns this
*/
proto.api.JSONElement.JSONObject.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.RHTNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.RHTNode}
 */
proto.api.JSONElement.JSONObject.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.RHTNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.JSONObject} returns this
 */
proto.api.JSONElement.JSONObject.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.JSONObject.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.JSONObject} returns this
*/
proto.api.JSONElement.JSONObject.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.JSONObject} returns this
 */
proto.api.JSONElement.JSONObject.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.JSONObject.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket moved_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.JSONObject.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.JSONObject} returns this
*/
proto.api.JSONElement.JSONObject.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.JSONObject} returns this
 */
proto.api.JSONElement.JSONObject.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.JSONObject.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.JSONObject.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.JSONObject} returns this
*/
proto.api.JSONElement.JSONObject.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.JSONObject} returns this
 */
proto.api.JSONElement.JSONObject.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.JSONObject.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.JSONArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.JSONArray.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.JSONArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.JSONArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.JSONArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.RGANode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.JSONArray}
 */
proto.api.JSONElement.JSONArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.JSONArray;
  return proto.api.JSONElement.JSONArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.JSONArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.JSONArray}
 */
proto.api.JSONElement.JSONArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RGANode;
      reader.readMessage(value,proto.api.RGANode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.JSONArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.JSONArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.JSONArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.JSONArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.RGANode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RGANode nodes = 1;
 * @return {!Array<!proto.api.RGANode>}
 */
proto.api.JSONElement.JSONArray.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.RGANode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.RGANode, 1));
};


/**
 * @param {!Array<!proto.api.RGANode>} value
 * @return {!proto.api.JSONElement.JSONArray} returns this
*/
proto.api.JSONElement.JSONArray.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.RGANode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.RGANode}
 */
proto.api.JSONElement.JSONArray.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.RGANode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.JSONArray} returns this
 */
proto.api.JSONElement.JSONArray.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.JSONArray.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.JSONArray} returns this
*/
proto.api.JSONElement.JSONArray.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.JSONArray} returns this
 */
proto.api.JSONElement.JSONArray.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.JSONArray.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket moved_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.JSONArray.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.JSONArray} returns this
*/
proto.api.JSONElement.JSONArray.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.JSONArray} returns this
 */
proto.api.JSONElement.JSONArray.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.JSONArray.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.JSONArray.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.JSONArray} returns this
*/
proto.api.JSONElement.JSONArray.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.JSONArray} returns this
 */
proto.api.JSONElement.JSONArray.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.JSONArray.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Primitive.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Primitive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Primitive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Primitive.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64(),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Primitive}
 */
proto.api.JSONElement.Primitive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Primitive;
  return proto.api.JSONElement.Primitive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Primitive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Primitive}
 */
proto.api.JSONElement.Primitive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Primitive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Primitive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Primitive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Primitive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueType type = 1;
 * @return {!proto.api.ValueType}
 */
proto.api.JSONElement.Primitive.prototype.getType = function() {
  return /** @type {!proto.api.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.ValueType} value
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.api.JSONElement.Primitive.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.JSONElement.Primitive.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Primitive.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional TimeTicket created_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Primitive.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Primitive} returns this
*/
proto.api.JSONElement.Primitive.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Primitive.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket moved_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Primitive.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Primitive} returns this
*/
proto.api.JSONElement.Primitive.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Primitive.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TimeTicket removed_at = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Primitive.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Primitive} returns this
*/
proto.api.JSONElement.Primitive.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Primitive.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.Text.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.TextNode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Text}
 */
proto.api.JSONElement.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Text;
  return proto.api.JSONElement.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Text}
 */
proto.api.JSONElement.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TextNode;
      reader.readMessage(value,proto.api.TextNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.TextNode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TextNode nodes = 1;
 * @return {!Array<!proto.api.TextNode>}
 */
proto.api.JSONElement.Text.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.TextNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.TextNode, 1));
};


/**
 * @param {!Array<!proto.api.TextNode>} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.TextNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.TextNode}
 */
proto.api.JSONElement.Text.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.TextNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Text.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Text.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket moved_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Text.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Text.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Text.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Text.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.RichText.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.RichText.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.RichText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.RichText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.RichText.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.RichTextNode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.RichText}
 */
proto.api.JSONElement.RichText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.RichText;
  return proto.api.JSONElement.RichText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.RichText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.RichText}
 */
proto.api.JSONElement.RichText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RichTextNode;
      reader.readMessage(value,proto.api.RichTextNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.RichText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.RichText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.RichText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.RichText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.RichTextNode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RichTextNode nodes = 1;
 * @return {!Array<!proto.api.RichTextNode>}
 */
proto.api.JSONElement.RichText.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.RichTextNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.RichTextNode, 1));
};


/**
 * @param {!Array<!proto.api.RichTextNode>} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.RichTextNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.RichTextNode}
 */
proto.api.JSONElement.RichText.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.RichTextNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.RichText.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.RichText.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket moved_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.RichText.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.RichText.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.RichText.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.RichText.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Counter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Counter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Counter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Counter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64(),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    movedAt: (f = msg.getMovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Counter}
 */
proto.api.JSONElement.Counter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Counter;
  return proto.api.JSONElement.Counter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Counter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Counter}
 */
proto.api.JSONElement.Counter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMovedAt(value);
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Counter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Counter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Counter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Counter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getMovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueType type = 1;
 * @return {!proto.api.ValueType}
 */
proto.api.JSONElement.Counter.prototype.getType = function() {
  return /** @type {!proto.api.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.ValueType} value
 * @return {!proto.api.JSONElement.Counter} returns this
 */
proto.api.JSONElement.Counter.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.api.JSONElement.Counter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.JSONElement.Counter.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Counter.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.JSONElement.Counter} returns this
 */
proto.api.JSONElement.Counter.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional TimeTicket created_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Counter.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Counter} returns this
*/
proto.api.JSONElement.Counter.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Counter} returns this
 */
proto.api.JSONElement.Counter.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Counter.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket moved_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Counter.prototype.getMovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Counter} returns this
*/
proto.api.JSONElement.Counter.prototype.setMovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Counter} returns this
 */
proto.api.JSONElement.Counter.prototype.clearMovedAt = function() {
  return this.setMovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Counter.prototype.hasMovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TimeTicket removed_at = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Counter.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Counter} returns this
*/
proto.api.JSONElement.Counter.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Counter} returns this
 */
proto.api.JSONElement.Counter.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Counter.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional JSONObject json_object = 1;
 * @return {?proto.api.JSONElement.JSONObject}
 */
proto.api.JSONElement.prototype.getJsonObject = function() {
  return /** @type{?proto.api.JSONElement.JSONObject} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.JSONObject, 1));
};


/**
 * @param {?proto.api.JSONElement.JSONObject|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setJsonObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearJsonObject = function() {
  return this.setJsonObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasJsonObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JSONArray json_array = 2;
 * @return {?proto.api.JSONElement.JSONArray}
 */
proto.api.JSONElement.prototype.getJsonArray = function() {
  return /** @type{?proto.api.JSONElement.JSONArray} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.JSONArray, 2));
};


/**
 * @param {?proto.api.JSONElement.JSONArray|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setJsonArray = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearJsonArray = function() {
  return this.setJsonArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasJsonArray = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Primitive primitive = 3;
 * @return {?proto.api.JSONElement.Primitive}
 */
proto.api.JSONElement.prototype.getPrimitive = function() {
  return /** @type{?proto.api.JSONElement.Primitive} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Primitive, 3));
};


/**
 * @param {?proto.api.JSONElement.Primitive|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setPrimitive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearPrimitive = function() {
  return this.setPrimitive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasPrimitive = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Text text = 4;
 * @return {?proto.api.JSONElement.Text}
 */
proto.api.JSONElement.prototype.getText = function() {
  return /** @type{?proto.api.JSONElement.Text} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Text, 4));
};


/**
 * @param {?proto.api.JSONElement.Text|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RichText rich_text = 5;
 * @return {?proto.api.JSONElement.RichText}
 */
proto.api.JSONElement.prototype.getRichText = function() {
  return /** @type{?proto.api.JSONElement.RichText} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.RichText, 5));
};


/**
 * @param {?proto.api.JSONElement.RichText|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setRichText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearRichText = function() {
  return this.setRichText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasRichText = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Counter counter = 6;
 * @return {?proto.api.JSONElement.Counter}
 */
proto.api.JSONElement.prototype.getCounter = function() {
  return /** @type{?proto.api.JSONElement.Counter} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Counter, 6));
};


/**
 * @param {?proto.api.JSONElement.Counter|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setCounter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearCounter = function() {
  return this.setCounter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasCounter = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RHTNode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RHTNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RHTNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RHTNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    element: (f = msg.getElement()) && proto.api.JSONElement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RHTNode}
 */
proto.api.RHTNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RHTNode;
  return proto.api.RHTNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RHTNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RHTNode}
 */
proto.api.RHTNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.api.JSONElement;
      reader.readMessage(value,proto.api.JSONElement.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RHTNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RHTNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RHTNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RHTNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.RHTNode.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RHTNode} returns this
 */
proto.api.RHTNode.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional JSONElement element = 2;
 * @return {?proto.api.JSONElement}
 */
proto.api.RHTNode.prototype.getElement = function() {
  return /** @type{?proto.api.JSONElement} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement, 2));
};


/**
 * @param {?proto.api.JSONElement|undefined} value
 * @return {!proto.api.RHTNode} returns this
*/
proto.api.RHTNode.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RHTNode} returns this
 */
proto.api.RHTNode.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RHTNode.prototype.hasElement = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RGANode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RGANode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RGANode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RGANode.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: (f = msg.getNext()) && proto.api.RGANode.toObject(includeInstance, f),
    element: (f = msg.getElement()) && proto.api.JSONElement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RGANode}
 */
proto.api.RGANode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RGANode;
  return proto.api.RGANode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RGANode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RGANode}
 */
proto.api.RGANode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RGANode;
      reader.readMessage(value,proto.api.RGANode.deserializeBinaryFromReader);
      msg.setNext(value);
      break;
    case 2:
      var value = new proto.api.JSONElement;
      reader.readMessage(value,proto.api.JSONElement.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RGANode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RGANode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RGANode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RGANode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RGANode.serializeBinaryToWriter
    );
  }
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional RGANode next = 1;
 * @return {?proto.api.RGANode}
 */
proto.api.RGANode.prototype.getNext = function() {
  return /** @type{?proto.api.RGANode} */ (
    jspb.Message.getWrapperField(this, proto.api.RGANode, 1));
};


/**
 * @param {?proto.api.RGANode|undefined} value
 * @return {!proto.api.RGANode} returns this
*/
proto.api.RGANode.prototype.setNext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RGANode} returns this
 */
proto.api.RGANode.prototype.clearNext = function() {
  return this.setNext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RGANode.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JSONElement element = 2;
 * @return {?proto.api.JSONElement}
 */
proto.api.RGANode.prototype.getElement = function() {
  return /** @type{?proto.api.JSONElement} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement, 2));
};


/**
 * @param {?proto.api.JSONElement|undefined} value
 * @return {!proto.api.RGANode} returns this
*/
proto.api.RGANode.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RGANode} returns this
 */
proto.api.RGANode.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RGANode.prototype.hasElement = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TextNode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TextNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TextNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.api.TextNodeID.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    insPrevId: (f = msg.getInsPrevId()) && proto.api.TextNodeID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TextNode}
 */
proto.api.TextNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TextNode;
  return proto.api.TextNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TextNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TextNode}
 */
proto.api.TextNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    case 4:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setInsPrevId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TextNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TextNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TextNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getInsPrevId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
};


/**
 * optional TextNodeID id = 1;
 * @return {?proto.api.TextNodeID}
 */
proto.api.TextNode.prototype.getId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 1));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.TextNode} returns this
*/
proto.api.TextNode.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNode.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.api.TextNode.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TimeTicket removed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.TextNode.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.TextNode} returns this
*/
proto.api.TextNode.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNode.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TextNodeID ins_prev_id = 4;
 * @return {?proto.api.TextNodeID}
 */
proto.api.TextNode.prototype.getInsPrevId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 4));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.TextNode} returns this
*/
proto.api.TextNode.prototype.setInsPrevId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.clearInsPrevId = function() {
  return this.setInsPrevId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNode.prototype.hasInsPrevId = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RichTextNodeAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RichTextNodeAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RichTextNodeAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNodeAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RichTextNodeAttr}
 */
proto.api.RichTextNodeAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RichTextNodeAttr;
  return proto.api.RichTextNodeAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RichTextNodeAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RichTextNodeAttr}
 */
proto.api.RichTextNodeAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RichTextNodeAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RichTextNodeAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RichTextNodeAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNodeAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.RichTextNodeAttr.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RichTextNodeAttr} returns this
 */
proto.api.RichTextNodeAttr.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.api.RichTextNodeAttr.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RichTextNodeAttr} returns this
 */
proto.api.RichTextNodeAttr.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TimeTicket updated_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.RichTextNodeAttr.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.RichTextNodeAttr} returns this
*/
proto.api.RichTextNodeAttr.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNodeAttr} returns this
 */
proto.api.RichTextNodeAttr.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNodeAttr.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RichTextNode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RichTextNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RichTextNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.api.TextNodeID.toObject(includeInstance, f),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, proto.api.RichTextNodeAttr.toObject) : [],
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    insPrevId: (f = msg.getInsPrevId()) && proto.api.TextNodeID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RichTextNode}
 */
proto.api.RichTextNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RichTextNode;
  return proto.api.RichTextNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RichTextNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RichTextNode}
 */
proto.api.RichTextNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.RichTextNodeAttr.deserializeBinaryFromReader, "", new proto.api.RichTextNodeAttr());
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    case 5:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setInsPrevId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RichTextNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RichTextNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RichTextNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.RichTextNodeAttr.serializeBinaryToWriter);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getInsPrevId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
};


/**
 * optional TextNodeID id = 1;
 * @return {?proto.api.TextNodeID}
 */
proto.api.RichTextNode.prototype.getId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 1));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.RichTextNode} returns this
*/
proto.api.RichTextNode.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNode.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, RichTextNodeAttr> attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.RichTextNodeAttr>}
 */
proto.api.RichTextNode.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.RichTextNodeAttr>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.api.RichTextNodeAttr));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.api.RichTextNode.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.RichTextNode.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.RichTextNode} returns this
*/
proto.api.RichTextNode.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNode.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TextNodeID ins_prev_id = 5;
 * @return {?proto.api.TextNodeID}
 */
proto.api.RichTextNode.prototype.getInsPrevId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 5));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.RichTextNode} returns this
*/
proto.api.RichTextNode.prototype.setInsPrevId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearInsPrevId = function() {
  return this.setInsPrevId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNode.prototype.hasInsPrevId = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TextNodeID.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TextNodeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TextNodeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TextNodeID}
 */
proto.api.TextNodeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TextNodeID;
  return proto.api.TextNodeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TextNodeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TextNodeID}
 */
proto.api.TextNodeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TextNodeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TextNodeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TextNodeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional TimeTicket created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.TextNodeID.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.TextNodeID} returns this
*/
proto.api.TextNodeID.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNodeID} returns this
 */
proto.api.TextNodeID.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNodeID.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.api.TextNodeID.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TextNodeID} returns this
 */
proto.api.TextNodeID.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Project.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Project} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publicKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    secretKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    authWebhookUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    authWebhookMethodsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Project}
 */
proto.api.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Project;
  return proto.api.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Project}
 */
proto.api.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthWebhookUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAuthWebhookMethods(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Project.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Project.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSecretKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthWebhookUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthWebhookMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.Project.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.Project.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string public_key = 3;
 * @return {string}
 */
proto.api.Project.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string secret_key = 4;
 * @return {string}
 */
proto.api.Project.prototype.getSecretKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.setSecretKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string auth_webhook_url = 5;
 * @return {string}
 */
proto.api.Project.prototype.getAuthWebhookUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.setAuthWebhookUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string auth_webhook_methods = 6;
 * @return {!Array<string>}
 */
proto.api.Project.prototype.getAuthWebhookMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.setAuthWebhookMethodsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.addAuthWebhookMethods = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.clearAuthWebhookMethodsList = function() {
  return this.setAuthWebhookMethodsList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.Project.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.Project} returns this
*/
proto.api.Project.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Project} returns this
 */
proto.api.Project.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Project.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DocumentSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DocumentSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DocumentSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocumentSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    snapshot: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DocumentSummary}
 */
proto.api.DocumentSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DocumentSummary;
  return proto.api.DocumentSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DocumentSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DocumentSummary}
 */
proto.api.DocumentSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DocumentSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DocumentSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DocumentSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocumentSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSnapshot();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.DocumentSummary.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DocumentSummary} returns this
 */
proto.api.DocumentSummary.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.api.DocumentSummary.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DocumentSummary} returns this
 */
proto.api.DocumentSummary.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string snapshot = 3;
 * @return {string}
 */
proto.api.DocumentSummary.prototype.getSnapshot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DocumentSummary} returns this
 */
proto.api.DocumentSummary.prototype.setSnapshot = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Presence.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Presence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Presence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Presence.toObject = function(includeInstance, msg) {
  var f, obj = {
    clock: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Presence}
 */
proto.api.Presence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Presence;
  return proto.api.Presence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Presence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Presence}
 */
proto.api.Presence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClock(value);
      break;
    case 2:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Presence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Presence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Presence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Presence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClock();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int32 clock = 1;
 * @return {number}
 */
proto.api.Presence.prototype.getClock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Presence} returns this
 */
proto.api.Presence.prototype.setClock = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, string> data = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Presence.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Presence} returns this
 */
proto.api.Presence.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Client.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Client.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Client} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Client.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    presence: (f = msg.getPresence()) && proto.api.Presence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Client}
 */
proto.api.Client.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Client;
  return proto.api.Client.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Client} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Client}
 */
proto.api.Client.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.api.Presence;
      reader.readMessage(value,proto.api.Presence.deserializeBinaryFromReader);
      msg.setPresence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Client.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Client.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Client} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Client.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPresence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Presence.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.api.Client.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.api.Client.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.api.Client.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Client} returns this
 */
proto.api.Client.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Presence presence = 2;
 * @return {?proto.api.Presence}
 */
proto.api.Client.prototype.getPresence = function() {
  return /** @type{?proto.api.Presence} */ (
    jspb.Message.getWrapperField(this, proto.api.Presence, 2));
};


/**
 * @param {?proto.api.Presence|undefined} value
 * @return {!proto.api.Client} returns this
*/
proto.api.Client.prototype.setPresence = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Client} returns this
 */
proto.api.Client.prototype.clearPresence = function() {
  return this.setPresence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Client.prototype.hasPresence = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Clients.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Clients.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Clients.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Clients} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Clients.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientsList: jspb.Message.toObjectList(msg.getClientsList(),
    proto.api.Client.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Clients}
 */
proto.api.Clients.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Clients;
  return proto.api.Clients.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Clients} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Clients}
 */
proto.api.Clients.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Client;
      reader.readMessage(value,proto.api.Client.deserializeBinaryFromReader);
      msg.addClients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Clients.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Clients.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Clients} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Clients.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Client.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Client clients = 1;
 * @return {!Array<!proto.api.Client>}
 */
proto.api.Clients.prototype.getClientsList = function() {
  return /** @type{!Array<!proto.api.Client>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Client, 1));
};


/**
 * @param {!Array<!proto.api.Client>} value
 * @return {!proto.api.Clients} returns this
*/
proto.api.Clients.prototype.setClientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Client=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Client}
 */
proto.api.Clients.prototype.addClients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Client, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Clients} returns this
 */
proto.api.Clients.prototype.clearClientsList = function() {
  return this.setClientsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverSeq: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    clientSeq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Checkpoint}
 */
proto.api.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Checkpoint;
  return proto.api.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Checkpoint}
 */
proto.api.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setServerSeq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerSeq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getClientSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 server_seq = 1;
 * @return {string}
 */
proto.api.Checkpoint.prototype.getServerSeq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.Checkpoint} returns this
 */
proto.api.Checkpoint.prototype.setServerSeq = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint32 client_seq = 2;
 * @return {number}
 */
proto.api.Checkpoint.prototype.getClientSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Checkpoint} returns this
 */
proto.api.Checkpoint.prototype.setClientSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TextNodePos.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TextNodePos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TextNodePos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodePos.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    relativeOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TextNodePos}
 */
proto.api.TextNodePos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TextNodePos;
  return proto.api.TextNodePos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TextNodePos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TextNodePos}
 */
proto.api.TextNodePos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativeOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TextNodePos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TextNodePos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TextNodePos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodePos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRelativeOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional TimeTicket created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.TextNodePos.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.TextNodePos} returns this
*/
proto.api.TextNodePos.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNodePos} returns this
 */
proto.api.TextNodePos.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNodePos.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.api.TextNodePos.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TextNodePos} returns this
 */
proto.api.TextNodePos.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 relative_offset = 3;
 * @return {number}
 */
proto.api.TextNodePos.prototype.getRelativeOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TextNodePos} returns this
 */
proto.api.TextNodePos.prototype.setRelativeOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TimeTicket.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TimeTicket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TimeTicket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TimeTicket.toObject = function(includeInstance, msg) {
  var f, obj = {
    lamport: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    delimiter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actorId: msg.getActorId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TimeTicket}
 */
proto.api.TimeTicket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TimeTicket;
  return proto.api.TimeTicket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TimeTicket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TimeTicket}
 */
proto.api.TimeTicket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLamport(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDelimiter(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TimeTicket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TimeTicket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TimeTicket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TimeTicket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLamport();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getDelimiter();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getActorId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 lamport = 1;
 * @return {string}
 */
proto.api.TimeTicket.prototype.getLamport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.TimeTicket} returns this
 */
proto.api.TimeTicket.prototype.setLamport = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint32 delimiter = 2;
 * @return {number}
 */
proto.api.TimeTicket.prototype.getDelimiter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TimeTicket} returns this
 */
proto.api.TimeTicket.prototype.setDelimiter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes actor_id = 3;
 * @return {string}
 */
proto.api.TimeTicket.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes actor_id = 3;
 * This is a type-conversion wrapper around `getActorId()`
 * @return {string}
 */
proto.api.TimeTicket.prototype.getActorId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActorId()));
};


/**
 * optional bytes actor_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActorId()`
 * @return {!Uint8Array}
 */
proto.api.TimeTicket.prototype.getActorId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActorId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.TimeTicket} returns this
 */
proto.api.TimeTicket.prototype.setActorId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.DocEvent.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DocEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DocEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DocEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publisher: (f = msg.getPublisher()) && proto.api.Client.toObject(includeInstance, f),
    documentKeysList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DocEvent}
 */
proto.api.DocEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DocEvent;
  return proto.api.DocEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DocEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DocEvent}
 */
proto.api.DocEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.DocEventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.api.Client;
      reader.readMessage(value,proto.api.Client.deserializeBinaryFromReader);
      msg.setPublisher(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDocumentKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DocEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DocEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DocEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPublisher();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Client.serializeBinaryToWriter
    );
  }
  f = message.getDocumentKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional DocEventType type = 1;
 * @return {!proto.api.DocEventType}
 */
proto.api.DocEvent.prototype.getType = function() {
  return /** @type {!proto.api.DocEventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.DocEventType} value
 * @return {!proto.api.DocEvent} returns this
 */
proto.api.DocEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Client publisher = 2;
 * @return {?proto.api.Client}
 */
proto.api.DocEvent.prototype.getPublisher = function() {
  return /** @type{?proto.api.Client} */ (
    jspb.Message.getWrapperField(this, proto.api.Client, 2));
};


/**
 * @param {?proto.api.Client|undefined} value
 * @return {!proto.api.DocEvent} returns this
*/
proto.api.DocEvent.prototype.setPublisher = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DocEvent} returns this
 */
proto.api.DocEvent.prototype.clearPublisher = function() {
  return this.setPublisher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DocEvent.prototype.hasPublisher = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string document_keys = 3;
 * @return {!Array<string>}
 */
proto.api.DocEvent.prototype.getDocumentKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.DocEvent} returns this
 */
proto.api.DocEvent.prototype.setDocumentKeysList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.DocEvent} returns this
 */
proto.api.DocEvent.prototype.addDocumentKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.DocEvent} returns this
 */
proto.api.DocEvent.prototype.clearDocumentKeysList = function() {
  return this.setDocumentKeysList([]);
};


/**
 * @enum {number}
 */
proto.api.ValueType = {
  NULL: 0,
  BOOLEAN: 1,
  INTEGER: 2,
  LONG: 3,
  DOUBLE: 4,
  STRING: 5,
  BYTES: 6,
  DATE: 7,
  JSON_OBJECT: 8,
  JSON_ARRAY: 9,
  TEXT: 10,
  RICH_TEXT: 11,
  INTEGER_CNT: 12,
  LONG_CNT: 13,
  DOUBLE_CNT: 14
};

/**
 * @enum {number}
 */
proto.api.DocEventType = {
  DOCUMENTS_CHANGED: 0,
  DOCUMENTS_WATCHED: 1,
  DOCUMENTS_UNWATCHED: 2,
  PRESENCE_CHANGED: 3
};

goog.object.extend(exports, proto.api);


/***/ }),

/***/ "./src/api/yorkie_grpc_web_pb.js":
/*!***************************************!*\
  !*** ./src/api/yorkie_grpc_web_pb.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = __webpack_require__(/*! grpc-web */ "./node_modules/grpc-web/index.js");


var resources_pb = __webpack_require__(/*! ./resources_pb.js */ "./src/api/resources_pb.js")
const proto = {};
proto.api = __webpack_require__(/*! ./yorkie_pb.js */ "./src/api/yorkie_pb.js");

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.YorkieClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.YorkiePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ActivateClientRequest,
 *   !proto.api.ActivateClientResponse>}
 */
const methodDescriptor_Yorkie_ActivateClient = new grpc.web.MethodDescriptor(
  '/api.Yorkie/ActivateClient',
  grpc.web.MethodType.UNARY,
  proto.api.ActivateClientRequest,
  proto.api.ActivateClientResponse,
  /**
   * @param {!proto.api.ActivateClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.ActivateClientResponse.deserializeBinary
);


/**
 * @param {!proto.api.ActivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ActivateClientResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ActivateClientResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.activateClient =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/ActivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_ActivateClient,
      callback);
};


/**
 * @param {!proto.api.ActivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ActivateClientResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.activateClient =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/ActivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_ActivateClient);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.DeactivateClientRequest,
 *   !proto.api.DeactivateClientResponse>}
 */
const methodDescriptor_Yorkie_DeactivateClient = new grpc.web.MethodDescriptor(
  '/api.Yorkie/DeactivateClient',
  grpc.web.MethodType.UNARY,
  proto.api.DeactivateClientRequest,
  proto.api.DeactivateClientResponse,
  /**
   * @param {!proto.api.DeactivateClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.DeactivateClientResponse.deserializeBinary
);


/**
 * @param {!proto.api.DeactivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.DeactivateClientResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.DeactivateClientResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.deactivateClient =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/DeactivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DeactivateClient,
      callback);
};


/**
 * @param {!proto.api.DeactivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.DeactivateClientResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.deactivateClient =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/DeactivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DeactivateClient);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.UpdatePresenceRequest,
 *   !proto.api.UpdatePresenceResponse>}
 */
const methodDescriptor_Yorkie_UpdatePresence = new grpc.web.MethodDescriptor(
  '/api.Yorkie/UpdatePresence',
  grpc.web.MethodType.UNARY,
  proto.api.UpdatePresenceRequest,
  proto.api.UpdatePresenceResponse,
  /**
   * @param {!proto.api.UpdatePresenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.UpdatePresenceResponse.deserializeBinary
);


/**
 * @param {!proto.api.UpdatePresenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.UpdatePresenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.UpdatePresenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.updatePresence =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/UpdatePresence',
      request,
      metadata || {},
      methodDescriptor_Yorkie_UpdatePresence,
      callback);
};


/**
 * @param {!proto.api.UpdatePresenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.UpdatePresenceResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.updatePresence =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/UpdatePresence',
      request,
      metadata || {},
      methodDescriptor_Yorkie_UpdatePresence);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.AttachDocumentRequest,
 *   !proto.api.AttachDocumentResponse>}
 */
const methodDescriptor_Yorkie_AttachDocument = new grpc.web.MethodDescriptor(
  '/api.Yorkie/AttachDocument',
  grpc.web.MethodType.UNARY,
  proto.api.AttachDocumentRequest,
  proto.api.AttachDocumentResponse,
  /**
   * @param {!proto.api.AttachDocumentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.AttachDocumentResponse.deserializeBinary
);


/**
 * @param {!proto.api.AttachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.AttachDocumentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.AttachDocumentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.attachDocument =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/AttachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_AttachDocument,
      callback);
};


/**
 * @param {!proto.api.AttachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.AttachDocumentResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.attachDocument =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/AttachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_AttachDocument);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.DetachDocumentRequest,
 *   !proto.api.DetachDocumentResponse>}
 */
const methodDescriptor_Yorkie_DetachDocument = new grpc.web.MethodDescriptor(
  '/api.Yorkie/DetachDocument',
  grpc.web.MethodType.UNARY,
  proto.api.DetachDocumentRequest,
  proto.api.DetachDocumentResponse,
  /**
   * @param {!proto.api.DetachDocumentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.DetachDocumentResponse.deserializeBinary
);


/**
 * @param {!proto.api.DetachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.DetachDocumentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.DetachDocumentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.detachDocument =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/DetachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DetachDocument,
      callback);
};


/**
 * @param {!proto.api.DetachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.DetachDocumentResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.detachDocument =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/DetachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DetachDocument);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.WatchDocumentsRequest,
 *   !proto.api.WatchDocumentsResponse>}
 */
const methodDescriptor_Yorkie_WatchDocuments = new grpc.web.MethodDescriptor(
  '/api.Yorkie/WatchDocuments',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.api.WatchDocumentsRequest,
  proto.api.WatchDocumentsResponse,
  /**
   * @param {!proto.api.WatchDocumentsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.WatchDocumentsResponse.deserializeBinary
);


/**
 * @param {!proto.api.WatchDocumentsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.WatchDocumentsResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.watchDocuments =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.Yorkie/WatchDocuments',
      request,
      metadata || {},
      methodDescriptor_Yorkie_WatchDocuments);
};


/**
 * @param {!proto.api.WatchDocumentsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.WatchDocumentsResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.YorkiePromiseClient.prototype.watchDocuments =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.Yorkie/WatchDocuments',
      request,
      metadata || {},
      methodDescriptor_Yorkie_WatchDocuments);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.PushPullRequest,
 *   !proto.api.PushPullResponse>}
 */
const methodDescriptor_Yorkie_PushPull = new grpc.web.MethodDescriptor(
  '/api.Yorkie/PushPull',
  grpc.web.MethodType.UNARY,
  proto.api.PushPullRequest,
  proto.api.PushPullResponse,
  /**
   * @param {!proto.api.PushPullRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.PushPullResponse.deserializeBinary
);


/**
 * @param {!proto.api.PushPullRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.PushPullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.PushPullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.pushPull =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/PushPull',
      request,
      metadata || {},
      methodDescriptor_Yorkie_PushPull,
      callback);
};


/**
 * @param {!proto.api.PushPullRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.PushPullResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.pushPull =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/PushPull',
      request,
      metadata || {},
      methodDescriptor_Yorkie_PushPull);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ListChangesRequest,
 *   !proto.api.ListChangesResponse>}
 */
const methodDescriptor_Yorkie_ListChanges = new grpc.web.MethodDescriptor(
  '/api.Yorkie/ListChanges',
  grpc.web.MethodType.UNARY,
  proto.api.ListChangesRequest,
  proto.api.ListChangesResponse,
  /**
   * @param {!proto.api.ListChangesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.ListChangesResponse.deserializeBinary
);


/**
 * @param {!proto.api.ListChangesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ListChangesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ListChangesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.listChanges =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/ListChanges',
      request,
      metadata || {},
      methodDescriptor_Yorkie_ListChanges,
      callback);
};


/**
 * @param {!proto.api.ListChangesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ListChangesResponse>}
 *     Promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.listChanges =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/ListChanges',
      request,
      metadata || {},
      methodDescriptor_Yorkie_ListChanges);
};


module.exports = proto.api;



/***/ }),

/***/ "./src/api/yorkie_pb.js":
/*!******************************!*\
  !*** ./src/api/yorkie_pb.js ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// source: yorkie.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = __webpack_require__(/*! google-protobuf */ "./node_modules/google-protobuf/google-protobuf.js");
var goog = jspb;
var global = Function('return this')();

var resources_pb = __webpack_require__(/*! ./resources_pb.js */ "./src/api/resources_pb.js");
goog.object.extend(proto, resources_pb);
goog.exportSymbol('proto.api.ActivateClientRequest', null, global);
goog.exportSymbol('proto.api.ActivateClientResponse', null, global);
goog.exportSymbol('proto.api.AttachDocumentRequest', null, global);
goog.exportSymbol('proto.api.AttachDocumentResponse', null, global);
goog.exportSymbol('proto.api.DeactivateClientRequest', null, global);
goog.exportSymbol('proto.api.DeactivateClientResponse', null, global);
goog.exportSymbol('proto.api.DetachDocumentRequest', null, global);
goog.exportSymbol('proto.api.DetachDocumentResponse', null, global);
goog.exportSymbol('proto.api.ListChangesRequest', null, global);
goog.exportSymbol('proto.api.ListChangesResponse', null, global);
goog.exportSymbol('proto.api.PushPullRequest', null, global);
goog.exportSymbol('proto.api.PushPullResponse', null, global);
goog.exportSymbol('proto.api.UpdatePresenceRequest', null, global);
goog.exportSymbol('proto.api.UpdatePresenceResponse', null, global);
goog.exportSymbol('proto.api.WatchDocumentsRequest', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse.BodyCase', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse.Initialization', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ActivateClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ActivateClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ActivateClientRequest.displayName = 'proto.api.ActivateClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ActivateClientResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ActivateClientResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ActivateClientResponse.displayName = 'proto.api.ActivateClientResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DeactivateClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DeactivateClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DeactivateClientRequest.displayName = 'proto.api.DeactivateClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DeactivateClientResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DeactivateClientResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DeactivateClientResponse.displayName = 'proto.api.DeactivateClientResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AttachDocumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AttachDocumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.AttachDocumentRequest.displayName = 'proto.api.AttachDocumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AttachDocumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AttachDocumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.AttachDocumentResponse.displayName = 'proto.api.AttachDocumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DetachDocumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DetachDocumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DetachDocumentRequest.displayName = 'proto.api.DetachDocumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DetachDocumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DetachDocumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DetachDocumentResponse.displayName = 'proto.api.DetachDocumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.WatchDocumentsRequest.repeatedFields_, null);
};
goog.inherits(proto.api.WatchDocumentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsRequest.displayName = 'proto.api.WatchDocumentsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.WatchDocumentsResponse.oneofGroups_);
};
goog.inherits(proto.api.WatchDocumentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsResponse.displayName = 'proto.api.WatchDocumentsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsResponse.Initialization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.WatchDocumentsResponse.Initialization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsResponse.Initialization.displayName = 'proto.api.WatchDocumentsResponse.Initialization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PushPullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PushPullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PushPullRequest.displayName = 'proto.api.PushPullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PushPullResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PushPullResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PushPullResponse.displayName = 'proto.api.PushPullResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.UpdatePresenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.UpdatePresenceRequest.repeatedFields_, null);
};
goog.inherits(proto.api.UpdatePresenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.UpdatePresenceRequest.displayName = 'proto.api.UpdatePresenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.UpdatePresenceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.UpdatePresenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.UpdatePresenceResponse.displayName = 'proto.api.UpdatePresenceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListChangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ListChangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ListChangesRequest.displayName = 'proto.api.ListChangesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListChangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ListChangesResponse.repeatedFields_, null);
};
goog.inherits(proto.api.ListChangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ListChangesResponse.displayName = 'proto.api.ListChangesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ActivateClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ActivateClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ActivateClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ActivateClientRequest}
 */
proto.api.ActivateClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ActivateClientRequest;
  return proto.api.ActivateClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ActivateClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ActivateClientRequest}
 */
proto.api.ActivateClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ActivateClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ActivateClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ActivateClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_key = 1;
 * @return {string}
 */
proto.api.ActivateClientRequest.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ActivateClientRequest} returns this
 */
proto.api.ActivateClientRequest.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ActivateClientResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ActivateClientResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ActivateClientResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientId: msg.getClientId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ActivateClientResponse}
 */
proto.api.ActivateClientResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ActivateClientResponse;
  return proto.api.ActivateClientResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ActivateClientResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ActivateClientResponse}
 */
proto.api.ActivateClientResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ActivateClientResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ActivateClientResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ActivateClientResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string client_key = 1;
 * @return {string}
 */
proto.api.ActivateClientResponse.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ActivateClientResponse} returns this
 */
proto.api.ActivateClientResponse.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes client_id = 2;
 * @return {string}
 */
proto.api.ActivateClientResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes client_id = 2;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.ActivateClientResponse.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.ActivateClientResponse.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.ActivateClientResponse} returns this
 */
proto.api.ActivateClientResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DeactivateClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DeactivateClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DeactivateClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DeactivateClientRequest}
 */
proto.api.DeactivateClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DeactivateClientRequest;
  return proto.api.DeactivateClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DeactivateClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DeactivateClientRequest}
 */
proto.api.DeactivateClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DeactivateClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DeactivateClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DeactivateClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.DeactivateClientRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.DeactivateClientRequest.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.DeactivateClientRequest.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.DeactivateClientRequest} returns this
 */
proto.api.DeactivateClientRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DeactivateClientResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DeactivateClientResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DeactivateClientResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DeactivateClientResponse}
 */
proto.api.DeactivateClientResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DeactivateClientResponse;
  return proto.api.DeactivateClientResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DeactivateClientResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DeactivateClientResponse}
 */
proto.api.DeactivateClientResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DeactivateClientResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DeactivateClientResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DeactivateClientResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.DeactivateClientResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.DeactivateClientResponse.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.DeactivateClientResponse.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.DeactivateClientResponse} returns this
 */
proto.api.DeactivateClientResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AttachDocumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AttachDocumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AttachDocumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64(),
    changePack: (f = msg.getChangePack()) && resources_pb.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AttachDocumentRequest}
 */
proto.api.AttachDocumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AttachDocumentRequest;
  return proto.api.AttachDocumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AttachDocumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AttachDocumentRequest}
 */
proto.api.AttachDocumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    case 2:
      var value = new resources_pb.ChangePack;
      reader.readMessage(value,resources_pb.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AttachDocumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AttachDocumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AttachDocumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.AttachDocumentRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.AttachDocumentRequest.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.AttachDocumentRequest.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.AttachDocumentRequest} returns this
 */
proto.api.AttachDocumentRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.AttachDocumentRequest.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, resources_pb.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.AttachDocumentRequest} returns this
*/
proto.api.AttachDocumentRequest.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.AttachDocumentRequest} returns this
 */
proto.api.AttachDocumentRequest.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.AttachDocumentRequest.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AttachDocumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AttachDocumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AttachDocumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64(),
    changePack: (f = msg.getChangePack()) && resources_pb.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AttachDocumentResponse}
 */
proto.api.AttachDocumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AttachDocumentResponse;
  return proto.api.AttachDocumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AttachDocumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AttachDocumentResponse}
 */
proto.api.AttachDocumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    case 2:
      var value = new resources_pb.ChangePack;
      reader.readMessage(value,resources_pb.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AttachDocumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AttachDocumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AttachDocumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.AttachDocumentResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.AttachDocumentResponse.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.AttachDocumentResponse.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.AttachDocumentResponse} returns this
 */
proto.api.AttachDocumentResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.AttachDocumentResponse.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, resources_pb.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.AttachDocumentResponse} returns this
*/
proto.api.AttachDocumentResponse.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.AttachDocumentResponse} returns this
 */
proto.api.AttachDocumentResponse.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.AttachDocumentResponse.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DetachDocumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DetachDocumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DetachDocumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64(),
    changePack: (f = msg.getChangePack()) && resources_pb.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DetachDocumentRequest}
 */
proto.api.DetachDocumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DetachDocumentRequest;
  return proto.api.DetachDocumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DetachDocumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DetachDocumentRequest}
 */
proto.api.DetachDocumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    case 2:
      var value = new resources_pb.ChangePack;
      reader.readMessage(value,resources_pb.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DetachDocumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DetachDocumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DetachDocumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.DetachDocumentRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.DetachDocumentRequest.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.DetachDocumentRequest.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.DetachDocumentRequest} returns this
 */
proto.api.DetachDocumentRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.DetachDocumentRequest.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, resources_pb.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.DetachDocumentRequest} returns this
*/
proto.api.DetachDocumentRequest.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DetachDocumentRequest} returns this
 */
proto.api.DetachDocumentRequest.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DetachDocumentRequest.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DetachDocumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DetachDocumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DetachDocumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changePack: (f = msg.getChangePack()) && resources_pb.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DetachDocumentResponse}
 */
proto.api.DetachDocumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DetachDocumentResponse;
  return proto.api.DetachDocumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DetachDocumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DetachDocumentResponse}
 */
proto.api.DetachDocumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientKey(value);
      break;
    case 2:
      var value = new resources_pb.ChangePack;
      reader.readMessage(value,resources_pb.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DetachDocumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DetachDocumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DetachDocumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_key = 1;
 * @return {string}
 */
proto.api.DetachDocumentResponse.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DetachDocumentResponse} returns this
 */
proto.api.DetachDocumentResponse.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.DetachDocumentResponse.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, resources_pb.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.DetachDocumentResponse} returns this
*/
proto.api.DetachDocumentResponse.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DetachDocumentResponse} returns this
 */
proto.api.DetachDocumentResponse.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DetachDocumentResponse.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.WatchDocumentsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    client: (f = msg.getClient()) && resources_pb.Client.toObject(includeInstance, f),
    documentKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsRequest}
 */
proto.api.WatchDocumentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsRequest;
  return proto.api.WatchDocumentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsRequest}
 */
proto.api.WatchDocumentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_pb.Client;
      reader.readMessage(value,resources_pb.Client.deserializeBinaryFromReader);
      msg.setClient(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDocumentKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_pb.Client.serializeBinaryToWriter
    );
  }
  f = message.getDocumentKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Client client = 1;
 * @return {?proto.api.Client}
 */
proto.api.WatchDocumentsRequest.prototype.getClient = function() {
  return /** @type{?proto.api.Client} */ (
    jspb.Message.getWrapperField(this, resources_pb.Client, 1));
};


/**
 * @param {?proto.api.Client|undefined} value
 * @return {!proto.api.WatchDocumentsRequest} returns this
*/
proto.api.WatchDocumentsRequest.prototype.setClient = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.clearClient = function() {
  return this.setClient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.WatchDocumentsRequest.prototype.hasClient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string document_keys = 2;
 * @return {!Array<string>}
 */
proto.api.WatchDocumentsRequest.prototype.getDocumentKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.setDocumentKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.addDocumentKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.clearDocumentKeysList = function() {
  return this.setDocumentKeysList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.WatchDocumentsResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.api.WatchDocumentsResponse.BodyCase = {
  BODY_NOT_SET: 0,
  INITIALIZATION: 1,
  EVENT: 2
};

/**
 * @return {proto.api.WatchDocumentsResponse.BodyCase}
 */
proto.api.WatchDocumentsResponse.prototype.getBodyCase = function() {
  return /** @type {proto.api.WatchDocumentsResponse.BodyCase} */(jspb.Message.computeOneofCase(this, proto.api.WatchDocumentsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialization: (f = msg.getInitialization()) && proto.api.WatchDocumentsResponse.Initialization.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && resources_pb.DocEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsResponse}
 */
proto.api.WatchDocumentsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsResponse;
  return proto.api.WatchDocumentsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsResponse}
 */
proto.api.WatchDocumentsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.WatchDocumentsResponse.Initialization;
      reader.readMessage(value,proto.api.WatchDocumentsResponse.Initialization.deserializeBinaryFromReader);
      msg.setInitialization(value);
      break;
    case 2:
      var value = new resources_pb.DocEvent;
      reader.readMessage(value,resources_pb.DocEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.WatchDocumentsResponse.Initialization.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.DocEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsResponse.Initialization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsResponse.Initialization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.Initialization.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersMapByDocMap: (f = msg.getPeersMapByDocMap()) ? f.toObject(includeInstance, proto.api.Clients.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsResponse.Initialization}
 */
proto.api.WatchDocumentsResponse.Initialization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsResponse.Initialization;
  return proto.api.WatchDocumentsResponse.Initialization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsResponse.Initialization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsResponse.Initialization}
 */
proto.api.WatchDocumentsResponse.Initialization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPeersMapByDocMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.Clients.deserializeBinaryFromReader, "", new proto.api.Clients());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsResponse.Initialization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsResponse.Initialization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.Initialization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersMapByDocMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.Clients.serializeBinaryToWriter);
  }
};


/**
 * map<string, Clients> peers_map_by_doc = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.Clients>}
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.getPeersMapByDocMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.Clients>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.api.Clients));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.WatchDocumentsResponse.Initialization} returns this
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.clearPeersMapByDocMap = function() {
  this.getPeersMapByDocMap().clear();
  return this;};


/**
 * optional Initialization initialization = 1;
 * @return {?proto.api.WatchDocumentsResponse.Initialization}
 */
proto.api.WatchDocumentsResponse.prototype.getInitialization = function() {
  return /** @type{?proto.api.WatchDocumentsResponse.Initialization} */ (
    jspb.Message.getWrapperField(this, proto.api.WatchDocumentsResponse.Initialization, 1));
};


/**
 * @param {?proto.api.WatchDocumentsResponse.Initialization|undefined} value
 * @return {!proto.api.WatchDocumentsResponse} returns this
*/
proto.api.WatchDocumentsResponse.prototype.setInitialization = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.WatchDocumentsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.WatchDocumentsResponse} returns this
 */
proto.api.WatchDocumentsResponse.prototype.clearInitialization = function() {
  return this.setInitialization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.WatchDocumentsResponse.prototype.hasInitialization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DocEvent event = 2;
 * @return {?proto.api.DocEvent}
 */
proto.api.WatchDocumentsResponse.prototype.getEvent = function() {
  return /** @type{?proto.api.DocEvent} */ (
    jspb.Message.getWrapperField(this, resources_pb.DocEvent, 2));
};


/**
 * @param {?proto.api.DocEvent|undefined} value
 * @return {!proto.api.WatchDocumentsResponse} returns this
*/
proto.api.WatchDocumentsResponse.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.WatchDocumentsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.WatchDocumentsResponse} returns this
 */
proto.api.WatchDocumentsResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.WatchDocumentsResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PushPullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PushPullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PushPullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64(),
    changePack: (f = msg.getChangePack()) && resources_pb.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PushPullRequest}
 */
proto.api.PushPullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PushPullRequest;
  return proto.api.PushPullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PushPullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PushPullRequest}
 */
proto.api.PushPullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    case 2:
      var value = new resources_pb.ChangePack;
      reader.readMessage(value,resources_pb.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PushPullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PushPullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PushPullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.PushPullRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.PushPullRequest.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.PushPullRequest.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.PushPullRequest} returns this
 */
proto.api.PushPullRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.PushPullRequest.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, resources_pb.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.PushPullRequest} returns this
*/
proto.api.PushPullRequest.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PushPullRequest} returns this
 */
proto.api.PushPullRequest.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PushPullRequest.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PushPullResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PushPullResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PushPullResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64(),
    changePack: (f = msg.getChangePack()) && resources_pb.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PushPullResponse}
 */
proto.api.PushPullResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PushPullResponse;
  return proto.api.PushPullResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PushPullResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PushPullResponse}
 */
proto.api.PushPullResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    case 2:
      var value = new resources_pb.ChangePack;
      reader.readMessage(value,resources_pb.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PushPullResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PushPullResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PushPullResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      resources_pb.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.PushPullResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.PushPullResponse.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.PushPullResponse.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.PushPullResponse} returns this
 */
proto.api.PushPullResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.PushPullResponse.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, resources_pb.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.PushPullResponse} returns this
*/
proto.api.PushPullResponse.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PushPullResponse} returns this
 */
proto.api.PushPullResponse.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PushPullResponse.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.UpdatePresenceRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.UpdatePresenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.UpdatePresenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.UpdatePresenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UpdatePresenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    client: (f = msg.getClient()) && resources_pb.Client.toObject(includeInstance, f),
    documentKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.UpdatePresenceRequest}
 */
proto.api.UpdatePresenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.UpdatePresenceRequest;
  return proto.api.UpdatePresenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.UpdatePresenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.UpdatePresenceRequest}
 */
proto.api.UpdatePresenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_pb.Client;
      reader.readMessage(value,resources_pb.Client.deserializeBinaryFromReader);
      msg.setClient(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDocumentKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.UpdatePresenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.UpdatePresenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.UpdatePresenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UpdatePresenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      resources_pb.Client.serializeBinaryToWriter
    );
  }
  f = message.getDocumentKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Client client = 1;
 * @return {?proto.api.Client}
 */
proto.api.UpdatePresenceRequest.prototype.getClient = function() {
  return /** @type{?proto.api.Client} */ (
    jspb.Message.getWrapperField(this, resources_pb.Client, 1));
};


/**
 * @param {?proto.api.Client|undefined} value
 * @return {!proto.api.UpdatePresenceRequest} returns this
*/
proto.api.UpdatePresenceRequest.prototype.setClient = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.UpdatePresenceRequest} returns this
 */
proto.api.UpdatePresenceRequest.prototype.clearClient = function() {
  return this.setClient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.UpdatePresenceRequest.prototype.hasClient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string document_keys = 2;
 * @return {!Array<string>}
 */
proto.api.UpdatePresenceRequest.prototype.getDocumentKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.UpdatePresenceRequest} returns this
 */
proto.api.UpdatePresenceRequest.prototype.setDocumentKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.UpdatePresenceRequest} returns this
 */
proto.api.UpdatePresenceRequest.prototype.addDocumentKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.UpdatePresenceRequest} returns this
 */
proto.api.UpdatePresenceRequest.prototype.clearDocumentKeysList = function() {
  return this.setDocumentKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.UpdatePresenceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.UpdatePresenceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.UpdatePresenceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UpdatePresenceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.UpdatePresenceResponse}
 */
proto.api.UpdatePresenceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.UpdatePresenceResponse;
  return proto.api.UpdatePresenceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.UpdatePresenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.UpdatePresenceResponse}
 */
proto.api.UpdatePresenceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.UpdatePresenceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.UpdatePresenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.UpdatePresenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UpdatePresenceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListChangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListChangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListChangesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ListChangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: msg.getClientId_asB64(),
    documentKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListChangesRequest}
 */
proto.api.ListChangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListChangesRequest;
  return proto.api.ListChangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListChangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListChangesRequest}
 */
proto.api.ListChangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListChangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ListChangesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ListChangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ListChangesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDocumentKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes client_id = 1;
 * @return {string}
 */
proto.api.ListChangesRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_id = 1;
 * This is a type-conversion wrapper around `getClientId()`
 * @return {string}
 */
proto.api.ListChangesRequest.prototype.getClientId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientId()));
};


/**
 * optional bytes client_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientId()`
 * @return {!Uint8Array}
 */
proto.api.ListChangesRequest.prototype.getClientId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.ListChangesRequest} returns this
 */
proto.api.ListChangesRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string document_key = 2;
 * @return {string}
 */
proto.api.ListChangesRequest.prototype.getDocumentKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ListChangesRequest} returns this
 */
proto.api.ListChangesRequest.prototype.setDocumentKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ListChangesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListChangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListChangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListChangesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ListChangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    resources_pb.Change.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListChangesResponse}
 */
proto.api.ListChangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListChangesResponse;
  return proto.api.ListChangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListChangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListChangesResponse}
 */
proto.api.ListChangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new resources_pb.Change;
      reader.readMessage(value,resources_pb.Change.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListChangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ListChangesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ListChangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ListChangesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      resources_pb.Change.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Change changes = 1;
 * @return {!Array<!proto.api.Change>}
 */
proto.api.ListChangesResponse.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.api.Change>} */ (
    jspb.Message.getRepeatedWrapperField(this, resources_pb.Change, 1));
};


/**
 * @param {!Array<!proto.api.Change>} value
 * @return {!proto.api.ListChangesResponse} returns this
*/
proto.api.ListChangesResponse.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Change=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Change}
 */
proto.api.ListChangesResponse.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Change, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.ListChangesResponse} returns this
 */
proto.api.ListChangesResponse.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};


goog.object.extend(exports, proto.api);


/***/ }),

/***/ "./node_modules/available-typed-arrays/index.js":
/*!******************************************************!*\
  !*** ./node_modules/available-typed-arrays/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ "./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "./node_modules/long/index.js":
/*!************************************!*\
  !*** ./node_modules/long/index.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @license
 * Copyright 2009 The Closure Library Authors
 * Copyright 2020 Daniel Wirtz / The long.js Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// WebAssembly optimizations to do native i64 multiplication and divide
var wasm = null;
try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

  /**
   * The low 32 bits as a signed value.
   * @type {number}
   */
  this.low = low | 0;

  /**
   * The high 32 bits as a signed value.
   * @type {number}
   */
  this.high = high | 0;

  /**
   * Whether unsigned or not.
   * @type {boolean}
   */
  this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
  return (obj && obj["__isLong__"]) === true;
}

/**
 * @function
 * @param {*} value number
 * @returns {number}
 * @inner
 */
function ctz32(value) {
  var c = Math.clz32(value & -value);
  return value ? 31 - c : c;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
  var obj, cachedObj, cache;
  if (unsigned) {
    value >>>= 0;
    if (cache = (0 <= value && value < 256)) {
      cachedObj = UINT_CACHE[value];
      if (cachedObj)
        return cachedObj;
    }
    obj = fromBits(value, 0, true);
    if (cache)
      UINT_CACHE[value] = obj;
    return obj;
  } else {
    value |= 0;
    if (cache = (-128 <= value && value < 128)) {
      cachedObj = INT_CACHE[value];
      if (cachedObj)
        return cachedObj;
    }
    obj = fromBits(value, value < 0 ? -1 : 0, false);
    if (cache)
      INT_CACHE[value] = obj;
    return obj;
  }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
  if (isNaN(value))
    return unsigned ? UZERO : ZERO;
  if (unsigned) {
    if (value < 0)
      return UZERO;
    if (value >= TWO_PWR_64_DBL)
      return MAX_UNSIGNED_VALUE;
  } else {
    if (value <= -TWO_PWR_63_DBL)
      return MIN_VALUE;
    if (value + 1 >= TWO_PWR_63_DBL)
      return MAX_VALUE;
  }
  if (value < 0)
    return fromNumber(-value, unsigned).neg();
  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
  return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
  if (str.length === 0)
    throw Error('empty string');
  if (typeof unsigned === 'number') {
    // For goog.math.long compatibility
    radix = unsigned;
    unsigned = false;
  } else {
    unsigned = !!unsigned;
  }
  if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
    return unsigned ? UZERO : ZERO;
  radix = radix || 10;
  if (radix < 2 || 36 < radix)
    throw RangeError('radix');

  var p;
  if ((p = str.indexOf('-')) > 0)
    throw Error('interior hyphen');
  else if (p === 0) {
    return fromString(str.substring(1), unsigned, radix).neg();
  }

  // Do several (8) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = fromNumber(pow_dbl(radix, 8));

  var result = ZERO;
  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i),
      value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = fromNumber(pow_dbl(radix, size));
      result = result.mul(power).add(fromNumber(value));
    } else {
      result = result.mul(radixToPower);
      result = result.add(fromNumber(value));
    }
  }
  result.unsigned = unsigned;
  return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
  if (typeof val === 'number')
    return fromNumber(val, unsigned);
  if (typeof val === 'string')
    return fromString(val, unsigned);
  // Throws for non-objects, converts non-instanceof Long:
  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @this {!Long}
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
  return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @this {!Long}
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
  if (this.unsigned)
    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @this {!Long}
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
  radix = radix || 10;
  if (radix < 2 || 36 < radix)
    throw RangeError('radix');
  if (this.isZero())
    return '0';
  if (this.isNegative()) { // Unsigned Longs are never negative
    if (this.eq(MIN_VALUE)) {
      // We need to change the Long value before it can be negated, so we remove
      // the bottom-most digit in this base and then recurse to do the rest.
      var radixLong = fromNumber(radix),
        div = this.div(radixLong),
        rem1 = div.mul(radixLong).sub(this);
      return div.toString(radix) + rem1.toInt().toString(radix);
    } else
      return '-' + this.neg().toString(radix);
  }

  // Do several (6) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
    rem = this;
  var result = '';
  while (true) {
    var remDiv = rem.div(radixToPower),
      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
      digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero())
      return digits + result;
    else {
      while (digits.length < 6)
        digits = '0' + digits;
      result = '' + digits + result;
    }
  }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
  return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
  return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
  return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
  return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @this {!Long}
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
  if (this.isNegative()) // Unsigned Longs are never negative
    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
  var val = this.high != 0 ? this.high : this.low;
  for (var bit = 31; bit > 0; bit--)
    if ((val & (1 << bit)) != 0)
      break;
  return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @this {!Long}
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
  return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @this {!Long}
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
  return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive or zero.
 * @this {!Long}
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
  return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @this {!Long}
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
  return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @this {!Long}
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
  return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
  if (!isLong(other))
    other = fromValue(other);
  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
    return false;
  return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
  return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
  return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
  return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
  return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
  return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
  if (!isLong(other))
    other = fromValue(other);
  if (this.eq(other))
    return 0;
  var thisNeg = this.isNegative(),
    otherNeg = other.isNegative();
  if (thisNeg && !otherNeg)
    return -1;
  if (!thisNeg && otherNeg)
    return 1;
  // At this point the sign bits are the same
  if (!this.unsigned)
    return this.sub(other).isNegative() ? -1 : 1;
  // Both are positive if at least one is unsigned
  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @this {!Long}
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
  if (!this.unsigned && this.eq(MIN_VALUE))
    return MIN_VALUE;
  return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
  if (!isLong(addend))
    addend = fromValue(addend);

  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

  var a48 = this.high >>> 16;
  var a32 = this.high & 0xFFFF;
  var a16 = this.low >>> 16;
  var a00 = this.low & 0xFFFF;

  var b48 = addend.high >>> 16;
  var b32 = addend.high & 0xFFFF;
  var b16 = addend.low >>> 16;
  var b00 = addend.low & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 + b48;
  c48 &= 0xFFFF;
  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
  if (!isLong(subtrahend))
    subtrahend = fromValue(subtrahend);
  return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
  if (this.isZero())
    return this;
  if (!isLong(multiplier))
    multiplier = fromValue(multiplier);

  // use wasm support if present
  if (wasm) {
    var low = wasm["mul"](this.low,
      this.high,
      multiplier.low,
      multiplier.high);
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }

  if (multiplier.isZero())
    return this.unsigned ? UZERO : ZERO;
  if (this.eq(MIN_VALUE))
    return multiplier.isOdd() ? MIN_VALUE : ZERO;
  if (multiplier.eq(MIN_VALUE))
    return this.isOdd() ? MIN_VALUE : ZERO;

  if (this.isNegative()) {
    if (multiplier.isNegative())
      return this.neg().mul(multiplier.neg());
    else
      return this.neg().mul(multiplier).neg();
  } else if (multiplier.isNegative())
    return this.mul(multiplier.neg()).neg();

  // If both longs are small, use float multiplication
  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
  // We can skip products that would overflow.

  var a48 = this.high >>> 16;
  var a32 = this.high & 0xFFFF;
  var a16 = this.low >>> 16;
  var a00 = this.low & 0xFFFF;

  var b48 = multiplier.high >>> 16;
  var b32 = multiplier.high & 0xFFFF;
  var b16 = multiplier.low >>> 16;
  var b00 = multiplier.low & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 0xFFFF;
  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
  if (!isLong(divisor))
    divisor = fromValue(divisor);
  if (divisor.isZero())
    throw Error('division by zero');

  // use wasm support if present
  if (wasm) {
    // guard against signed division overflow: the largest
    // negative number / -1 would be 1 larger than the largest
    // positive number, due to two's complement.
    if (!this.unsigned &&
      this.high === -0x80000000 &&
      divisor.low === -1 && divisor.high === -1) {
      // be consistent with non-wasm code path
      return this;
    }
    var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(
      this.low,
      this.high,
      divisor.low,
      divisor.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }

  if (this.isZero())
    return this.unsigned ? UZERO : ZERO;
  var approx, rem, res;
  if (!this.unsigned) {
    // This section is only relevant for signed longs and is derived from the
    // closure library as a whole.
    if (this.eq(MIN_VALUE)) {
      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      else if (divisor.eq(MIN_VALUE))
        return ONE;
      else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shr(1);
        approx = halfThis.div(divisor).shl(1);
        if (approx.eq(ZERO)) {
          return divisor.isNegative() ? ONE : NEG_ONE;
        } else {
          rem = this.sub(divisor.mul(approx));
          res = approx.add(rem.div(divisor));
          return res;
        }
      }
    } else if (divisor.eq(MIN_VALUE))
      return this.unsigned ? UZERO : ZERO;
    if (this.isNegative()) {
      if (divisor.isNegative())
        return this.neg().div(divisor.neg());
      return this.neg().div(divisor).neg();
    } else if (divisor.isNegative())
      return this.div(divisor.neg()).neg();
    res = ZERO;
  } else {
    // The algorithm below has not been made for unsigned longs. It's therefore
    // required to take special care of the MSB prior to running it.
    if (!divisor.unsigned)
      divisor = divisor.toUnsigned();
    if (divisor.gt(this))
      return UZERO;
    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
      return UONE;
    res = UZERO;
  }

  // Repeat the following until the remainder is less than other:  find a
  // floating-point that approximates remainder / other *from below*, add this
  // into the result, and subtract it from the remainder.  It is critical that
  // the approximate value is less than or equal to the real value so that the
  // remainder never becomes negative.
  rem = this;
  while (rem.gte(divisor)) {
    // Approximate the result of division. This may be a little greater or
    // smaller than the actual value.
    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

    // We will tweak the approximate result by changing it in the 48-th digit or
    // the smallest non-fractional digit, whichever is larger.
    var log2 = Math.ceil(Math.log(approx) / Math.LN2),
      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      approxRes = fromNumber(approx),
      approxRem = approxRes.mul(divisor);
    while (approxRem.isNegative() || approxRem.gt(rem)) {
      approx -= delta;
      approxRes = fromNumber(approx, this.unsigned);
      approxRem = approxRes.mul(divisor);
    }

    // We know the answer can't be zero... and actually, zero would cause
    // infinite recursion since we would make no progress.
    if (approxRes.isZero())
      approxRes = ONE;

    res = res.add(approxRes);
    rem = rem.sub(approxRem);
  }
  return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
  if (!isLong(divisor))
    divisor = fromValue(divisor);

  // use wasm support if present
  if (wasm) {
    var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(
      this.low,
      this.high,
      divisor.low,
      divisor.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }

  return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @this {!Long}
 * @returns {!Long}
 */
LongPrototype.not = function not() {
  return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns count leading zeros of this Long.
 * @this {!Long}
 * @returns {!number}
 */
LongPrototype.countLeadingZeros = function countLeadingZeros() {
  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
};

/**
 * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.
 * @function
 * @param {!Long}
 * @returns {!number}
 */
LongPrototype.clz = LongPrototype.countLeadingZeros;

/**
 * Returns count trailing zeros of this Long.
 * @this {!Long}
 * @returns {!number}
 */
LongPrototype.countTrailingZeros = function countTrailingZeros() {
  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
};

/**
 * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.
 * @function
 * @param {!Long}
 * @returns {!number}
 */
LongPrototype.ctz = LongPrototype.countTrailingZeros;

/**
 * Returns the bitwise AND of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  else if (numBits < 32)
    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
  else
    return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  else if (numBits < 32)
    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
  else
    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;
  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);
  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);
  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits rotated to the left by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */
LongPrototype.rotateLeft = function rotateLeft(numBits) {
  var b;
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;
  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
  if (numBits < 32) {
    b = (32 - numBits);
    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);
  }
  numBits -= 32;
  b = (32 - numBits);
  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);
}
/**
 * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */
LongPrototype.rotl = LongPrototype.rotateLeft;

/**
 * Returns this Long with bits rotated to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */
LongPrototype.rotateRight = function rotateRight(numBits) {
  var b;
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;
  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
  if (numBits < 32) {
    b = (32 - numBits);
    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);
  }
  numBits -= 32;
  b = (32 - numBits);
  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);
}
/**
 * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */
LongPrototype.rotr = LongPrototype.rotateRight;

/**
 * Converts this Long to signed.
 * @this {!Long}
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
  if (!this.unsigned)
    return this;
  return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @this {!Long}
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
  if (this.unsigned)
    return this;
  return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @this {!Long}
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
  return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
  var hi = this.high,
    lo = this.low;
  return [
    lo & 0xff,
    lo >>> 8 & 0xff,
    lo >>> 16 & 0xff,
    lo >>> 24,
    hi & 0xff,
    hi >>> 8 & 0xff,
    hi >>> 16 & 0xff,
    hi >>> 24
  ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
  var hi = this.high,
    lo = this.low;
  return [
    hi >>> 24,
    hi >>> 16 & 0xff,
    hi >>> 8 & 0xff,
    hi & 0xff,
    lo >>> 24,
    lo >>> 16 & 0xff,
    lo >>> 8 & 0xff,
    lo & 0xff
  ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
  return new Long(
    bytes[0] |
    bytes[1] << 8 |
    bytes[2] << 16 |
    bytes[3] << 24,
    bytes[4] |
    bytes[5] << 8 |
    bytes[6] << 16 |
    bytes[7] << 24,
    unsigned
  );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
  return new Long(
    bytes[4] << 24 |
    bytes[5] << 16 |
    bytes[6] << 8 |
    bytes[7],
    bytes[0] << 24 |
    bytes[1] << 16 |
    bytes[2] << 8 |
    bytes[3],
    unsigned
  );
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Long);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!***********************!*\
  !*** ./src/yorkie.ts ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Client": () => (/* reexport safe */ _core_client__WEBPACK_IMPORTED_MODULE_0__.Client),
/* harmony export */   "ClientStatus": () => (/* reexport safe */ _core_client__WEBPACK_IMPORTED_MODULE_0__.ClientStatus),
/* harmony export */   "StreamConnectionStatus": () => (/* reexport safe */ _core_client__WEBPACK_IMPORTED_MODULE_0__.StreamConnectionStatus),
/* harmony export */   "DocumentSyncResultType": () => (/* reexport safe */ _core_client__WEBPACK_IMPORTED_MODULE_0__.DocumentSyncResultType),
/* harmony export */   "ClientEventType": () => (/* reexport safe */ _core_client__WEBPACK_IMPORTED_MODULE_0__.ClientEventType),
/* harmony export */   "DocEventType": () => (/* reexport safe */ _document_document__WEBPACK_IMPORTED_MODULE_1__.DocEventType),
/* harmony export */   "DocumentReplica": () => (/* reexport safe */ _document_document__WEBPACK_IMPORTED_MODULE_1__.DocumentReplica),
/* harmony export */   "TimeTicket": () => (/* reexport safe */ _document_time_ticket__WEBPACK_IMPORTED_MODULE_5__.TimeTicket),
/* harmony export */   "TextChangeType": () => (/* reexport safe */ _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__.TextChangeType),
/* harmony export */   "JSONElement": () => (/* reexport safe */ _document_json_element__WEBPACK_IMPORTED_MODULE_7__.JSONElement),
/* harmony export */   "Counter": () => (/* reexport safe */ _document_proxy_counter_proxy__WEBPACK_IMPORTED_MODULE_4__.Counter),
/* harmony export */   "RichText": () => (/* reexport safe */ _document_proxy_rich_text_proxy__WEBPACK_IMPORTED_MODULE_3__.RichText),
/* harmony export */   "PlainText": () => (/* reexport safe */ _document_proxy_text_proxy__WEBPACK_IMPORTED_MODULE_2__.PlainText),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/client */ "./src/core/client.ts");
/* harmony import */ var _document_document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./document/document */ "./src/document/document.ts");
/* harmony import */ var _document_proxy_text_proxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./document/proxy/text_proxy */ "./src/document/proxy/text_proxy.ts");
/* harmony import */ var _document_proxy_rich_text_proxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./document/proxy/rich_text_proxy */ "./src/document/proxy/rich_text_proxy.ts");
/* harmony import */ var _document_proxy_counter_proxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./document/proxy/counter_proxy */ "./src/document/proxy/counter_proxy.ts");
/* harmony import */ var _document_time_ticket__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./document/time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./document/json/rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/* harmony import */ var _document_json_element__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./document/json/element */ "./src/document/json/element.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */













/**
 * The top-level yorkie namespace with additional properties.
 *
 * In production, this will be called exactly once and the result
 * assigned to the `yorkie` global.
 *
 * e.g) `new yorkie.Client(...);`
 *
 * @public
 */
const yorkie = {
    Client: _core_client__WEBPACK_IMPORTED_MODULE_0__.Client,
    Document: _document_document__WEBPACK_IMPORTED_MODULE_1__.DocumentReplica,
    Text: _document_proxy_text_proxy__WEBPACK_IMPORTED_MODULE_2__.PlainText,
    RichText: _document_proxy_rich_text_proxy__WEBPACK_IMPORTED_MODULE_3__.RichText,
    Counter: _document_proxy_counter_proxy__WEBPACK_IMPORTED_MODULE_4__.Counter,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (yorkie);

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW9ya2llLWpzLXNkay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7Ozs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYix3QkFBd0IsMkVBQTJFLGtDQUFrQyx3QkFBd0IsT0FBTyxrQ0FBa0MsbUlBQW1JOztBQUV6VSxrREFBa0QsMENBQTBDOztBQUU1RixlQUFlLG1CQUFPLENBQUMseUVBQW1CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsbUJBQU8sQ0FBQyx5R0FBbUM7O0FBRWhFLGdCQUFnQixtQkFBTyxDQUFDLDBDQUFPO0FBQy9COztBQUVBLHFCQUFxQixxRUFBc0I7QUFDM0M7QUFDQTs7QUFFQSxtREFBbUQsZ0dBQW1DO0FBQ3RGLHVDQUF1QyxtQkFBTyxDQUFDLG9EQUFXO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLDZGQUE2Qjs7QUFFeEQ7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEI7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTyxlQUFlLE9BQU8sZUFBZSxPQUFPLFdBQVcsT0FBTztBQUN0RjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0JBQW9COztBQUVwQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQSxzRUFBc0UsYUFBYTtBQUNuRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCOztBQUVoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBEQUEwRDs7QUFFMUQ7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNB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QUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOzs7QUFHQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7O0FBRUEsU0FBUyxrQkFBa0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQix3QkFB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QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixlQUFlO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0Esc0JBQXNCLGVBQWU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FB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LENBQUMsSUFBb0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsRUFBRTtZQUMzQixJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxFQUFFO1lBQzFELElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsRUFBRTtZQUNyRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sV0FBVyxDQUFDLElBQW9CO1FBQ3RDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsSUFBSyxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsQ0FBQztZQUMzQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQW9CO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJ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QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNENBQTRDLEtBQUs7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxvQ0FBb0MsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFDQUFxQztBQUNoRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVDQUF1QztBQUNsRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFDQUFxQztBQUNoRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVDQUF1QztBQUNsRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsK0JBQStCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlDQUF5QztBQUNwRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsNEJBQTRCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNDQUFzQztBQUNqRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsK0JBQStCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlDQUF5QztBQUNwRCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZUFBZTtBQUN6QyxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBO0FBQ0EsV0FBVyw4QkFBOEI7QUFDekMsWUFBWTtBQUNaLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOEJBQThCO0FBQ3pDLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsc0JBQXNCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixhQUFhO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhCQUE4QjtBQUN6QyxXQUFXLG9CQUFvQjtBQUMvQixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFlBQVksOEJBQThCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQkFBc0I7QUFDakMsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsZ0NBQWdDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxvQkFBb0I7QUFDL0IsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLG1DQUFtQztBQUM5QyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQ0FBbUM7QUFDOUMsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQ0FBbUM7QUFDOUMsV0FBVyxvQkFBb0I7QUFDL0IsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQiw0QkFBNEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZUFBZTtBQUN6QyxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWTtBQUNaLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsaUNBQWlDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLGdDQUFnQztBQUMzQyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQ0FBZ0M7QUFDM0MsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixzQkFBc0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGFBQWE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0NBQWdDO0FBQzNDLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQkFBc0I7QUFDakMsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsbUNBQW1DO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZDQUE2QztBQUN4RCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsa0NBQWtDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRDQUE0QztBQUN2RCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsa0NBQWtDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRDQUE0QztBQUN2RCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVDQUF1QztBQUNsRCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsaUNBQWlDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDJDQUEyQztBQUN0RCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsZ0NBQWdDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDBDQUEwQztBQUNyRCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZUFBZTtBQUN6QyxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix3QkFBd0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0NBQWtDO0FBQzdDLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQixZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4QkFBOEI7QUFDekMsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHdCQUF3QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQ0FBa0M7QUFDN0MsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLG9CQUFvQjtBQUMvQixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLDZCQUE2QjtBQUN4QyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZCQUE2QjtBQUN4QyxXQUFXLG9CQUFvQjtBQUMvQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZCQUE2QjtBQUN4QyxXQUFXLG9CQUFvQjtBQUMvQixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEMsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUJBQXlCO0FBQ3BDLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxZQUFZLHlCQUF5QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5QkFBeUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsK0NBQStDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5QkFBeUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx5QkFBeUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSx5QkFBeUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSx5QkFBeUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLG9CQUFvQjtBQUMvQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLG9CQUFvQjtBQUMvQixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxZQUFZLHVCQUF1QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLHVCQUF1QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsV0FBVyxvQkFBb0I7QUFDL0IsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixrQ0FBa0M7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNENBQTRDO0FBQ3ZELFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QyxXQUFXLG9CQUFvQjtBQUMvQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLG9CQUFvQjtBQUMvQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGFBQWE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLG9CQUFvQjtBQUMvQixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsK0JBQStCO0FBQzFDLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZUFBZTtBQUN6QyxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDJCQUEyQjtBQUN0QyxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlO0FBQ3pDLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxZQUFZO0FBQ1osY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxvQkFBb0I7QUFDL0IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLG9CQUFvQjtBQUMvQixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsb0JBQW9CO0FBQy9CLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsYUFBYTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxvQkFBb0I7QUFDL0IsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxZQUFZLHVCQUF1QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekMsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDLFlBQVk7QUFDWixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDLFdBQVcsb0JBQW9CO0FBQy9CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIseUJBQXlCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsV0FBVyxvQkFBb0I7QUFDL0IsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEMsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2QkFBNkI7QUFDeEMsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcHlWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsa0RBQVU7QUFDN0I7QUFDQTtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLG9EQUFtQjtBQUM5QztBQUNBLFlBQVksbUJBQU8sQ0FBQyw4Q0FBZ0I7QUFDcEM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyx5QkFBeUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkJBQTZCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrQ0FBa0M7QUFDL0MsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQ0FBa0M7QUFDN0M7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBLFdBQVc7QUFDWDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtDQUFrQztBQUM3QztBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9DQUFvQztBQUNqRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9DQUFvQztBQUMvQztBQUNBLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0EsV0FBVztBQUNYO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0NBQW9DO0FBQy9DO0FBQ0EsV0FBVywwQkFBMEI7QUFDckM7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0NBQWtDO0FBQzdDO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEM7QUFDQSxXQUFXO0FBQ1g7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQ0FBa0M7QUFDN0M7QUFDQSxXQUFXLDBCQUEwQjtBQUNyQztBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrQ0FBa0M7QUFDL0MsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQ0FBa0M7QUFDN0M7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBLFdBQVc7QUFDWDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtDQUFrQztBQUM3QztBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGtDQUFrQztBQUMvQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtDQUFrQztBQUM3QztBQUNBLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0EsV0FBVztBQUNYO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0NBQWtDO0FBQzdDO0FBQ0EsV0FBVywwQkFBMEI7QUFDckM7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0NBQWtDO0FBQzdDLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtDQUFrQztBQUM3QyxXQUFXLDBCQUEwQjtBQUNyQztBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0QkFBNEI7QUFDekMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBLFdBQVc7QUFDWDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLCtCQUErQjtBQUM1QyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLCtCQUErQjtBQUMxQztBQUNBLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0EsV0FBVztBQUNYO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsK0JBQStCO0FBQzFDO0FBQ0EsV0FBVywwQkFBMEI7QUFDckM7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzlpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QixjQUFjLG9CQUFvQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQywwRUFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsb0RBQW1CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FB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QUNKO0FBRXpFOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sTUFBTSxHQUFHO0lBQ2IsTUFBTTtJQUNOLFFBQVEsRUFBRSwrREFBZTtJQUN6QixJQUFJLEVBQUUsaUVBQVM7SUFDZixRQUFRO0lBQ1IsT0FBTztDQUNSLENBQUM7QUFFRixpRUFBZSxNQUFNLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b3JraWUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvYXNzZXJ0LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvYXNzZXJ0L2Fzc2VydGlvbl9lcnJvci5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvYXNzZXJ0L2J1aWxkL2ludGVybmFsL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvYXNzZXJ0L2J1aWxkL2ludGVybmFsL3V0aWwvY29tcGFyaXNvbnMuanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvY2FsbEJvdW5kLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2NvbnNvbGUtYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2VzNi1vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9mb3JlYWNoL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9nZXQtaW50cmluc2ljL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9nb29nbGUtcHJvdG9idWYvZ29vZ2xlLXByb3RvYnVmLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9nb29nbGUtcHJvdG9idWYvZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcF9wYi5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvZ3JwYy13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvaGFzLXRvc3RyaW5ndGFnL3NoYW1zLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2lzLWdlbmVyYXRvci1mdW5jdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvaXMtbmFuL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9pcy1uYW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2lzLW5hbi9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvaXMtbmFuL3NoaW0uanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL2lzLXR5cGVkLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3BvbHlmaWxsLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvc2hpbS5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9hcGkvY29udmVydGVyLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9jb3JlL2F1dGgudHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2NvcmUvY2xpZW50LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9jaGFuZ2UvY2hhbmdlLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9jaGFuZ2UvY2hhbmdlX2lkLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9jaGFuZ2UvY2hhbmdlX3BhY2sudHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2RvY3VtZW50L2NoYW5nZS9jaGVja3BvaW50LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9jaGFuZ2UvY29udGV4dC50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvZG9jdW1lbnQudHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2RvY3VtZW50L2pzb24vYXJyYXkudHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2RvY3VtZW50L2pzb24vY291bnRlci50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9qc29uL29iamVjdC50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvanNvbi9wbGFpbl90ZXh0LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9qc29uL3ByaW1pdGl2ZS50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvanNvbi9yZ2FfdHJlZV9saXN0LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX3NwbGl0LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9qc29uL3JodC50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvanNvbi9yaHRfcHFfbWFwLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9qc29uL3JpY2hfdGV4dC50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvanNvbi9yb290LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vYWRkX29wZXJhdGlvbi50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL2VkaXRfb3BlcmF0aW9uLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vaW5jcmVhc2Vfb3BlcmF0aW9uLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vbW92ZV9vcGVyYXRpb24udHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2RvY3VtZW50L29wZXJhdGlvbi9vcGVyYXRpb24udHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2RvY3VtZW50L29wZXJhdGlvbi9yZW1vdmVfb3BlcmF0aW9uLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vcmljaF9lZGl0X29wZXJhdGlvbi50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL3NlbGVjdF9vcGVyYXRpb24udHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL2RvY3VtZW50L29wZXJhdGlvbi9zZXRfb3BlcmF0aW9uLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vc3R5bGVfb3BlcmF0aW9uLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9wcm94eS9hcnJheV9wcm94eS50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvcHJveHkvY291bnRlcl9wcm94eS50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvcHJveHkvb2JqZWN0X3Byb3h5LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9wcm94eS9wcm94eS50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvZG9jdW1lbnQvcHJveHkvcmljaF90ZXh0X3Byb3h5LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC9wcm94eS90ZXh0X3Byb3h5LnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC90aW1lL2FjdG9yX2lkLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldC50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvdXRpbC9jb21wYXJhdG9yLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy91dGlsL2Vycm9yLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy91dGlsL2hlYXAudHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL3V0aWwvbGxyYl90cmVlLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy91dGlsL2xvZ2dlci50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9zcmMvdXRpbC9vYnNlcnZhYmxlLnRzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy91dGlsL3NwbGF5X3RyZWUudHMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL3V0aWwvdXVpZC50cyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L3R5cGVzLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8veW9ya2llLy4vbm9kZV9tb2R1bGVzL3doaWNoLXR5cGVkLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9hcGkvcmVzb3VyY2VzX3BiLmpzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9hcGkveW9ya2llX2dycGNfd2ViX3BiLmpzIiwid2VicGFjazovL3lvcmtpZS8uL3NyYy9hcGkveW9ya2llX3BiLmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9hdmFpbGFibGUtdHlwZWQtYXJyYXlzL2luZGV4LmpzIiwid2VicGFjazovL3lvcmtpZS8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly95b3JraWUvLi9ub2RlX21vZHVsZXMvbG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly95b3JraWUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8veW9ya2llL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3lvcmtpZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8veW9ya2llL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8veW9ya2llL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8veW9ya2llL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8veW9ya2llLy4vc3JjL3lvcmtpZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ5b3JraWVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wieW9ya2llXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9hc3NlcnQuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMmE1MWFlNDI0YTUxM2VjOWE2YWEzNDY2YmFhMGNjMWQ1NWRkNGYzYlxuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL2Vycm9ycycpLFxuICAgIF9yZXF1aXJlJGNvZGVzID0gX3JlcXVpcmUuY29kZXMsXG4gICAgRVJSX0FNQklHVU9VU19BUkdVTUVOVCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9BTUJJR1VPVVNfQVJHVU1FTlQsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVkFMVUUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVkFMVUUsXG4gICAgRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFLFxuICAgIEVSUl9NSVNTSU5HX0FSR1MgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUlTU0lOR19BUkdTO1xuXG52YXIgQXNzZXJ0aW9uRXJyb3IgPSByZXF1aXJlKCcuL2ludGVybmFsL2Fzc2VydC9hc3NlcnRpb25fZXJyb3InKTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3V0aWwvJyksXG4gICAgaW5zcGVjdCA9IF9yZXF1aXJlMi5pbnNwZWN0O1xuXG52YXIgX3JlcXVpcmUkdHlwZXMgPSByZXF1aXJlKCd1dGlsLycpLnR5cGVzLFxuICAgIGlzUHJvbWlzZSA9IF9yZXF1aXJlJHR5cGVzLmlzUHJvbWlzZSxcbiAgICBpc1JlZ0V4cCA9IF9yZXF1aXJlJHR5cGVzLmlzUmVnRXhwO1xuXG52YXIgb2JqZWN0QXNzaWduID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24gOiByZXF1aXJlKCdlczYtb2JqZWN0LWFzc2lnbicpLmFzc2lnbjtcbnZhciBvYmplY3RJcyA9IE9iamVjdC5pcyA/IE9iamVjdC5pcyA6IHJlcXVpcmUoJ29iamVjdC1pcycpO1xudmFyIGVycm9yQ2FjaGUgPSBuZXcgTWFwKCk7XG52YXIgaXNEZWVwRXF1YWw7XG52YXIgaXNEZWVwU3RyaWN0RXF1YWw7XG52YXIgcGFyc2VFeHByZXNzaW9uQXQ7XG52YXIgZmluZE5vZGVBcm91bmQ7XG52YXIgZGVjb2RlcjtcblxuZnVuY3Rpb24gbGF6eUxvYWRDb21wYXJpc29uKCkge1xuICB2YXIgY29tcGFyaXNvbiA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvdXRpbC9jb21wYXJpc29ucycpO1xuXG4gIGlzRGVlcEVxdWFsID0gY29tcGFyaXNvbi5pc0RlZXBFcXVhbDtcbiAgaXNEZWVwU3RyaWN0RXF1YWwgPSBjb21wYXJpc29uLmlzRGVlcFN0cmljdEVxdWFsO1xufSAvLyBFc2NhcGUgY29udHJvbCBjaGFyYWN0ZXJzIGJ1dCBub3QgXFxuIGFuZCBcXHQgdG8ga2VlcCB0aGUgbGluZSBicmVha3MgYW5kXG4vLyBpbmRlbnRhdGlvbiBpbnRhY3QuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG5cbnZhciBlc2NhcGVTZXF1ZW5jZXNSZWdFeHAgPSAvW1xceDAwLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXS9nO1xudmFyIG1ldGEgPSBbXCJcXFxcdTAwMDBcIiwgXCJcXFxcdTAwMDFcIiwgXCJcXFxcdTAwMDJcIiwgXCJcXFxcdTAwMDNcIiwgXCJcXFxcdTAwMDRcIiwgXCJcXFxcdTAwMDVcIiwgXCJcXFxcdTAwMDZcIiwgXCJcXFxcdTAwMDdcIiwgJ1xcXFxiJywgJycsICcnLCBcIlxcXFx1MDAwYlwiLCAnXFxcXGYnLCAnJywgXCJcXFxcdTAwMGVcIiwgXCJcXFxcdTAwMGZcIiwgXCJcXFxcdTAwMTBcIiwgXCJcXFxcdTAwMTFcIiwgXCJcXFxcdTAwMTJcIiwgXCJcXFxcdTAwMTNcIiwgXCJcXFxcdTAwMTRcIiwgXCJcXFxcdTAwMTVcIiwgXCJcXFxcdTAwMTZcIiwgXCJcXFxcdTAwMTdcIiwgXCJcXFxcdTAwMThcIiwgXCJcXFxcdTAwMTlcIiwgXCJcXFxcdTAwMWFcIiwgXCJcXFxcdTAwMWJcIiwgXCJcXFxcdTAwMWNcIiwgXCJcXFxcdTAwMWRcIiwgXCJcXFxcdTAwMWVcIiwgXCJcXFxcdTAwMWZcIl07XG5cbnZhciBlc2NhcGVGbiA9IGZ1bmN0aW9uIGVzY2FwZUZuKHN0cikge1xuICByZXR1cm4gbWV0YVtzdHIuY2hhckNvZGVBdCgwKV07XG59O1xuXG52YXIgd2FybmVkID0gZmFsc2U7IC8vIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93XG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXG52YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvaztcbnZhciBOT19FWENFUFRJT05fU0VOVElORUwgPSB7fTsgLy8gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcbi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxuXG5mdW5jdGlvbiBpbm5lckZhaWwob2JqKSB7XG4gIGlmIChvYmoubWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyBvYmoubWVzc2FnZTtcbiAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG9iaik7XG59XG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGbikge1xuICB2YXIgYXJnc0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbnRlcm5hbE1lc3NhZ2U7XG5cbiAgaWYgKGFyZ3NMZW4gPT09IDApIHtcbiAgICBpbnRlcm5hbE1lc3NhZ2UgPSAnRmFpbGVkJztcbiAgfSBlbHNlIGlmIChhcmdzTGVuID09PSAxKSB7XG4gICAgbWVzc2FnZSA9IGFjdHVhbDtcbiAgICBhY3R1YWwgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHdhcm5lZCA9PT0gZmFsc2UpIHtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICB2YXIgd2FybiA9IHByb2Nlc3MuZW1pdFdhcm5pbmcgPyBwcm9jZXNzLmVtaXRXYXJuaW5nIDogY29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7XG4gICAgICB3YXJuKCdhc3NlcnQuZmFpbCgpIHdpdGggbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBpcyBkZXByZWNhdGVkLiAnICsgJ1BsZWFzZSB1c2UgYXNzZXJ0LnN0cmljdEVxdWFsKCkgaW5zdGVhZCBvciBvbmx5IHBhc3MgYSBtZXNzYWdlLicsICdEZXByZWNhdGlvbldhcm5pbmcnLCAnREVQMDA5NCcpO1xuICAgIH1cblxuICAgIGlmIChhcmdzTGVuID09PSAyKSBvcGVyYXRvciA9ICchPSc7XG4gIH1cblxuICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyBtZXNzYWdlO1xuICB2YXIgZXJyQXJncyA9IHtcbiAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yID09PSB1bmRlZmluZWQgPyAnZmFpbCcgOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGbiB8fCBmYWlsXG4gIH07XG5cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgIGVyckFyZ3MubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cblxuICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKGVyckFyZ3MpO1xuXG4gIGlmIChpbnRlcm5hbE1lc3NhZ2UpIHtcbiAgICBlcnIubWVzc2FnZSA9IGludGVybmFsTWVzc2FnZTtcbiAgICBlcnIuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cblxuICB0aHJvdyBlcnI7XG59XG5cbmFzc2VydC5mYWlsID0gZmFpbDsgLy8gVGhlIEFzc2VydGlvbkVycm9yIGlzIGRlZmluZWQgaW4gaW50ZXJuYWwvZXJyb3IuXG5cbmFzc2VydC5Bc3NlcnRpb25FcnJvciA9IEFzc2VydGlvbkVycm9yO1xuXG5mdW5jdGlvbiBpbm5lck9rKGZuLCBhcmdMZW4sIHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICB2YXIgZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlO1xuXG4gICAgaWYgKGFyZ0xlbiA9PT0gMCkge1xuICAgICAgZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gICAgICBtZXNzYWdlID0gJ05vIHZhbHVlIGFyZ3VtZW50IHBhc3NlZCB0byBgYXNzZXJ0Lm9rKClgJztcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgbWVzc2FnZTtcbiAgICB9XG5cbiAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgIGFjdHVhbDogdmFsdWUsXG4gICAgICBleHBlY3RlZDogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJz09JyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICB9KTtcbiAgICBlcnIuZ2VuZXJhdGVkTWVzc2FnZSA9IGdlbmVyYXRlZE1lc3NhZ2U7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59IC8vIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhdmFsdWUuXG5cblxuZnVuY3Rpb24gb2soKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpbm5lck9rLmFwcGx5KHZvaWQgMCwgW29rLCBhcmdzLmxlbmd0aF0uY29uY2F0KGFyZ3MpKTtcbn1cblxuYXNzZXJ0Lm9rID0gb2s7IC8vIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aCA9PS5cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzICovXG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblxuXG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICc9PScsXG4gICAgICBzdGFja1N0YXJ0Rm46IGVxdWFsXG4gICAgfSk7XG4gIH1cbn07IC8vIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3Rcbi8vIGVxdWFsIHdpdGggIT0uXG5cblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG5cbiAgaWYgKGFjdHVhbCA9PSBleHBlY3RlZCkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJyE9JyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RXF1YWxcbiAgICB9KTtcbiAgfVxufTsgLy8gVGhlIGVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBhIGRlZXAgZXF1YWxpdHkgcmVsYXRpb24uXG5cblxuYXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoIWlzRGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnZGVlcEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZGVlcEVxdWFsXG4gICAgfSk7XG4gIH1cbn07IC8vIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuXG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKGlzRGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90RGVlcEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RGVlcEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIGRlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoIWlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZGVlcFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbmFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWwgPSBub3REZWVwU3RyaWN0RXF1YWw7XG5cbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3REZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3REZWVwU3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufVxuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmICghb2JqZWN0SXMoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdzdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKG9iamVjdElzKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90U3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3RTdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgQ29tcGFyaXNvbiA9IGZ1bmN0aW9uIENvbXBhcmlzb24ob2JqLCBrZXlzLCBhY3R1YWwpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcGFyaXNvbik7XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgaWYgKGFjdHVhbCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBhY3R1YWxba2V5XSA9PT0gJ3N0cmluZycgJiYgaXNSZWdFeHAob2JqW2tleV0pICYmIG9ialtrZXldLnRlc3QoYWN0dWFsW2tleV0pKSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBhY3R1YWxba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gY29tcGFyZUV4Y2VwdGlvbktleShhY3R1YWwsIGV4cGVjdGVkLCBrZXksIG1lc3NhZ2UsIGtleXMsIGZuKSB7XG4gIGlmICghKGtleSBpbiBhY3R1YWwpIHx8ICFpc0RlZXBTdHJpY3RFcXVhbChhY3R1YWxba2V5XSwgZXhwZWN0ZWRba2V5XSkpIHtcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIC8vIENyZWF0ZSBwbGFjZWhvbGRlciBvYmplY3RzIHRvIGNyZWF0ZSBhIG5pY2Ugb3V0cHV0LlxuICAgICAgdmFyIGEgPSBuZXcgQ29tcGFyaXNvbihhY3R1YWwsIGtleXMpO1xuICAgICAgdmFyIGIgPSBuZXcgQ29tcGFyaXNvbihleHBlY3RlZCwga2V5cywgYWN0dWFsKTtcbiAgICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgICBhY3R1YWw6IGEsXG4gICAgICAgIGV4cGVjdGVkOiBiLFxuICAgICAgICBvcGVyYXRvcjogJ2RlZXBTdHJpY3RFcXVhbCcsXG4gICAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICAgIH0pO1xuICAgICAgZXJyLmFjdHVhbCA9IGFjdHVhbDtcbiAgICAgIGVyci5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgICAgZXJyLm9wZXJhdG9yID0gZm4ubmFtZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6IGZuLm5hbWUsXG4gICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCwgbXNnLCBmbikge1xuICBpZiAodHlwZW9mIGV4cGVjdGVkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGlzUmVnRXhwKGV4cGVjdGVkKSkgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTsgLy8gYXNzZXJ0LmRvZXNOb3RUaHJvdyBkb2VzIG5vdCBhY2NlcHQgb2JqZWN0cy5cblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2V4cGVjdGVkJywgWydGdW5jdGlvbicsICdSZWdFeHAnXSwgZXhwZWN0ZWQpO1xuICAgIH0gLy8gSGFuZGxlIHByaW1pdGl2ZXMgcHJvcGVybHkuXG5cblxuICAgIGlmIChfdHlwZW9mKGFjdHVhbCkgIT09ICdvYmplY3QnIHx8IGFjdHVhbCA9PT0gbnVsbCkge1xuICAgICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgICB9KTtcbiAgICAgIGVyci5vcGVyYXRvciA9IGZuLm5hbWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhleHBlY3RlZCk7IC8vIFNwZWNpYWwgaGFuZGxlIGVycm9ycyB0byBtYWtlIHN1cmUgdGhlIG5hbWUgYW5kIHRoZSBtZXNzYWdlIGFyZSBjb21wYXJlZFxuICAgIC8vIGFzIHdlbGwuXG5cbiAgICBpZiAoZXhwZWN0ZWQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAga2V5cy5wdXNoKCduYW1lJywgJ21lc3NhZ2UnKTtcbiAgICB9IGVsc2UgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1ZBTFVFKCdlcnJvcicsIGV4cGVjdGVkLCAnbWF5IG5vdCBiZSBhbiBlbXB0eSBvYmplY3QnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgYWN0dWFsW2tleV0gPT09ICdzdHJpbmcnICYmIGlzUmVnRXhwKGV4cGVjdGVkW2tleV0pICYmIGV4cGVjdGVkW2tleV0udGVzdChhY3R1YWxba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb21wYXJlRXhjZXB0aW9uS2V5KGFjdHVhbCwgZXhwZWN0ZWQsIGtleSwgbXNnLCBrZXlzLCBmbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gR3VhcmQgaW5zdGFuY2VvZiBhZ2FpbnN0IGFycm93IGZ1bmN0aW9ucyBhcyB0aGV5IGRvbid0IGhhdmUgYSBwcm90b3R5cGUuXG5cblxuICBpZiAoZXhwZWN0ZWQucHJvdG90eXBlICE9PSB1bmRlZmluZWQgJiYgYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXRBY3R1YWwoZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZm4nLCAnRnVuY3Rpb24nLCBmbik7XG4gIH1cblxuICB0cnkge1xuICAgIGZuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIHJldHVybiBOT19FWENFUFRJT05fU0VOVElORUw7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSXNQcm9taXNlKG9iaikge1xuICAvLyBBY2NlcHQgbmF0aXZlIEVTNiBwcm9taXNlcyBhbmQgcHJvbWlzZXMgdGhhdCBhcmUgaW1wbGVtZW50ZWQgaW4gYSBzaW1pbGFyXG4gIC8vIHdheS4gRG8gbm90IGFjY2VwdCB0aGVuYWJsZXMgdGhhdCB1c2UgYSBmdW5jdGlvbiBhcyBgb2JqYCBhbmQgdGhhdCBoYXZlIG5vXG4gIC8vIGBjYXRjaGAgaGFuZGxlci5cbiAgLy8gVE9ETzogdGhlbmFibGVzIGFyZSBjaGVja2VkIHVwIHVudGlsIHRoZXkgaGF2ZSB0aGUgY29ycmVjdCBtZXRob2RzLFxuICAvLyBidXQgYWNjb3JkaW5nIHRvIGRvY3VtZW50YXRpb24sIHRoZSBgdGhlbmAgbWV0aG9kIHNob3VsZCByZWNlaXZlXG4gIC8vIHRoZSBgZnVsZmlsbGAgYW5kIGByZWplY3RgIGFyZ3VtZW50cyBhcyB3ZWxsIG9yIGl0IG1heSBiZSBuZXZlciByZXNvbHZlZC5cbiAgcmV0dXJuIGlzUHJvbWlzZShvYmopIHx8IG9iaiAhPT0gbnVsbCAmJiBfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLmNhdGNoID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQWN0dWFsKHByb21pc2VGbikge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdFByb21pc2U7XG5cbiAgICBpZiAodHlwZW9mIHByb21pc2VGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gUmV0dXJuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpZiBgcHJvbWlzZUZuYCB0aHJvd3Mgc3luY2hyb25vdXNseS5cbiAgICAgIHJlc3VsdFByb21pc2UgPSBwcm9taXNlRm4oKTsgLy8gRmFpbCBpbiBjYXNlIG5vIHByb21pc2UgaXMgcmV0dXJuZWQuXG5cbiAgICAgIGlmICghY2hlY2tJc1Byb21pc2UocmVzdWx0UHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSgnaW5zdGFuY2Ugb2YgUHJvbWlzZScsICdwcm9taXNlRm4nLCByZXN1bHRQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoZWNrSXNQcm9taXNlKHByb21pc2VGbikpIHtcbiAgICAgIHJlc3VsdFByb21pc2UgPSBwcm9taXNlRm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgncHJvbWlzZUZuJywgWydGdW5jdGlvbicsICdQcm9taXNlJ10sIHByb21pc2VGbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdFByb21pc2U7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gTk9fRVhDRVBUSU9OX1NFTlRJTkVMO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGV4cGVjdHNFcnJvcihzdGFja1N0YXJ0Rm4sIGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UpIHtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdlcnJvcicsIFsnT2JqZWN0JywgJ0Vycm9yJywgJ0Z1bmN0aW9uJywgJ1JlZ0V4cCddLCBlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsKSB7XG4gICAgICBpZiAoYWN0dWFsLm1lc3NhZ2UgPT09IGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UKCdlcnJvci9tZXNzYWdlJywgXCJUaGUgZXJyb3IgbWVzc2FnZSBcXFwiXCIuY29uY2F0KGFjdHVhbC5tZXNzYWdlLCBcIlxcXCIgaXMgaWRlbnRpY2FsIHRvIHRoZSBtZXNzYWdlLlwiKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3R1YWwgPT09IGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0FNQklHVU9VU19BUkdVTUVOVCgnZXJyb3IvbWVzc2FnZScsIFwiVGhlIGVycm9yIFxcXCJcIi5jb25jYXQoYWN0dWFsLCBcIlxcXCIgaXMgaWRlbnRpY2FsIHRvIHRoZSBtZXNzYWdlLlwiKSk7XG4gICAgfVxuXG4gICAgbWVzc2FnZSA9IGVycm9yO1xuICAgIGVycm9yID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGVycm9yICE9IG51bGwgJiYgX3R5cGVvZihlcnJvcikgIT09ICdvYmplY3QnICYmIHR5cGVvZiBlcnJvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZXJyb3InLCBbJ09iamVjdCcsICdFcnJvcicsICdGdW5jdGlvbicsICdSZWdFeHAnXSwgZXJyb3IpO1xuICB9XG5cbiAgaWYgKGFjdHVhbCA9PT0gTk9fRVhDRVBUSU9OX1NFTlRJTkVMKSB7XG4gICAgdmFyIGRldGFpbHMgPSAnJztcblxuICAgIGlmIChlcnJvciAmJiBlcnJvci5uYW1lKSB7XG4gICAgICBkZXRhaWxzICs9IFwiIChcIi5jb25jYXQoZXJyb3IubmFtZSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGRldGFpbHMgKz0gbWVzc2FnZSA/IFwiOiBcIi5jb25jYXQobWVzc2FnZSkgOiAnLic7XG4gICAgdmFyIGZuVHlwZSA9IHN0YWNrU3RhcnRGbi5uYW1lID09PSAncmVqZWN0cycgPyAncmVqZWN0aW9uJyA6ICdleGNlcHRpb24nO1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IHVuZGVmaW5lZCxcbiAgICAgIGV4cGVjdGVkOiBlcnJvcixcbiAgICAgIG9wZXJhdG9yOiBzdGFja1N0YXJ0Rm4ubmFtZSxcbiAgICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBleHBlY3RlZCBcIi5jb25jYXQoZm5UeXBlKS5jb25jYXQoZGV0YWlscyksXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGblxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGVycm9yICYmICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGVycm9yLCBtZXNzYWdlLCBzdGFja1N0YXJ0Rm4pKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4cGVjdHNOb0Vycm9yKHN0YWNrU3RhcnRGbiwgYWN0dWFsLCBlcnJvciwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBOT19FWENFUFRJT05fU0VOVElORUwpIHJldHVybjtcblxuICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBlcnJvcjtcbiAgICBlcnJvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghZXJyb3IgfHwgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBlcnJvcikpIHtcbiAgICB2YXIgZGV0YWlscyA9IG1lc3NhZ2UgPyBcIjogXCIuY29uY2F0KG1lc3NhZ2UpIDogJy4nO1xuICAgIHZhciBmblR5cGUgPSBzdGFja1N0YXJ0Rm4ubmFtZSA9PT0gJ2RvZXNOb3RSZWplY3QnID8gJ3JlamVjdGlvbicgOiAnZXhjZXB0aW9uJztcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXJyb3IsXG4gICAgICBvcGVyYXRvcjogc3RhY2tTdGFydEZuLm5hbWUsXG4gICAgICBtZXNzYWdlOiBcIkdvdCB1bndhbnRlZCBcIi5jb25jYXQoZm5UeXBlKS5jb25jYXQoZGV0YWlscywgXCJcXG5cIikgKyBcIkFjdHVhbCBtZXNzYWdlOiBcXFwiXCIuY29uY2F0KGFjdHVhbCAmJiBhY3R1YWwubWVzc2FnZSwgXCJcXFwiXCIpLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm5cbiAgICB9KTtcbiAgfVxuXG4gIHRocm93IGFjdHVhbDtcbn1cblxuYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uIHRocm93cyhwcm9taXNlRm4pIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgZXhwZWN0c0Vycm9yLmFwcGx5KHZvaWQgMCwgW3Rocm93cywgZ2V0QWN0dWFsKHByb21pc2VGbildLmNvbmNhdChhcmdzKSk7XG59O1xuXG5hc3NlcnQucmVqZWN0cyA9IGZ1bmN0aW9uIHJlamVjdHMocHJvbWlzZUZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiB3YWl0Rm9yQWN0dWFsKHByb21pc2VGbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIGV4cGVjdHNFcnJvci5hcHBseSh2b2lkIDAsIFtyZWplY3RzLCByZXN1bHRdLmNvbmNhdChhcmdzKSk7XG4gIH0pO1xufTtcblxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uIGRvZXNOb3RUaHJvdyhmbikge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICBleHBlY3RzTm9FcnJvci5hcHBseSh2b2lkIDAsIFtkb2VzTm90VGhyb3csIGdldEFjdHVhbChmbildLmNvbmNhdChhcmdzKSk7XG59O1xuXG5hc3NlcnQuZG9lc05vdFJlamVjdCA9IGZ1bmN0aW9uIGRvZXNOb3RSZWplY3QoZm4pIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1IC0gMV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgcmV0dXJuIHdhaXRGb3JBY3R1YWwoZm4pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiBleHBlY3RzTm9FcnJvci5hcHBseSh2b2lkIDAsIFtkb2VzTm90UmVqZWN0LCByZXN1bHRdLmNvbmNhdChhcmdzKSk7XG4gIH0pO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbiBpZkVycm9yKGVycikge1xuICBpZiAoZXJyICE9PSBudWxsICYmIGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnaWZFcnJvciBnb3QgdW53YW50ZWQgZXhjZXB0aW9uOiAnO1xuXG4gICAgaWYgKF90eXBlb2YoZXJyKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGVyci5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGVyci5tZXNzYWdlLmxlbmd0aCA9PT0gMCAmJiBlcnIuY29uc3RydWN0b3IpIHtcbiAgICAgICAgbWVzc2FnZSArPSBlcnIuY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gZXJyLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2UgKz0gaW5zcGVjdChlcnIpO1xuICAgIH1cblxuICAgIHZhciBuZXdFcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgYWN0dWFsOiBlcnIsXG4gICAgICBleHBlY3RlZDogbnVsbCxcbiAgICAgIG9wZXJhdG9yOiAnaWZFcnJvcicsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgc3RhY2tTdGFydEZuOiBpZkVycm9yXG4gICAgfSk7IC8vIE1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBoYXZlIGEgc3RhY2sgdHJhY2UhXG5cbiAgICB2YXIgb3JpZ1N0YWNrID0gZXJyLnN0YWNrO1xuXG4gICAgaWYgKHR5cGVvZiBvcmlnU3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUaGlzIHdpbGwgcmVtb3ZlIGFueSBkdXBsaWNhdGVkIGZyYW1lcyBmcm9tIHRoZSBlcnJvciBmcmFtZXMgdGFrZW5cbiAgICAgIC8vIGZyb20gd2l0aGluIGBpZkVycm9yYCBhbmQgYWRkIHRoZSBvcmlnaW5hbCBlcnJvciBmcmFtZXMgdG8gdGhlIG5ld2x5XG4gICAgICAvLyBjcmVhdGVkIG9uZXMuXG4gICAgICB2YXIgdG1wMiA9IG9yaWdTdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICB0bXAyLnNoaWZ0KCk7IC8vIEZpbHRlciBhbGwgZnJhbWVzIGV4aXN0aW5nIGluIGVyci5zdGFjay5cblxuICAgICAgdmFyIHRtcDEgPSBuZXdFcnIuc3RhY2suc3BsaXQoJ1xcbicpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRtcDIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gRmluZCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgZnJhbWUuXG4gICAgICAgIHZhciBwb3MgPSB0bXAxLmluZGV4T2YodG1wMltpXSk7XG5cbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBPbmx5IGtlZXAgbmV3IGZyYW1lcy5cbiAgICAgICAgICB0bXAxID0gdG1wMS5zbGljZSgwLCBwb3MpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld0Vyci5zdGFjayA9IFwiXCIuY29uY2F0KHRtcDEuam9pbignXFxuJyksIFwiXFxuXCIpLmNvbmNhdCh0bXAyLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXdFcnI7XG4gIH1cbn07IC8vIEV4cG9zZSBhIHN0cmljdCBvbmx5IHZhcmlhbnQgb2YgYXNzZXJ0XG5cblxuZnVuY3Rpb24gc3RyaWN0KCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICBpbm5lck9rLmFwcGx5KHZvaWQgMCwgW3N0cmljdCwgYXJncy5sZW5ndGhdLmNvbmNhdChhcmdzKSk7XG59XG5cbmFzc2VydC5zdHJpY3QgPSBvYmplY3RBc3NpZ24oc3RyaWN0LCBhc3NlcnQsIHtcbiAgZXF1YWw6IGFzc2VydC5zdHJpY3RFcXVhbCxcbiAgZGVlcEVxdWFsOiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsLFxuICBub3RFcXVhbDogYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLFxuICBub3REZWVwRXF1YWw6IGFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWxcbn0pO1xuYXNzZXJ0LnN0cmljdC5zdHJpY3QgPSBhc3NlcnQuc3RyaWN0OyIsIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvYXNzZXJ0L2Fzc2VydGlvbl9lcnJvci5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8wODE3ODQwZjc3NTAzMjE2OWRkZDcwYzg1YWMwNTlmMThmZmNjODFjXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7IF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7IGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHsgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7IF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7IH07IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTsgfVxuXG5mdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCd1dGlsLycpLFxuICAgIGluc3BlY3QgPSBfcmVxdWlyZS5pbnNwZWN0O1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vZXJyb3JzJyksXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZTIuY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEU7IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aFxuXG5cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcmVwZWF0XG5cblxuZnVuY3Rpb24gcmVwZWF0KHN0ciwgY291bnQpIHtcbiAgY291bnQgPSBNYXRoLmZsb29yKGNvdW50KTtcbiAgaWYgKHN0ci5sZW5ndGggPT0gMCB8fCBjb3VudCA9PSAwKSByZXR1cm4gJyc7XG4gIHZhciBtYXhDb3VudCA9IHN0ci5sZW5ndGggKiBjb3VudDtcbiAgY291bnQgPSBNYXRoLmZsb29yKE1hdGgubG9nKGNvdW50KSAvIE1hdGgubG9nKDIpKTtcblxuICB3aGlsZSAoY291bnQpIHtcbiAgICBzdHIgKz0gc3RyO1xuICAgIGNvdW50LS07XG4gIH1cblxuICBzdHIgKz0gc3RyLnN1YnN0cmluZygwLCBtYXhDb3VudCAtIHN0ci5sZW5ndGgpO1xuICByZXR1cm4gc3RyO1xufVxuXG52YXIgYmx1ZSA9ICcnO1xudmFyIGdyZWVuID0gJyc7XG52YXIgcmVkID0gJyc7XG52YXIgd2hpdGUgPSAnJztcbnZhciBrUmVhZGFibGVPcGVyYXRvciA9IHtcbiAgZGVlcFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIHN0cmljdGx5IGRlZXAtZXF1YWw6JyxcbiAgc3RyaWN0RXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZXF1YWw6JyxcbiAgc3RyaWN0RXF1YWxPYmplY3Q6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHJlZmVyZW5jZS1lcXVhbCB0byBcImV4cGVjdGVkXCI6JyxcbiAgZGVlcEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbDonLFxuICBlcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBsb29zZWx5IGVxdWFsOicsXG4gIG5vdERlZXBTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIHN0cmljdGx5IGRlZXAtZXF1YWwgdG86JyxcbiAgbm90U3RyaWN0RXF1YWw6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHN0cmljdGx5IHVuZXF1YWwgdG86JyxcbiAgbm90U3RyaWN0RXF1YWxPYmplY3Q6ICdFeHBlY3RlZCBcImFjdHVhbFwiIG5vdCB0byBiZSByZWZlcmVuY2UtZXF1YWwgdG8gXCJleHBlY3RlZFwiOicsXG4gIG5vdERlZXBFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbCB0bzonLFxuICBub3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgbG9vc2VseSB1bmVxdWFsIHRvOicsXG4gIG5vdElkZW50aWNhbDogJ1ZhbHVlcyBpZGVudGljYWwgYnV0IG5vdCByZWZlcmVuY2UtZXF1YWw6J1xufTsgLy8gQ29tcGFyaW5nIHNob3J0IHByaW1pdGl2ZXMgc2hvdWxkIGp1c3Qgc2hvdyA9PT0gLyAhPT0gaW5zdGVhZCBvZiB1c2luZyB0aGVcbi8vIGRpZmYuXG5cbnZhciBrTWF4U2hvcnRMZW5ndGggPSAxMDtcblxuZnVuY3Rpb24gY29weUVycm9yKHNvdXJjZSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgJ21lc3NhZ2UnLCB7XG4gICAgdmFsdWU6IHNvdXJjZS5tZXNzYWdlXG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0VmFsdWUodmFsKSB7XG4gIC8vIFRoZSB1dGlsLmluc3BlY3QgZGVmYXVsdCB2YWx1ZXMgY291bGQgYmUgY2hhbmdlZC4gVGhpcyBtYWtlcyBzdXJlIHRoZVxuICAvLyBlcnJvciBtZXNzYWdlcyBjb250YWluIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gbmV2ZXJ0aGVsZXNzLlxuICByZXR1cm4gaW5zcGVjdCh2YWwsIHtcbiAgICBjb21wYWN0OiBmYWxzZSxcbiAgICBjdXN0b21JbnNwZWN0OiBmYWxzZSxcbiAgICBkZXB0aDogMTAwMCxcbiAgICBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksXG4gICAgLy8gQXNzZXJ0IGNvbXBhcmVzIG9ubHkgZW51bWVyYWJsZSBwcm9wZXJ0aWVzICh3aXRoIGEgZmV3IGV4Y2VwdGlvbnMpLlxuICAgIHNob3dIaWRkZW46IGZhbHNlLFxuICAgIC8vIEhhdmluZyBhIGxvbmcgbGluZSBhcyBlcnJvciBpcyBiZXR0ZXIgdGhhbiB3cmFwcGluZyB0aGUgbGluZSBmb3JcbiAgICAvLyBjb21wYXJpc29uIGZvciBub3cuXG4gICAgLy8gVE9ETyhCcmlkZ2VBUik6IGBicmVha0xlbmd0aGAgc2hvdWxkIGJlIGxpbWl0ZWQgYXMgc29vbiBhcyBzb29uIGFzIHdlXG4gICAgLy8gaGF2ZSBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnNwZWN0ZWQgcHJvcGVydGllcyAoaS5lLiwga25vdyB3aGVyZVxuICAgIC8vIGluIHdoYXQgbGluZSB0aGUgcHJvcGVydHkgc3RhcnRzIGFuZCBlbmRzKS5cbiAgICBicmVha0xlbmd0aDogSW5maW5pdHksXG4gICAgLy8gQXNzZXJ0IGRvZXMgbm90IGRldGVjdCBwcm94aWVzIGN1cnJlbnRseS5cbiAgICBzaG93UHJveHk6IGZhbHNlLFxuICAgIHNvcnRlZDogdHJ1ZSxcbiAgICAvLyBJbnNwZWN0IGdldHRlcnMgYXMgd2UgYWxzbyBjaGVjayB0aGVtIHdoZW4gY29tcGFyaW5nIGVudHJpZXMuXG4gICAgZ2V0dGVyczogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyRGlmZihhY3R1YWwsIGV4cGVjdGVkLCBvcGVyYXRvcikge1xuICB2YXIgb3RoZXIgPSAnJztcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbGFzdFBvcyA9IDA7XG4gIHZhciBlbmQgPSAnJztcbiAgdmFyIHNraXBwZWQgPSBmYWxzZTtcbiAgdmFyIGFjdHVhbEluc3BlY3RlZCA9IGluc3BlY3RWYWx1ZShhY3R1YWwpO1xuICB2YXIgYWN0dWFsTGluZXMgPSBhY3R1YWxJbnNwZWN0ZWQuc3BsaXQoJ1xcbicpO1xuICB2YXIgZXhwZWN0ZWRMaW5lcyA9IGluc3BlY3RWYWx1ZShleHBlY3RlZCkuc3BsaXQoJ1xcbicpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBpbmRpY2F0b3IgPSAnJzsgLy8gSW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgb2JqZWN0cyBleHBsaWNpdGx5IG1hcmsgdGhlbSBhcyBub3QgcmVmZXJlbmNlIGVxdWFsXG4gIC8vIGZvciB0aGUgYHN0cmljdEVxdWFsYCBvcGVyYXRvci5cblxuICBpZiAob3BlcmF0b3IgPT09ICdzdHJpY3RFcXVhbCcgJiYgX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBfdHlwZW9mKGV4cGVjdGVkKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsICYmIGV4cGVjdGVkICE9PSBudWxsKSB7XG4gICAgb3BlcmF0b3IgPSAnc3RyaWN0RXF1YWxPYmplY3QnO1xuICB9IC8vIElmIFwiYWN0dWFsXCIgYW5kIFwiZXhwZWN0ZWRcIiBmaXQgb24gYSBzaW5nbGUgbGluZSBhbmQgdGhleSBhcmUgbm90IHN0cmljdGx5XG4gIC8vIGVxdWFsLCBjaGVjayBmdXJ0aGVyIHNwZWNpYWwgaGFuZGxpbmcuXG5cblxuICBpZiAoYWN0dWFsTGluZXMubGVuZ3RoID09PSAxICYmIGV4cGVjdGVkTGluZXMubGVuZ3RoID09PSAxICYmIGFjdHVhbExpbmVzWzBdICE9PSBleHBlY3RlZExpbmVzWzBdKSB7XG4gICAgdmFyIGlucHV0TGVuZ3RoID0gYWN0dWFsTGluZXNbMF0ubGVuZ3RoICsgZXhwZWN0ZWRMaW5lc1swXS5sZW5ndGg7IC8vIElmIHRoZSBjaGFyYWN0ZXIgbGVuZ3RoIG9mIFwiYWN0dWFsXCIgYW5kIFwiZXhwZWN0ZWRcIiB0b2dldGhlciBpcyBsZXNzIHRoYW5cbiAgICAvLyBrTWF4U2hvcnRMZW5ndGggYW5kIGlmIG5laXRoZXIgaXMgYW4gb2JqZWN0IGFuZCBhdCBsZWFzdCBvbmUgb2YgdGhlbSBpc1xuICAgIC8vIG5vdCBgemVyb2AsIHVzZSB0aGUgc3RyaWN0IGVxdWFsIGNvbXBhcmlzb24gdG8gdmlzdWFsaXplIHRoZSBvdXRwdXQuXG5cbiAgICBpZiAoaW5wdXRMZW5ndGggPD0ga01heFNob3J0TGVuZ3RoKSB7XG4gICAgICBpZiAoKF90eXBlb2YoYWN0dWFsKSAhPT0gJ29iamVjdCcgfHwgYWN0dWFsID09PSBudWxsKSAmJiAoX3R5cGVvZihleHBlY3RlZCkgIT09ICdvYmplY3QnIHx8IGV4cGVjdGVkID09PSBudWxsKSAmJiAoYWN0dWFsICE9PSAwIHx8IGV4cGVjdGVkICE9PSAwKSkge1xuICAgICAgICAvLyAtMCA9PT0gKzBcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXSwgXCJcXG5cXG5cIikgKyBcIlwiLmNvbmNhdChhY3R1YWxMaW5lc1swXSwgXCIgIT09IFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lc1swXSwgXCJcXG5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciAhPT0gJ3N0cmljdEVxdWFsT2JqZWN0Jykge1xuICAgICAgLy8gSWYgdGhlIHN0ZGVyciBpcyBhIHR0eSBhbmQgdGhlIGlucHV0IGxlbmd0aCBpcyBsb3dlciB0aGFuIHRoZSBjdXJyZW50XG4gICAgICAvLyBjb2x1bW5zIHBlciBsaW5lLCBhZGQgYSBtaXNtYXRjaCBpbmRpY2F0b3IgYmVsb3cgdGhlIG91dHB1dC4gSWYgaXQgaXNcbiAgICAgIC8vIG5vdCBhIHR0eSwgdXNlIGEgZGVmYXVsdCB2YWx1ZSBvZiA4MCBjaGFyYWN0ZXJzLlxuICAgICAgdmFyIG1heExlbmd0aCA9IHByb2Nlc3Muc3RkZXJyICYmIHByb2Nlc3Muc3RkZXJyLmlzVFRZID8gcHJvY2Vzcy5zdGRlcnIuY29sdW1ucyA6IDgwO1xuXG4gICAgICBpZiAoaW5wdXRMZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgd2hpbGUgKGFjdHVhbExpbmVzWzBdW2ldID09PSBleHBlY3RlZExpbmVzWzBdW2ldKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9IC8vIElnbm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVycy5cblxuXG4gICAgICAgIGlmIChpID4gMikge1xuICAgICAgICAgIC8vIEFkZCBwb3NpdGlvbiBpbmRpY2F0b3IgZm9yIHRoZSBmaXJzdCBtaXNtYXRjaCBpbiBjYXNlIGl0IGlzIGFcbiAgICAgICAgICAvLyBzaW5nbGUgbGluZSBhbmQgdGhlIGlucHV0IGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhlIGNvbHVtbiBsZW5ndGguXG4gICAgICAgICAgaW5kaWNhdG9yID0gXCJcXG4gIFwiLmNvbmNhdChyZXBlYXQoJyAnLCBpKSwgXCJeXCIpO1xuICAgICAgICAgIGkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFJlbW92ZSBhbGwgZW5kaW5nIGxpbmVzIHRoYXQgbWF0Y2ggKHRoaXMgb3B0aW1pemVzIHRoZSBvdXRwdXQgZm9yXG4gIC8vIHJlYWRhYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBudW1iZXIgb2YgdG90YWwgY2hhbmdlZCBsaW5lcykuXG5cblxuICB2YXIgYSA9IGFjdHVhbExpbmVzW2FjdHVhbExpbmVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYiA9IGV4cGVjdGVkTGluZXNbZXhwZWN0ZWRMaW5lcy5sZW5ndGggLSAxXTtcblxuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGlmIChpKysgPCAyKSB7XG4gICAgICBlbmQgPSBcIlxcbiAgXCIuY29uY2F0KGEpLmNvbmNhdChlbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdGhlciA9IGE7XG4gICAgfVxuXG4gICAgYWN0dWFsTGluZXMucG9wKCk7XG4gICAgZXhwZWN0ZWRMaW5lcy5wb3AoKTtcbiAgICBpZiAoYWN0dWFsTGluZXMubGVuZ3RoID09PSAwIHx8IGV4cGVjdGVkTGluZXMubGVuZ3RoID09PSAwKSBicmVhaztcbiAgICBhID0gYWN0dWFsTGluZXNbYWN0dWFsTGluZXMubGVuZ3RoIC0gMV07XG4gICAgYiA9IGV4cGVjdGVkTGluZXNbZXhwZWN0ZWRMaW5lcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHZhciBtYXhMaW5lcyA9IE1hdGgubWF4KGFjdHVhbExpbmVzLmxlbmd0aCwgZXhwZWN0ZWRMaW5lcy5sZW5ndGgpOyAvLyBTdHJpY3QgZXF1YWwgd2l0aCBpZGVudGljYWwgb2JqZWN0cyB0aGF0IGFyZSBub3QgaWRlbnRpY2FsIGJ5IHJlZmVyZW5jZS5cbiAgLy8gRS5nLiwgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh7IGE6IFN5bWJvbCgpIH0sIHsgYTogU3ltYm9sKCkgfSlcblxuICBpZiAobWF4TGluZXMgPT09IDApIHtcbiAgICAvLyBXZSBoYXZlIHRvIGdldCB0aGUgcmVzdWx0IGFnYWluLiBUaGUgbGluZXMgd2VyZSBhbGwgcmVtb3ZlZCBiZWZvcmUuXG4gICAgdmFyIF9hY3R1YWxMaW5lcyA9IGFjdHVhbEluc3BlY3RlZC5zcGxpdCgnXFxuJyk7IC8vIE9ubHkgcmVtb3ZlIGxpbmVzIGluIGNhc2UgaXQgbWFrZXMgc2Vuc2UgdG8gY29sbGFwc2UgdGhvc2UuXG4gICAgLy8gVE9ETzogQWNjZXB0IGVudiB0byBhbHdheXMgc2hvdyB0aGUgZnVsbCBlcnJvci5cblxuXG4gICAgaWYgKF9hY3R1YWxMaW5lcy5sZW5ndGggPiAzMCkge1xuICAgICAgX2FjdHVhbExpbmVzWzI2XSA9IFwiXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG5cbiAgICAgIHdoaWxlIChfYWN0dWFsTGluZXMubGVuZ3RoID4gMjcpIHtcbiAgICAgICAgX2FjdHVhbExpbmVzLnBvcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvci5ub3RJZGVudGljYWwsIFwiXFxuXFxuXCIpLmNvbmNhdChfYWN0dWFsTGluZXMuam9pbignXFxuJyksIFwiXFxuXCIpO1xuICB9XG5cbiAgaWYgKGkgPiAzKSB7XG4gICAgZW5kID0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKS5jb25jYXQoZW5kKTtcbiAgICBza2lwcGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChvdGhlciAhPT0gJycpIHtcbiAgICBlbmQgPSBcIlxcbiAgXCIuY29uY2F0KG90aGVyKS5jb25jYXQoZW5kKTtcbiAgICBvdGhlciA9ICcnO1xuICB9XG5cbiAgdmFyIHByaW50ZWRMaW5lcyA9IDA7XG4gIHZhciBtc2cgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0gKyBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrIGFjdHVhbFwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQocmVkLCBcIi0gZXhwZWN0ZWRcIikuY29uY2F0KHdoaXRlKTtcbiAgdmFyIHNraXBwZWRNc2cgPSBcIiBcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlLCBcIiBMaW5lcyBza2lwcGVkXCIpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBtYXhMaW5lczsgaSsrKSB7XG4gICAgLy8gT25seSBleHRyYSBleHBlY3RlZCBsaW5lcyBleGlzdFxuICAgIHZhciBjdXIgPSBpIC0gbGFzdFBvcztcblxuICAgIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPCBpICsgMSkge1xuICAgICAgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgbW9yZSB0aGFuIG9uZSBsaW5lIGFib3ZlIGFuZCB0aGVcbiAgICAgIC8vIGN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBsaW5lIHRocmVlLCBhZGQgc29tZSBvZiB0aGUgZm9ybWVyIGxpbmVzIGFuZFxuICAgICAgLy8gYWxzbyBhZGQgZG90cyB0byBpbmRpY2F0ZSBza2lwcGVkIGVudHJpZXMuXG4gICAgICBpZiAoY3VyID4gMSAmJiBpID4gMikge1xuICAgICAgICBpZiAoY3VyID4gNCkge1xuICAgICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgICAgICAgIHNraXBwZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGN1ciA+IDMpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChleHBlY3RlZExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChleHBlY3RlZExpbmVzW2kgLSAxXSk7XG4gICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgfSAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cblxuXG4gICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBleHBlY3RlZCBsaW5lIHRvIHRoZSBjYWNoZS5cblxuICAgICAgb3RoZXIgKz0gXCJcXG5cIi5jb25jYXQocmVkLCBcIi1cIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkTGluZXNbaV0pO1xuICAgICAgcHJpbnRlZExpbmVzKys7IC8vIE9ubHkgZXh0cmEgYWN0dWFsIGxpbmVzIGV4aXN0XG4gICAgfSBlbHNlIGlmIChleHBlY3RlZExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lc1tpIC0gMV0pO1xuICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgIH0gLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG5cblxuICAgICAgbGFzdFBvcyA9IGk7IC8vIEFkZCB0aGUgYWN0dWFsIGxpbmUgdG8gdGhlIHJlc3VsdC5cblxuICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIitcIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGFjdHVhbExpbmVzW2ldKTtcbiAgICAgIHByaW50ZWRMaW5lcysrOyAvLyBMaW5lcyBkaXZlcmdlXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBleHBlY3RlZExpbmUgPSBleHBlY3RlZExpbmVzW2ldO1xuICAgICAgdmFyIGFjdHVhbExpbmUgPSBhY3R1YWxMaW5lc1tpXTsgLy8gSWYgdGhlIGxpbmVzIGRpdmVyZ2UsIHNwZWNpZmljYWxseSBjaGVjayBmb3IgbGluZXMgdGhhdCBvbmx5IGRpdmVyZ2UgYnlcbiAgICAgIC8vIGEgdHJhaWxpbmcgY29tbWEuIEluIHRoYXQgY2FzZSBpdCBpcyBhY3R1YWxseSBpZGVudGljYWwgYW5kIHdlIHNob3VsZFxuICAgICAgLy8gbWFyayBpdCBhcyBzdWNoLlxuXG4gICAgICB2YXIgZGl2ZXJnaW5nTGluZXMgPSBhY3R1YWxMaW5lICE9PSBleHBlY3RlZExpbmUgJiYgKCFlbmRzV2l0aChhY3R1YWxMaW5lLCAnLCcpIHx8IGFjdHVhbExpbmUuc2xpY2UoMCwgLTEpICE9PSBleHBlY3RlZExpbmUpOyAvLyBJZiB0aGUgZXhwZWN0ZWQgbGluZSBoYXMgYSB0cmFpbGluZyBjb21tYSBidXQgaXMgb3RoZXJ3aXNlIGlkZW50aWNhbCxcbiAgICAgIC8vIGFkZCBhIGNvbW1hIGF0IHRoZSBlbmQgb2YgdGhlIGFjdHVhbCBsaW5lLiBPdGhlcndpc2UgdGhlIG91dHB1dCBjb3VsZFxuICAgICAgLy8gbG9vayB3ZWlyZCBhcyBpbjpcbiAgICAgIC8vXG4gICAgICAvLyAgIFtcbiAgICAgIC8vICAgICAxICAgICAgICAgLy8gTm8gY29tbWEgYXQgdGhlIGVuZCFcbiAgICAgIC8vICsgICAyXG4gICAgICAvLyAgIF1cbiAgICAgIC8vXG5cbiAgICAgIGlmIChkaXZlcmdpbmdMaW5lcyAmJiBlbmRzV2l0aChleHBlY3RlZExpbmUsICcsJykgJiYgZXhwZWN0ZWRMaW5lLnNsaWNlKDAsIC0xKSA9PT0gYWN0dWFsTGluZSkge1xuICAgICAgICBkaXZlcmdpbmdMaW5lcyA9IGZhbHNlO1xuICAgICAgICBhY3R1YWxMaW5lICs9ICcsJztcbiAgICAgIH1cblxuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzKSB7XG4gICAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAgIC8vIGN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBsaW5lIHRocmVlLCBhZGQgc29tZSBvZiB0aGUgZm9ybWVyIGxpbmVzIGFuZFxuICAgICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgICBpZiAoY3VyID4gNCkge1xuICAgICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1ciA+IDMpIHtcbiAgICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lc1tpIC0gMV0pO1xuICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICB9IC8vIE1hcmsgdGhlIGN1cnJlbnQgbGluZSBhcyB0aGUgbGFzdCBkaXZlcmdpbmcgb25lLlxuXG5cbiAgICAgICAgbGFzdFBvcyA9IGk7IC8vIEFkZCB0aGUgYWN0dWFsIGxpbmUgdG8gdGhlIHJlc3VsdCBhbmQgY2FjaGUgdGhlIGV4cGVjdGVkIGRpdmVyZ2luZ1xuICAgICAgICAvLyBsaW5lIHNvIGNvbnNlY3V0aXZlIGRpdmVyZ2luZyBsaW5lcyBzaG93IHVwIGFzICsrKy0tLSBhbmQgbm90ICstKy0rLS5cblxuICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoZ3JlZW4sIFwiK1wiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoYWN0dWFsTGluZSk7XG4gICAgICAgIG90aGVyICs9IFwiXFxuXCIuY29uY2F0KHJlZCwgXCItXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChleHBlY3RlZExpbmUpO1xuICAgICAgICBwcmludGVkTGluZXMgKz0gMjsgLy8gTGluZXMgYXJlIGlkZW50aWNhbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkIGFsbCBjYWNoZWQgaW5mb3JtYXRpb24gdG8gdGhlIHJlc3VsdCBiZWZvcmUgYWRkaW5nIG90aGVyIHRoaW5nc1xuICAgICAgICAvLyBhbmQgcmVzZXQgdGhlIGNhY2hlLlxuICAgICAgICByZXMgKz0gb3RoZXI7XG4gICAgICAgIG90aGVyID0gJyc7IC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIGV4YWN0bHkgb25lIGxpbmUgYWJvdmUgb3IgaWYgaXQgaXMgdGhlXG4gICAgICAgIC8vIHZlcnkgZmlyc3QgbGluZSwgYWRkIHRoZSBsaW5lIHRvIHRoZSByZXN1bHQuXG5cbiAgICAgICAgaWYgKGN1ciA9PT0gMSB8fCBpID09PSAwKSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIEluc3BlY3RlZCBvYmplY3QgdG8gYmlnIChTaG93IH4yMCByb3dzIG1heClcblxuXG4gICAgaWYgKHByaW50ZWRMaW5lcyA+IDIwICYmIGkgPCBtYXhMaW5lcyAtIDIpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChtc2cpLmNvbmNhdChza2lwcGVkTXNnLCBcIlxcblwiKS5jb25jYXQocmVzLCBcIlxcblwiKS5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKS5jb25jYXQob3RoZXIsIFwiXFxuXCIpICsgXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQobXNnKS5jb25jYXQoc2tpcHBlZCA/IHNraXBwZWRNc2cgOiAnJywgXCJcXG5cIikuY29uY2F0KHJlcykuY29uY2F0KG90aGVyKS5jb25jYXQoZW5kKS5jb25jYXQoaW5kaWNhdG9yKTtcbn1cblxudmFyIEFzc2VydGlvbkVycm9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKEFzc2VydGlvbkVycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIEFzc2VydGlvbkVycm9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXNzZXJ0aW9uRXJyb3IpO1xuXG4gICAgaWYgKF90eXBlb2Yob3B0aW9ucykgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnb3B0aW9ucycsICdPYmplY3QnLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgbWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgb3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yLFxuICAgICAgICBzdGFja1N0YXJ0Rm4gPSBvcHRpb25zLnN0YWNrU3RhcnRGbjtcbiAgICB2YXIgYWN0dWFsID0gb3B0aW9ucy5hY3R1YWwsXG4gICAgICAgIGV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgICB2YXIgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMDtcblxuICAgIGlmIChtZXNzYWdlICE9IG51bGwpIHtcbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFN0cmluZyhtZXNzYWdlKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkpIHtcbiAgICAgICAgLy8gUmVzZXQgb24gZWFjaCBjYWxsIHRvIG1ha2Ugc3VyZSB3ZSBoYW5kbGUgZHluYW1pY2FsbHkgc2V0IGVudmlyb25tZW50XG4gICAgICAgIC8vIHZhcmlhYmxlcyBjb3JyZWN0LlxuICAgICAgICBpZiAocHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuZ2V0Q29sb3JEZXB0aCAmJiBwcm9jZXNzLnN0ZGVyci5nZXRDb2xvckRlcHRoKCkgIT09IDEpIHtcbiAgICAgICAgICBibHVlID0gXCJcXHgxQlszNG1cIjtcbiAgICAgICAgICBncmVlbiA9IFwiXFx4MUJbMzJtXCI7XG4gICAgICAgICAgd2hpdGUgPSBcIlxceDFCWzM5bVwiO1xuICAgICAgICAgIHJlZCA9IFwiXFx4MUJbMzFtXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmx1ZSA9ICcnO1xuICAgICAgICAgIGdyZWVuID0gJyc7XG4gICAgICAgICAgd2hpdGUgPSAnJztcbiAgICAgICAgICByZWQgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSAvLyBQcmV2ZW50IHRoZSBlcnJvciBzdGFjayBmcm9tIGJlaW5nIHZpc2libGUgYnkgZHVwbGljYXRpbmcgdGhlIGVycm9yXG4gICAgICAvLyBpbiBhIHZlcnkgY2xvc2Ugd2F5IHRvIHRoZSBvcmlnaW5hbCBpbiBjYXNlIGJvdGggc2lkZXMgYXJlIGFjdHVhbGx5XG4gICAgICAvLyBpbnN0YW5jZXMgb2YgRXJyb3IuXG5cblxuICAgICAgaWYgKF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsICYmIF90eXBlb2YoZXhwZWN0ZWQpID09PSAnb2JqZWN0JyAmJiBleHBlY3RlZCAhPT0gbnVsbCAmJiAnc3RhY2snIGluIGFjdHVhbCAmJiBhY3R1YWwgaW5zdGFuY2VvZiBFcnJvciAmJiAnc3RhY2snIGluIGV4cGVjdGVkICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgYWN0dWFsID0gY29weUVycm9yKGFjdHVhbCk7XG4gICAgICAgIGV4cGVjdGVkID0gY29weUVycm9yKGV4cGVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnZGVlcFN0cmljdEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ3N0cmljdEVxdWFsJykge1xuICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBjcmVhdGVFcnJEaWZmKGFjdHVhbCwgZXhwZWN0ZWQsIG9wZXJhdG9yKSkpO1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gJ25vdERlZXBTdHJpY3RFcXVhbCcgfHwgb3BlcmF0b3IgPT09ICdub3RTdHJpY3RFcXVhbCcpIHtcbiAgICAgICAgLy8gSW4gY2FzZSB0aGUgb2JqZWN0cyBhcmUgZXF1YWwgYnV0IHRoZSBvcGVyYXRvciByZXF1aXJlcyB1bmVxdWFsLCBzaG93XG4gICAgICAgIC8vIHRoZSBmaXJzdCBvYmplY3QgYW5kIHNheSBBIGVxdWFscyBCXG4gICAgICAgIHZhciBiYXNlID0ga1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdO1xuICAgICAgICB2YXIgcmVzID0gaW5zcGVjdFZhbHVlKGFjdHVhbCkuc3BsaXQoJ1xcbicpOyAvLyBJbiBjYXNlIFwiYWN0dWFsXCIgaXMgYW4gb2JqZWN0LCBpdCBzaG91bGQgbm90IGJlIHJlZmVyZW5jZSBlcXVhbC5cblxuICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdub3RTdHJpY3RFcXVhbCcgJiYgX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwpIHtcbiAgICAgICAgICBiYXNlID0ga1JlYWRhYmxlT3BlcmF0b3Iubm90U3RyaWN0RXF1YWxPYmplY3Q7XG4gICAgICAgIH0gLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAgICAgLy8gVE9ETzogQWNjZXB0IGVudiB0byBhbHdheXMgc2hvdyB0aGUgZnVsbCBlcnJvci5cblxuXG4gICAgICAgIGlmIChyZXMubGVuZ3RoID4gMzApIHtcbiAgICAgICAgICByZXNbMjZdID0gXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcblxuICAgICAgICAgIHdoaWxlIChyZXMubGVuZ3RoID4gMjcpIHtcbiAgICAgICAgICAgIHJlcy5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gT25seSBwcmludCBhIHNpbmdsZSBpbnB1dC5cblxuXG4gICAgICAgIGlmIChyZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgXCJcIi5jb25jYXQoYmFzZSwgXCIgXCIpLmNvbmNhdChyZXNbMF0pKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgXCJcIi5jb25jYXQoYmFzZSwgXCJcXG5cXG5cIikuY29uY2F0KHJlcy5qb2luKCdcXG4nKSwgXCJcXG5cIikpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9yZXMgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKTtcblxuICAgICAgICB2YXIgb3RoZXIgPSAnJztcbiAgICAgICAgdmFyIGtub3duT3BlcmF0b3JzID0ga1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdO1xuXG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ25vdERlZXBFcXVhbCcgfHwgb3BlcmF0b3IgPT09ICdub3RFcXVhbCcpIHtcbiAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdLCBcIlxcblxcblwiKS5jb25jYXQoX3Jlcyk7XG5cbiAgICAgICAgICBpZiAoX3Jlcy5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoX3Jlcy5zbGljZSgwLCAxMDIxKSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG90aGVyID0gXCJcIi5jb25jYXQoaW5zcGVjdFZhbHVlKGV4cGVjdGVkKSk7XG5cbiAgICAgICAgICBpZiAoX3Jlcy5sZW5ndGggPiA1MTIpIHtcbiAgICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChfcmVzLnNsaWNlKDAsIDUwOSksIFwiLi4uXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvdGhlci5sZW5ndGggPiA1MTIpIHtcbiAgICAgICAgICAgIG90aGVyID0gXCJcIi5jb25jYXQob3RoZXIuc2xpY2UoMCwgNTA5KSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnZGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ2VxdWFsJykge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KGtub3duT3BlcmF0b3JzLCBcIlxcblxcblwiKS5jb25jYXQoX3JlcywgXCJcXG5cXG5zaG91bGQgZXF1YWxcXG5cXG5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG90aGVyID0gXCIgXCIuY29uY2F0KG9wZXJhdG9yLCBcIiBcIikuY29uY2F0KG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChfcmVzKS5jb25jYXQob3RoZXIpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gbGltaXQ7XG4gICAgX3RoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9ICFtZXNzYWdlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ25hbWUnLCB7XG4gICAgICB2YWx1ZTogJ0Fzc2VydGlvbkVycm9yIFtFUlJfQVNTRVJUSU9OXScsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgX3RoaXMuY29kZSA9ICdFUlJfQVNTRVJUSU9OJztcbiAgICBfdGhpcy5hY3R1YWwgPSBhY3R1YWw7XG4gICAgX3RoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICBfdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBzdGFja1N0YXJ0Rm4pO1xuICAgIH0gLy8gQ3JlYXRlIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBlcnJvciBjb2RlIGluIHRoZSBuYW1lLlxuXG5cbiAgICBfdGhpcy5zdGFjazsgLy8gUmVzZXQgdGhlIG5hbWUuXG5cbiAgICBfdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFzc2VydGlvbkVycm9yLCBbe1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIFtcIikuY29uY2F0KHRoaXMuY29kZSwgXCJdOiBcIikuY29uY2F0KHRoaXMubWVzc2FnZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBpbnNwZWN0LmN1c3RvbSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUocmVjdXJzZVRpbWVzLCBjdHgpIHtcbiAgICAgIC8vIFRoaXMgbGltaXRzIHRoZSBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYCBwcm9wZXJ0eSBkZWZhdWx0IGluc3BlY3Rpb24gdG9cbiAgICAgIC8vIHRoZSBtaW5pbXVtIGRlcHRoLiBPdGhlcndpc2UgdGhvc2UgdmFsdWVzIHdvdWxkIGJlIHRvbyB2ZXJib3NlIGNvbXBhcmVkXG4gICAgICAvLyB0byB0aGUgYWN0dWFsIGVycm9yIG1lc3NhZ2Ugd2hpY2ggY29udGFpbnMgYSBjb21iaW5lZCB2aWV3IG9mIHRoZXNlIHR3b1xuICAgICAgLy8gaW5wdXQgdmFsdWVzLlxuICAgICAgcmV0dXJuIGluc3BlY3QodGhpcywgX29iamVjdFNwcmVhZCh7fSwgY3R4LCB7XG4gICAgICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlLFxuICAgICAgICBkZXB0aDogMFxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBc3NlcnRpb25FcnJvcjtcbn0oX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2VydGlvbkVycm9yOyIsIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvZXJyb3JzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzNiMDQ0OTYyYzQ4ZmUzMTM5MDU4NzdhOTZiNWQwODk0YTU0MDRmNmZcblxuLyogZXNsaW50IG5vZGUtY29yZS9kb2N1bWVudGVkLWVycm9yczogXCJlcnJvclwiICovXG5cbi8qIGVzbGludCBub2RlLWNvcmUvYWxwaGFiZXRpemUtZXJyb3JzOiBcImVycm9yXCIgKi9cblxuLyogZXNsaW50IG5vZGUtY29yZS9wcmVmZXItdXRpbC1mb3JtYXQtZXJyb3JzOiBcImVycm9yXCIgKi9cbid1c2Ugc3RyaWN0JzsgLy8gVGhlIHdob2xlIHBvaW50IGJlaGluZCB0aGlzIGludGVybmFsIG1vZHVsZSBpcyB0byBhbGxvdyBOb2RlLmpzIHRvIG5vXG4vLyBsb25nZXIgYmUgZm9yY2VkIHRvIHRyZWF0IGV2ZXJ5IGVycm9yIG1lc3NhZ2UgY2hhbmdlIGFzIGEgc2VtdmVyLW1ham9yXG4vLyBjaGFuZ2UuIFRoZSBOb2RlRXJyb3IgY2xhc3NlcyBoZXJlIGFsbCBleHBvc2UgYSBgY29kZWAgcHJvcGVydHkgd2hvc2Vcbi8vIHZhbHVlIHN0YXRpY2FsbHkgYW5kIHBlcm1hbmVudGx5IGlkZW50aWZpZXMgdGhlIGVycm9yLiBXaGlsZSB0aGUgZXJyb3Jcbi8vIG1lc3NhZ2UgbWF5IGNoYW5nZSwgdGhlIGNvZGUgc2hvdWxkIG5vdC5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgY29kZXMgPSB7fTsgLy8gTGF6eSBsb2FkZWRcblxudmFyIGFzc2VydDtcbnZhciB1dGlsO1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICBpZiAoIUJhc2UpIHtcbiAgICBCYXNlID0gRXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5vZGVFcnJvciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9CYXNlKSB7XG4gICAgX2luaGVyaXRzKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVFcnJvcik7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE5vZGVFcnJvcikuY2FsbCh0aGlzLCBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpKSk7XG4gICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gTm9kZUVycm9yO1xuICB9KEJhc2UpO1xuXG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfQU1CSUdVT1VTX0FSR1VNRU5UJywgJ1RoZSBcIiVzXCIgYXJndW1lbnQgaXMgYW1iaWd1b3VzLiAlcycsIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgZnVuY3Rpb24gKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgaWYgKGFzc2VydCA9PT0gdW5kZWZpbmVkKSBhc3NlcnQgPSByZXF1aXJlKCcuLi9hc3NlcnQnKTtcbiAgYXNzZXJ0KHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJywgXCInbmFtZScgbXVzdCBiZSBhIHN0cmluZ1wiKTsgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZSdcblxuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfSAvLyBUT0RPKEJyaWRnZUFSKTogSW1wcm92ZSB0aGUgb3V0cHV0IGJ5IHNob3dpbmcgYG51bGxgIGFuZCBzaW1pbGFyLlxuXG5cbiAgbXNnICs9IFwiLiBSZWNlaXZlZCB0eXBlIFwiLmNvbmNhdChfdHlwZW9mKGFjdHVhbCkpO1xuICByZXR1cm4gbXNnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1ZBTFVFJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHZhciByZWFzb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpcyBpbnZhbGlkJztcbiAgaWYgKHV0aWwgPT09IHVuZGVmaW5lZCkgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG4gIHZhciBpbnNwZWN0ZWQgPSB1dGlsLmluc3BlY3QodmFsdWUpO1xuXG4gIGlmIChpbnNwZWN0ZWQubGVuZ3RoID4gMTI4KSB7XG4gICAgaW5zcGVjdGVkID0gXCJcIi5jb25jYXQoaW5zcGVjdGVkLnNsaWNlKDAsIDEyOCksIFwiLi4uXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiVGhlIGFyZ3VtZW50ICdcIi5jb25jYXQobmFtZSwgXCInIFwiKS5jb25jYXQocmVhc29uLCBcIi4gUmVjZWl2ZWQgXCIpLmNvbmNhdChpbnNwZWN0ZWQpO1xufSwgVHlwZUVycm9yLCBSYW5nZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFJywgZnVuY3Rpb24gKGlucHV0LCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHlwZTtcblxuICBpZiAodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgIHR5cGUgPSBcImluc3RhbmNlIG9mIFwiLmNvbmNhdCh2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gXCJ0eXBlIFwiLmNvbmNhdChfdHlwZW9mKHZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5wdXQsIFwiIHRvIGJlIHJldHVybmVkIGZyb20gdGhlIFxcXCJcIikuY29uY2F0KG5hbWUsIFwiXFxcIlwiKSArIFwiIGZ1bmN0aW9uIGJ1dCBnb3QgXCIuY29uY2F0KHR5cGUsIFwiLlwiKTtcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NSVNTSU5HX0FSR1MnLCBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoYXNzZXJ0ID09PSB1bmRlZmluZWQpIGFzc2VydCA9IHJlcXVpcmUoJy4uL2Fzc2VydCcpO1xuICBhc3NlcnQoYXJncy5sZW5ndGggPiAwLCAnQXQgbGVhc3Qgb25lIGFyZyBuZWVkcyB0byBiZSBzcGVjaWZpZWQnKTtcbiAgdmFyIG1zZyA9ICdUaGUgJztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICBhcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KGEsIFwiXFxcIlwiKTtcbiAgfSk7XG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDE6XG4gICAgICBtc2cgKz0gXCJcIi5jb25jYXQoYXJnc1swXSwgXCIgYXJndW1lbnRcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMjpcbiAgICAgIG1zZyArPSBcIlwiLmNvbmNhdChhcmdzWzBdLCBcIiBhbmQgXCIpLmNvbmNhdChhcmdzWzFdLCBcIiBhcmd1bWVudHNcIik7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBtc2cgKz0gYXJncy5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpO1xuICAgICAgbXNnICs9IFwiLCBhbmQgXCIuY29uY2F0KGFyZ3NbbGVuIC0gMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZywgXCIgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG59LCBUeXBlRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMuY29kZXMgPSBjb2RlczsiLCIvLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL3V0aWwvY29tcGFyaXNvbnMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMTEyY2M3YzI3NTUxMjU0YWEyYjE3MDk4ZmI3NzQ4NjdmMDVlZDBkOVxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIHJlZ2V4RmxhZ3NTdXBwb3J0ZWQgPSAvYS9nLmZsYWdzICE9PSB1bmRlZmluZWQ7XG5cbnZhciBhcnJheUZyb21TZXQgPSBmdW5jdGlvbiBhcnJheUZyb21TZXQoc2V0KSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBzZXQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgYXJyYXlGcm9tTWFwID0gZnVuY3Rpb24gYXJyYXlGcm9tTWFwKG1hcCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgbWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gYXJyYXkucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9KTtcbiAgcmV0dXJuIGFycmF5O1xufTtcblxudmFyIG9iamVjdElzID0gT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogcmVxdWlyZSgnb2JqZWN0LWlzJyk7XG52YXIgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXTtcbn07XG52YXIgbnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gPyBOdW1iZXIuaXNOYU4gOiByZXF1aXJlKCdpcy1uYW4nKTtcblxuZnVuY3Rpb24gdW5jdXJyeVRoaXMoZikge1xuICByZXR1cm4gZi5jYWxsLmJpbmQoZik7XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyIF9yZXF1aXJlJHR5cGVzID0gcmVxdWlyZSgndXRpbC8nKS50eXBlcyxcbiAgICBpc0FueUFycmF5QnVmZmVyID0gX3JlcXVpcmUkdHlwZXMuaXNBbnlBcnJheUJ1ZmZlcixcbiAgICBpc0FycmF5QnVmZmVyVmlldyA9IF9yZXF1aXJlJHR5cGVzLmlzQXJyYXlCdWZmZXJWaWV3LFxuICAgIGlzRGF0ZSA9IF9yZXF1aXJlJHR5cGVzLmlzRGF0ZSxcbiAgICBpc01hcCA9IF9yZXF1aXJlJHR5cGVzLmlzTWFwLFxuICAgIGlzUmVnRXhwID0gX3JlcXVpcmUkdHlwZXMuaXNSZWdFeHAsXG4gICAgaXNTZXQgPSBfcmVxdWlyZSR0eXBlcy5pc1NldCxcbiAgICBpc05hdGl2ZUVycm9yID0gX3JlcXVpcmUkdHlwZXMuaXNOYXRpdmVFcnJvcixcbiAgICBpc0JveGVkUHJpbWl0aXZlID0gX3JlcXVpcmUkdHlwZXMuaXNCb3hlZFByaW1pdGl2ZSxcbiAgICBpc051bWJlck9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzTnVtYmVyT2JqZWN0LFxuICAgIGlzU3RyaW5nT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNTdHJpbmdPYmplY3QsXG4gICAgaXNCb29sZWFuT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNCb29sZWFuT2JqZWN0LFxuICAgIGlzQmlnSW50T2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNCaWdJbnRPYmplY3QsXG4gICAgaXNTeW1ib2xPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc1N5bWJvbE9iamVjdCxcbiAgICBpc0Zsb2F0MzJBcnJheSA9IF9yZXF1aXJlJHR5cGVzLmlzRmxvYXQzMkFycmF5LFxuICAgIGlzRmxvYXQ2NEFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzTm9uSW5kZXgoa2V5KSB7XG4gIGlmIChrZXkubGVuZ3RoID09PSAwIHx8IGtleS5sZW5ndGggPiAxMCkgcmV0dXJuIHRydWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY29kZSA9IGtleS5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IDU3KSByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBUaGUgbWF4aW11bSBzaXplIGZvciBhbiBhcnJheSBpcyAyICoqIDMyIC0xLlxuXG5cbiAgcmV0dXJuIGtleS5sZW5ndGggPT09IDEwICYmIGtleSA+PSBNYXRoLnBvdygyLCAzMik7XG59XG5cbmZ1bmN0aW9uIGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihpc05vbkluZGV4KS5jb25jYXQob2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbHVlKS5maWx0ZXIoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5iaW5kKHZhbHVlKSkpO1xufSAvLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cblxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG52YXIgT05MWV9FTlVNRVJBQkxFID0gdW5kZWZpbmVkO1xudmFyIGtTdHJpY3QgPSB0cnVlO1xudmFyIGtMb29zZSA9IGZhbHNlO1xudmFyIGtOb0l0ZXJhdG9yID0gMDtcbnZhciBrSXNBcnJheSA9IDE7XG52YXIga0lzU2V0ID0gMjtcbnZhciBrSXNNYXAgPSAzOyAvLyBDaGVjayBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgc291cmNlIGFuZCBmbGFnc1xuXG5mdW5jdGlvbiBhcmVTaW1pbGFyUmVnRXhwcyhhLCBiKSB7XG4gIHJldHVybiByZWdleEZsYWdzU3VwcG9ydGVkID8gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3MgOiBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTtcbn1cblxuZnVuY3Rpb24gYXJlU2ltaWxhckZsb2F0QXJyYXlzKGEsIGIpIHtcbiAgaWYgKGEuYnl0ZUxlbmd0aCAhPT0gYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYS5ieXRlTGVuZ3RoOyBvZmZzZXQrKykge1xuICAgIGlmIChhW29mZnNldF0gIT09IGJbb2Zmc2V0XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhcmVTaW1pbGFyVHlwZWRBcnJheXMoYSwgYikge1xuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhLmJ1ZmZlciwgYS5ieXRlT2Zmc2V0LCBhLmJ5dGVMZW5ndGgpLCBuZXcgVWludDhBcnJheShiLmJ1ZmZlciwgYi5ieXRlT2Zmc2V0LCBiLmJ5dGVMZW5ndGgpKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gYXJlRXF1YWxBcnJheUJ1ZmZlcnMoYnVmMSwgYnVmMikge1xuICByZXR1cm4gYnVmMS5ieXRlTGVuZ3RoID09PSBidWYyLmJ5dGVMZW5ndGggJiYgY29tcGFyZShuZXcgVWludDhBcnJheShidWYxKSwgbmV3IFVpbnQ4QXJyYXkoYnVmMikpID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc0VxdWFsQm94ZWRQcmltaXRpdmUodmFsMSwgdmFsMikge1xuICBpZiAoaXNOdW1iZXJPYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJPYmplY3QodmFsMikgJiYgb2JqZWN0SXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSksIE51bWJlci5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpKTtcbiAgfVxuXG4gIGlmIChpc1N0cmluZ09iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc1N0cmluZ09iamVjdCh2YWwyKSAmJiBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG4gIH1cblxuICBpZiAoaXNCb29sZWFuT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzQm9vbGVhbk9iamVjdCh2YWwyKSAmJiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIGlmIChpc0JpZ0ludE9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc0JpZ0ludE9iamVjdCh2YWwyKSAmJiBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG4gIH1cblxuICByZXR1cm4gaXNTeW1ib2xPYmplY3QodmFsMikgJiYgU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xufSAvLyBOb3RlczogVHlwZSB0YWdzIGFyZSBoaXN0b3JpY2FsIFtbQ2xhc3NdXSBwcm9wZXJ0aWVzIHRoYXQgY2FuIGJlIHNldCBieVxuLy8gRnVuY3Rpb25UZW1wbGF0ZTo6U2V0Q2xhc3NOYW1lKCkgaW4gQysrIG9yIFN5bWJvbC50b1N0cmluZ1RhZyBpbiBKU1xuLy8gYW5kIHJldHJpZXZlZCB1c2luZyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSBpbiBKU1xuLy8gU2VlIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbi8vIGZvciBhIGxpc3Qgb2YgdGFncyBwcmUtZGVmaW5lZCBpbiB0aGUgc3BlYy5cbi8vIFRoZXJlIGFyZSBzb21lIHVuc3BlY2lmaWVkIHRhZ3MgaW4gdGhlIHdpbGQgdG9vIChlLmcuIHR5cGVkIGFycmF5IHRhZ3MpLlxuLy8gU2luY2UgdGFncyBjYW4gYmUgYWx0ZXJlZCwgdGhleSBvbmx5IHNlcnZlIGZhc3QgZmFpbHVyZXNcbi8vXG4vLyBUeXBlZCBhcnJheXMgYW5kIGJ1ZmZlcnMgYXJlIGNoZWNrZWQgYnkgY29tcGFyaW5nIHRoZSBjb250ZW50IGluIHRoZWlyXG4vLyB1bmRlcmx5aW5nIEFycmF5QnVmZmVyLiBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGF0IGl0J3Ncbi8vIHJlYXNvbmFibGUgdG8gaW50ZXJwcmV0IHRoZWlyIHVuZGVybHlpbmcgbWVtb3J5IGluIHRoZSBzYW1lIHdheSxcbi8vIHdoaWNoIGlzIGNoZWNrZWQgYnkgY29tcGFyaW5nIHRoZWlyIHR5cGUgdGFncy5cbi8vIChlLmcuIGEgVWludDhBcnJheSBhbmQgYSBVaW50MTZBcnJheSB3aXRoIHRoZSBzYW1lIG1lbW9yeSBjb250ZW50XG4vLyBjb3VsZCBzdGlsbCBiZSBkaWZmZXJlbnQgYmVjYXVzZSB0aGV5IHdpbGwgYmUgaW50ZXJwcmV0ZWQgZGlmZmVyZW50bHkpLlxuLy9cbi8vIEZvciBzdHJpY3QgY29tcGFyaXNvbiwgb2JqZWN0cyBzaG91bGQgaGF2ZVxuLy8gYSkgVGhlIHNhbWUgYnVpbHQtaW4gdHlwZSB0YWdzXG4vLyBiKSBUaGUgc2FtZSBwcm90b3R5cGVzLlxuXG5cbmZ1bmN0aW9uIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MpIHtcbiAgLy8gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAodmFsMSA9PT0gdmFsMikge1xuICAgIGlmICh2YWwxICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gc3RyaWN0ID8gb2JqZWN0SXModmFsMSwgdmFsMikgOiB0cnVlO1xuICB9IC8vIENoZWNrIG1vcmUgY2xvc2VseSBpZiB2YWwxIGFuZCB2YWwyIGFyZSBlcXVhbC5cblxuXG4gIGlmIChzdHJpY3QpIHtcbiAgICBpZiAoX3R5cGVvZih2YWwxKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsMSA9PT0gJ251bWJlcicgJiYgbnVtYmVySXNOYU4odmFsMSkgJiYgbnVtYmVySXNOYU4odmFsMik7XG4gICAgfVxuXG4gICAgaWYgKF90eXBlb2YodmFsMikgIT09ICdvYmplY3QnIHx8IHZhbDEgPT09IG51bGwgfHwgdmFsMiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsMSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsMSA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHZhbDIgPT09IG51bGwgfHwgX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICByZXR1cm4gdmFsMSA9PSB2YWwyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHZhbDIgPT09IG51bGwgfHwgX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgdmFsMVRhZyA9IG9iamVjdFRvU3RyaW5nKHZhbDEpO1xuICB2YXIgdmFsMlRhZyA9IG9iamVjdFRvU3RyaW5nKHZhbDIpO1xuXG4gIGlmICh2YWwxVGFnICE9PSB2YWwyVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsMSkpIHtcbiAgICAvLyBDaGVjayBmb3Igc3BhcnNlIGFycmF5cyBhbmQgZ2VuZXJhbCBmYXN0IHBhdGhcbiAgICBpZiAodmFsMS5sZW5ndGggIT09IHZhbDIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGtleXMxID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDEsIE9OTFlfRU5VTUVSQUJMRSk7XG4gICAgdmFyIGtleXMyID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDIsIE9OTFlfRU5VTUVSQUJMRSk7XG5cbiAgICBpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga0lzQXJyYXksIGtleXMxKTtcbiAgfSAvLyBbYnJvd3NlcmlmeV0gVGhpcyB0cmlnZ2VycyBvbiBjZXJ0YWluIHR5cGVzIGluIElFIChNYXAvU2V0KSBzbyB3ZSBkb24ndFxuICAvLyB3YW4ndCB0byBlYXJseSByZXR1cm4gb3V0IG9mIHRoZSByZXN0IG9mIHRoZSBjaGVja3MuIEhvd2V2ZXIgd2UgY2FuIGNoZWNrXG4gIC8vIGlmIHRoZSBzZWNvbmQgdmFsdWUgaXMgb25lIG9mIHRoZXNlIHZhbHVlcyBhbmQgdGhlIGZpcnN0IGlzbid0LlxuXG5cbiAgaWYgKHZhbDFUYWcgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgLy8gcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtOb0l0ZXJhdG9yKTtcbiAgICBpZiAoIWlzTWFwKHZhbDEpICYmIGlzTWFwKHZhbDIpIHx8ICFpc1NldCh2YWwxKSAmJiBpc1NldCh2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0RhdGUodmFsMSkpIHtcbiAgICBpZiAoIWlzRGF0ZSh2YWwyKSB8fCBEYXRlLnByb3RvdHlwZS5nZXRUaW1lLmNhbGwodmFsMSkgIT09IERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1JlZ0V4cCh2YWwxKSkge1xuICAgIGlmICghaXNSZWdFeHAodmFsMikgfHwgIWFyZVNpbWlsYXJSZWdFeHBzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzTmF0aXZlRXJyb3IodmFsMSkgfHwgdmFsMSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgLy8gRG8gbm90IGNvbXBhcmUgdGhlIHN0YWNrIGFzIGl0IG1pZ2h0IGRpZmZlciBldmVuIHRob3VnaCB0aGUgZXJyb3IgaXRzZWxmXG4gICAgLy8gaXMgb3RoZXJ3aXNlIGlkZW50aWNhbC5cbiAgICBpZiAodmFsMS5tZXNzYWdlICE9PSB2YWwyLm1lc3NhZ2UgfHwgdmFsMS5uYW1lICE9PSB2YWwyLm5hbWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNBcnJheUJ1ZmZlclZpZXcodmFsMSkpIHtcbiAgICBpZiAoIXN0cmljdCAmJiAoaXNGbG9hdDMyQXJyYXkodmFsMSkgfHwgaXNGbG9hdDY0QXJyYXkodmFsMSkpKSB7XG4gICAgICBpZiAoIWFyZVNpbWlsYXJGbG9hdEFycmF5cyh2YWwxLCB2YWwyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYXJlU2ltaWxhclR5cGVkQXJyYXlzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBCdWZmZXIuY29tcGFyZSByZXR1cm5zIHRydWUsIHNvIHZhbDEubGVuZ3RoID09PSB2YWwyLmxlbmd0aC4gSWYgdGhleSBib3RoXG4gICAgLy8gb25seSBjb250YWluIG51bWVyaWMga2V5cywgd2UgZG9uJ3QgbmVlZCB0byBleGFtIGZ1cnRoZXIgdGhhbiBjaGVja2luZ1xuICAgIC8vIHRoZSBzeW1ib2xzLlxuXG5cbiAgICB2YXIgX2tleXMgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMSwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIHZhciBfa2V5czIgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMiwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIGlmIChfa2V5cy5sZW5ndGggIT09IF9rZXlzMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IsIF9rZXlzKTtcbiAgfSBlbHNlIGlmIChpc1NldCh2YWwxKSkge1xuICAgIGlmICghaXNTZXQodmFsMikgfHwgdmFsMS5zaXplICE9PSB2YWwyLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga0lzU2V0KTtcbiAgfSBlbHNlIGlmIChpc01hcCh2YWwxKSkge1xuICAgIGlmICghaXNNYXAodmFsMikgfHwgdmFsMS5zaXplICE9PSB2YWwyLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga0lzTWFwKTtcbiAgfSBlbHNlIGlmIChpc0FueUFycmF5QnVmZmVyKHZhbDEpKSB7XG4gICAgaWYgKCFhcmVFcXVhbEFycmF5QnVmZmVycyh2YWwxLCB2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0JveGVkUHJpbWl0aXZlKHZhbDEpICYmICFpc0VxdWFsQm94ZWRQcmltaXRpdmUodmFsMSwgdmFsMikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IpO1xufVxuXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlcyh2YWwsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbCwgayk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBpdGVyYXRpb25UeXBlLCBhS2V5cykge1xuICAvLyBGb3IgYWxsIHJlbWFpbmluZyBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSwgb2JqZWN0cyBhbmQgTWFwcyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSBoYXZpbmc6XG4gIC8vIGEpIFRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgLy8gYikgVGhlIHNhbWUgc2V0IG9mIGtleXMvaW5kZXhlcyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKVxuICAvLyBjKSBFcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXkvaW5kZXhcbiAgLy8gZCkgRm9yIFNldHMgYW5kIE1hcHMsIGVxdWFsIGNvbnRlbnRzXG4gIC8vIE5vdGU6IHRoaXMgYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA1KSB7XG4gICAgYUtleXMgPSBPYmplY3Qua2V5cyh2YWwxKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyh2YWwyKTsgLy8gVGhlIHBhaXIgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzLlxuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIENoZWFwIGtleSB0ZXN0XG5cblxuICB2YXIgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBhS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkodmFsMiwgYUtleXNbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0cmljdCAmJiBhcmd1bWVudHMubGVuZ3RoID09PSA1KSB7XG4gICAgdmFyIHN5bWJvbEtleXNBID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDEpO1xuXG4gICAgaWYgKHN5bWJvbEtleXNBLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHN5bWJvbEtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBzeW1ib2xLZXlzQVtpXTtcblxuICAgICAgICBpZiAocHJvcGVydHlJc0VudW1lcmFibGUodmFsMSwga2V5KSkge1xuICAgICAgICAgIGlmICghcHJvcGVydHlJc0VudW1lcmFibGUodmFsMiwga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbDIsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN5bWJvbEtleXNCID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDIpO1xuXG4gICAgICBpZiAoc3ltYm9sS2V5c0EubGVuZ3RoICE9PSBzeW1ib2xLZXlzQi5sZW5ndGggJiYgZ2V0RW51bWVyYWJsZXModmFsMiwgc3ltYm9sS2V5c0IpLmxlbmd0aCAhPT0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3N5bWJvbEtleXNCID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDIpO1xuXG4gICAgICBpZiAoX3N5bWJvbEtleXNCLmxlbmd0aCAhPT0gMCAmJiBnZXRFbnVtZXJhYmxlcyh2YWwyLCBfc3ltYm9sS2V5c0IpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFLZXlzLmxlbmd0aCA9PT0gMCAmJiAoaXRlcmF0aW9uVHlwZSA9PT0ga05vSXRlcmF0b3IgfHwgaXRlcmF0aW9uVHlwZSA9PT0ga0lzQXJyYXkgJiYgdmFsMS5sZW5ndGggPT09IDAgfHwgdmFsMS5zaXplID09PSAwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFVzZSBtZW1vcyB0byBoYW5kbGUgY3ljbGVzLlxuXG5cbiAgaWYgKG1lbW9zID09PSB1bmRlZmluZWQpIHtcbiAgICBtZW1vcyA9IHtcbiAgICAgIHZhbDE6IG5ldyBNYXAoKSxcbiAgICAgIHZhbDI6IG5ldyBNYXAoKSxcbiAgICAgIHBvc2l0aW9uOiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBwcmV2ZW50IHVwIHRvIHR3byBtYXAuaGFzKHgpIGNhbGxzIGJ5IGRpcmVjdGx5IHJldHJpZXZpbmcgdGhlIHZhbHVlXG4gICAgLy8gYW5kIGNoZWNraW5nIGZvciB1bmRlZmluZWQuIFRoZSBtYXAgY2FuIG9ubHkgY29udGFpbiBudW1iZXJzLCBzbyBpdCBpc1xuICAgIC8vIHNhZmUgdG8gY2hlY2sgZm9yIHVuZGVmaW5lZCBvbmx5LlxuICAgIHZhciB2YWwyTWVtb0EgPSBtZW1vcy52YWwxLmdldCh2YWwxKTtcblxuICAgIGlmICh2YWwyTWVtb0EgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHZhbDJNZW1vQiA9IG1lbW9zLnZhbDIuZ2V0KHZhbDIpO1xuXG4gICAgICBpZiAodmFsMk1lbW9CICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbDJNZW1vQSA9PT0gdmFsMk1lbW9CO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLnBvc2l0aW9uKys7XG4gIH1cblxuICBtZW1vcy52YWwxLnNldCh2YWwxLCBtZW1vcy5wb3NpdGlvbik7XG4gIG1lbW9zLnZhbDIuc2V0KHZhbDIsIG1lbW9zLnBvc2l0aW9uKTtcbiAgdmFyIGFyZUVxID0gb2JqRXF1aXYodmFsMSwgdmFsMiwgc3RyaWN0LCBhS2V5cywgbWVtb3MsIGl0ZXJhdGlvblR5cGUpO1xuICBtZW1vcy52YWwxLmRlbGV0ZSh2YWwxKTtcbiAgbWVtb3MudmFsMi5kZWxldGUodmFsMik7XG4gIHJldHVybiBhcmVFcTtcbn1cblxuZnVuY3Rpb24gc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgdmFsMSwgc3RyaWN0LCBtZW1vKSB7XG4gIC8vIEdvIGxvb2tpbmcuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWwyID0gc2V0VmFsdWVzW2ldO1xuXG4gICAgaWYgKGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtbykpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgbWF0Y2hpbmcgZWxlbWVudCB0byBtYWtlIHN1cmUgd2UgZG8gbm90IGNoZWNrIHRoYXQgYWdhaW4uXG4gICAgICBzZXQuZGVsZXRlKHZhbDIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9FcXVhbGl0eV9jb21wYXJpc29uc19hbmRfc2FtZW5lc3MjTG9vc2VfZXF1YWxpdHlfdXNpbmdcbi8vIFNhZGx5IGl0IGlzIG5vdCBwb3NzaWJsZSB0byBkZXRlY3QgY29ycmVzcG9uZGluZyB2YWx1ZXMgcHJvcGVybHkgaW4gY2FzZSB0aGVcbi8vIHR5cGUgaXMgYSBzdHJpbmcsIG51bWJlciwgYmlnaW50IG9yIGJvb2xlYW4uIFRoZSByZWFzb24gaXMgdGhhdCB0aG9zZSB2YWx1ZXNcbi8vIGNhbiBtYXRjaCBsb3RzIG9mIGRpZmZlcmVudCBzdHJpbmcgdmFsdWVzIChlLmcuLCAxbiA9PSAnKzAwMDAxJykuXG5cblxuZnVuY3Rpb24gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pIHtcbiAgc3dpdGNoIChfdHlwZW9mKHByaW0pKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIC8vIE9ubHkgcGFzcyBpbiBudWxsIGFzIG9iamVjdCFcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHByaW0gPSArcHJpbTtcbiAgICAvLyBMb29zZSBlcXVhbCBlbnRyaWVzIGV4aXN0IG9ubHkgaWYgdGhlIHN0cmluZyBpcyBwb3NzaWJsZSB0byBjb252ZXJ0IHRvXG4gICAgLy8gYSByZWd1bGFyIG51bWJlciBhbmQgbm90IE5hTi5cbiAgICAvLyBGYWxsIHRocm91Z2hcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAobnVtYmVySXNOYU4ocHJpbSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0TWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHByaW0pIHtcbiAgdmFyIGFsdFZhbHVlID0gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pO1xuICBpZiAoYWx0VmFsdWUgIT0gbnVsbCkgcmV0dXJuIGFsdFZhbHVlO1xuICByZXR1cm4gYi5oYXMoYWx0VmFsdWUpICYmICFhLmhhcyhhbHRWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIG1hcE1pZ2h0SGF2ZUxvb3NlUHJpbShhLCBiLCBwcmltLCBpdGVtLCBtZW1vKSB7XG4gIHZhciBhbHRWYWx1ZSA9IGZpbmRMb29zZU1hdGNoaW5nUHJpbWl0aXZlcyhwcmltKTtcblxuICBpZiAoYWx0VmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBhbHRWYWx1ZTtcbiAgfVxuXG4gIHZhciBjdXJCID0gYi5nZXQoYWx0VmFsdWUpO1xuXG4gIGlmIChjdXJCID09PSB1bmRlZmluZWQgJiYgIWIuaGFzKGFsdFZhbHVlKSB8fCAhaW5uZXJEZWVwRXF1YWwoaXRlbSwgY3VyQiwgZmFsc2UsIG1lbW8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICFhLmhhcyhhbHRWYWx1ZSkgJiYgaW5uZXJEZWVwRXF1YWwoaXRlbSwgY3VyQiwgZmFsc2UsIG1lbW8pO1xufVxuXG5mdW5jdGlvbiBzZXRFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gVGhpcyBpcyBhIGxhemlseSBpbml0aWF0ZWQgU2V0IG9mIGVudHJpZXMgd2hpY2ggaGF2ZSB0byBiZSBjb21wYXJlZFxuICAvLyBwYWlyd2lzZS5cbiAgdmFyIHNldCA9IG51bGw7XG4gIHZhciBhVmFsdWVzID0gYXJyYXlGcm9tU2V0KGEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYVZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWwgPSBhVmFsdWVzW2ldOyAvLyBOb3RlOiBDaGVja2luZyBmb3IgdGhlIG9iamVjdHMgZmlyc3QgaW1wcm92ZXMgdGhlIHBlcmZvcm1hbmNlIGZvciBvYmplY3RcbiAgICAvLyBoZWF2eSBzZXRzIGJ1dCBpdCBpcyBhIG1pbm9yIHNsb3cgZG93biBmb3IgcHJpbWl0aXZlcy4gQXMgdGhleSBhcmUgZmFzdFxuICAgIC8vIHRvIGNoZWNrIHRoaXMgaW1wcm92ZXMgdGhlIHdvcnN0IGNhc2Ugc2NlbmFyaW8gaW5zdGVhZC5cblxuICAgIGlmIChfdHlwZW9mKHZhbCkgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICB9IC8vIElmIHRoZSBzcGVjaWZpZWQgdmFsdWUgZG9lc24ndCBleGlzdCBpbiB0aGUgc2Vjb25kIHNldCBpdHMgYW4gbm90IG51bGxcbiAgICAgIC8vIG9iamVjdCAob3Igbm9uIHN0cmljdCBvbmx5OiBhIG5vdCBtYXRjaGluZyBwcmltaXRpdmUpIHdlJ2xsIG5lZWQgdG8gZ29cbiAgICAgIC8vIGh1bnRpbmcgZm9yIHNvbWV0aGluZyB0aGF0cyBkZWVwLShzdHJpY3QtKWVxdWFsIHRvIGl0LiBUbyBtYWtlIHRoaXNcbiAgICAgIC8vIE8obiBsb2cgbikgY29tcGxleGl0eSB3ZSBoYXZlIHRvIGNvcHkgdGhlc2UgdmFsdWVzIGluIGEgbmV3IHNldCBmaXJzdC5cblxuXG4gICAgICBzZXQuYWRkKHZhbCk7XG4gICAgfSBlbHNlIGlmICghYi5oYXModmFsKSkge1xuICAgICAgaWYgKHN0cmljdCkgcmV0dXJuIGZhbHNlOyAvLyBGYXN0IHBhdGggdG8gZGV0ZWN0IG1pc3Npbmcgc3RyaW5nLCBzeW1ib2wsIHVuZGVmaW5lZCBhbmQgbnVsbCB2YWx1ZXMuXG5cbiAgICAgIGlmICghc2V0TWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0LmFkZCh2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZXQgIT09IG51bGwpIHtcbiAgICB2YXIgYlZhbHVlcyA9IGFycmF5RnJvbVNldChiKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBiVmFsdWVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF92YWwgPSBiVmFsdWVzW19pXTsgLy8gV2UgaGF2ZSB0byBjaGVjayBpZiBhIHByaW1pdGl2ZSB2YWx1ZSBpcyBhbHJlYWR5XG4gICAgICAvLyBtYXRjaGluZyBhbmQgb25seSBpZiBpdCdzIG5vdCwgZ28gaHVudGluZyBmb3IgaXQuXG5cbiAgICAgIGlmIChfdHlwZW9mKF92YWwpID09PSAnb2JqZWN0JyAmJiBfdmFsICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgX3ZhbCwgc3RyaWN0LCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmICFhLmhhcyhfdmFsKSAmJiAhc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgX3ZhbCwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNldC5zaXplID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1hcEhhc0VxdWFsRW50cnkoc2V0LCBtYXAsIGtleTEsIGl0ZW0xLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gVG8gYmUgYWJsZSB0byBoYW5kbGUgY2FzZXMgbGlrZTpcbiAgLy8gICBNYXAoW1t7fSwgJ2EnXSwgW3t9LCAnYiddXSkgdnMgTWFwKFtbe30sICdiJ10sIFt7fSwgJ2EnXV0pXG4gIC8vIC4uLiB3ZSBuZWVkIHRvIGNvbnNpZGVyICphbGwqIG1hdGNoaW5nIGtleXMsIG5vdCBqdXN0IHRoZSBmaXJzdCB3ZSBmaW5kLlxuICB2YXIgc2V0VmFsdWVzID0gYXJyYXlGcm9tU2V0KHNldCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5MiA9IHNldFZhbHVlc1tpXTtcblxuICAgIGlmIChpbm5lckRlZXBFcXVhbChrZXkxLCBrZXkyLCBzdHJpY3QsIG1lbW8pICYmIGlubmVyRGVlcEVxdWFsKGl0ZW0xLCBtYXAuZ2V0KGtleTIpLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICBzZXQuZGVsZXRlKGtleTIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBtYXBFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW8pIHtcbiAgdmFyIHNldCA9IG51bGw7XG4gIHZhciBhRW50cmllcyA9IGFycmF5RnJvbU1hcChhKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFFbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9hRW50cmllcyRpID0gX3NsaWNlZFRvQXJyYXkoYUVudHJpZXNbaV0sIDIpLFxuICAgICAgICBrZXkgPSBfYUVudHJpZXMkaVswXSxcbiAgICAgICAgaXRlbTEgPSBfYUVudHJpZXMkaVsxXTtcblxuICAgIGlmIChfdHlwZW9mKGtleSkgPT09ICdvYmplY3QnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICB9XG5cbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQnkgZGlyZWN0bHkgcmV0cmlldmluZyB0aGUgdmFsdWUgd2UgcHJldmVudCBhbm90aGVyIGIuaGFzKGtleSkgY2hlY2sgaW5cbiAgICAgIC8vIGFsbW9zdCBhbGwgcG9zc2libGUgY2FzZXMuXG4gICAgICB2YXIgaXRlbTIgPSBiLmdldChrZXkpO1xuXG4gICAgICBpZiAoaXRlbTIgPT09IHVuZGVmaW5lZCAmJiAhYi5oYXMoa2V5KSB8fCAhaW5uZXJEZWVwRXF1YWwoaXRlbTEsIGl0ZW0yLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIGlmIChzdHJpY3QpIHJldHVybiBmYWxzZTsgLy8gRmFzdCBwYXRoIHRvIGRldGVjdCBtaXNzaW5nIHN0cmluZywgc3ltYm9sLCB1bmRlZmluZWQgYW5kIG51bGxcbiAgICAgICAgLy8ga2V5cy5cblxuICAgICAgICBpZiAoIW1hcE1pZ2h0SGF2ZUxvb3NlUHJpbShhLCBiLCBrZXksIGl0ZW0xLCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNldCAhPT0gbnVsbCkge1xuICAgIHZhciBiRW50cmllcyA9IGFycmF5RnJvbU1hcChiKTtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGJFbnRyaWVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBfYkVudHJpZXMkX2kgPSBfc2xpY2VkVG9BcnJheShiRW50cmllc1tfaTJdLCAyKSxcbiAgICAgICAgICBrZXkgPSBfYkVudHJpZXMkX2lbMF0sXG4gICAgICAgICAgaXRlbSA9IF9iRW50cmllcyRfaVsxXTtcblxuICAgICAgaWYgKF90eXBlb2Yoa2V5KSA9PT0gJ29iamVjdCcgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghbWFwSGFzRXF1YWxFbnRyeShzZXQsIGEsIGtleSwgaXRlbSwgc3RyaWN0LCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmICghYS5oYXMoa2V5KSB8fCAhaW5uZXJEZWVwRXF1YWwoYS5nZXQoa2V5KSwgaXRlbSwgZmFsc2UsIG1lbW8pKSAmJiAhbWFwSGFzRXF1YWxFbnRyeShzZXQsIGEsIGtleSwgaXRlbSwgZmFsc2UsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0LnNpemUgPT09IDA7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBrZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSkge1xuICAvLyBTZXRzIGFuZCBtYXBzIGRvbid0IGhhdmUgdGhlaXIgZW50cmllcyBhY2Nlc3NpYmxlIHZpYSBub3JtYWwgb2JqZWN0XG4gIC8vIHByb3BlcnRpZXMuXG4gIHZhciBpID0gMDtcblxuICBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzU2V0KSB7XG4gICAgaWYgKCFzZXRFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNNYXApIHtcbiAgICBpZiAoIW1hcEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc0FycmF5KSB7XG4gICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoYSwgaSkpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShiLCBpKSB8fCAhaW5uZXJEZWVwRXF1YWwoYVtpXSwgYltpXSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkoYiwgaSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXJyYXkgaXMgc3BhcnNlLlxuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcblxuICAgICAgICBmb3IgKDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGtleXNBW2ldO1xuXG4gICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShiLCBrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gVGhlIHBhaXIgbXVzdCBoYXZlIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleS5cbiAgLy8gUG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdDpcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9rZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKCFpbm5lckRlZXBFcXVhbChhW19rZXldLCBiW19rZXldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0RlZXBFcXVhbCh2YWwxLCB2YWwyKSB7XG4gIHJldHVybiBpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBrTG9vc2UpO1xufVxuXG5mdW5jdGlvbiBpc0RlZXBTdHJpY3RFcXVhbCh2YWwxLCB2YWwyKSB7XG4gIHJldHVybiBpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBrU3RyaWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzRGVlcEVxdWFsOiBpc0RlZXBFcXVhbCxcbiAgaXNEZWVwU3RyaWN0RXF1YWw6IGlzRGVlcFN0cmljdEVxdWFsXG59OyIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcbnZhciAkbWF4ID0gR2V0SW50cmluc2ljKCclTWF0aC5tYXglJyk7XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRpZiAoJGdPUEQgJiYgJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dmFyIGRlc2MgPSAkZ09QRChmdW5jLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHQvLyBvcmlnaW5hbCBsZW5ndGgsIHBsdXMgdGhlIHJlY2VpdmVyLCBtaW51cyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgKGFmdGVyIHRoZSByZWNlaXZlcilcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eShcblx0XHRcdFx0ZnVuYyxcblx0XHRcdFx0J2xlbmd0aCcsXG5cdFx0XHRcdHsgdmFsdWU6IDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSkgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZ1bmM7XG59O1xuXG52YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdCRkZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2FwcGx5JywgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG59XG4iLCIvKmdsb2JhbCB3aW5kb3csIGdsb2JhbCovXG52YXIgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpXG52YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKVxuZnVuY3Rpb24gbm93KCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgfVxuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcbnZhciBjb25zb2xlXG52YXIgdGltZXMgPSB7fVxuXG5pZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY29uc29sZSkge1xuICAgIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZVxufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlXG59IGVsc2Uge1xuICAgIGNvbnNvbGUgPSB7fVxufVxuXG52YXIgZnVuY3Rpb25zID0gW1xuICAgIFtsb2csIFwibG9nXCJdLFxuICAgIFtpbmZvLCBcImluZm9cIl0sXG4gICAgW3dhcm4sIFwid2FyblwiXSxcbiAgICBbZXJyb3IsIFwiZXJyb3JcIl0sXG4gICAgW3RpbWUsIFwidGltZVwiXSxcbiAgICBbdGltZUVuZCwgXCJ0aW1lRW5kXCJdLFxuICAgIFt0cmFjZSwgXCJ0cmFjZVwiXSxcbiAgICBbZGlyLCBcImRpclwiXSxcbiAgICBbY29uc29sZUFzc2VydCwgXCJhc3NlcnRcIl1cbl1cblxuZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHVwbGUgPSBmdW5jdGlvbnNbaV1cbiAgICB2YXIgZiA9IHR1cGxlWzBdXG4gICAgdmFyIG5hbWUgPSB0dXBsZVsxXVxuXG4gICAgaWYgKCFjb25zb2xlW25hbWVdKSB7XG4gICAgICAgIGNvbnNvbGVbbmFtZV0gPSBmXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnNvbGVcblxuZnVuY3Rpb24gbG9nKCkge31cblxuZnVuY3Rpb24gaW5mbygpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiBlcnJvcigpIHtcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgdGltZXNbbGFiZWxdID0gbm93KClcbn1cblxuZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgIHZhciB0aW1lID0gdGltZXNbbGFiZWxdXG4gICAgaWYgKCF0aW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWw6IFwiICsgbGFiZWwpXG4gICAgfVxuXG4gICAgZGVsZXRlIHRpbWVzW2xhYmVsXVxuICAgIHZhciBkdXJhdGlvbiA9IG5vdygpIC0gdGltZVxuICAgIGNvbnNvbGUubG9nKGxhYmVsICsgXCI6IFwiICsgZHVyYXRpb24gKyBcIm1zXCIpXG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKVxuICAgIGVyci5uYW1lID0gXCJUcmFjZVwiXG4gICAgZXJyLm1lc3NhZ2UgPSB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spXG59XG5cbmZ1bmN0aW9uIGRpcihvYmplY3QpIHtcbiAgICBjb25zb2xlLmxvZyh1dGlsLmluc3BlY3Qob2JqZWN0KSArIFwiXFxuXCIpXG59XG5cbmZ1bmN0aW9uIGNvbnNvbGVBc3NlcnQoZXhwcmVzc2lvbikge1xuICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgYXJyID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICAgIGFzc2VydC5vayhmYWxzZSwgdXRpbC5mb3JtYXQuYXBwbHkobnVsbCwgYXJyKSlcbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIi8qKlxuICogQ29kZSByZWZhY3RvcmVkIGZyb20gTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yazpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGZpcnN0U291cmNlKSB7XG4gIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBmaXJzdCBhcmd1bWVudCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlID09PSB1bmRlZmluZWQgfHwgbmV4dFNvdXJjZSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXgrKykge1xuICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgaWYgKCFPYmplY3QuYXNzaWduKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgJ2Fzc2lnbicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogYXNzaWduXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2lnbjogYXNzaWduLFxuICBwb2x5ZmlsbDogcG9seWZpbGxcbn07XG4iLCJcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JFYWNoIChvYmosIGZuLCBjdHgpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChmbikgIT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBsID0gb2JqLmxlbmd0aDtcbiAgICBpZiAobCA9PT0gK2wpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGN0eCwgb2JqW2tdLCBrLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBTeW50YXhFcnJvcjtcbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiBFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiBFdmFsRXJyb3IsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGaW5hbGl6YXRpb25SZWdpc3RyeSUnOiB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmluYWxpemF0aW9uUmVnaXN0cnksXG5cdCclRnVuY3Rpb24lJzogJEZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiBSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6IFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgJHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciBmaXJzdCA9ICRzdHJTbGljZShzdHJpbmcsIDAsIDEpO1xuXHR2YXIgbGFzdCA9ICRzdHJTbGljZShzdHJpbmcsIC0xKTtcblx0aWYgKGZpcnN0ID09PSAnJScgJiYgbGFzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBjbG9zaW5nIGAlYCcpO1xuXHR9IGVsc2UgaWYgKGxhc3QgPT09ICclJyAmJiBmaXJzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBvcGVuaW5nIGAlYCcpO1xuXHR9XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogbnVtYmVyIHx8IG1hdGNoO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWNOYW1lID0gbmFtZTtcblx0dmFyIGFsaWFzO1xuXHRpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdGFsaWFzID0gTEVHQUNZX0FMSUFTRVNbaW50cmluc2ljTmFtZV07XG5cdFx0aW50cmluc2ljTmFtZSA9ICclJyArIGFsaWFzWzBdICsgJyUnO1xuXHR9XG5cblx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG5cdFx0aWYgKHZhbHVlID09PSBuZWVkc0V2YWwpIHtcblx0XHRcdHZhbHVlID0gZG9FdmFsKGludHJpbnNpY05hbWUpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxpYXM6IGFsaWFzLFxuXHRcdFx0bmFtZTogaW50cmluc2ljTmFtZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cblxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyICRqc2NvbXA9JGpzY29tcHx8e307JGpzY29tcC5zY29wZT17fTskanNjb21wLmZpbmRJbnRlcm5hbD1mdW5jdGlvbihhLGIsYyl7YSBpbnN0YW5jZW9mIFN0cmluZyYmKGE9U3RyaW5nKGEpKTtmb3IodmFyIGQ9YS5sZW5ndGgsZT0wO2U8ZDtlKyspe3ZhciBmPWFbZV07aWYoYi5jYWxsKGMsZixlLGEpKXJldHVybntpOmUsdjpmfX1yZXR1cm57aTotMSx2OnZvaWQgMH19OyRqc2NvbXAuQVNTVU1FX0VTNT0hMTskanNjb21wLkFTU1VNRV9OT19OQVRJVkVfTUFQPSExOyRqc2NvbXAuQVNTVU1FX05PX05BVElWRV9TRVQ9ITE7JGpzY29tcC5TSU1QTEVfRlJPVU5EX1BPTFlGSUxMPSExO1xuJGpzY29tcC5kZWZpbmVQcm9wZXJ0eT0kanNjb21wLkFTU1VNRV9FUzV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsYyl7YSE9QXJyYXkucHJvdG90eXBlJiZhIT1PYmplY3QucHJvdG90eXBlJiYoYVtiXT1jLnZhbHVlKX07JGpzY29tcC5nZXRHbG9iYWw9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93PT09YT9hOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJm51bGwhPWdsb2JhbD9nbG9iYWw6YX07JGpzY29tcC5nbG9iYWw9JGpzY29tcC5nZXRHbG9iYWwodGhpcyk7XG4kanNjb21wLnBvbHlmaWxsPWZ1bmN0aW9uKGEsYixjLGQpe2lmKGIpe2M9JGpzY29tcC5nbG9iYWw7YT1hLnNwbGl0KFwiLlwiKTtmb3IoZD0wO2Q8YS5sZW5ndGgtMTtkKyspe3ZhciBlPWFbZF07ZSBpbiBjfHwoY1tlXT17fSk7Yz1jW2VdfWE9YVthLmxlbmd0aC0xXTtkPWNbYV07Yj1iKGQpO2IhPWQmJm51bGwhPWImJiRqc2NvbXAuZGVmaW5lUHJvcGVydHkoYyxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX07JGpzY29tcC5wb2x5ZmlsbChcIkFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcIixmdW5jdGlvbihhKXtyZXR1cm4gYT9hOmZ1bmN0aW9uKGEsYyl7cmV0dXJuICRqc2NvbXAuZmluZEludGVybmFsKHRoaXMsYSxjKS5pfX0sXCJlczZcIixcImVzM1wiKTtcbiRqc2NvbXAuY2hlY2tTdHJpbmdBcmdzPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgJ3RoaXMnIHZhbHVlIGZvciBTdHJpbmcucHJvdG90eXBlLlwiK2MrXCIgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWRcIik7aWYoYiBpbnN0YW5jZW9mIFJlZ0V4cCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgdG8gU3RyaW5nLnByb3RvdHlwZS5cIitjK1wiIG11c3Qgbm90IGJlIGEgcmVndWxhciBleHByZXNzaW9uXCIpO3JldHVybiBhK1wiXCJ9O1xuJGpzY29tcC5wb2x5ZmlsbChcIlN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhcIixmdW5jdGlvbihhKXtyZXR1cm4gYT9hOmZ1bmN0aW9uKGEsYyl7dmFyIGI9JGpzY29tcC5jaGVja1N0cmluZ0FyZ3ModGhpcyxhLFwiZW5kc1dpdGhcIik7YSs9XCJcIjt2b2lkIDA9PT1jJiYoYz1iLmxlbmd0aCk7Yz1NYXRoLm1heCgwLE1hdGgubWluKGN8MCxiLmxlbmd0aCkpO2Zvcih2YXIgZT1hLmxlbmd0aDswPGUmJjA8YzspaWYoYlstLWNdIT1hWy0tZV0pcmV0dXJuITE7cmV0dXJuIDA+PWV9fSxcImVzNlwiLFwiZXMzXCIpOyRqc2NvbXAucG9seWZpbGwoXCJBcnJheS5wcm90b3R5cGUuZmluZFwiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gJGpzY29tcC5maW5kSW50ZXJuYWwodGhpcyxhLGMpLnZ9fSxcImVzNlwiLFwiZXMzXCIpO1xuJGpzY29tcC5wb2x5ZmlsbChcIlN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aFwiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYSxjKXt2YXIgYj0kanNjb21wLmNoZWNrU3RyaW5nQXJncyh0aGlzLGEsXCJzdGFydHNXaXRoXCIpO2ErPVwiXCI7dmFyIGU9Yi5sZW5ndGgsZj1hLmxlbmd0aDtjPU1hdGgubWF4KDAsTWF0aC5taW4oY3wwLGIubGVuZ3RoKSk7Zm9yKHZhciBnPTA7ZzxmJiZjPGU7KWlmKGJbYysrXSE9YVtnKytdKXJldHVybiExO3JldHVybiBnPj1mfX0sXCJlczZcIixcImVzM1wiKTtcbiRqc2NvbXAucG9seWZpbGwoXCJTdHJpbmcucHJvdG90eXBlLnJlcGVhdFwiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYSl7dmFyIGI9JGpzY29tcC5jaGVja1N0cmluZ0FyZ3ModGhpcyxudWxsLFwicmVwZWF0XCIpO2lmKDA+YXx8MTM0MjE3NzI3OTxhKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBjb3VudCB2YWx1ZVwiKTthfD0wO2Zvcih2YXIgZD1cIlwiO2E7KWlmKGEmMSYmKGQrPWIpLGE+Pj49MSliKz1iO3JldHVybiBkfX0sXCJlczZcIixcImVzM1wiKTt2YXIgQ09NUElMRUQ9ITAsZ29vZz1nb29nfHx7fTtnb29nLmdsb2JhbD10aGlzfHxzZWxmO2dvb2cuaXNEZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMCE9PWF9O2dvb2cuaXNTdHJpbmc9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGF9O2dvb2cuaXNCb29sZWFuPWZ1bmN0aW9uKGEpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYX07XG5nb29nLmlzTnVtYmVyPWZ1bmN0aW9uKGEpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBhfTtnb29nLmV4cG9ydFBhdGhfPWZ1bmN0aW9uKGEsYixjKXthPWEuc3BsaXQoXCIuXCIpO2M9Y3x8Z29vZy5nbG9iYWw7YVswXWluIGN8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjLmV4ZWNTY3JpcHR8fGMuZXhlY1NjcmlwdChcInZhciBcIithWzBdKTtmb3IodmFyIGQ7YS5sZW5ndGgmJihkPWEuc2hpZnQoKSk7KSFhLmxlbmd0aCYmZ29vZy5pc0RlZihiKT9jW2RdPWI6Yz1jW2RdJiZjW2RdIT09T2JqZWN0LnByb3RvdHlwZVtkXT9jW2RdOmNbZF09e319O1xuZ29vZy5kZWZpbmU9ZnVuY3Rpb24oYSxiKXtpZighQ09NUElMRUQpe3ZhciBjPWdvb2cuZ2xvYmFsLkNMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTLGQ9Z29vZy5nbG9iYWwuQ0xPU1VSRV9ERUZJTkVTO2MmJnZvaWQgMD09PWMubm9kZVR5cGUmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLGEpP2I9Y1thXTpkJiZ2b2lkIDA9PT1kLm5vZGVUeXBlJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCxhKSYmKGI9ZFthXSl9cmV0dXJuIGJ9O2dvb2cuRkVBVFVSRVNFVF9ZRUFSPTIwMTI7Z29vZy5ERUJVRz0hMDtnb29nLkxPQ0FMRT1cImVuXCI7Z29vZy5UUlVTVEVEX1NJVEU9ITA7Z29vZy5TVFJJQ1RfTU9ERV9DT01QQVRJQkxFPSExO2dvb2cuRElTQUxMT1dfVEVTVF9PTkxZX0NPREU9Q09NUElMRUQmJiFnb29nLkRFQlVHO2dvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORz0hMTtcbmdvb2cucHJvdmlkZT1mdW5jdGlvbihhKXtpZihnb29nLmlzSW5Nb2R1bGVMb2FkZXJfKCkpdGhyb3cgRXJyb3IoXCJnb29nLnByb3ZpZGUgY2Fubm90IGJlIHVzZWQgd2l0aGluIGEgbW9kdWxlLlwiKTtpZighQ09NUElMRUQmJmdvb2cuaXNQcm92aWRlZF8oYSkpdGhyb3cgRXJyb3IoJ05hbWVzcGFjZSBcIicrYSsnXCIgYWxyZWFkeSBkZWNsYXJlZC4nKTtnb29nLmNvbnN0cnVjdE5hbWVzcGFjZV8oYSl9O2dvb2cuY29uc3RydWN0TmFtZXNwYWNlXz1mdW5jdGlvbihhLGIpe2lmKCFDT01QSUxFRCl7ZGVsZXRlIGdvb2cuaW1wbGljaXROYW1lc3BhY2VzX1thXTtmb3IodmFyIGM9YTsoYz1jLnN1YnN0cmluZygwLGMubGFzdEluZGV4T2YoXCIuXCIpKSkmJiFnb29nLmdldE9iamVjdEJ5TmFtZShjKTspZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfW2NdPSEwfWdvb2cuZXhwb3J0UGF0aF8oYSxiKX07XG5nb29nLmdldFNjcmlwdE5vbmNlPWZ1bmN0aW9uKGEpe2lmKGEmJmEhPWdvb2cuZ2xvYmFsKXJldHVybiBnb29nLmdldFNjcmlwdE5vbmNlXyhhLmRvY3VtZW50KTtudWxsPT09Z29vZy5jc3BOb25jZV8mJihnb29nLmNzcE5vbmNlXz1nb29nLmdldFNjcmlwdE5vbmNlXyhnb29nLmdsb2JhbC5kb2N1bWVudCkpO3JldHVybiBnb29nLmNzcE5vbmNlX307Z29vZy5OT05DRV9QQVRURVJOXz0vXltcXHcrL18tXStbPV17MCwyfSQvO2dvb2cuY3NwTm9uY2VfPW51bGw7Z29vZy5nZXRTY3JpcHROb25jZV89ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5xdWVyeVNlbGVjdG9yJiZhLnF1ZXJ5U2VsZWN0b3IoXCJzY3JpcHRbbm9uY2VdXCIpKSYmKGE9YS5ub25jZXx8YS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKSkmJmdvb2cuTk9OQ0VfUEFUVEVSTl8udGVzdChhKT9hOlwiXCJ9O2dvb2cuVkFMSURfTU9EVUxFX1JFXz0vXlthLXpBLVpfJF1bYS16QS1aMC05Ll8kXSokLztcbmdvb2cubW9kdWxlPWZ1bmN0aW9uKGEpe2lmKCFnb29nLmlzU3RyaW5nKGEpfHwhYXx8LTE9PWEuc2VhcmNoKGdvb2cuVkFMSURfTU9EVUxFX1JFXykpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG1vZHVsZSBpZGVudGlmaWVyXCIpO2lmKCFnb29nLmlzSW5Hb29nTW9kdWxlTG9hZGVyXygpKXRocm93IEVycm9yKFwiTW9kdWxlIFwiK2ErXCIgaGFzIGJlZW4gbG9hZGVkIGluY29ycmVjdGx5LiBOb3RlLCBtb2R1bGVzIGNhbm5vdCBiZSBsb2FkZWQgYXMgbm9ybWFsIHNjcmlwdHMuIFRoZXkgcmVxdWlyZSBzb21lIGtpbmQgb2YgcHJlLXByb2Nlc3Npbmcgc3RlcC4gWW91J3JlIGxpa2VseSB0cnlpbmcgdG8gbG9hZCBhIG1vZHVsZSB2aWEgYSBzY3JpcHQgdGFnIG9yIGFzIGEgcGFydCBvZiBhIGNvbmNhdGVuYXRlZCBidW5kbGUgd2l0aG91dCByZXdyaXRpbmcgdGhlIG1vZHVsZS4gRm9yIG1vcmUgaW5mbyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L3dpa2kvZ29vZy5tb2R1bGU6LWFuLUVTNi1tb2R1bGUtbGlrZS1hbHRlcm5hdGl2ZS10by1nb29nLnByb3ZpZGUuXCIpO1xuaWYoZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZSl0aHJvdyBFcnJvcihcImdvb2cubW9kdWxlIG1heSBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBtb2R1bGUuXCIpO2dvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWU9YTtpZighQ09NUElMRUQpe2lmKGdvb2cuaXNQcm92aWRlZF8oYSkpdGhyb3cgRXJyb3IoJ05hbWVzcGFjZSBcIicrYSsnXCIgYWxyZWFkeSBkZWNsYXJlZC4nKTtkZWxldGUgZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfW2FdfX07Z29vZy5tb2R1bGUuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLm1vZHVsZS5nZXRJbnRlcm5hbF8oYSl9O1xuZ29vZy5tb2R1bGUuZ2V0SW50ZXJuYWxfPWZ1bmN0aW9uKGEpe2lmKCFDT01QSUxFRCl7aWYoYSBpbiBnb29nLmxvYWRlZE1vZHVsZXNfKXJldHVybiBnb29nLmxvYWRlZE1vZHVsZXNfW2FdLmV4cG9ydHM7aWYoIWdvb2cuaW1wbGljaXROYW1lc3BhY2VzX1thXSlyZXR1cm4gYT1nb29nLmdldE9iamVjdEJ5TmFtZShhKSxudWxsIT1hP2E6bnVsbH1yZXR1cm4gbnVsbH07Z29vZy5Nb2R1bGVUeXBlPXtFUzY6XCJlczZcIixHT09HOlwiZ29vZ1wifTtnb29nLm1vZHVsZUxvYWRlclN0YXRlXz1udWxsO2dvb2cuaXNJbk1vZHVsZUxvYWRlcl89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5pc0luR29vZ01vZHVsZUxvYWRlcl8oKXx8Z29vZy5pc0luRXM2TW9kdWxlTG9hZGVyXygpfTtnb29nLmlzSW5Hb29nTW9kdWxlTG9hZGVyXz1mdW5jdGlvbigpe3JldHVybiEhZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8mJmdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLnR5cGU9PWdvb2cuTW9kdWxlVHlwZS5HT09HfTtcbmdvb2cuaXNJbkVzNk1vZHVsZUxvYWRlcl89ZnVuY3Rpb24oKXtpZihnb29nLm1vZHVsZUxvYWRlclN0YXRlXyYmZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8udHlwZT09Z29vZy5Nb2R1bGVUeXBlLkVTNilyZXR1cm4hMDt2YXIgYT1nb29nLmdsb2JhbC4kanNjb21wO3JldHVybiBhP1wiZnVuY3Rpb25cIiE9dHlwZW9mIGEuZ2V0Q3VycmVudE1vZHVsZVBhdGg/ITE6ISFhLmdldEN1cnJlbnRNb2R1bGVQYXRoKCk6ITF9O1xuZ29vZy5tb2R1bGUuZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZT1mdW5jdGlvbigpe2lmKCFDT01QSUxFRCYmIWdvb2cuaXNJbkdvb2dNb2R1bGVMb2FkZXJfKCkpdGhyb3cgRXJyb3IoXCJnb29nLm1vZHVsZS5kZWNsYXJlTGVnYWN5TmFtZXNwYWNlIG11c3QgYmUgY2FsbGVkIGZyb20gd2l0aGluIGEgZ29vZy5tb2R1bGVcIik7aWYoIUNPTVBJTEVEJiYhZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZSl0aHJvdyBFcnJvcihcImdvb2cubW9kdWxlIG11c3QgYmUgY2FsbGVkIHByaW9yIHRvIGdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UuXCIpO2dvb2cubW9kdWxlTG9hZGVyU3RhdGVfLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2U9ITB9O1xuZ29vZy5kZWNsYXJlTW9kdWxlSWQ9ZnVuY3Rpb24oYSl7aWYoIUNPTVBJTEVEKXtpZighZ29vZy5pc0luRXM2TW9kdWxlTG9hZGVyXygpKXRocm93IEVycm9yKFwiZ29vZy5kZWNsYXJlTW9kdWxlSWQgbWF5IG9ubHkgYmUgY2FsbGVkIGZyb20gd2l0aGluIGFuIEVTNiBtb2R1bGVcIik7aWYoZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8mJmdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWUpdGhyb3cgRXJyb3IoXCJnb29nLmRlY2xhcmVNb2R1bGVJZCBtYXkgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgbW9kdWxlLlwiKTtpZihhIGluIGdvb2cubG9hZGVkTW9kdWxlc18pdGhyb3cgRXJyb3IoJ01vZHVsZSB3aXRoIG5hbWVzcGFjZSBcIicrYSsnXCIgYWxyZWFkeSBleGlzdHMuJyk7fWlmKGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfKWdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWU9YTtlbHNle3ZhciBiPWdvb2cuZ2xvYmFsLiRqc2NvbXA7aWYoIWJ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGIuZ2V0Q3VycmVudE1vZHVsZVBhdGgpdGhyb3cgRXJyb3IoJ01vZHVsZSB3aXRoIG5hbWVzcGFjZSBcIicrXG5hKydcIiBoYXMgYmVlbiBsb2FkZWQgaW5jb3JyZWN0bHkuJyk7Yj1iLnJlcXVpcmUoYi5nZXRDdXJyZW50TW9kdWxlUGF0aCgpKTtnb29nLmxvYWRlZE1vZHVsZXNfW2FdPXtleHBvcnRzOmIsdHlwZTpnb29nLk1vZHVsZVR5cGUuRVM2LG1vZHVsZUlkOmF9fX07Z29vZy5zZXRUZXN0T25seT1mdW5jdGlvbihhKXtpZihnb29nLkRJU0FMTE9XX1RFU1RfT05MWV9DT0RFKXRocm93IGE9YXx8XCJcIixFcnJvcihcIkltcG9ydGluZyB0ZXN0LW9ubHkgY29kZSBpbnRvIG5vbi1kZWJ1ZyBlbnZpcm9ubWVudFwiKyhhP1wiOiBcIithOlwiLlwiKSk7fTtnb29nLmZvcndhcmREZWNsYXJlPWZ1bmN0aW9uKGEpe307XG5DT01QSUxFRHx8KGdvb2cuaXNQcm92aWRlZF89ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW4gZ29vZy5sb2FkZWRNb2R1bGVzX3x8IWdvb2cuaW1wbGljaXROYW1lc3BhY2VzX1thXSYmZ29vZy5pc0RlZkFuZE5vdE51bGwoZ29vZy5nZXRPYmplY3RCeU5hbWUoYSkpfSxnb29nLmltcGxpY2l0TmFtZXNwYWNlc189e1wiZ29vZy5tb2R1bGVcIjohMH0pO2dvb2cuZ2V0T2JqZWN0QnlOYW1lPWZ1bmN0aW9uKGEsYil7YT1hLnNwbGl0KFwiLlwiKTtiPWJ8fGdvb2cuZ2xvYmFsO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWlmKGI9YlthW2NdXSwhZ29vZy5pc0RlZkFuZE5vdE51bGwoYikpcmV0dXJuIG51bGw7cmV0dXJuIGJ9O2dvb2cuZ2xvYmFsaXplPWZ1bmN0aW9uKGEsYil7Yj1ifHxnb29nLmdsb2JhbDtmb3IodmFyIGMgaW4gYSliW2NdPWFbY119O1xuZ29vZy5hZGREZXBlbmRlbmN5PWZ1bmN0aW9uKGEsYixjLGQpeyFDT01QSUxFRCYmZ29vZy5ERVBFTkRFTkNJRVNfRU5BQkxFRCYmZ29vZy5kZWJ1Z0xvYWRlcl8uYWRkRGVwZW5kZW5jeShhLGIsYyxkKX07Z29vZy5FTkFCTEVfREVCVUdfTE9BREVSPSEwO2dvb2cubG9nVG9Db25zb2xlXz1mdW5jdGlvbihhKXtnb29nLmdsb2JhbC5jb25zb2xlJiZnb29nLmdsb2JhbC5jb25zb2xlLmVycm9yKGEpfTtcbmdvb2cucmVxdWlyZT1mdW5jdGlvbihhKXtpZighQ09NUElMRUQpe2dvb2cuRU5BQkxFX0RFQlVHX0xPQURFUiYmZ29vZy5kZWJ1Z0xvYWRlcl8ucmVxdWVzdGVkKGEpO2lmKGdvb2cuaXNQcm92aWRlZF8oYSkpe2lmKGdvb2cuaXNJbk1vZHVsZUxvYWRlcl8oKSlyZXR1cm4gZ29vZy5tb2R1bGUuZ2V0SW50ZXJuYWxfKGEpfWVsc2UgaWYoZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSKXt2YXIgYj1nb29nLm1vZHVsZUxvYWRlclN0YXRlXztnb29nLm1vZHVsZUxvYWRlclN0YXRlXz1udWxsO3RyeXtnb29nLmRlYnVnTG9hZGVyXy5sb2FkXyhhKX1maW5hbGx5e2dvb2cubW9kdWxlTG9hZGVyU3RhdGVfPWJ9fXJldHVybiBudWxsfX07Z29vZy5yZXF1aXJlVHlwZT1mdW5jdGlvbihhKXtyZXR1cm57fX07Z29vZy5iYXNlUGF0aD1cIlwiO2dvb2cubnVsbEZ1bmN0aW9uPWZ1bmN0aW9uKCl7fTtcbmdvb2cuYWJzdHJhY3RNZXRob2Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcInVuaW1wbGVtZW50ZWQgYWJzdHJhY3QgbWV0aG9kXCIpO307Z29vZy5hZGRTaW5nbGV0b25HZXR0ZXI9ZnVuY3Rpb24oYSl7YS5pbnN0YW5jZV89dm9pZCAwO2EuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24oKXtpZihhLmluc3RhbmNlXylyZXR1cm4gYS5pbnN0YW5jZV87Z29vZy5ERUJVRyYmKGdvb2cuaW5zdGFudGlhdGVkU2luZ2xldG9uc19bZ29vZy5pbnN0YW50aWF0ZWRTaW5nbGV0b25zXy5sZW5ndGhdPWEpO3JldHVybiBhLmluc3RhbmNlXz1uZXcgYX19O2dvb2cuaW5zdGFudGlhdGVkU2luZ2xldG9uc189W107Z29vZy5MT0FEX01PRFVMRV9VU0lOR19FVkFMPSEwO2dvb2cuU0VBTF9NT0RVTEVfRVhQT1JUUz1nb29nLkRFQlVHO2dvb2cubG9hZGVkTW9kdWxlc189e307Z29vZy5ERVBFTkRFTkNJRVNfRU5BQkxFRD0hQ09NUElMRUQmJmdvb2cuRU5BQkxFX0RFQlVHX0xPQURFUjtnb29nLlRSQU5TUElMRT1cImRldGVjdFwiO1xuZ29vZy5BU1NVTUVfRVNfTU9EVUxFU19UUkFOU1BJTEVEPSExO2dvb2cuVFJBTlNQSUxFX1RPX0xBTkdVQUdFPVwiXCI7Z29vZy5UUkFOU1BJTEVSPVwidHJhbnNwaWxlLmpzXCI7Z29vZy5oYXNCYWRMZXRTY29waW5nPW51bGw7Z29vZy51c2VTYWZhcmkxMFdvcmthcm91bmQ9ZnVuY3Rpb24oKXtpZihudWxsPT1nb29nLmhhc0JhZExldFNjb3Bpbmcpe3RyeXt2YXIgYT0hZXZhbCgnXCJ1c2Ugc3RyaWN0XCI7bGV0IHggPSAxOyBmdW5jdGlvbiBmKCkgeyByZXR1cm4gdHlwZW9mIHg7IH07ZigpID09IFwibnVtYmVyXCI7Jyl9Y2F0Y2goYil7YT0hMX1nb29nLmhhc0JhZExldFNjb3Bpbmc9YX1yZXR1cm4gZ29vZy5oYXNCYWRMZXRTY29waW5nfTtnb29nLndvcmthcm91bmRTYWZhcmkxMEV2YWxCdWc9ZnVuY3Rpb24oYSl7cmV0dXJuXCIoZnVuY3Rpb24oKXtcIithK1wiXFxuO30pKCk7XFxuXCJ9O1xuZ29vZy5sb2FkTW9kdWxlPWZ1bmN0aW9uKGEpe3ZhciBiPWdvb2cubW9kdWxlTG9hZGVyU3RhdGVfO3RyeXtnb29nLm1vZHVsZUxvYWRlclN0YXRlXz17bW9kdWxlTmFtZTpcIlwiLGRlY2xhcmVMZWdhY3lOYW1lc3BhY2U6ITEsdHlwZTpnb29nLk1vZHVsZVR5cGUuR09PR307aWYoZ29vZy5pc0Z1bmN0aW9uKGEpKXZhciBjPWEuY2FsbCh2b2lkIDAse30pO2Vsc2UgaWYoZ29vZy5pc1N0cmluZyhhKSlnb29nLnVzZVNhZmFyaTEwV29ya2Fyb3VuZCgpJiYoYT1nb29nLndvcmthcm91bmRTYWZhcmkxMEV2YWxCdWcoYSkpLGM9Z29vZy5sb2FkTW9kdWxlRnJvbVNvdXJjZV8uY2FsbCh2b2lkIDAsYSk7ZWxzZSB0aHJvdyBFcnJvcihcIkludmFsaWQgbW9kdWxlIGRlZmluaXRpb25cIik7dmFyIGQ9Z29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZTtpZihnb29nLmlzU3RyaW5nKGQpJiZkKWdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2U/Z29vZy5jb25zdHJ1Y3ROYW1lc3BhY2VfKGQsXG5jKTpnb29nLlNFQUxfTU9EVUxFX0VYUE9SVFMmJk9iamVjdC5zZWFsJiZcIm9iamVjdFwiPT10eXBlb2YgYyYmbnVsbCE9YyYmT2JqZWN0LnNlYWwoYyksZ29vZy5sb2FkZWRNb2R1bGVzX1tkXT17ZXhwb3J0czpjLHR5cGU6Z29vZy5Nb2R1bGVUeXBlLkdPT0csbW9kdWxlSWQ6Z29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZX07ZWxzZSB0aHJvdyBFcnJvcignSW52YWxpZCBtb2R1bGUgbmFtZSBcIicrZCsnXCInKTt9ZmluYWxseXtnb29nLm1vZHVsZUxvYWRlclN0YXRlXz1ifX07Z29vZy5sb2FkTW9kdWxlRnJvbVNvdXJjZV89ZnVuY3Rpb24oYSl7ZXZhbChhKTtyZXR1cm57fX07Z29vZy5ub3JtYWxpemVQYXRoXz1mdW5jdGlvbihhKXthPWEuc3BsaXQoXCIvXCIpO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7KVwiLlwiPT1hW2JdP2Euc3BsaWNlKGIsMSk6YiYmXCIuLlwiPT1hW2JdJiZhW2ItMV0mJlwiLi5cIiE9YVtiLTFdP2Euc3BsaWNlKC0tYiwyKTpiKys7cmV0dXJuIGEuam9pbihcIi9cIil9O1xuZ29vZy5sb2FkRmlsZVN5bmNfPWZ1bmN0aW9uKGEpe2lmKGdvb2cuZ2xvYmFsLkNMT1NVUkVfTE9BRF9GSUxFX1NZTkMpcmV0dXJuIGdvb2cuZ2xvYmFsLkNMT1NVUkVfTE9BRF9GSUxFX1NZTkMoYSk7dHJ5e3ZhciBiPW5ldyBnb29nLmdsb2JhbC5YTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJnZXRcIixhLCExKTtiLnNlbmQoKTtyZXR1cm4gMD09Yi5zdGF0dXN8fDIwMD09Yi5zdGF0dXM/Yi5yZXNwb25zZVRleHQ6bnVsbH1jYXRjaChjKXtyZXR1cm4gbnVsbH19O1xuZ29vZy50cmFuc3BpbGVfPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1nb29nLmdsb2JhbC4kanNjb21wO2R8fChnb29nLmdsb2JhbC4kanNjb21wPWQ9e30pO3ZhciBlPWQudHJhbnNwaWxlO2lmKCFlKXt2YXIgZj1nb29nLmJhc2VQYXRoK2dvb2cuVFJBTlNQSUxFUixnPWdvb2cubG9hZEZpbGVTeW5jXyhmKTtpZihnKXsoZnVuY3Rpb24oKXsoMCxldmFsKShnK1wiXFxuLy8jIHNvdXJjZVVSTD1cIitmKX0pLmNhbGwoZ29vZy5nbG9iYWwpO2lmKGdvb2cuZ2xvYmFsLiRnd3RFeHBvcnQmJmdvb2cuZ2xvYmFsLiRnd3RFeHBvcnQuJGpzY29tcCYmIWdvb2cuZ2xvYmFsLiRnd3RFeHBvcnQuJGpzY29tcC50cmFuc3BpbGUpdGhyb3cgRXJyb3IoJ1RoZSB0cmFuc3BpbGVyIGRpZCBub3QgcHJvcGVybHkgZXhwb3J0IHRoZSBcInRyYW5zcGlsZVwiIG1ldGhvZC4gJGd3dEV4cG9ydDogJytKU09OLnN0cmluZ2lmeShnb29nLmdsb2JhbC4kZ3d0RXhwb3J0KSk7Z29vZy5nbG9iYWwuJGpzY29tcC50cmFuc3BpbGU9XG5nb29nLmdsb2JhbC4kZ3d0RXhwb3J0LiRqc2NvbXAudHJhbnNwaWxlO2Q9Z29vZy5nbG9iYWwuJGpzY29tcDtlPWQudHJhbnNwaWxlfX1lfHwoZT1kLnRyYW5zcGlsZT1mdW5jdGlvbihhLGIpe2dvb2cubG9nVG9Db25zb2xlXyhiK1wiIHJlcXVpcmVzIHRyYW5zcGlsYXRpb24gYnV0IG5vIHRyYW5zcGlsZXIgd2FzIGZvdW5kLlwiKTtyZXR1cm4gYX0pO3JldHVybiBlKGEsYixjKX07XG5nb29nLnR5cGVPZj1mdW5jdGlvbihhKXt2YXIgYj10eXBlb2YgYTtpZihcIm9iamVjdFwiPT1iKWlmKGEpe2lmKGEgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm5cImFycmF5XCI7aWYoYSBpbnN0YW5jZW9mIE9iamVjdClyZXR1cm4gYjt2YXIgYz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSk7aWYoXCJbb2JqZWN0IFdpbmRvd11cIj09YylyZXR1cm5cIm9iamVjdFwiO2lmKFwiW29iamVjdCBBcnJheV1cIj09Y3x8XCJudW1iZXJcIj09dHlwZW9mIGEubGVuZ3RoJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5zcGxpY2UmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnByb3BlcnR5SXNFbnVtZXJhYmxlJiYhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcInNwbGljZVwiKSlyZXR1cm5cImFycmF5XCI7aWYoXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT1jfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5jYWxsJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIWEucHJvcGVydHlJc0VudW1lcmFibGUoXCJjYWxsXCIpKXJldHVyblwiZnVuY3Rpb25cIn1lbHNlIHJldHVyblwibnVsbFwiO1xuZWxzZSBpZihcImZ1bmN0aW9uXCI9PWImJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBhLmNhbGwpcmV0dXJuXCJvYmplY3RcIjtyZXR1cm4gYn07Z29vZy5pc051bGw9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hfTtnb29nLmlzRGVmQW5kTm90TnVsbD1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YX07Z29vZy5pc0FycmF5PWZ1bmN0aW9uKGEpe3JldHVyblwiYXJyYXlcIj09Z29vZy50eXBlT2YoYSl9O2dvb2cuaXNBcnJheUxpa2U9ZnVuY3Rpb24oYSl7dmFyIGI9Z29vZy50eXBlT2YoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9O2dvb2cuaXNEYXRlTGlrZT1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5pc09iamVjdChhKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5nZXRGdWxsWWVhcn07Z29vZy5pc0Z1bmN0aW9uPWZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09Z29vZy50eXBlT2YoYSl9O1xuZ29vZy5pc09iamVjdD1mdW5jdGlvbihhKXt2YXIgYj10eXBlb2YgYTtyZXR1cm5cIm9iamVjdFwiPT1iJiZudWxsIT1hfHxcImZ1bmN0aW9uXCI9PWJ9O2dvb2cuZ2V0VWlkPWZ1bmN0aW9uKGEpe3JldHVybiBhW2dvb2cuVUlEX1BST1BFUlRZX118fChhW2dvb2cuVUlEX1BST1BFUlRZX109Kytnb29nLnVpZENvdW50ZXJfKX07Z29vZy5oYXNVaWQ9ZnVuY3Rpb24oYSl7cmV0dXJuISFhW2dvb2cuVUlEX1BST1BFUlRZX119O2dvb2cucmVtb3ZlVWlkPWZ1bmN0aW9uKGEpe251bGwhPT1hJiZcInJlbW92ZUF0dHJpYnV0ZVwiaW4gYSYmYS5yZW1vdmVBdHRyaWJ1dGUoZ29vZy5VSURfUFJPUEVSVFlfKTt0cnl7ZGVsZXRlIGFbZ29vZy5VSURfUFJPUEVSVFlfXX1jYXRjaChiKXt9fTtnb29nLlVJRF9QUk9QRVJUWV89XCJjbG9zdXJlX3VpZF9cIisoMUU5Kk1hdGgucmFuZG9tKCk+Pj4wKTtnb29nLnVpZENvdW50ZXJfPTA7Z29vZy5nZXRIYXNoQ29kZT1nb29nLmdldFVpZDtcbmdvb2cucmVtb3ZlSGFzaENvZGU9Z29vZy5yZW1vdmVVaWQ7Z29vZy5jbG9uZU9iamVjdD1mdW5jdGlvbihhKXt2YXIgYj1nb29nLnR5cGVPZihhKTtpZihcIm9iamVjdFwiPT1ifHxcImFycmF5XCI9PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNsb25lKXJldHVybiBhLmNsb25lKCk7Yj1cImFycmF5XCI9PWI/W106e307Zm9yKHZhciBjIGluIGEpYltjXT1nb29nLmNsb25lT2JqZWN0KGFbY10pO3JldHVybiBifXJldHVybiBhfTtnb29nLmJpbmROYXRpdmVfPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5jYWxsLmFwcGx5KGEuYmluZCxhcmd1bWVudHMpfTtcbmdvb2cuYmluZEpzXz1mdW5jdGlvbihhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGMsZCk7cmV0dXJuIGEuYXBwbHkoYixjKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX07Z29vZy5iaW5kPWZ1bmN0aW9uKGEsYixjKXtGdW5jdGlvbi5wcm90b3R5cGUuYmluZCYmLTEhPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpP2dvb2cuYmluZD1nb29nLmJpbmROYXRpdmVfOmdvb2cuYmluZD1nb29nLmJpbmRKc187cmV0dXJuIGdvb2cuYmluZC5hcHBseShudWxsLGFyZ3VtZW50cyl9O1xuZ29vZy5wYXJ0aWFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe3ZhciBiPWMuc2xpY2UoKTtiLnB1c2guYXBwbHkoYixhcmd1bWVudHMpO3JldHVybiBhLmFwcGx5KHRoaXMsYil9fTtnb29nLm1peGluPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIGIpYVtjXT1iW2NdfTtnb29nLm5vdz1nb29nLlRSVVNURURfU0lURSYmRGF0ZS5ub3d8fGZ1bmN0aW9uKCl7cmV0dXJuK25ldyBEYXRlfTtcbmdvb2cuZ2xvYmFsRXZhbD1mdW5jdGlvbihhKXtpZihnb29nLmdsb2JhbC5leGVjU2NyaXB0KWdvb2cuZ2xvYmFsLmV4ZWNTY3JpcHQoYSxcIkphdmFTY3JpcHRcIik7ZWxzZSBpZihnb29nLmdsb2JhbC5ldmFsKXtpZihudWxsPT1nb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfKXt0cnl7Z29vZy5nbG9iYWwuZXZhbChcInZhciBfZXZhbFRlc3RfID0gMTtcIil9Y2F0Y2goZCl7fWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnb29nLmdsb2JhbC5fZXZhbFRlc3RfKXt0cnl7ZGVsZXRlIGdvb2cuZ2xvYmFsLl9ldmFsVGVzdF99Y2F0Y2goZCl7fWdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc189ITB9ZWxzZSBnb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfPSExfWlmKGdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc18pZ29vZy5nbG9iYWwuZXZhbChhKTtlbHNle3ZhciBiPWdvb2cuZ2xvYmFsLmRvY3VtZW50LGM9Yi5jcmVhdGVFbGVtZW50KFwiU0NSSVBUXCIpO2MudHlwZT1cInRleHQvamF2YXNjcmlwdFwiO2MuZGVmZXI9XG4hMTtjLmFwcGVuZENoaWxkKGIuY3JlYXRlVGV4dE5vZGUoYSkpO2IuaGVhZC5hcHBlbmRDaGlsZChjKTtiLmhlYWQucmVtb3ZlQ2hpbGQoYyl9fWVsc2UgdGhyb3cgRXJyb3IoXCJnb29nLmdsb2JhbEV2YWwgbm90IGF2YWlsYWJsZVwiKTt9O2dvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc189bnVsbDtcbmdvb2cuZ2V0Q3NzTmFtZT1mdW5jdGlvbihhLGIpe2lmKFwiLlwiPT1TdHJpbmcoYSkuY2hhckF0KDApKXRocm93IEVycm9yKCdjbGFzc05hbWUgcGFzc2VkIGluIGdvb2cuZ2V0Q3NzTmFtZSBtdXN0IG5vdCBzdGFydCB3aXRoIFwiLlwiLiBZb3UgcGFzc2VkOiAnK2EpO3ZhciBjPWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmNzc05hbWVNYXBwaW5nX1thXXx8YX0sZD1mdW5jdGlvbihhKXthPWEuc3BsaXQoXCItXCIpO2Zvcih2YXIgYj1bXSxkPTA7ZDxhLmxlbmd0aDtkKyspYi5wdXNoKGMoYVtkXSkpO3JldHVybiBiLmpvaW4oXCItXCIpfTtkPWdvb2cuY3NzTmFtZU1hcHBpbmdfP1wiQllfV0hPTEVcIj09Z29vZy5jc3NOYW1lTWFwcGluZ1N0eWxlXz9jOmQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O2E9Yj9hK1wiLVwiK2QoYik6ZChhKTtyZXR1cm4gZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBfRk4/Z29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBfRk4oYSk6YX07XG5nb29nLnNldENzc05hbWVNYXBwaW5nPWZ1bmN0aW9uKGEsYil7Z29vZy5jc3NOYW1lTWFwcGluZ189YTtnb29nLmNzc05hbWVNYXBwaW5nU3R5bGVfPWJ9OyFDT01QSUxFRCYmZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HJiYoZ29vZy5jc3NOYW1lTWFwcGluZ189Z29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HKTtnb29nLmdldE1zZz1mdW5jdGlvbihhLGIsYyl7YyYmYy5odG1sJiYoYT1hLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikpO2ImJihhPWEucmVwbGFjZSgvXFx7XFwkKFtefV0rKX0vZyxmdW5jdGlvbihhLGMpe3JldHVybiBudWxsIT1iJiZjIGluIGI/YltjXTphfSkpO3JldHVybiBhfTtnb29nLmdldE1zZ1dpdGhGYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBhfTtnb29nLmV4cG9ydFN5bWJvbD1mdW5jdGlvbihhLGIsYyl7Z29vZy5leHBvcnRQYXRoXyhhLGIsYyl9O1xuZ29vZy5leHBvcnRQcm9wZXJ0eT1mdW5jdGlvbihhLGIsYyl7YVtiXT1jfTtnb29nLmluaGVyaXRzPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLnN1cGVyQ2xhc3NfPWIucHJvdG90eXBlO2EucHJvdG90eXBlPW5ldyBjO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5iYXNlPWZ1bmN0aW9uKGEsYyxmKXtmb3IodmFyIGQ9QXJyYXkoYXJndW1lbnRzLmxlbmd0aC0yKSxlPTI7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKylkW2UtMl09YXJndW1lbnRzW2VdO3JldHVybiBiLnByb3RvdHlwZVtjXS5hcHBseShhLGQpfX07XG5nb29nLmJhc2U9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO2lmKGdvb2cuU1RSSUNUX01PREVfQ09NUEFUSUJMRXx8Z29vZy5ERUJVRyYmIWQpdGhyb3cgRXJyb3IoXCJhcmd1bWVudHMuY2FsbGVyIG5vdCBkZWZpbmVkLiAgZ29vZy5iYXNlKCkgY2Fubm90IGJlIHVzZWQgd2l0aCBzdHJpY3QgbW9kZSBjb2RlLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLUNcIik7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkLnN1cGVyQ2xhc3NfKXtmb3IodmFyIGU9QXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKSxmPTE7Zjxhcmd1bWVudHMubGVuZ3RoO2YrKyllW2YtMV09YXJndW1lbnRzW2ZdO3JldHVybiBkLnN1cGVyQ2xhc3NfLmNvbnN0cnVjdG9yLmFwcGx5KGEsZSl9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGImJlwic3ltYm9sXCIhPXR5cGVvZiBiKXRocm93IEVycm9yKFwibWV0aG9kIG5hbWVzIHByb3ZpZGVkIHRvIGdvb2cuYmFzZSBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgc3ltYm9sXCIpO1xuZT1BcnJheShhcmd1bWVudHMubGVuZ3RoLTIpO2ZvcihmPTI7Zjxhcmd1bWVudHMubGVuZ3RoO2YrKyllW2YtMl09YXJndW1lbnRzW2ZdO2Y9ITE7Zm9yKHZhciBnPWEuY29uc3RydWN0b3IucHJvdG90eXBlO2c7Zz1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZykpaWYoZ1tiXT09PWQpZj0hMDtlbHNlIGlmKGYpcmV0dXJuIGdbYl0uYXBwbHkoYSxlKTtpZihhW2JdPT09ZClyZXR1cm4gYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbYl0uYXBwbHkoYSxlKTt0aHJvdyBFcnJvcihcImdvb2cuYmFzZSBjYWxsZWQgZnJvbSBhIG1ldGhvZCBvZiBvbmUgbmFtZSB0byBhIG1ldGhvZCBvZiBhIGRpZmZlcmVudCBuYW1lXCIpO307Z29vZy5zY29wZT1mdW5jdGlvbihhKXtpZihnb29nLmlzSW5Nb2R1bGVMb2FkZXJfKCkpdGhyb3cgRXJyb3IoXCJnb29nLnNjb3BlIGlzIG5vdCBzdXBwb3J0ZWQgd2l0aGluIGEgbW9kdWxlLlwiKTthLmNhbGwoZ29vZy5nbG9iYWwpfTtcbkNPTVBJTEVEfHwoZ29vZy5nbG9iYWwuQ09NUElMRUQ9Q09NUElMRUQpO2dvb2cuZGVmaW5lQ2xhc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1iLmNvbnN0cnVjdG9yLGQ9Yi5zdGF0aWNzO2MmJmMhPU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3J8fChjPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJjYW5ub3QgaW5zdGFudGlhdGUgYW4gaW50ZXJmYWNlIChubyBjb25zdHJ1Y3RvciBkZWZpbmVkKS5cIik7fSk7Yz1nb29nLmRlZmluZUNsYXNzLmNyZWF0ZVNlYWxpbmdDb25zdHJ1Y3Rvcl8oYyxhKTthJiZnb29nLmluaGVyaXRzKGMsYSk7ZGVsZXRlIGIuY29uc3RydWN0b3I7ZGVsZXRlIGIuc3RhdGljcztnb29nLmRlZmluZUNsYXNzLmFwcGx5UHJvcGVydGllc18oYy5wcm90b3R5cGUsYik7bnVsbCE9ZCYmKGQgaW5zdGFuY2VvZiBGdW5jdGlvbj9kKGMpOmdvb2cuZGVmaW5lQ2xhc3MuYXBwbHlQcm9wZXJ0aWVzXyhjLGQpKTtyZXR1cm4gY307XG5nb29nLmRlZmluZUNsYXNzLlNFQUxfQ0xBU1NfSU5TVEFOQ0VTPWdvb2cuREVCVUc7Z29vZy5kZWZpbmVDbGFzcy5jcmVhdGVTZWFsaW5nQ29uc3RydWN0b3JfPWZ1bmN0aW9uKGEsYil7aWYoIWdvb2cuZGVmaW5lQ2xhc3MuU0VBTF9DTEFTU19JTlNUQU5DRVMpcmV0dXJuIGE7dmFyIGM9IWdvb2cuZGVmaW5lQ2xhc3MuaXNVbnNlYWxhYmxlXyhiKSxkPWZ1bmN0aW9uKCl7dmFyIGI9YS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7Yltnb29nLlVJRF9QUk9QRVJUWV9dPWJbZ29vZy5VSURfUFJPUEVSVFlfXTt0aGlzLmNvbnN0cnVjdG9yPT09ZCYmYyYmT2JqZWN0LnNlYWwgaW5zdGFuY2VvZiBGdW5jdGlvbiYmT2JqZWN0LnNlYWwoYik7cmV0dXJuIGJ9O3JldHVybiBkfTtnb29nLmRlZmluZUNsYXNzLmlzVW5zZWFsYWJsZV89ZnVuY3Rpb24oYSl7cmV0dXJuIGEmJmEucHJvdG90eXBlJiZhLnByb3RvdHlwZVtnb29nLlVOU0VBTEFCTEVfQ09OU1RSVUNUT1JfUFJPUEVSVFlfXX07XG5nb29nLmRlZmluZUNsYXNzLk9CSkVDVF9QUk9UT1RZUEVfRklFTERTXz1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtnb29nLmRlZmluZUNsYXNzLmFwcGx5UHJvcGVydGllc189ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYixjKSYmKGFbY109YltjXSk7Zm9yKHZhciBkPTA7ZDxnb29nLmRlZmluZUNsYXNzLk9CSkVDVF9QUk9UT1RZUEVfRklFTERTXy5sZW5ndGg7ZCsrKWM9Z29vZy5kZWZpbmVDbGFzcy5PQkpFQ1RfUFJPVE9UWVBFX0ZJRUxEU19bZF0sT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsYykmJihhW2NdPWJbY10pfTtcbmdvb2cudGFnVW5zZWFsYWJsZUNsYXNzPWZ1bmN0aW9uKGEpeyFDT01QSUxFRCYmZ29vZy5kZWZpbmVDbGFzcy5TRUFMX0NMQVNTX0lOU1RBTkNFUyYmKGEucHJvdG90eXBlW2dvb2cuVU5TRUFMQUJMRV9DT05TVFJVQ1RPUl9QUk9QRVJUWV9dPSEwKX07Z29vZy5VTlNFQUxBQkxFX0NPTlNUUlVDVE9SX1BST1BFUlRZXz1cImdvb2dfZGVmaW5lQ2xhc3NfbGVnYWN5X3Vuc2VhbGFibGVcIjtcbiFDT01QSUxFRCYmZ29vZy5ERVBFTkRFTkNJRVNfRU5BQkxFRCYmKGdvb2cuaW5IdG1sRG9jdW1lbnRfPWZ1bmN0aW9uKCl7dmFyIGE9Z29vZy5nbG9iYWwuZG9jdW1lbnQ7cmV0dXJuIG51bGwhPWEmJlwid3JpdGVcImluIGF9LGdvb2cuaXNEb2N1bWVudExvYWRpbmdfPWZ1bmN0aW9uKCl7dmFyIGE9Z29vZy5nbG9iYWwuZG9jdW1lbnQ7cmV0dXJuIGEuYXR0YWNoRXZlbnQ/XCJjb21wbGV0ZVwiIT1hLnJlYWR5U3RhdGU6XCJsb2FkaW5nXCI9PWEucmVhZHlTdGF0ZX0sZ29vZy5maW5kQmFzZVBhdGhfPWZ1bmN0aW9uKCl7aWYoZ29vZy5pc0RlZihnb29nLmdsb2JhbC5DTE9TVVJFX0JBU0VfUEFUSCkmJmdvb2cuaXNTdHJpbmcoZ29vZy5nbG9iYWwuQ0xPU1VSRV9CQVNFX1BBVEgpKWdvb2cuYmFzZVBhdGg9Z29vZy5nbG9iYWwuQ0xPU1VSRV9CQVNFX1BBVEg7ZWxzZSBpZihnb29nLmluSHRtbERvY3VtZW50XygpKXt2YXIgYT1nb29nLmdsb2JhbC5kb2N1bWVudCxiPWEuY3VycmVudFNjcmlwdDtcbmE9Yj9bYl06YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIlNDUklQVFwiKTtmb3IoYj1hLmxlbmd0aC0xOzA8PWI7LS1iKXt2YXIgYz1hW2JdLnNyYyxkPWMubGFzdEluZGV4T2YoXCI/XCIpO2Q9LTE9PWQ/Yy5sZW5ndGg6ZDtpZihcImJhc2UuanNcIj09Yy5zdWJzdHIoZC03LDcpKXtnb29nLmJhc2VQYXRoPWMuc3Vic3RyKDAsZC03KTticmVha319fX0sZ29vZy5maW5kQmFzZVBhdGhfKCksZ29vZy5UcmFuc3BpbGVyPWZ1bmN0aW9uKCl7dGhpcy5yZXF1aXJlc1RyYW5zcGlsYXRpb25fPW51bGw7dGhpcy50cmFuc3BpbGF0aW9uVGFyZ2V0Xz1nb29nLlRSQU5TUElMRV9UT19MQU5HVUFHRX0sZ29vZy5UcmFuc3BpbGVyLnByb3RvdHlwZS5jcmVhdGVSZXF1aXJlc1RyYW5zcGlsYXRpb25fPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIpe2U/ZFthXT0hMDpiKCk/KGM9YSxkW2FdPSExKTplPWRbYV09ITB9ZnVuY3Rpb24gYihhKXt0cnl7cmV0dXJuISFldmFsKGEpfWNhdGNoKGgpe3JldHVybiExfX1cbnZhciBjPVwiZXMzXCIsZD17ZXMzOiExfSxlPSExLGY9Z29vZy5nbG9iYWwubmF2aWdhdG9yJiZnb29nLmdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50P2dvb2cuZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQ6XCJcIjthKFwiZXM1XCIsZnVuY3Rpb24oKXtyZXR1cm4gYihcIlsxLF0ubGVuZ3RoPT0xXCIpfSk7YShcImVzNlwiLGZ1bmN0aW9uKCl7cmV0dXJuIGYubWF0Y2goL0VkZ2VcXC8oXFxkKykoXFwuXFxkKSovaSk/ITE6YignKCgpPT57XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgWHtjb25zdHJ1Y3Rvcigpe2lmKG5ldy50YXJnZXQhPVN0cmluZyl0aHJvdyAxO3RoaXMueD00Mn19bGV0IHE9UmVmbGVjdC5jb25zdHJ1Y3QoWCxbXSxTdHJpbmcpO2lmKHEueCE9NDJ8fCEocSBpbnN0YW5jZW9mIFN0cmluZykpdGhyb3cgMTtmb3IoY29uc3QgYSBvZlsyLDNdKXtpZihhPT0yKWNvbnRpbnVlO2Z1bmN0aW9uIGYoej17YX0pe2xldCBhPTA7cmV0dXJuIHouYX17ZnVuY3Rpb24gZigpe3JldHVybiAwO319cmV0dXJuIGYoKT09M319KSgpJyl9KTtcbmEoXCJlczdcIixmdW5jdGlvbigpe3JldHVybiBiKFwiMiAqKiAyID09IDRcIil9KTthKFwiZXM4XCIsZnVuY3Rpb24oKXtyZXR1cm4gYihcImFzeW5jICgpID0+IDEsIHRydWVcIil9KTthKFwiZXM5XCIsZnVuY3Rpb24oKXtyZXR1cm4gYihcIih7Li4ucmVzdH0gPSB7fSksIHRydWVcIil9KTthKFwiZXNfbmV4dFwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KTtyZXR1cm57dGFyZ2V0OmMsbWFwOmR9fSxnb29nLlRyYW5zcGlsZXIucHJvdG90eXBlLm5lZWRzVHJhbnNwaWxlPWZ1bmN0aW9uKGEsYil7aWYoXCJhbHdheXNcIj09Z29vZy5UUkFOU1BJTEUpcmV0dXJuITA7aWYoXCJuZXZlclwiPT1nb29nLlRSQU5TUElMRSlyZXR1cm4hMTtpZighdGhpcy5yZXF1aXJlc1RyYW5zcGlsYXRpb25fKXt2YXIgYz10aGlzLmNyZWF0ZVJlcXVpcmVzVHJhbnNwaWxhdGlvbl8oKTt0aGlzLnJlcXVpcmVzVHJhbnNwaWxhdGlvbl89Yy5tYXA7dGhpcy50cmFuc3BpbGF0aW9uVGFyZ2V0Xz10aGlzLnRyYW5zcGlsYXRpb25UYXJnZXRffHxcbmMudGFyZ2V0fWlmKGEgaW4gdGhpcy5yZXF1aXJlc1RyYW5zcGlsYXRpb25fKXJldHVybiB0aGlzLnJlcXVpcmVzVHJhbnNwaWxhdGlvbl9bYV0/ITA6IWdvb2cuaW5IdG1sRG9jdW1lbnRfKCl8fFwiZXM2XCIhPWJ8fFwibm9Nb2R1bGVcImluIGdvb2cuZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/ITE6ITA7dGhyb3cgRXJyb3IoXCJVbmtub3duIGxhbmd1YWdlIG1vZGU6IFwiK2EpO30sZ29vZy5UcmFuc3BpbGVyLnByb3RvdHlwZS50cmFuc3BpbGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ29vZy50cmFuc3BpbGVfKGEsYix0aGlzLnRyYW5zcGlsYXRpb25UYXJnZXRfKX0sZ29vZy50cmFuc3BpbGVyXz1uZXcgZ29vZy5UcmFuc3BpbGVyLGdvb2cucHJvdGVjdFNjcmlwdFRhZ189ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvPFxcLyhTQ1JJUFQpL2lnLFwiXFxcXHgzYy8kMVwiKX0sZ29vZy5EZWJ1Z0xvYWRlcl89ZnVuY3Rpb24oKXt0aGlzLmRlcGVuZGVuY2llc189e307XG50aGlzLmlkVG9QYXRoXz17fTt0aGlzLndyaXR0ZW5fPXt9O3RoaXMubG9hZGluZ0RlcHNfPVtdO3RoaXMuZGVwc1RvTG9hZF89W107dGhpcy5wYXVzZWRfPSExO3RoaXMuZmFjdG9yeV89bmV3IGdvb2cuRGVwZW5kZW5jeUZhY3RvcnkoZ29vZy50cmFuc3BpbGVyXyk7dGhpcy5kZWZlcnJlZENhbGxiYWNrc189e307dGhpcy5kZWZlcnJlZFF1ZXVlXz1bXX0sZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLmJvb3RzdHJhcD1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXtkJiYoZ29vZy5nbG9iYWwuc2V0VGltZW91dChkLDApLGQ9bnVsbCl9dmFyIGQ9YjtpZihhLmxlbmd0aCl7Yj1bXTtmb3IodmFyIGU9MDtlPGEubGVuZ3RoO2UrKyl7dmFyIGY9dGhpcy5nZXRQYXRoRnJvbURlcHNfKGFbZV0pO2lmKCFmKXRocm93IEVycm9yKFwiVW5yZWdvbml6ZWQgbmFtZXNwYWNlOiBcIithW2VdKTtiLnB1c2godGhpcy5kZXBlbmRlbmNpZXNfW2ZdKX1mPWdvb2cucmVxdWlyZTt2YXIgZz0wO2ZvcihlPVxuMDtlPGEubGVuZ3RoO2UrKylmKGFbZV0pLGJbZV0ub25Mb2FkKGZ1bmN0aW9uKCl7KytnPT1hLmxlbmd0aCYmYygpfSl9ZWxzZSBjKCl9LGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5sb2FkQ2xvc3VyZURlcHM9ZnVuY3Rpb24oKXt0aGlzLmRlcHNUb0xvYWRfLnB1c2godGhpcy5mYWN0b3J5Xy5jcmVhdGVEZXBlbmRlbmN5KGdvb2cubm9ybWFsaXplUGF0aF8oZ29vZy5iYXNlUGF0aCtcImRlcHMuanNcIiksXCJkZXBzLmpzXCIsW10sW10se30sITEpKTt0aGlzLmxvYWREZXBzXygpfSxnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUucmVxdWVzdGVkPWZ1bmN0aW9uKGEsYil7KGE9dGhpcy5nZXRQYXRoRnJvbURlcHNfKGEpKSYmKGJ8fHRoaXMuYXJlRGVwc0xvYWRlZF8odGhpcy5kZXBlbmRlbmNpZXNfW2FdLnJlcXVpcmVzKSkmJihiPXRoaXMuZGVmZXJyZWRDYWxsYmFja3NfW2FdKSYmKGRlbGV0ZSB0aGlzLmRlZmVycmVkQ2FsbGJhY2tzX1thXSxiKCkpfSxnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUuc2V0RGVwZW5kZW5jeUZhY3Rvcnk9XG5mdW5jdGlvbihhKXt0aGlzLmZhY3RvcnlfPWF9LGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5sb2FkXz1mdW5jdGlvbihhKXtpZih0aGlzLmdldFBhdGhGcm9tRGVwc18oYSkpe3ZhciBiPXRoaXMsYz1bXSxkPWZ1bmN0aW9uKGEpe3ZhciBlPWIuZ2V0UGF0aEZyb21EZXBzXyhhKTtpZighZSl0aHJvdyBFcnJvcihcIkJhZCBkZXBlbmRlbmN5IHBhdGggb3Igc3ltYm9sOiBcIithKTtpZighYi53cml0dGVuX1tlXSl7Yi53cml0dGVuX1tlXT0hMDthPWIuZGVwZW5kZW5jaWVzX1tlXTtmb3IoZT0wO2U8YS5yZXF1aXJlcy5sZW5ndGg7ZSsrKWdvb2cuaXNQcm92aWRlZF8oYS5yZXF1aXJlc1tlXSl8fGQoYS5yZXF1aXJlc1tlXSk7Yy5wdXNoKGEpfX07ZChhKTthPSEhdGhpcy5kZXBzVG9Mb2FkXy5sZW5ndGg7dGhpcy5kZXBzVG9Mb2FkXz10aGlzLmRlcHNUb0xvYWRfLmNvbmNhdChjKTt0aGlzLnBhdXNlZF98fGF8fHRoaXMubG9hZERlcHNfKCl9ZWxzZSB0aHJvdyBhPVwiZ29vZy5yZXF1aXJlIGNvdWxkIG5vdCBmaW5kOiBcIitcbmEsZ29vZy5sb2dUb0NvbnNvbGVfKGEpLEVycm9yKGEpO30sZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLmxvYWREZXBzXz1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLGI9dGhpcy5wYXVzZWRfO3RoaXMuZGVwc1RvTG9hZF8ubGVuZ3RoJiYhYjspKGZ1bmN0aW9uKCl7dmFyIGM9ITEsZD1hLmRlcHNUb0xvYWRfLnNoaWZ0KCksZT0hMTthLmxvYWRpbmdfKGQpO3ZhciBmPXtwYXVzZTpmdW5jdGlvbigpe2lmKGMpdGhyb3cgRXJyb3IoXCJDYW5ub3QgY2FsbCBwYXVzZSBhZnRlciB0aGUgY2FsbCB0byBsb2FkLlwiKTtiPSEwfSxyZXN1bWU6ZnVuY3Rpb24oKXtjP2EucmVzdW1lXygpOmI9ITF9LGxvYWRlZDpmdW5jdGlvbigpe2lmKGUpdGhyb3cgRXJyb3IoXCJEb3VibGUgY2FsbCB0byBsb2FkZWQuXCIpO2U9ITA7YS5sb2FkZWRfKGQpfSxwZW5kaW5nOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPVtdLGM9MDtjPGEubG9hZGluZ0RlcHNfLmxlbmd0aDtjKyspYi5wdXNoKGEubG9hZGluZ0RlcHNfW2NdKTtcbnJldHVybiBifSxzZXRNb2R1bGVTdGF0ZTpmdW5jdGlvbihhKXtnb29nLm1vZHVsZUxvYWRlclN0YXRlXz17dHlwZTphLG1vZHVsZU5hbWU6XCJcIixkZWNsYXJlTGVnYWN5TmFtZXNwYWNlOiExfX0scmVnaXN0ZXJFczZNb2R1bGVFeHBvcnRzOmZ1bmN0aW9uKGEsYixjKXtjJiYoZ29vZy5sb2FkZWRNb2R1bGVzX1tjXT17ZXhwb3J0czpiLHR5cGU6Z29vZy5Nb2R1bGVUeXBlLkVTNixtb2R1bGVJZDpjfHxcIlwifSl9LHJlZ2lzdGVyR29vZ01vZHVsZUV4cG9ydHM6ZnVuY3Rpb24oYSxiKXtnb29nLmxvYWRlZE1vZHVsZXNfW2FdPXtleHBvcnRzOmIsdHlwZTpnb29nLk1vZHVsZVR5cGUuR09PRyxtb2R1bGVJZDphfX0sY2xlYXJNb2R1bGVTdGF0ZTpmdW5jdGlvbigpe2dvb2cubW9kdWxlTG9hZGVyU3RhdGVfPW51bGx9LGRlZmVyOmZ1bmN0aW9uKGIpe2lmKGMpdGhyb3cgRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgd2l0aCBkZWZlciBhZnRlciB0aGUgY2FsbCB0byBsb2FkLlwiKTthLmRlZmVyXyhkLFxuYil9LGFyZURlcHNMb2FkZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcmVEZXBzTG9hZGVkXyhkLnJlcXVpcmVzKX19O3RyeXtkLmxvYWQoZil9ZmluYWxseXtjPSEwfX0pKCk7YiYmdGhpcy5wYXVzZV8oKX0sZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLnBhdXNlXz1mdW5jdGlvbigpe3RoaXMucGF1c2VkXz0hMH0sZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLnJlc3VtZV89ZnVuY3Rpb24oKXt0aGlzLnBhdXNlZF8mJih0aGlzLnBhdXNlZF89ITEsdGhpcy5sb2FkRGVwc18oKSl9LGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5sb2FkaW5nXz1mdW5jdGlvbihhKXt0aGlzLmxvYWRpbmdEZXBzXy5wdXNoKGEpfSxnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUubG9hZGVkXz1mdW5jdGlvbihhKXtmb3IodmFyIGI9MDtiPHRoaXMubG9hZGluZ0RlcHNfLmxlbmd0aDtiKyspaWYodGhpcy5sb2FkaW5nRGVwc19bYl09PWEpe3RoaXMubG9hZGluZ0RlcHNfLnNwbGljZShiLDEpO1xuYnJlYWt9Zm9yKGI9MDtiPHRoaXMuZGVmZXJyZWRRdWV1ZV8ubGVuZ3RoO2IrKylpZih0aGlzLmRlZmVycmVkUXVldWVfW2JdPT1hLnBhdGgpe3RoaXMuZGVmZXJyZWRRdWV1ZV8uc3BsaWNlKGIsMSk7YnJlYWt9aWYodGhpcy5sb2FkaW5nRGVwc18ubGVuZ3RoPT10aGlzLmRlZmVycmVkUXVldWVfLmxlbmd0aCYmIXRoaXMuZGVwc1RvTG9hZF8ubGVuZ3RoKWZvcig7dGhpcy5kZWZlcnJlZFF1ZXVlXy5sZW5ndGg7KXRoaXMucmVxdWVzdGVkKHRoaXMuZGVmZXJyZWRRdWV1ZV8uc2hpZnQoKSwhMCk7YS5sb2FkZWQoKX0sZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLmFyZURlcHNMb2FkZWRfPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz10aGlzLmdldFBhdGhGcm9tRGVwc18oYVtiXSk7aWYoIWN8fCEoYyBpbiB0aGlzLmRlZmVycmVkQ2FsbGJhY2tzX3x8Z29vZy5pc1Byb3ZpZGVkXyhhW2JdKSkpcmV0dXJuITF9cmV0dXJuITB9LGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5nZXRQYXRoRnJvbURlcHNfPVxuZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW4gdGhpcy5pZFRvUGF0aF8/dGhpcy5pZFRvUGF0aF9bYV06YSBpbiB0aGlzLmRlcGVuZGVuY2llc18/YTpudWxsfSxnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUuZGVmZXJfPWZ1bmN0aW9uKGEsYil7dGhpcy5kZWZlcnJlZENhbGxiYWNrc19bYS5wYXRoXT1iO3RoaXMuZGVmZXJyZWRRdWV1ZV8ucHVzaChhLnBhdGgpfSxnb29nLkxvYWRDb250cm9sbGVyPWZ1bmN0aW9uKCl7fSxnb29nLkxvYWRDb250cm9sbGVyLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe30sZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7fSxnb29nLkxvYWRDb250cm9sbGVyLnByb3RvdHlwZS5sb2FkZWQ9ZnVuY3Rpb24oKXt9LGdvb2cuTG9hZENvbnRyb2xsZXIucHJvdG90eXBlLnBlbmRpbmc9ZnVuY3Rpb24oKXt9LGdvb2cuTG9hZENvbnRyb2xsZXIucHJvdG90eXBlLnJlZ2lzdGVyRXM2TW9kdWxlRXhwb3J0cz1mdW5jdGlvbihhLFxuYixjKXt9LGdvb2cuTG9hZENvbnRyb2xsZXIucHJvdG90eXBlLnNldE1vZHVsZVN0YXRlPWZ1bmN0aW9uKGEpe30sZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUuY2xlYXJNb2R1bGVTdGF0ZT1mdW5jdGlvbigpe30sZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUuZGVmZXI9ZnVuY3Rpb24oYSl7fSxnb29nLkxvYWRDb250cm9sbGVyLnByb3RvdHlwZS5hcmVEZXBzTG9hZGVkPWZ1bmN0aW9uKCl7fSxnb29nLkRlcGVuZGVuY3k9ZnVuY3Rpb24oYSxiLGMsZCxlKXt0aGlzLnBhdGg9YTt0aGlzLnJlbGF0aXZlUGF0aD1iO3RoaXMucHJvdmlkZXM9Yzt0aGlzLnJlcXVpcmVzPWQ7dGhpcy5sb2FkRmxhZ3M9ZTt0aGlzLmxvYWRlZF89ITE7dGhpcy5sb2FkQ2FsbGJhY2tzXz1bXX0sZ29vZy5EZXBlbmRlbmN5LnByb3RvdHlwZS5nZXRQYXRoTmFtZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMucGF0aCxiPWEuaW5kZXhPZihcIjovL1wiKTswPD1iJiYoYT1hLnN1YnN0cmluZyhiKzMpLGI9XG5hLmluZGV4T2YoXCIvXCIpLDA8PWImJihhPWEuc3Vic3RyaW5nKGIrMSkpKTtyZXR1cm4gYX0sZ29vZy5EZXBlbmRlbmN5LnByb3RvdHlwZS5vbkxvYWQ9ZnVuY3Rpb24oYSl7dGhpcy5sb2FkZWRfP2EoKTp0aGlzLmxvYWRDYWxsYmFja3NfLnB1c2goYSl9LGdvb2cuRGVwZW5kZW5jeS5wcm90b3R5cGUubG9hZGVkPWZ1bmN0aW9uKCl7dGhpcy5sb2FkZWRfPSEwO3ZhciBhPXRoaXMubG9hZENhbGxiYWNrc187dGhpcy5sb2FkQ2FsbGJhY2tzXz1bXTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKylhW2JdKCl9LGdvb2cuRGVwZW5kZW5jeS5kZWZlcl89ITEsZ29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrTWFwXz17fSxnb29nLkRlcGVuZGVuY3kucmVnaXN0ZXJDYWxsYmFja189ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzMik7Z29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrTWFwX1tiXT1hO3JldHVybiBifSxnb29nLkRlcGVuZGVuY3kudW5yZWdpc3RlckNhbGxiYWNrXz1cbmZ1bmN0aW9uKGEpe2RlbGV0ZSBnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tNYXBfW2FdfSxnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tfPWZ1bmN0aW9uKGEsYil7aWYoYSBpbiBnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tNYXBfKXtmb3IodmFyIGM9Z29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrTWFwX1thXSxkPVtdLGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKWQucHVzaChhcmd1bWVudHNbZV0pO2MuYXBwbHkodm9pZCAwLGQpfWVsc2UgdGhyb3cgRXJyb3IoXCJDYWxsYmFjayBrZXkgXCIrYStcIiBkb2VzIG5vdCBleGlzdCAod2FzIGJhc2UuanMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlPykuXCIpO30sZ29vZy5EZXBlbmRlbmN5LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe2lmKGdvb2cuZ2xvYmFsLkNMT1NVUkVfSU1QT1JUX1NDUklQVClnb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQodGhpcy5wYXRoKT9hLmxvYWRlZCgpOmEucGF1c2UoKTtlbHNlIGlmKGdvb2cuaW5IdG1sRG9jdW1lbnRfKCkpe3ZhciBiPVxuZ29vZy5nbG9iYWwuZG9jdW1lbnQ7aWYoXCJjb21wbGV0ZVwiPT1iLnJlYWR5U3RhdGUmJiFnb29nLkVOQUJMRV9DSFJPTUVfQVBQX1NBRkVfU0NSSVBUX0xPQURJTkcpe2lmKC9cXGJkZXBzLmpzJC8udGVzdCh0aGlzLnBhdGgpKXthLmxvYWRlZCgpO3JldHVybn10aHJvdyBFcnJvcignQ2Fubm90IHdyaXRlIFwiJyt0aGlzLnBhdGgrJ1wiIGFmdGVyIGRvY3VtZW50IGxvYWQnKTt9aWYoIWdvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORyYmZ29vZy5pc0RvY3VtZW50TG9hZGluZ18oKSl7dmFyIGM9Z29vZy5EZXBlbmRlbmN5LnJlZ2lzdGVyQ2FsbGJhY2tfKGZ1bmN0aW9uKGIpe2dvb2cuRGVidWdMb2FkZXJfLklTX09MRF9JRV8mJlwiY29tcGxldGVcIiE9Yi5yZWFkeVN0YXRlfHwoZ29vZy5EZXBlbmRlbmN5LnVucmVnaXN0ZXJDYWxsYmFja18oYyksYS5sb2FkZWQoKSl9KSxkPSFnb29nLkRlYnVnTG9hZGVyXy5JU19PTERfSUVfJiZnb29nLmdldFNjcmlwdE5vbmNlKCk/XG4nIG5vbmNlPVwiJytnb29nLmdldFNjcmlwdE5vbmNlKCkrJ1wiJzpcIlwiO2Q9JzxzY3JpcHQgc3JjPVwiJyt0aGlzLnBhdGgrJ1wiICcrKGdvb2cuRGVidWdMb2FkZXJfLklTX09MRF9JRV8/XCJvbnJlYWR5c3RhdGVjaGFuZ2VcIjpcIm9ubG9hZFwiKStcIj1cXFwiZ29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrXygnXCIrYysnXFwnLCB0aGlzKVwiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiAnKyhnb29nLkRlcGVuZGVuY3kuZGVmZXJfP1wiZGVmZXJcIjpcIlwiKStkK1wiPlxceDNjL3NjcmlwdD5cIjtiLndyaXRlKGdvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfP2dvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfLmNyZWF0ZUhUTUwoZCk6ZCl9ZWxzZXt2YXIgZT1iLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZS5kZWZlcj1nb29nLkRlcGVuZGVuY3kuZGVmZXJfO2UuYXN5bmM9ITE7ZS50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI7KGQ9Z29vZy5nZXRTY3JpcHROb25jZSgpKSYmZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGQpO2dvb2cuRGVidWdMb2FkZXJfLklTX09MRF9JRV8/XG4oYS5wYXVzZSgpLGUub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoXCJsb2FkZWRcIj09ZS5yZWFkeVN0YXRlfHxcImNvbXBsZXRlXCI9PWUucmVhZHlTdGF0ZSlhLmxvYWRlZCgpLGEucmVzdW1lKCl9KTplLm9ubG9hZD1mdW5jdGlvbigpe2Uub25sb2FkPW51bGw7YS5sb2FkZWQoKX07ZS5zcmM9Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8/Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlU2NyaXB0VVJMKHRoaXMucGF0aCk6dGhpcy5wYXRoO2IuaGVhZC5hcHBlbmRDaGlsZChlKX19ZWxzZSBnb29nLmxvZ1RvQ29uc29sZV8oXCJDYW5ub3QgdXNlIGRlZmF1bHQgZGVidWcgbG9hZGVyIG91dHNpZGUgb2YgSFRNTCBkb2N1bWVudHMuXCIpLFwiZGVwcy5qc1wiPT10aGlzLnJlbGF0aXZlUGF0aD8oZ29vZy5sb2dUb0NvbnNvbGVfKFwiQ29uc2lkZXIgc2V0dGluZyBDTE9TVVJFX0lNUE9SVF9TQ1JJUFQgYmVmb3JlIGxvYWRpbmcgYmFzZS5qcywgb3Igc2V0dGluZyBDTE9TVVJFX05PX0RFUFMgdG8gdHJ1ZS5cIiksXG5hLmxvYWRlZCgpKTphLnBhdXNlKCl9LGdvb2cuRXM2TW9kdWxlRGVwZW5kZW5jeT1mdW5jdGlvbihhLGIsYyxkLGUpe2dvb2cuRGVwZW5kZW5jeS5jYWxsKHRoaXMsYSxiLGMsZCxlKX0sZ29vZy5pbmhlcml0cyhnb29nLkVzNk1vZHVsZURlcGVuZGVuY3ksZ29vZy5EZXBlbmRlbmN5KSxnb29nLkVzNk1vZHVsZURlcGVuZGVuY3kucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe2E9Yj8nPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgY3Jvc3NvcmlnaW4+JytiK1wiXFx4M2Mvc2NyaXB0PlwiOic8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBjcm9zc29yaWdpbiBzcmM9XCInK2ErJ1wiPlxceDNjL3NjcmlwdD4nO2Qud3JpdGUoZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8/Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlSFRNTChhKTphKX1mdW5jdGlvbiBjKGEsYil7dmFyIGM9ZC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2MuZGVmZXI9ITA7Yy5hc3luYz0hMTtjLnR5cGU9XG5cIm1vZHVsZVwiO2Muc2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIiwhMCk7dmFyIGU9Z29vZy5nZXRTY3JpcHROb25jZSgpO2UmJmMuc2V0QXR0cmlidXRlKFwibm9uY2VcIixlKTtiP2MudGV4dENvbnRlbnQ9Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8/Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlU2NyaXB0KGIpOmI6Yy5zcmM9Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8/Z29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlU2NyaXB0VVJMKGEpOmE7ZC5oZWFkLmFwcGVuZENoaWxkKGMpfWlmKGdvb2cuZ2xvYmFsLkNMT1NVUkVfSU1QT1JUX1NDUklQVClnb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQodGhpcy5wYXRoKT9hLmxvYWRlZCgpOmEucGF1c2UoKTtlbHNlIGlmKGdvb2cuaW5IdG1sRG9jdW1lbnRfKCkpe3ZhciBkPWdvb2cuZ2xvYmFsLmRvY3VtZW50LGU9dGhpcztpZihnb29nLmlzRG9jdW1lbnRMb2FkaW5nXygpKXt2YXIgZj1iO2dvb2cuRGVwZW5kZW5jeS5kZWZlcl89XG4hMH1lbHNlIGY9Yzt2YXIgZz1nb29nLkRlcGVuZGVuY3kucmVnaXN0ZXJDYWxsYmFja18oZnVuY3Rpb24oKXtnb29nLkRlcGVuZGVuY3kudW5yZWdpc3RlckNhbGxiYWNrXyhnKTthLnNldE1vZHVsZVN0YXRlKGdvb2cuTW9kdWxlVHlwZS5FUzYpfSk7Zih2b2lkIDAsJ2dvb2cuRGVwZW5kZW5jeS5jYWxsYmFja18oXCInK2crJ1wiKScpO2YodGhpcy5wYXRoLHZvaWQgMCk7dmFyIGg9Z29vZy5EZXBlbmRlbmN5LnJlZ2lzdGVyQ2FsbGJhY2tfKGZ1bmN0aW9uKGIpe2dvb2cuRGVwZW5kZW5jeS51bnJlZ2lzdGVyQ2FsbGJhY2tfKGgpO2EucmVnaXN0ZXJFczZNb2R1bGVFeHBvcnRzKGUucGF0aCxiLGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWUpfSk7Zih2b2lkIDAsJ2ltcG9ydCAqIGFzIG0gZnJvbSBcIicrdGhpcy5wYXRoKydcIjsgZ29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrXyhcIicraCsnXCIsIG0pJyk7dmFyIGs9Z29vZy5EZXBlbmRlbmN5LnJlZ2lzdGVyQ2FsbGJhY2tfKGZ1bmN0aW9uKCl7Z29vZy5EZXBlbmRlbmN5LnVucmVnaXN0ZXJDYWxsYmFja18oayk7XG5hLmNsZWFyTW9kdWxlU3RhdGUoKTthLmxvYWRlZCgpfSk7Zih2b2lkIDAsJ2dvb2cuRGVwZW5kZW5jeS5jYWxsYmFja18oXCInK2srJ1wiKScpfWVsc2UgZ29vZy5sb2dUb0NvbnNvbGVfKFwiQ2Fubm90IHVzZSBkZWZhdWx0IGRlYnVnIGxvYWRlciBvdXRzaWRlIG9mIEhUTUwgZG9jdW1lbnRzLlwiKSxhLnBhdXNlKCl9LGdvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5PWZ1bmN0aW9uKGEsYixjLGQsZSl7Z29vZy5EZXBlbmRlbmN5LmNhbGwodGhpcyxhLGIsYyxkLGUpO3RoaXMuY29udGVudHNfPW51bGw7dGhpcy5sYXp5RmV0Y2hfPSFnb29nLmluSHRtbERvY3VtZW50XygpfHwhKFwibm9Nb2R1bGVcImluIGdvb2cuZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpfSxnb29nLmluaGVyaXRzKGdvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5LGdvb2cuRGVwZW5kZW5jeSksZ29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3kucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe2UuY29udGVudHNfPVxuZ29vZy5sb2FkRmlsZVN5bmNfKGUucGF0aCk7ZS5jb250ZW50c18mJihlLmNvbnRlbnRzXz1lLnRyYW5zZm9ybShlLmNvbnRlbnRzXyksZS5jb250ZW50c18mJihlLmNvbnRlbnRzXys9XCJcXG4vLyMgc291cmNlVVJMPVwiK2UucGF0aCkpfWZ1bmN0aW9uIGMoKXtlLmxhenlGZXRjaF8mJmIoKTtpZihlLmNvbnRlbnRzXyl7ZiYmYS5zZXRNb2R1bGVTdGF0ZShnb29nLk1vZHVsZVR5cGUuRVM2KTt0cnl7dmFyIGM9ZS5jb250ZW50c187ZS5jb250ZW50c189bnVsbDtnb29nLmdsb2JhbEV2YWwoYyk7aWYoZil2YXIgZD1nb29nLm1vZHVsZUxvYWRlclN0YXRlXy5tb2R1bGVOYW1lfWZpbmFsbHl7ZiYmYS5jbGVhck1vZHVsZVN0YXRlKCl9ZiYmZ29vZy5nbG9iYWwuJGpzY29tcC5yZXF1aXJlLmVuc3VyZShbZS5nZXRQYXRoTmFtZSgpXSxmdW5jdGlvbigpe2EucmVnaXN0ZXJFczZNb2R1bGVFeHBvcnRzKGUucGF0aCxnb29nLmdsb2JhbC4kanNjb21wLnJlcXVpcmUoZS5nZXRQYXRoTmFtZSgpKSxcbmQpfSk7YS5sb2FkZWQoKX19ZnVuY3Rpb24gZCgpe3ZhciBhPWdvb2cuZ2xvYmFsLmRvY3VtZW50LGI9Z29vZy5EZXBlbmRlbmN5LnJlZ2lzdGVyQ2FsbGJhY2tfKGZ1bmN0aW9uKCl7Z29vZy5EZXBlbmRlbmN5LnVucmVnaXN0ZXJDYWxsYmFja18oYik7YygpfSksZD0nPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+Jytnb29nLnByb3RlY3RTY3JpcHRUYWdfKCdnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tfKFwiJytiKydcIik7JykrXCJcXHgzYy9zY3JpcHQ+XCI7YS53cml0ZShnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXz9nb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXy5jcmVhdGVIVE1MKGQpOmQpfXZhciBlPXRoaXM7aWYoZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUKWIoKSx0aGlzLmNvbnRlbnRzXyYmZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUKFwiXCIsdGhpcy5jb250ZW50c18pPyh0aGlzLmNvbnRlbnRzXz1udWxsLGEubG9hZGVkKCkpOmEucGF1c2UoKTtcbmVsc2V7dmFyIGY9dGhpcy5sb2FkRmxhZ3MubW9kdWxlPT1nb29nLk1vZHVsZVR5cGUuRVM2O3RoaXMubGF6eUZldGNoX3x8YigpO3ZhciBnPTE8YS5wZW5kaW5nKCkubGVuZ3RoLGg9ZyYmZ29vZy5EZWJ1Z0xvYWRlcl8uSVNfT0xEX0lFXztnPWdvb2cuRGVwZW5kZW5jeS5kZWZlcl8mJihnfHxnb29nLmlzRG9jdW1lbnRMb2FkaW5nXygpKTtpZihofHxnKWEuZGVmZXIoZnVuY3Rpb24oKXtjKCl9KTtlbHNle3ZhciBrPWdvb2cuZ2xvYmFsLmRvY3VtZW50O2g9Z29vZy5pbkh0bWxEb2N1bWVudF8oKSYmXCJBY3RpdmVYT2JqZWN0XCJpbiBnb29nLmdsb2JhbDtpZihmJiZnb29nLmluSHRtbERvY3VtZW50XygpJiZnb29nLmlzRG9jdW1lbnRMb2FkaW5nXygpJiYhaCl7Z29vZy5EZXBlbmRlbmN5LmRlZmVyXz0hMDthLnBhdXNlKCk7dmFyIGw9ay5vbnJlYWR5c3RhdGVjaGFuZ2U7ay5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtcImludGVyYWN0aXZlXCI9PWsucmVhZHlTdGF0ZSYmKGsub25yZWFkeXN0YXRlY2hhbmdlPVxubCxjKCksYS5yZXN1bWUoKSk7Z29vZy5pc0Z1bmN0aW9uKGwpJiZsLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfX1lbHNlIWdvb2cuRGVidWdMb2FkZXJfLklTX09MRF9JRV8mJmdvb2cuaW5IdG1sRG9jdW1lbnRfKCkmJmdvb2cuaXNEb2N1bWVudExvYWRpbmdfKCk/ZCgpOmMoKX19fSxnb29nLlRyYW5zZm9ybWVkRGVwZW5kZW5jeS5wcm90b3R5cGUudHJhbnNmb3JtPWZ1bmN0aW9uKGEpe30sZ29vZy5UcmFuc3BpbGVkRGVwZW5kZW5jeT1mdW5jdGlvbihhLGIsYyxkLGUsZil7Z29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3kuY2FsbCh0aGlzLGEsYixjLGQsZSk7dGhpcy50cmFuc3BpbGVyPWZ9LGdvb2cuaW5oZXJpdHMoZ29vZy5UcmFuc3BpbGVkRGVwZW5kZW5jeSxnb29nLlRyYW5zZm9ybWVkRGVwZW5kZW5jeSksZ29vZy5UcmFuc3BpbGVkRGVwZW5kZW5jeS5wcm90b3R5cGUudHJhbnNmb3JtPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnRyYW5zcGlsZXIudHJhbnNwaWxlKGEsdGhpcy5nZXRQYXRoTmFtZSgpKX0sXG5nb29nLlByZVRyYW5zcGlsZWRFczZNb2R1bGVEZXBlbmRlbmN5PWZ1bmN0aW9uKGEsYixjLGQsZSl7Z29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3kuY2FsbCh0aGlzLGEsYixjLGQsZSl9LGdvb2cuaW5oZXJpdHMoZ29vZy5QcmVUcmFuc3BpbGVkRXM2TW9kdWxlRGVwZW5kZW5jeSxnb29nLlRyYW5zZm9ybWVkRGVwZW5kZW5jeSksZ29vZy5QcmVUcmFuc3BpbGVkRXM2TW9kdWxlRGVwZW5kZW5jeS5wcm90b3R5cGUudHJhbnNmb3JtPWZ1bmN0aW9uKGEpe3JldHVybiBhfSxnb29nLkdvb2dNb2R1bGVEZXBlbmRlbmN5PWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe2dvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5LmNhbGwodGhpcyxhLGIsYyxkLGUpO3RoaXMubmVlZHNUcmFuc3BpbGVfPWY7dGhpcy50cmFuc3BpbGVyXz1nfSxnb29nLmluaGVyaXRzKGdvb2cuR29vZ01vZHVsZURlcGVuZGVuY3ksZ29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3kpLGdvb2cuR29vZ01vZHVsZURlcGVuZGVuY3kucHJvdG90eXBlLnRyYW5zZm9ybT1cbmZ1bmN0aW9uKGEpe3RoaXMubmVlZHNUcmFuc3BpbGVfJiYoYT10aGlzLnRyYW5zcGlsZXJfLnRyYW5zcGlsZShhLHRoaXMuZ2V0UGF0aE5hbWUoKSkpO3JldHVybiBnb29nLkxPQURfTU9EVUxFX1VTSU5HX0VWQUwmJmdvb2cuaXNEZWYoZ29vZy5nbG9iYWwuSlNPTik/XCJnb29nLmxvYWRNb2R1bGUoXCIrZ29vZy5nbG9iYWwuSlNPTi5zdHJpbmdpZnkoYStcIlxcbi8vIyBzb3VyY2VVUkw9XCIrdGhpcy5wYXRoK1wiXFxuXCIpK1wiKTtcIjonZ29vZy5sb2FkTW9kdWxlKGZ1bmN0aW9uKGV4cG9ydHMpIHtcInVzZSBzdHJpY3RcIjsnK2ErXCJcXG47cmV0dXJuIGV4cG9ydHN9KTtcXG4vLyMgc291cmNlVVJMPVwiK3RoaXMucGF0aCtcIlxcblwifSxnb29nLkRlYnVnTG9hZGVyXy5JU19PTERfSUVfPSEoZ29vZy5nbG9iYWwuYXRvYnx8IWdvb2cuZ2xvYmFsLmRvY3VtZW50fHwhZ29vZy5nbG9iYWwuZG9jdW1lbnQuYWxsKSxnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUuYWRkRGVwZW5kZW5jeT1mdW5jdGlvbihhLGIsXG5jLGQpe2I9Ynx8W107YT1hLnJlcGxhY2UoL1xcXFwvZyxcIi9cIik7dmFyIGU9Z29vZy5ub3JtYWxpemVQYXRoXyhnb29nLmJhc2VQYXRoK2EpO2QmJlwiYm9vbGVhblwiIT09dHlwZW9mIGR8fChkPWQ/e21vZHVsZTpnb29nLk1vZHVsZVR5cGUuR09PR306e30pO2M9dGhpcy5mYWN0b3J5Xy5jcmVhdGVEZXBlbmRlbmN5KGUsYSxiLGMsZCxnb29nLnRyYW5zcGlsZXJfLm5lZWRzVHJhbnNwaWxlKGQubGFuZ3x8XCJlczNcIixkLm1vZHVsZSkpO3RoaXMuZGVwZW5kZW5jaWVzX1tlXT1jO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy5pZFRvUGF0aF9bYltjXV09ZTt0aGlzLmlkVG9QYXRoX1thXT1lfSxnb29nLkRlcGVuZGVuY3lGYWN0b3J5PWZ1bmN0aW9uKGEpe3RoaXMudHJhbnNwaWxlcj1hfSxnb29nLkRlcGVuZGVuY3lGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVEZXBlbmRlbmN5PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtyZXR1cm4gZS5tb2R1bGU9PWdvb2cuTW9kdWxlVHlwZS5HT09HP25ldyBnb29nLkdvb2dNb2R1bGVEZXBlbmRlbmN5KGEsXG5iLGMsZCxlLGYsdGhpcy50cmFuc3BpbGVyKTpmP25ldyBnb29nLlRyYW5zcGlsZWREZXBlbmRlbmN5KGEsYixjLGQsZSx0aGlzLnRyYW5zcGlsZXIpOmUubW9kdWxlPT1nb29nLk1vZHVsZVR5cGUuRVM2P1wibmV2ZXJcIj09Z29vZy5UUkFOU1BJTEUmJmdvb2cuQVNTVU1FX0VTX01PRFVMRVNfVFJBTlNQSUxFRD9uZXcgZ29vZy5QcmVUcmFuc3BpbGVkRXM2TW9kdWxlRGVwZW5kZW5jeShhLGIsYyxkLGUpOm5ldyBnb29nLkVzNk1vZHVsZURlcGVuZGVuY3koYSxiLGMsZCxlKTpuZXcgZ29vZy5EZXBlbmRlbmN5KGEsYixjLGQsZSl9LGdvb2cuZGVidWdMb2FkZXJfPW5ldyBnb29nLkRlYnVnTG9hZGVyXyxnb29nLmxvYWRDbG9zdXJlRGVwcz1mdW5jdGlvbigpe2dvb2cuZGVidWdMb2FkZXJfLmxvYWRDbG9zdXJlRGVwcygpfSxnb29nLnNldERlcGVuZGVuY3lGYWN0b3J5PWZ1bmN0aW9uKGEpe2dvb2cuZGVidWdMb2FkZXJfLnNldERlcGVuZGVuY3lGYWN0b3J5KGEpfSxnb29nLmdsb2JhbC5DTE9TVVJFX05PX0RFUFN8fFxuZ29vZy5kZWJ1Z0xvYWRlcl8ubG9hZENsb3N1cmVEZXBzKCksZ29vZy5ib290c3RyYXA9ZnVuY3Rpb24oYSxiKXtnb29nLmRlYnVnTG9hZGVyXy5ib290c3RyYXAoYSxiKX0pO2dvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfTkFNRT1cIlwiO2dvb2cuaWRlbnRpdHlfPWZ1bmN0aW9uKGEpe3JldHVybiBhfTtnb29nLmNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeT1mdW5jdGlvbihhKXt2YXIgYj1udWxsO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgVHJ1c3RlZFR5cGVzfHwhVHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSlyZXR1cm4gYjt0cnl7Yj1UcnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KGEse2NyZWF0ZUhUTUw6Z29vZy5pZGVudGl0eV8sY3JlYXRlU2NyaXB0Omdvb2cuaWRlbnRpdHlfLGNyZWF0ZVNjcmlwdFVSTDpnb29nLmlkZW50aXR5XyxjcmVhdGVVUkw6Z29vZy5pZGVudGl0eV99KX1jYXRjaChjKXtnb29nLmxvZ1RvQ29uc29sZV8oYy5tZXNzYWdlKX1yZXR1cm4gYn07XG5nb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXz1nb29nLlRSVVNURURfVFlQRVNfUE9MSUNZX05BTUU/Z29vZy5jcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3koZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV9OQU1FK1wiI2Jhc2VcIik6bnVsbDtnb29nLm9iamVjdD17fTtnb29nLm9iamVjdC5pcz1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09Yj8wIT09YXx8MS9hPT09MS9iOmEhPT1hJiZiIT09Yn07Z29vZy5vYmplY3QuZm9yRWFjaD1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkIGluIGEpYi5jYWxsKGMsYVtkXSxkLGEpfTtnb29nLm9iamVjdC5maWx0ZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXt9LGU7Zm9yKGUgaW4gYSliLmNhbGwoYyxhW2VdLGUsYSkmJihkW2VdPWFbZV0pO3JldHVybiBkfTtnb29nLm9iamVjdC5tYXA9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXt9LGU7Zm9yKGUgaW4gYSlkW2VdPWIuY2FsbChjLGFbZV0sZSxhKTtyZXR1cm4gZH07Z29vZy5vYmplY3Quc29tZT1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkIGluIGEpaWYoYi5jYWxsKGMsYVtkXSxkLGEpKXJldHVybiEwO3JldHVybiExfTtcbmdvb2cub2JqZWN0LmV2ZXJ5PWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQgaW4gYSlpZighYi5jYWxsKGMsYVtkXSxkLGEpKXJldHVybiExO3JldHVybiEwfTtnb29nLm9iamVjdC5nZXRDb3VudD1mdW5jdGlvbihhKXt2YXIgYj0wLGM7Zm9yKGMgaW4gYSliKys7cmV0dXJuIGJ9O2dvb2cub2JqZWN0LmdldEFueUtleT1mdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSlyZXR1cm4gYn07Z29vZy5vYmplY3QuZ2V0QW55VmFsdWU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGEpcmV0dXJuIGFbYl19O2dvb2cub2JqZWN0LmNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cub2JqZWN0LmNvbnRhaW5zVmFsdWUoYSxiKX07Z29vZy5vYmplY3QuZ2V0VmFsdWVzPWZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9MCxkO2ZvcihkIGluIGEpYltjKytdPWFbZF07cmV0dXJuIGJ9O1xuZ29vZy5vYmplY3QuZ2V0S2V5cz1mdW5jdGlvbihhKXt2YXIgYj1bXSxjPTAsZDtmb3IoZCBpbiBhKWJbYysrXT1kO3JldHVybiBifTtnb29nLm9iamVjdC5nZXRWYWx1ZUJ5S2V5cz1mdW5jdGlvbihhLGIpe3ZhciBjPWdvb2cuaXNBcnJheUxpa2UoYiksZD1jP2I6YXJndW1lbnRzO2ZvcihjPWM/MDoxO2M8ZC5sZW5ndGg7YysrKXtpZihudWxsPT1hKXJldHVybjthPWFbZFtjXV19cmV0dXJuIGF9O2dvb2cub2JqZWN0LmNvbnRhaW5zS2V5PWZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGwhPT1hJiZiIGluIGF9O2dvb2cub2JqZWN0LmNvbnRhaW5zVmFsdWU9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYSlpZihhW2NdPT1iKXJldHVybiEwO3JldHVybiExfTtnb29nLm9iamVjdC5maW5kS2V5PWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQgaW4gYSlpZihiLmNhbGwoYyxhW2RdLGQsYSkpcmV0dXJuIGR9O1xuZ29vZy5vYmplY3QuZmluZFZhbHVlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4oYj1nb29nLm9iamVjdC5maW5kS2V5KGEsYixjKSkmJmFbYl19O2dvb2cub2JqZWN0LmlzRW1wdHk9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGEpcmV0dXJuITE7cmV0dXJuITB9O2dvb2cub2JqZWN0LmNsZWFyPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWRlbGV0ZSBhW2JdfTtnb29nLm9iamVjdC5yZW1vdmU9ZnVuY3Rpb24oYSxiKXt2YXIgYzsoYz1iIGluIGEpJiZkZWxldGUgYVtiXTtyZXR1cm4gY307Z29vZy5vYmplY3QuYWRkPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSYmYiBpbiBhKXRocm93IEVycm9yKCdUaGUgb2JqZWN0IGFscmVhZHkgY29udGFpbnMgdGhlIGtleSBcIicrYisnXCInKTtnb29nLm9iamVjdC5zZXQoYSxiLGMpfTtnb29nLm9iamVjdC5nZXQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBudWxsIT09YSYmYiBpbiBhP2FbYl06Y307XG5nb29nLm9iamVjdC5zZXQ9ZnVuY3Rpb24oYSxiLGMpe2FbYl09Y307Z29vZy5vYmplY3Quc2V0SWZVbmRlZmluZWQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiIGluIGE/YVtiXTphW2JdPWN9O2dvb2cub2JqZWN0LnNldFdpdGhSZXR1cm5WYWx1ZUlmTm90U2V0PWZ1bmN0aW9uKGEsYixjKXtpZihiIGluIGEpcmV0dXJuIGFbYl07Yz1jKCk7cmV0dXJuIGFbYl09Y307Z29vZy5vYmplY3QuZXF1YWxzPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIGEpaWYoIShjIGluIGIpfHxhW2NdIT09YltjXSlyZXR1cm4hMTtmb3IodmFyIGQgaW4gYilpZighKGQgaW4gYSkpcmV0dXJuITE7cmV0dXJuITB9O2dvb2cub2JqZWN0LmNsb25lPWZ1bmN0aW9uKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSliW2NdPWFbY107cmV0dXJuIGJ9O1xuZ29vZy5vYmplY3QudW5zYWZlQ2xvbmU9ZnVuY3Rpb24oYSl7dmFyIGI9Z29vZy50eXBlT2YoYSk7aWYoXCJvYmplY3RcIj09Ynx8XCJhcnJheVwiPT1iKXtpZihnb29nLmlzRnVuY3Rpb24oYS5jbG9uZSkpcmV0dXJuIGEuY2xvbmUoKTtiPVwiYXJyYXlcIj09Yj9bXTp7fTtmb3IodmFyIGMgaW4gYSliW2NdPWdvb2cub2JqZWN0LnVuc2FmZUNsb25lKGFbY10pO3JldHVybiBifXJldHVybiBhfTtnb29nLm9iamVjdC50cmFuc3Bvc2U9ZnVuY3Rpb24oYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKWJbYVtjXV09YztyZXR1cm4gYn07Z29vZy5vYmplY3QuUFJPVE9UWVBFX0ZJRUxEU189XCJjb25zdHJ1Y3RvciBoYXNPd25Qcm9wZXJ0eSBpc1Byb3RvdHlwZU9mIHByb3BlcnR5SXNFbnVtZXJhYmxlIHRvTG9jYWxlU3RyaW5nIHRvU3RyaW5nIHZhbHVlT2ZcIi5zcGxpdChcIiBcIik7XG5nb29nLm9iamVjdC5leHRlbmQ9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMsZCxlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7ZD1hcmd1bWVudHNbZV07Zm9yKGMgaW4gZClhW2NdPWRbY107Zm9yKHZhciBmPTA7Zjxnb29nLm9iamVjdC5QUk9UT1RZUEVfRklFTERTXy5sZW5ndGg7ZisrKWM9Z29vZy5vYmplY3QuUFJPVE9UWVBFX0ZJRUxEU19bZl0sT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsYykmJihhW2NdPWRbY10pfX07XG5nb29nLm9iamVjdC5jcmVhdGU9ZnVuY3Rpb24oYSl7dmFyIGI9YXJndW1lbnRzLmxlbmd0aDtpZigxPT1iJiZnb29nLmlzQXJyYXkoYXJndW1lbnRzWzBdKSlyZXR1cm4gZ29vZy5vYmplY3QuY3JlYXRlLmFwcGx5KG51bGwsYXJndW1lbnRzWzBdKTtpZihiJTIpdGhyb3cgRXJyb3IoXCJVbmV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50c1wiKTtmb3IodmFyIGM9e30sZD0wO2Q8YjtkKz0yKWNbYXJndW1lbnRzW2RdXT1hcmd1bWVudHNbZCsxXTtyZXR1cm4gY307Z29vZy5vYmplY3QuY3JlYXRlU2V0PWZ1bmN0aW9uKGEpe3ZhciBiPWFyZ3VtZW50cy5sZW5ndGg7aWYoMT09YiYmZ29vZy5pc0FycmF5KGFyZ3VtZW50c1swXSkpcmV0dXJuIGdvb2cub2JqZWN0LmNyZWF0ZVNldC5hcHBseShudWxsLGFyZ3VtZW50c1swXSk7Zm9yKHZhciBjPXt9LGQ9MDtkPGI7ZCsrKWNbYXJndW1lbnRzW2RdXT0hMDtyZXR1cm4gY307XG5nb29nLm9iamVjdC5jcmVhdGVJbW11dGFibGVWaWV3PWZ1bmN0aW9uKGEpe3ZhciBiPWE7T2JqZWN0LmlzRnJvemVuJiYhT2JqZWN0LmlzRnJvemVuKGEpJiYoYj1PYmplY3QuY3JlYXRlKGEpLE9iamVjdC5mcmVlemUoYikpO3JldHVybiBifTtnb29nLm9iamVjdC5pc0ltbXV0YWJsZVZpZXc9ZnVuY3Rpb24oYSl7cmV0dXJuISFPYmplY3QuaXNGcm96ZW4mJk9iamVjdC5pc0Zyb3plbihhKX07XG5nb29nLm9iamVjdC5nZXRBbGxQcm9wZXJ0eU5hbWVzPWZ1bmN0aW9uKGEsYixjKXtpZighYSlyZXR1cm5bXTtpZighT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fCFPYmplY3QuZ2V0UHJvdG90eXBlT2YpcmV0dXJuIGdvb2cub2JqZWN0LmdldEtleXMoYSk7Zm9yKHZhciBkPXt9O2EmJihhIT09T2JqZWN0LnByb3RvdHlwZXx8YikmJihhIT09RnVuY3Rpb24ucHJvdG90eXBlfHxjKTspe2Zvcih2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhKSxmPTA7ZjxlLmxlbmd0aDtmKyspZFtlW2ZdXT0hMDthPU9iamVjdC5nZXRQcm90b3R5cGVPZihhKX1yZXR1cm4gZ29vZy5vYmplY3QuZ2V0S2V5cyhkKX07Z29vZy5vYmplY3QuZ2V0U3VwZXJDbGFzcz1mdW5jdGlvbihhKXtyZXR1cm4oYT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoYS5wcm90b3R5cGUpKSYmYS5jb25zdHJ1Y3Rvcn07Z29vZy5kZWJ1Zz17fTtnb29nLmRlYnVnLkVycm9yPWZ1bmN0aW9uKGEpe2lmKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKUVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsZ29vZy5kZWJ1Zy5FcnJvcik7ZWxzZXt2YXIgYj1FcnJvcigpLnN0YWNrO2ImJih0aGlzLnN0YWNrPWIpfWEmJih0aGlzLm1lc3NhZ2U9U3RyaW5nKGEpKTt0aGlzLnJlcG9ydEVycm9yVG9TZXJ2ZXI9ITB9O2dvb2cuaW5oZXJpdHMoZ29vZy5kZWJ1Zy5FcnJvcixFcnJvcik7Z29vZy5kZWJ1Zy5FcnJvci5wcm90b3R5cGUubmFtZT1cIkN1c3RvbUVycm9yXCI7Z29vZy5kb209e307Z29vZy5kb20uTm9kZVR5cGU9e0VMRU1FTlQ6MSxBVFRSSUJVVEU6MixURVhUOjMsQ0RBVEFfU0VDVElPTjo0LEVOVElUWV9SRUZFUkVOQ0U6NSxFTlRJVFk6NixQUk9DRVNTSU5HX0lOU1RSVUNUSU9OOjcsQ09NTUVOVDo4LERPQ1VNRU5UOjksRE9DVU1FTlRfVFlQRToxMCxET0NVTUVOVF9GUkFHTUVOVDoxMSxOT1RBVElPTjoxMn07Z29vZy5hc3NlcnRzPXt9O2dvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUz1nb29nLkRFQlVHO2dvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvcj1mdW5jdGlvbihhLGIpe2dvb2cuZGVidWcuRXJyb3IuY2FsbCh0aGlzLGdvb2cuYXNzZXJ0cy5zdWJzXyhhLGIpKTt0aGlzLm1lc3NhZ2VQYXR0ZXJuPWF9O2dvb2cuaW5oZXJpdHMoZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yLGdvb2cuZGVidWcuRXJyb3IpO2dvb2cuYXNzZXJ0cy5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUubmFtZT1cIkFzc2VydGlvbkVycm9yXCI7Z29vZy5hc3NlcnRzLkRFRkFVTFRfRVJST1JfSEFORExFUj1mdW5jdGlvbihhKXt0aHJvdyBhO307Z29vZy5hc3NlcnRzLmVycm9ySGFuZGxlcl89Z29vZy5hc3NlcnRzLkRFRkFVTFRfRVJST1JfSEFORExFUjtcbmdvb2cuYXNzZXJ0cy5zdWJzXz1mdW5jdGlvbihhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTtyZXR1cm4gYythW2RdfTtnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXz1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIkFzc2VydGlvbiBmYWlsZWRcIjtpZihjKXtlKz1cIjogXCIrYzt2YXIgZj1kfWVsc2UgYSYmKGUrPVwiOiBcIithLGY9Yik7YT1uZXcgZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yKFwiXCIrZSxmfHxbXSk7Z29vZy5hc3NlcnRzLmVycm9ySGFuZGxlcl8oYSl9O2dvb2cuYXNzZXJ0cy5zZXRFcnJvckhhbmRsZXI9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiYoZ29vZy5hc3NlcnRzLmVycm9ySGFuZGxlcl89YSl9O1xuZ29vZy5hc3NlcnRzLmFzc2VydD1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiYhYSYmZ29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJcIixudWxsLGIsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpKTtyZXR1cm4gYX07Z29vZy5hc3NlcnRzLmFzc2VydEV4aXN0cz1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiZudWxsPT1hJiZnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIHRvIGV4aXN0OiAlcy5cIixbYV0sYixBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpO3JldHVybiBhfTtcbmdvb2cuYXNzZXJ0cy5mYWlsPWZ1bmN0aW9uKGEsYil7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiZnb29nLmFzc2VydHMuZXJyb3JIYW5kbGVyXyhuZXcgZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yKFwiRmFpbHVyZVwiKyhhP1wiOiBcIithOlwiXCIpLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSkpfTtnb29nLmFzc2VydHMuYXNzZXJ0TnVtYmVyPWZ1bmN0aW9uKGEsYixjKXtnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJiFnb29nLmlzTnVtYmVyKGEpJiZnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIG51bWJlciBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoYSksYV0sYixBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpO3JldHVybiBhfTtcbmdvb2cuYXNzZXJ0cy5hc3NlcnRTdHJpbmc9ZnVuY3Rpb24oYSxiLGMpe2dvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyYmIWdvb2cuaXNTdHJpbmcoYSkmJmdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKFwiRXhwZWN0ZWQgc3RyaW5nIGJ1dCBnb3QgJXM6ICVzLlwiLFtnb29nLnR5cGVPZihhKSxhXSxiLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSk7cmV0dXJuIGF9O2dvb2cuYXNzZXJ0cy5hc3NlcnRGdW5jdGlvbj1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiYhZ29vZy5pc0Z1bmN0aW9uKGEpJiZnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIGZ1bmN0aW9uIGJ1dCBnb3QgJXM6ICVzLlwiLFtnb29nLnR5cGVPZihhKSxhXSxiLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSk7cmV0dXJuIGF9O1xuZ29vZy5hc3NlcnRzLmFzc2VydE9iamVjdD1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiYhZ29vZy5pc09iamVjdChhKSYmZ29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAlczogJXMuXCIsW2dvb2cudHlwZU9mKGEpLGFdLGIsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpKTtyZXR1cm4gYX07Z29vZy5hc3NlcnRzLmFzc2VydEFycmF5PWZ1bmN0aW9uKGEsYixjKXtnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJiFnb29nLmlzQXJyYXkoYSkmJmdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKFwiRXhwZWN0ZWQgYXJyYXkgYnV0IGdvdCAlczogJXMuXCIsW2dvb2cudHlwZU9mKGEpLGFdLGIsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpKTtyZXR1cm4gYX07XG5nb29nLmFzc2VydHMuYXNzZXJ0Qm9vbGVhbj1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiYhZ29vZy5pc0Jvb2xlYW4oYSkmJmdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKFwiRXhwZWN0ZWQgYm9vbGVhbiBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoYSksYV0sYixBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpO3JldHVybiBhfTtnb29nLmFzc2VydHMuYXNzZXJ0RWxlbWVudD1mdW5jdGlvbihhLGIsYyl7IWdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUU3x8Z29vZy5pc09iamVjdChhKSYmYS5ub2RlVHlwZT09Z29vZy5kb20uTm9kZVR5cGUuRUxFTUVOVHx8Z29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJFeHBlY3RlZCBFbGVtZW50IGJ1dCBnb3QgJXM6ICVzLlwiLFtnb29nLnR5cGVPZihhKSxhXSxiLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSk7cmV0dXJuIGF9O1xuZ29vZy5hc3NlcnRzLmFzc2VydEluc3RhbmNlb2Y9ZnVuY3Rpb24oYSxiLGMsZCl7IWdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUU3x8YSBpbnN0YW5jZW9mIGJ8fGdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKFwiRXhwZWN0ZWQgaW5zdGFuY2VvZiAlcyBidXQgZ290ICVzLlwiLFtnb29nLmFzc2VydHMuZ2V0VHlwZV8oYiksZ29vZy5hc3NlcnRzLmdldFR5cGVfKGEpXSxjLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKSk7cmV0dXJuIGF9O2dvb2cuYXNzZXJ0cy5hc3NlcnRGaW5pdGU9ZnVuY3Rpb24oYSxiLGMpeyFnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFN8fFwibnVtYmVyXCI9PXR5cGVvZiBhJiZpc0Zpbml0ZShhKXx8Z29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJFeHBlY3RlZCAlcyB0byBiZSBhIGZpbml0ZSBudW1iZXIgYnV0IGl0IGlzIG5vdC5cIixbYV0sYixBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpO3JldHVybiBhfTtcbmdvb2cuYXNzZXJ0cy5hc3NlcnRPYmplY3RQcm90b3R5cGVJc0ludGFjdD1mdW5jdGlvbigpe2Zvcih2YXIgYSBpbiBPYmplY3QucHJvdG90eXBlKWdvb2cuYXNzZXJ0cy5mYWlsKGErXCIgc2hvdWxkIG5vdCBiZSBlbnVtZXJhYmxlIGluIE9iamVjdC5wcm90b3R5cGUuXCIpfTtnb29nLmFzc2VydHMuZ2V0VHlwZV89ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBGdW5jdGlvbj9hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwidW5rbm93biB0eXBlIG5hbWVcIjphIGluc3RhbmNlb2YgT2JqZWN0P2EuY29uc3RydWN0b3IuZGlzcGxheU5hbWV8fGEuY29uc3RydWN0b3IubmFtZXx8T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpOm51bGw9PT1hP1wibnVsbFwiOnR5cGVvZiBhfTt2YXIganNwYj17QmluYXJ5Q29uc3RhbnRzOnt9LENvbnN0QmluYXJ5TWVzc2FnZTpmdW5jdGlvbigpe30sQmluYXJ5TWVzc2FnZTpmdW5jdGlvbigpe319O2pzcGIuQmluYXJ5Q29uc3RhbnRzLkZpZWxkVHlwZT17SU5WQUxJRDotMSxET1VCTEU6MSxGTE9BVDoyLElOVDY0OjMsVUlOVDY0OjQsSU5UMzI6NSxGSVhFRDY0OjYsRklYRUQzMjo3LEJPT0w6OCxTVFJJTkc6OSxHUk9VUDoxMCxNRVNTQUdFOjExLEJZVEVTOjEyLFVJTlQzMjoxMyxFTlVNOjE0LFNGSVhFRDMyOjE1LFNGSVhFRDY0OjE2LFNJTlQzMjoxNyxTSU5UNjQ6MTgsRkhBU0g2NDozMCxWSEFTSDY0OjMxfTtqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZT17SU5WQUxJRDotMSxWQVJJTlQ6MCxGSVhFRDY0OjEsREVMSU1JVEVEOjIsU1RBUlRfR1JPVVA6MyxFTkRfR1JPVVA6NCxGSVhFRDMyOjV9O1xuanNwYi5CaW5hcnlDb25zdGFudHMuRmllbGRUeXBlVG9XaXJlVHlwZT1mdW5jdGlvbihhKXt2YXIgYj1qc3BiLkJpbmFyeUNvbnN0YW50cy5GaWVsZFR5cGUsYz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZTtzd2l0Y2goYSl7Y2FzZSBiLklOVDMyOmNhc2UgYi5JTlQ2NDpjYXNlIGIuVUlOVDMyOmNhc2UgYi5VSU5UNjQ6Y2FzZSBiLlNJTlQzMjpjYXNlIGIuU0lOVDY0OmNhc2UgYi5CT09MOmNhc2UgYi5FTlVNOmNhc2UgYi5WSEFTSDY0OnJldHVybiBjLlZBUklOVDtjYXNlIGIuRE9VQkxFOmNhc2UgYi5GSVhFRDY0OmNhc2UgYi5TRklYRUQ2NDpjYXNlIGIuRkhBU0g2NDpyZXR1cm4gYy5GSVhFRDY0O2Nhc2UgYi5TVFJJTkc6Y2FzZSBiLk1FU1NBR0U6Y2FzZSBiLkJZVEVTOnJldHVybiBjLkRFTElNSVRFRDtjYXNlIGIuRkxPQVQ6Y2FzZSBiLkZJWEVEMzI6Y2FzZSBiLlNGSVhFRDMyOnJldHVybiBjLkZJWEVEMzI7ZGVmYXVsdDpyZXR1cm4gYy5JTlZBTElEfX07XG5qc3BiLkJpbmFyeUNvbnN0YW50cy5JTlZBTElEX0ZJRUxEX05VTUJFUj0tMTtqc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX0VQUz0xLjQwMTI5ODQ2NDMyNDgxN0UtNDU7anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQzMl9NSU49MS4xNzU0OTQzNTA4MjIyODc1RS0zODtqc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX01BWD0zLjQwMjgyMzQ2NjM4NTI4ODZFMzg7anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9FUFM9NC45RS0zMjQ7anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9NSU49Mi4yMjUwNzM4NTg1MDcyMDE0RS0zMDg7anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9NQVg9MS43OTc2OTMxMzQ4NjIzMTU3RTMwODtqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMjA9MTA0ODU3Njtqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMjM9ODM4ODYwODtqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzE9MjE0NzQ4MzY0ODtcbmpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMj00Mjk0OTY3Mjk2O2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT181Mj00NTAzNTk5NjI3MzcwNDk2O2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182Mz0weDdmZmZmZmZmZmZmZmZmZmY7anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzY0PTEuODQ0Njc0NDA3MzcwOTU1MkUxOTtqc3BiLkJpbmFyeUNvbnN0YW50cy5aRVJPX0hBU0g9XCJcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXCI7Z29vZy5hcnJheT17fTtnb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTPWdvb2cuVFJVU1RFRF9TSVRFO2dvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlM9MjAxMjxnb29nLkZFQVRVUkVTRVRfWUVBUjtnb29nLmFycmF5LnBlZWs9ZnVuY3Rpb24oYSl7cmV0dXJuIGFbYS5sZW5ndGgtMV19O2dvb2cuYXJyYXkubGFzdD1nb29nLmFycmF5LnBlZWs7XG5nb29nLmFycmF5LmluZGV4T2Y9Z29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyYmKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlN8fEFycmF5LnByb3RvdHlwZS5pbmRleE9mKT9mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hLmxlbmd0aCk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsPT1jPzA6MD5jP01hdGgubWF4KDAsYS5sZW5ndGgrYyk6YztpZihnb29nLmlzU3RyaW5nKGEpKXJldHVybiBnb29nLmlzU3RyaW5nKGIpJiYxPT1iLmxlbmd0aD9hLmluZGV4T2YoYixjKTotMTtmb3IoO2M8YS5sZW5ndGg7YysrKWlmKGMgaW4gYSYmYVtjXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9O1xuZ29vZy5hcnJheS5sYXN0SW5kZXhPZj1nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTJiYoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OU3x8QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKT9mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hLmxlbmd0aCk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGEsYixudWxsPT1jP2EubGVuZ3RoLTE6Yyl9OmZ1bmN0aW9uKGEsYixjKXtjPW51bGw9PWM/YS5sZW5ndGgtMTpjOzA+YyYmKGM9TWF0aC5tYXgoMCxhLmxlbmd0aCtjKSk7aWYoZ29vZy5pc1N0cmluZyhhKSlyZXR1cm4gZ29vZy5pc1N0cmluZyhiKSYmMT09Yi5sZW5ndGg/YS5sYXN0SW5kZXhPZihiLGMpOi0xO2Zvcig7MDw9YztjLS0paWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX07XG5nb29nLmFycmF5LmZvckVhY2g9Z29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyYmKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlN8fEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKT9mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hLmxlbmd0aCk7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1nb29nLmlzU3RyaW5nKGEpP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxkO2YrKylmIGluIGUmJmIuY2FsbChjLGVbZl0sZixhKX07Z29vZy5hcnJheS5mb3JFYWNoUmlnaHQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEubGVuZ3RoLGU9Z29vZy5pc1N0cmluZyhhKT9hLnNwbGl0KFwiXCIpOmE7Zm9yKC0tZDswPD1kOy0tZClkIGluIGUmJmIuY2FsbChjLGVbZF0sZCxhKX07XG5nb29nLmFycmF5LmZpbHRlcj1nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTJiYoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OU3x8QXJyYXkucHJvdG90eXBlLmZpbHRlcik/ZnVuY3Rpb24oYSxiLGMpe2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9YS5sZW5ndGgpO3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9W10sZj0wLGc9Z29vZy5pc1N0cmluZyhhKT9hLnNwbGl0KFwiXCIpOmEsaD0wO2g8ZDtoKyspaWYoaCBpbiBnKXt2YXIgaz1nW2hdO2IuY2FsbChjLGssaCxhKSYmKGVbZisrXT1rKX1yZXR1cm4gZX07XG5nb29nLmFycmF5Lm1hcD1nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTJiYoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OU3x8QXJyYXkucHJvdG90eXBlLm1hcCk/ZnVuY3Rpb24oYSxiLGMpe2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9YS5sZW5ndGgpO3JldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9QXJyYXkoZCksZj1nb29nLmlzU3RyaW5nKGEpP2Euc3BsaXQoXCJcIik6YSxnPTA7ZzxkO2crKylnIGluIGYmJihlW2ddPWIuY2FsbChjLGZbZ10sZyxhKSk7cmV0dXJuIGV9O1xuZ29vZy5hcnJheS5yZWR1Y2U9Z29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyYmKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlN8fEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpP2Z1bmN0aW9uKGEsYixjLGQpe2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9YS5sZW5ndGgpO2QmJihiPWdvb2cuYmluZChiLGQpKTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKGEsYixjKX06ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yztnb29nLmFycmF5LmZvckVhY2goYSxmdW5jdGlvbihjLGcpe2U9Yi5jYWxsKGQsZSxjLGcsYSl9KTtyZXR1cm4gZX07XG5nb29nLmFycmF5LnJlZHVjZVJpZ2h0PWdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMmJihnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TfHxBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQpP2Z1bmN0aW9uKGEsYixjLGQpe2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9YS5sZW5ndGgpO2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9Yik7ZCYmKGI9Z29vZy5iaW5kKGIsZCkpO3JldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQuY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWM7Z29vZy5hcnJheS5mb3JFYWNoUmlnaHQoYSxmdW5jdGlvbihjLGcpe2U9Yi5jYWxsKGQsZSxjLGcsYSl9KTtyZXR1cm4gZX07XG5nb29nLmFycmF5LnNvbWU9Z29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyYmKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlN8fEFycmF5LnByb3RvdHlwZS5zb21lKT9mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hLmxlbmd0aCk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9Z29vZy5pc1N0cmluZyhhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8ZDtmKyspaWYoZiBpbiBlJiZiLmNhbGwoYyxlW2ZdLGYsYSkpcmV0dXJuITA7cmV0dXJuITF9O1xuZ29vZy5hcnJheS5ldmVyeT1nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTJiYoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OU3x8QXJyYXkucHJvdG90eXBlLmV2ZXJ5KT9mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hLmxlbmd0aCk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5ldmVyeS5jYWxsKGEsYixjKX06ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1hLmxlbmd0aCxlPWdvb2cuaXNTdHJpbmcoYSk/YS5zcGxpdChcIlwiKTphLGY9MDtmPGQ7ZisrKWlmKGYgaW4gZSYmIWIuY2FsbChjLGVbZl0sZixhKSlyZXR1cm4hMTtyZXR1cm4hMH07Z29vZy5hcnJheS5jb3VudD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9MDtnb29nLmFycmF5LmZvckVhY2goYSxmdW5jdGlvbihhLGYsZyl7Yi5jYWxsKGMsYSxmLGcpJiYrK2R9LGMpO3JldHVybiBkfTtcbmdvb2cuYXJyYXkuZmluZD1mdW5jdGlvbihhLGIsYyl7Yj1nb29nLmFycmF5LmZpbmRJbmRleChhLGIsYyk7cmV0dXJuIDA+Yj9udWxsOmdvb2cuaXNTdHJpbmcoYSk/YS5jaGFyQXQoYik6YVtiXX07Z29vZy5hcnJheS5maW5kSW5kZXg9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1hLmxlbmd0aCxlPWdvb2cuaXNTdHJpbmcoYSk/YS5zcGxpdChcIlwiKTphLGY9MDtmPGQ7ZisrKWlmKGYgaW4gZSYmYi5jYWxsKGMsZVtmXSxmLGEpKXJldHVybiBmO3JldHVybi0xfTtnb29nLmFycmF5LmZpbmRSaWdodD1mdW5jdGlvbihhLGIsYyl7Yj1nb29nLmFycmF5LmZpbmRJbmRleFJpZ2h0KGEsYixjKTtyZXR1cm4gMD5iP251bGw6Z29vZy5pc1N0cmluZyhhKT9hLmNoYXJBdChiKTphW2JdfTtcbmdvb2cuYXJyYXkuZmluZEluZGV4UmlnaHQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEubGVuZ3RoLGU9Z29vZy5pc1N0cmluZyhhKT9hLnNwbGl0KFwiXCIpOmE7Zm9yKC0tZDswPD1kO2QtLSlpZihkIGluIGUmJmIuY2FsbChjLGVbZF0sZCxhKSlyZXR1cm4gZDtyZXR1cm4tMX07Z29vZy5hcnJheS5jb250YWlucz1mdW5jdGlvbihhLGIpe3JldHVybiAwPD1nb29nLmFycmF5LmluZGV4T2YoYSxiKX07Z29vZy5hcnJheS5pc0VtcHR5PWZ1bmN0aW9uKGEpe3JldHVybiAwPT1hLmxlbmd0aH07Z29vZy5hcnJheS5jbGVhcj1mdW5jdGlvbihhKXtpZighZ29vZy5pc0FycmF5KGEpKWZvcih2YXIgYj1hLmxlbmd0aC0xOzA8PWI7Yi0tKWRlbGV0ZSBhW2JdO2EubGVuZ3RoPTB9O2dvb2cuYXJyYXkuaW5zZXJ0PWZ1bmN0aW9uKGEsYil7Z29vZy5hcnJheS5jb250YWlucyhhLGIpfHxhLnB1c2goYil9O1xuZ29vZy5hcnJheS5pbnNlcnRBdD1mdW5jdGlvbihhLGIsYyl7Z29vZy5hcnJheS5zcGxpY2UoYSxjLDAsYil9O2dvb2cuYXJyYXkuaW5zZXJ0QXJyYXlBdD1mdW5jdGlvbihhLGIsYyl7Z29vZy5wYXJ0aWFsKGdvb2cuYXJyYXkuc3BsaWNlLGEsYywwKS5hcHBseShudWxsLGIpfTtnb29nLmFycmF5Lmluc2VydEJlZm9yZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ7Mj09YXJndW1lbnRzLmxlbmd0aHx8MD4oZD1nb29nLmFycmF5LmluZGV4T2YoYSxjKSk/YS5wdXNoKGIpOmdvb2cuYXJyYXkuaW5zZXJ0QXQoYSxiLGQpfTtnb29nLmFycmF5LnJlbW92ZT1mdW5jdGlvbihhLGIpe2I9Z29vZy5hcnJheS5pbmRleE9mKGEsYik7dmFyIGM7KGM9MDw9YikmJmdvb2cuYXJyYXkucmVtb3ZlQXQoYSxiKTtyZXR1cm4gY307XG5nb29nLmFycmF5LnJlbW92ZUxhc3Q9ZnVuY3Rpb24oYSxiKXtiPWdvb2cuYXJyYXkubGFzdEluZGV4T2YoYSxiKTtyZXR1cm4gMDw9Yj8oZ29vZy5hcnJheS5yZW1vdmVBdChhLGIpLCEwKTohMX07Z29vZy5hcnJheS5yZW1vdmVBdD1mdW5jdGlvbihhLGIpe2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9YS5sZW5ndGgpO3JldHVybiAxPT1BcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYSxiLDEpLmxlbmd0aH07Z29vZy5hcnJheS5yZW1vdmVJZj1mdW5jdGlvbihhLGIsYyl7Yj1nb29nLmFycmF5LmZpbmRJbmRleChhLGIsYyk7cmV0dXJuIDA8PWI/KGdvb2cuYXJyYXkucmVtb3ZlQXQoYSxiKSwhMCk6ITF9O2dvb2cuYXJyYXkucmVtb3ZlQWxsSWY9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTA7Z29vZy5hcnJheS5mb3JFYWNoUmlnaHQoYSxmdW5jdGlvbihlLGYpe2IuY2FsbChjLGUsZixhKSYmZ29vZy5hcnJheS5yZW1vdmVBdChhLGYpJiZkKyt9KTtyZXR1cm4gZH07XG5nb29nLmFycmF5LmNvbmNhdD1mdW5jdGlvbihhKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxhcmd1bWVudHMpfTtnb29nLmFycmF5LmpvaW49ZnVuY3Rpb24oYSl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sYXJndW1lbnRzKX07Z29vZy5hcnJheS50b0FycmF5PWZ1bmN0aW9uKGEpe3ZhciBiPWEubGVuZ3RoO2lmKDA8Yil7Zm9yKHZhciBjPUFycmF5KGIpLGQ9MDtkPGI7ZCsrKWNbZF09YVtkXTtyZXR1cm4gY31yZXR1cm5bXX07Z29vZy5hcnJheS5jbG9uZT1nb29nLmFycmF5LnRvQXJyYXk7Z29vZy5hcnJheS5leHRlbmQ9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKXt2YXIgZD1hcmd1bWVudHNbY107aWYoZ29vZy5pc0FycmF5TGlrZShkKSl7dmFyIGU9YS5sZW5ndGh8fDAsZj1kLmxlbmd0aHx8MDthLmxlbmd0aD1lK2Y7Zm9yKHZhciBnPTA7ZzxmO2crKylhW2UrZ109ZFtnXX1lbHNlIGEucHVzaChkKX19O1xuZ29vZy5hcnJheS5zcGxpY2U9ZnVuY3Rpb24oYSxiLGMsZCl7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hLmxlbmd0aCk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYSxnb29nLmFycmF5LnNsaWNlKGFyZ3VtZW50cywxKSl9O2dvb2cuYXJyYXkuc2xpY2U9ZnVuY3Rpb24oYSxiLGMpe2dvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9YS5sZW5ndGgpO3JldHVybiAyPj1hcmd1bWVudHMubGVuZ3RoP0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEsYik6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSxiLGMpfTtcbmdvb2cuYXJyYXkucmVtb3ZlRHVwbGljYXRlcz1mdW5jdGlvbihhLGIsYyl7Yj1ifHxhO3ZhciBkPWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmlzT2JqZWN0KGEpP1wib1wiK2dvb2cuZ2V0VWlkKGEpOih0eXBlb2YgYSkuY2hhckF0KDApK2F9O2M9Y3x8ZDtkPXt9O2Zvcih2YXIgZT0wLGY9MDtmPGEubGVuZ3RoOyl7dmFyIGc9YVtmKytdLGg9YyhnKTtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCxoKXx8KGRbaF09ITAsYltlKytdPWcpfWIubGVuZ3RoPWV9O2dvb2cuYXJyYXkuYmluYXJ5U2VhcmNoPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZ29vZy5hcnJheS5iaW5hcnlTZWFyY2hfKGEsY3x8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZSwhMSxiKX07Z29vZy5hcnJheS5iaW5hcnlTZWxlY3Q9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBnb29nLmFycmF5LmJpbmFyeVNlYXJjaF8oYSxiLCEwLHZvaWQgMCxjKX07XG5nb29nLmFycmF5LmJpbmFyeVNlYXJjaF89ZnVuY3Rpb24oYSxiLGMsZCxlKXtmb3IodmFyIGY9MCxnPWEubGVuZ3RoLGg7ZjxnOyl7dmFyIGs9ZitnPj4xO3ZhciBsPWM/Yi5jYWxsKGUsYVtrXSxrLGEpOmIoZCxhW2tdKTswPGw/Zj1rKzE6KGc9ayxoPSFsKX1yZXR1cm4gaD9mOn5mfTtnb29nLmFycmF5LnNvcnQ9ZnVuY3Rpb24oYSxiKXthLnNvcnQoYnx8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZSl9O2dvb2cuYXJyYXkuc3RhYmxlU29ydD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1BcnJheShhLmxlbmd0aCksZD0wO2Q8YS5sZW5ndGg7ZCsrKWNbZF09e2luZGV4OmQsdmFsdWU6YVtkXX07dmFyIGU9Ynx8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZTtnb29nLmFycmF5LnNvcnQoYyxmdW5jdGlvbihhLGIpe3JldHVybiBlKGEudmFsdWUsYi52YWx1ZSl8fGEuaW5kZXgtYi5pbmRleH0pO2ZvcihkPTA7ZDxhLmxlbmd0aDtkKyspYVtkXT1jW2RdLnZhbHVlfTtcbmdvb2cuYXJyYXkuc29ydEJ5S2V5PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jfHxnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlO2dvb2cuYXJyYXkuc29ydChhLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGQoYihhKSxiKGMpKX0pfTtnb29nLmFycmF5LnNvcnRPYmplY3RzQnlLZXk9ZnVuY3Rpb24oYSxiLGMpe2dvb2cuYXJyYXkuc29ydEJ5S2V5KGEsZnVuY3Rpb24oYSl7cmV0dXJuIGFbYl19LGMpfTtnb29nLmFycmF5LmlzU29ydGVkPWZ1bmN0aW9uKGEsYixjKXtiPWJ8fGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU7Zm9yKHZhciBkPTE7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWIoYVtkLTFdLGFbZF0pO2lmKDA8ZXx8MD09ZSYmYylyZXR1cm4hMX1yZXR1cm4hMH07XG5nb29nLmFycmF5LmVxdWFscz1mdW5jdGlvbihhLGIsYyl7aWYoIWdvb2cuaXNBcnJheUxpa2UoYSl8fCFnb29nLmlzQXJyYXlMaWtlKGIpfHxhLmxlbmd0aCE9Yi5sZW5ndGgpcmV0dXJuITE7dmFyIGQ9YS5sZW5ndGg7Yz1jfHxnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlRXF1YWxpdHk7Zm9yKHZhciBlPTA7ZTxkO2UrKylpZighYyhhW2VdLGJbZV0pKXJldHVybiExO3JldHVybiEwfTtnb29nLmFycmF5LmNvbXBhcmUzPWZ1bmN0aW9uKGEsYixjKXtjPWN8fGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU7Zm9yKHZhciBkPU1hdGgubWluKGEubGVuZ3RoLGIubGVuZ3RoKSxlPTA7ZTxkO2UrKyl7dmFyIGY9YyhhW2VdLGJbZV0pO2lmKDAhPWYpcmV0dXJuIGZ9cmV0dXJuIGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmUoYS5sZW5ndGgsYi5sZW5ndGgpfTtnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE+Yj8xOmE8Yj8tMTowfTtcbmdvb2cuYXJyYXkuaW52ZXJzZURlZmF1bHRDb21wYXJlPWZ1bmN0aW9uKGEsYil7cmV0dXJuLWdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmUoYSxiKX07Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZUVxdWFsaXR5PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1ifTtnb29nLmFycmF5LmJpbmFyeUluc2VydD1mdW5jdGlvbihhLGIsYyl7Yz1nb29nLmFycmF5LmJpbmFyeVNlYXJjaChhLGIsYyk7cmV0dXJuIDA+Yz8oZ29vZy5hcnJheS5pbnNlcnRBdChhLGIsLShjKzEpKSwhMCk6ITF9O2dvb2cuYXJyYXkuYmluYXJ5UmVtb3ZlPWZ1bmN0aW9uKGEsYixjKXtiPWdvb2cuYXJyYXkuYmluYXJ5U2VhcmNoKGEsYixjKTtyZXR1cm4gMDw9Yj9nb29nLmFycmF5LnJlbW92ZUF0KGEsYik6ITF9O1xuZ29vZy5hcnJheS5idWNrZXQ9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD17fSxlPTA7ZTxhLmxlbmd0aDtlKyspe3ZhciBmPWFbZV0sZz1iLmNhbGwoYyxmLGUsYSk7Z29vZy5pc0RlZihnKSYmKGRbZ118fChkW2ddPVtdKSkucHVzaChmKX1yZXR1cm4gZH07Z29vZy5hcnJheS50b09iamVjdD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9e307Z29vZy5hcnJheS5mb3JFYWNoKGEsZnVuY3Rpb24oZSxmKXtkW2IuY2FsbChjLGUsZixhKV09ZX0pO3JldHVybiBkfTtnb29nLmFycmF5LnJhbmdlPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1bXSxlPTAsZj1hO2M9Y3x8MTt2b2lkIDAhPT1iJiYoZT1hLGY9Yik7aWYoMD5jKihmLWUpKXJldHVybltdO2lmKDA8Yylmb3IoYT1lO2E8ZjthKz1jKWQucHVzaChhKTtlbHNlIGZvcihhPWU7YT5mO2ErPWMpZC5wdXNoKGEpO3JldHVybiBkfTtcbmdvb2cuYXJyYXkucmVwZWF0PWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPVtdLGQ9MDtkPGI7ZCsrKWNbZF09YTtyZXR1cm4gY307Z29vZy5hcnJheS5mbGF0dGVuPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyl7dmFyIGQ9YXJndW1lbnRzW2NdO2lmKGdvb2cuaXNBcnJheShkKSlmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrPTgxOTIpe3ZhciBmPWdvb2cuYXJyYXkuc2xpY2UoZCxlLGUrODE5Mik7Zj1nb29nLmFycmF5LmZsYXR0ZW4uYXBwbHkobnVsbCxmKTtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyliLnB1c2goZltnXSl9ZWxzZSBiLnB1c2goZCl9cmV0dXJuIGJ9O1xuZ29vZy5hcnJheS5yb3RhdGU9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPWEubGVuZ3RoKTthLmxlbmd0aCYmKGIlPWEubGVuZ3RoLDA8Yj9BcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShhLGEuc3BsaWNlKC1iLGIpKTowPmImJkFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGEsYS5zcGxpY2UoMCwtYikpKTtyZXR1cm4gYX07Z29vZy5hcnJheS5tb3ZlSXRlbT1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydCgwPD1iJiZiPGEubGVuZ3RoKTtnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWMmJmM8YS5sZW5ndGgpO2I9QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGEsYiwxKTtBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYSxjLDAsYlswXSl9O1xuZ29vZy5hcnJheS56aXA9ZnVuY3Rpb24oYSl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuW107Zm9yKHZhciBiPVtdLGM9YXJndW1lbnRzWzBdLmxlbmd0aCxkPTE7ZDxhcmd1bWVudHMubGVuZ3RoO2QrKylhcmd1bWVudHNbZF0ubGVuZ3RoPGMmJihjPWFyZ3VtZW50c1tkXS5sZW5ndGgpO2ZvcihkPTA7ZDxjO2QrKyl7Zm9yKHZhciBlPVtdLGY9MDtmPGFyZ3VtZW50cy5sZW5ndGg7ZisrKWUucHVzaChhcmd1bWVudHNbZl1bZF0pO2IucHVzaChlKX1yZXR1cm4gYn07Z29vZy5hcnJheS5zaHVmZmxlPWZ1bmN0aW9uKGEsYil7Yj1ifHxNYXRoLnJhbmRvbTtmb3IodmFyIGM9YS5sZW5ndGgtMTswPGM7Yy0tKXt2YXIgZD1NYXRoLmZsb29yKGIoKSooYysxKSksZT1hW2NdO2FbY109YVtkXTthW2RdPWV9fTtnb29nLmFycmF5LmNvcHlCeUluZGV4PWZ1bmN0aW9uKGEsYil7dmFyIGM9W107Z29vZy5hcnJheS5mb3JFYWNoKGIsZnVuY3Rpb24oYil7Yy5wdXNoKGFbYl0pfSk7cmV0dXJuIGN9O1xuZ29vZy5hcnJheS5jb25jYXRNYXA9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBnb29nLmFycmF5LmNvbmNhdC5hcHBseShbXSxnb29nLmFycmF5Lm1hcChhLGIsYykpfTtnb29nLmNyeXB0PXt9O2dvb2cuY3J5cHQuc3RyaW5nVG9CeXRlQXJyYXk9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MCxkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWEuY2hhckNvZGVBdChkKTsyNTU8ZSYmKGJbYysrXT1lJjI1NSxlPj49OCk7YltjKytdPWV9cmV0dXJuIGJ9O2dvb2cuY3J5cHQuYnl0ZUFycmF5VG9TdHJpbmc9ZnVuY3Rpb24oYSl7aWYoODE5Mj49YS5sZW5ndGgpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxhKTtmb3IodmFyIGI9XCJcIixjPTA7YzxhLmxlbmd0aDtjKz04MTkyKXt2YXIgZD1nb29nLmFycmF5LnNsaWNlKGEsYyxjKzgxOTIpO2IrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxkKX1yZXR1cm4gYn07XG5nb29nLmNyeXB0LmJ5dGVBcnJheVRvSGV4PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuYXJyYXkubWFwKGEsZnVuY3Rpb24oYSl7YT1hLnRvU3RyaW5nKDE2KTtyZXR1cm4gMTxhLmxlbmd0aD9hOlwiMFwiK2F9KS5qb2luKGJ8fFwiXCIpfTtnb29nLmNyeXB0LmhleFRvQnl0ZUFycmF5PWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMD09YS5sZW5ndGglMixcIktleSBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbXVsdGlwbGUgb2YgMlwiKTtmb3IodmFyIGI9W10sYz0wO2M8YS5sZW5ndGg7Yys9MiliLnB1c2gocGFyc2VJbnQoYS5zdWJzdHJpbmcoYyxjKzIpLDE2KSk7cmV0dXJuIGJ9O1xuZ29vZy5jcnlwdC5zdHJpbmdUb1V0ZjhCeXRlQXJyYXk9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MCxkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWEuY2hhckNvZGVBdChkKTsxMjg+ZT9iW2MrK109ZTooMjA0OD5lP2JbYysrXT1lPj42fDE5MjooNTUyOTY9PShlJjY0NTEyKSYmZCsxPGEubGVuZ3RoJiY1NjMyMD09KGEuY2hhckNvZGVBdChkKzEpJjY0NTEyKT8oZT02NTUzNisoKGUmMTAyMyk8PDEwKSsoYS5jaGFyQ29kZUF0KCsrZCkmMTAyMyksYltjKytdPWU+PjE4fDI0MCxiW2MrK109ZT4+MTImNjN8MTI4KTpiW2MrK109ZT4+MTJ8MjI0LGJbYysrXT1lPj42JjYzfDEyOCksYltjKytdPWUmNjN8MTI4KX1yZXR1cm4gYn07XG5nb29nLmNyeXB0LnV0ZjhCeXRlQXJyYXlUb1N0cmluZz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0wLGQ9MDtjPGEubGVuZ3RoOyl7dmFyIGU9YVtjKytdO2lmKDEyOD5lKWJbZCsrXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpO2Vsc2UgaWYoMTkxPGUmJjIyND5lKXt2YXIgZj1hW2MrK107YltkKytdPVN0cmluZy5mcm9tQ2hhckNvZGUoKGUmMzEpPDw2fGYmNjMpfWVsc2UgaWYoMjM5PGUmJjM2NT5lKXtmPWFbYysrXTt2YXIgZz1hW2MrK10saD1hW2MrK107ZT0oKGUmNyk8PDE4fChmJjYzKTw8MTJ8KGcmNjMpPDw2fGgmNjMpLTY1NTM2O2JbZCsrXT1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2KyhlPj4xMCkpO2JbZCsrXT1TdHJpbmcuZnJvbUNoYXJDb2RlKDU2MzIwKyhlJjEwMjMpKX1lbHNlIGY9YVtjKytdLGc9YVtjKytdLGJbZCsrXT1TdHJpbmcuZnJvbUNoYXJDb2RlKChlJjE1KTw8MTJ8KGYmNjMpPDw2fGcmNjMpfXJldHVybiBiLmpvaW4oXCJcIil9O1xuZ29vZy5jcnlwdC54b3JCeXRlQXJyYXk9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0KGEubGVuZ3RoPT1iLmxlbmd0aCxcIlhPUiBhcnJheSBsZW5ndGhzIG11c3QgbWF0Y2hcIik7Zm9yKHZhciBjPVtdLGQ9MDtkPGEubGVuZ3RoO2QrKyljLnB1c2goYVtkXV5iW2RdKTtyZXR1cm4gY307Z29vZy5kb20uYXNzZXJ0cz17fTtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzTG9jYXRpb249ZnVuY3Rpb24oYSl7aWYoZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTKXt2YXIgYj1nb29nLmRvbS5hc3NlcnRzLmdldFdpbmRvd18oYSk7YiYmKCFhfHwhKGEgaW5zdGFuY2VvZiBiLkxvY2F0aW9uKSYmYSBpbnN0YW5jZW9mIGIuRWxlbWVudCkmJmdvb2cuYXNzZXJ0cy5mYWlsKFwiQXJndW1lbnQgaXMgbm90IGEgTG9jYXRpb24gKG9yIGEgbm9uLUVsZW1lbnQgbW9jayk7IGdvdDogJXNcIixnb29nLmRvbS5hc3NlcnRzLmRlYnVnU3RyaW5nRm9yVHlwZV8oYSkpfXJldHVybiBhfTtcbmdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV89ZnVuY3Rpb24oYSxiKXtpZihnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMpe3ZhciBjPWdvb2cuZG9tLmFzc2VydHMuZ2V0V2luZG93XyhhKTtjJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgY1tiXSYmKGEmJihhIGluc3RhbmNlb2YgY1tiXXx8IShhIGluc3RhbmNlb2YgYy5Mb2NhdGlvbnx8YSBpbnN0YW5jZW9mIGMuRWxlbWVudCkpfHxnb29nLmFzc2VydHMuZmFpbChcIkFyZ3VtZW50IGlzIG5vdCBhICVzIChvciBhIG5vbi1FbGVtZW50LCBub24tTG9jYXRpb24gbW9jayk7IGdvdDogJXNcIixiLGdvb2cuZG9tLmFzc2VydHMuZGVidWdTdHJpbmdGb3JUeXBlXyhhKSkpfXJldHVybiBhfTtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTEFuY2hvckVsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxBbmNob3JFbGVtZW50XCIpfTtcbmdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MQnV0dG9uRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0VsZW1lbnRUeXBlXyhhLFwiSFRNTEJ1dHRvbkVsZW1lbnRcIil9O2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MTGlua0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxMaW5rRWxlbWVudFwiKX07Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxJbWFnZUVsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxJbWFnZUVsZW1lbnRcIil9O2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MQXVkaW9FbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzRWxlbWVudFR5cGVfKGEsXCJIVE1MQXVkaW9FbGVtZW50XCIpfTtcbmdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MVmlkZW9FbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzRWxlbWVudFR5cGVfKGEsXCJIVE1MVmlkZW9FbGVtZW50XCIpfTtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTElucHV0RWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0VsZW1lbnRUeXBlXyhhLFwiSFRNTElucHV0RWxlbWVudFwiKX07Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxUZXh0QXJlYUVsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxUZXh0QXJlYUVsZW1lbnRcIil9O2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MQ2FudmFzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0VsZW1lbnRUeXBlXyhhLFwiSFRNTENhbnZhc0VsZW1lbnRcIil9O1xuZ29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxFbWJlZEVsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxFbWJlZEVsZW1lbnRcIil9O2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MRm9ybUVsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxGb3JtRWxlbWVudFwiKX07Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxGcmFtZUVsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNFbGVtZW50VHlwZV8oYSxcIkhUTUxGcmFtZUVsZW1lbnRcIil9O2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MSUZyYW1lRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0VsZW1lbnRUeXBlXyhhLFwiSFRNTElGcmFtZUVsZW1lbnRcIil9O1xuZ29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxPYmplY3RFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzRWxlbWVudFR5cGVfKGEsXCJIVE1MT2JqZWN0RWxlbWVudFwiKX07Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxTY3JpcHRFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzRWxlbWVudFR5cGVfKGEsXCJIVE1MU2NyaXB0RWxlbWVudFwiKX07XG5nb29nLmRvbS5hc3NlcnRzLmRlYnVnU3RyaW5nRm9yVHlwZV89ZnVuY3Rpb24oYSl7aWYoZ29vZy5pc09iamVjdChhKSl0cnl7cmV0dXJuIGEuY29uc3RydWN0b3IuZGlzcGxheU5hbWV8fGEuY29uc3RydWN0b3IubmFtZXx8T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpfWNhdGNoKGIpe3JldHVyblwiPG9iamVjdCBjb3VsZCBub3QgYmUgc3RyaW5naWZpZWQ+XCJ9ZWxzZSByZXR1cm4gdm9pZCAwPT09YT9cInVuZGVmaW5lZFwiOm51bGw9PT1hP1wibnVsbFwiOnR5cGVvZiBhfTtnb29nLmRvbS5hc3NlcnRzLmdldFdpbmRvd189ZnVuY3Rpb24oYSl7dHJ5e3ZhciBiPWEmJmEub3duZXJEb2N1bWVudCxjPWImJihiLmRlZmF1bHRWaWV3fHxiLnBhcmVudFdpbmRvdyk7Yz1jfHxnb29nLmdsb2JhbDtpZihjLkVsZW1lbnQmJmMuTG9jYXRpb24pcmV0dXJuIGN9Y2F0Y2goZCl7fXJldHVybiBudWxsfTtnb29nLmZ1bmN0aW9ucz17fTtnb29nLmZ1bmN0aW9ucy5jb25zdGFudD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYX19O2dvb2cuZnVuY3Rpb25zLkZBTFNFPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2dvb2cuZnVuY3Rpb25zLlRSVUU9ZnVuY3Rpb24oKXtyZXR1cm4hMH07Z29vZy5mdW5jdGlvbnMuTlVMTD1mdW5jdGlvbigpe3JldHVybiBudWxsfTtnb29nLmZ1bmN0aW9ucy5pZGVudGl0eT1mdW5jdGlvbihhLGIpe3JldHVybiBhfTtnb29nLmZ1bmN0aW9ucy5lcnJvcj1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihhKTt9fTtnb29nLmZ1bmN0aW9ucy5mYWlsPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3Rocm93IGE7fX07XG5nb29nLmZ1bmN0aW9ucy5sb2NrPWZ1bmN0aW9uKGEsYil7Yj1ifHwwO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KHRoaXMsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDAsYikpfX07Z29vZy5mdW5jdGlvbnMubnRoPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbYV19fTtnb29nLmZ1bmN0aW9ucy5wYXJ0aWFsUmlnaHQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtiLnB1c2guYXBwbHkoYixjKTtyZXR1cm4gYS5hcHBseSh0aGlzLGIpfX07Z29vZy5mdW5jdGlvbnMud2l0aFJldHVyblZhbHVlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuZnVuY3Rpb25zLnNlcXVlbmNlKGEsZ29vZy5mdW5jdGlvbnMuY29uc3RhbnQoYikpfTtcbmdvb2cuZnVuY3Rpb25zLmVxdWFsVG89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZnVuY3Rpb24oYyl7cmV0dXJuIGI/YT09YzphPT09Y319O2dvb2cuZnVuY3Rpb25zLmNvbXBvc2U9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hcmd1bWVudHMsZD1jLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYTtkJiYoYT1jW2QtMV0uYXBwbHkodGhpcyxhcmd1bWVudHMpKTtmb3IodmFyIGI9ZC0yOzA8PWI7Yi0tKWE9Y1tiXS5jYWxsKHRoaXMsYSk7cmV0dXJuIGF9fTtnb29nLmZ1bmN0aW9ucy5zZXF1ZW5jZT1mdW5jdGlvbihhKXt2YXIgYj1hcmd1bWVudHMsYz1iLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGEsZT0wO2U8YztlKyspYT1iW2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gYX19O1xuZ29vZy5mdW5jdGlvbnMuYW5kPWZ1bmN0aW9uKGEpe3ZhciBiPWFyZ3VtZW50cyxjPWIubGVuZ3RoO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8YzthKyspaWYoIWJbYV0uYXBwbHkodGhpcyxhcmd1bWVudHMpKXJldHVybiExO3JldHVybiEwfX07Z29vZy5mdW5jdGlvbnMub3I9ZnVuY3Rpb24oYSl7dmFyIGI9YXJndW1lbnRzLGM9Yi5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTxjO2ErKylpZihiW2FdLmFwcGx5KHRoaXMsYXJndW1lbnRzKSlyZXR1cm4hMDtyZXR1cm4hMX19O2dvb2cuZnVuY3Rpb25zLm5vdD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4hYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fTtcbmdvb2cuZnVuY3Rpb25zLmNyZWF0ZT1mdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKCl7fTtjLnByb3RvdHlwZT1hLnByb3RvdHlwZTtjPW5ldyBjO2EuYXBwbHkoYyxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpO3JldHVybiBjfTtnb29nLmZ1bmN0aW9ucy5DQUNIRV9SRVRVUk5fVkFMVUU9ITA7Z29vZy5mdW5jdGlvbnMuY2FjaGVSZXR1cm5WYWx1ZT1mdW5jdGlvbihhKXt2YXIgYj0hMSxjO3JldHVybiBmdW5jdGlvbigpe2lmKCFnb29nLmZ1bmN0aW9ucy5DQUNIRV9SRVRVUk5fVkFMVUUpcmV0dXJuIGEoKTtifHwoYz1hKCksYj0hMCk7cmV0dXJuIGN9fTtnb29nLmZ1bmN0aW9ucy5vbmNlPWZ1bmN0aW9uKGEpe3ZhciBiPWE7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoYil7dmFyIGE9YjtiPW51bGw7YSgpfX19O1xuZ29vZy5mdW5jdGlvbnMuZGVib3VuY2U9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTA7cmV0dXJuIGZ1bmN0aW9uKGUpe2dvb2cuZ2xvYmFsLmNsZWFyVGltZW91dChkKTt2YXIgZj1hcmd1bWVudHM7ZD1nb29nLmdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5hcHBseShjLGYpfSxiKX19O2dvb2cuZnVuY3Rpb25zLnRocm90dGxlPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD0wLGU9ITEsZj1bXSxnPWZ1bmN0aW9uKCl7ZD0wO2UmJihlPSExLGgoKSl9LGg9ZnVuY3Rpb24oKXtkPWdvb2cuZ2xvYmFsLnNldFRpbWVvdXQoZyxiKTthLmFwcGx5KGMsZil9O3JldHVybiBmdW5jdGlvbihhKXtmPWFyZ3VtZW50cztkP2U9ITA6aCgpfX07Z29vZy5mdW5jdGlvbnMucmF0ZUxpbWl0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD0wLGU9ZnVuY3Rpb24oKXtkPTB9O3JldHVybiBmdW5jdGlvbihmKXtkfHwoZD1nb29nLmdsb2JhbC5zZXRUaW1lb3V0KGUsYiksYS5hcHBseShjLGFyZ3VtZW50cykpfX07Z29vZy5kb20uSHRtbEVsZW1lbnQ9ZnVuY3Rpb24oKXt9O2dvb2cuZG9tLlRhZ05hbWU9ZnVuY3Rpb24oYSl7dGhpcy50YWdOYW1lXz1hfTtnb29nLmRvbS5UYWdOYW1lLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhZ05hbWVffTtnb29nLmRvbS5UYWdOYW1lLkE9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJBXCIpO2dvb2cuZG9tLlRhZ05hbWUuQUJCUj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkFCQlJcIik7Z29vZy5kb20uVGFnTmFtZS5BQ1JPTllNPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQUNST05ZTVwiKTtnb29nLmRvbS5UYWdOYW1lLkFERFJFU1M9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJBRERSRVNTXCIpO2dvb2cuZG9tLlRhZ05hbWUuQVBQTEVUPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQVBQTEVUXCIpO2dvb2cuZG9tLlRhZ05hbWUuQVJFQT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkFSRUFcIik7Z29vZy5kb20uVGFnTmFtZS5BUlRJQ0xFPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQVJUSUNMRVwiKTtcbmdvb2cuZG9tLlRhZ05hbWUuQVNJREU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJBU0lERVwiKTtnb29nLmRvbS5UYWdOYW1lLkFVRElPPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQVVESU9cIik7Z29vZy5kb20uVGFnTmFtZS5CPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQlwiKTtnb29nLmRvbS5UYWdOYW1lLkJBU0U9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJCQVNFXCIpO2dvb2cuZG9tLlRhZ05hbWUuQkFTRUZPTlQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJCQVNFRk9OVFwiKTtnb29nLmRvbS5UYWdOYW1lLkJEST1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkJESVwiKTtnb29nLmRvbS5UYWdOYW1lLkJETz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkJET1wiKTtnb29nLmRvbS5UYWdOYW1lLkJJRz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkJJR1wiKTtnb29nLmRvbS5UYWdOYW1lLkJMT0NLUVVPVEU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJCTE9DS1FVT1RFXCIpO2dvb2cuZG9tLlRhZ05hbWUuQk9EWT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkJPRFlcIik7XG5nb29nLmRvbS5UYWdOYW1lLkJSPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQlJcIik7Z29vZy5kb20uVGFnTmFtZS5CVVRUT049bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJCVVRUT05cIik7Z29vZy5kb20uVGFnTmFtZS5DQU5WQVM9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJDQU5WQVNcIik7Z29vZy5kb20uVGFnTmFtZS5DQVBUSU9OPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQ0FQVElPTlwiKTtnb29nLmRvbS5UYWdOYW1lLkNFTlRFUj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkNFTlRFUlwiKTtnb29nLmRvbS5UYWdOYW1lLkNJVEU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJDSVRFXCIpO2dvb2cuZG9tLlRhZ05hbWUuQ09ERT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkNPREVcIik7Z29vZy5kb20uVGFnTmFtZS5DT0w9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJDT0xcIik7Z29vZy5kb20uVGFnTmFtZS5DT0xHUk9VUD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkNPTEdST1VQXCIpO1xuZ29vZy5kb20uVGFnTmFtZS5DT01NQU5EPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiQ09NTUFORFwiKTtnb29nLmRvbS5UYWdOYW1lLkRBVEE9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJEQVRBXCIpO2dvb2cuZG9tLlRhZ05hbWUuREFUQUxJU1Q9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJEQVRBTElTVFwiKTtnb29nLmRvbS5UYWdOYW1lLkREPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiRERcIik7Z29vZy5kb20uVGFnTmFtZS5ERUw9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJERUxcIik7Z29vZy5kb20uVGFnTmFtZS5ERVRBSUxTPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiREVUQUlMU1wiKTtnb29nLmRvbS5UYWdOYW1lLkRGTj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkRGTlwiKTtnb29nLmRvbS5UYWdOYW1lLkRJQUxPRz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkRJQUxPR1wiKTtnb29nLmRvbS5UYWdOYW1lLkRJUj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkRJUlwiKTtnb29nLmRvbS5UYWdOYW1lLkRJVj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkRJVlwiKTtcbmdvb2cuZG9tLlRhZ05hbWUuREw9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJETFwiKTtnb29nLmRvbS5UYWdOYW1lLkRUPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiRFRcIik7Z29vZy5kb20uVGFnTmFtZS5FTT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkVNXCIpO2dvb2cuZG9tLlRhZ05hbWUuRU1CRUQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJFTUJFRFwiKTtnb29nLmRvbS5UYWdOYW1lLkZJRUxEU0VUPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiRklFTERTRVRcIik7Z29vZy5kb20uVGFnTmFtZS5GSUdDQVBUSU9OPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiRklHQ0FQVElPTlwiKTtnb29nLmRvbS5UYWdOYW1lLkZJR1VSRT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkZJR1VSRVwiKTtnb29nLmRvbS5UYWdOYW1lLkZPTlQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJGT05UXCIpO2dvb2cuZG9tLlRhZ05hbWUuRk9PVEVSPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiRk9PVEVSXCIpO2dvb2cuZG9tLlRhZ05hbWUuRk9STT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkZPUk1cIik7XG5nb29nLmRvbS5UYWdOYW1lLkZSQU1FPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiRlJBTUVcIik7Z29vZy5kb20uVGFnTmFtZS5GUkFNRVNFVD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkZSQU1FU0VUXCIpO2dvb2cuZG9tLlRhZ05hbWUuSDE9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJIMVwiKTtnb29nLmRvbS5UYWdOYW1lLkgyPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiSDJcIik7Z29vZy5kb20uVGFnTmFtZS5IMz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkgzXCIpO2dvb2cuZG9tLlRhZ05hbWUuSDQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJINFwiKTtnb29nLmRvbS5UYWdOYW1lLkg1PW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiSDVcIik7Z29vZy5kb20uVGFnTmFtZS5INj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkg2XCIpO2dvb2cuZG9tLlRhZ05hbWUuSEVBRD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkhFQURcIik7Z29vZy5kb20uVGFnTmFtZS5IRUFERVI9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJIRUFERVJcIik7XG5nb29nLmRvbS5UYWdOYW1lLkhHUk9VUD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkhHUk9VUFwiKTtnb29nLmRvbS5UYWdOYW1lLkhSPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiSFJcIik7Z29vZy5kb20uVGFnTmFtZS5IVE1MPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiSFRNTFwiKTtnb29nLmRvbS5UYWdOYW1lLkk9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJJXCIpO2dvb2cuZG9tLlRhZ05hbWUuSUZSQU1FPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiSUZSQU1FXCIpO2dvb2cuZG9tLlRhZ05hbWUuSU1HPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiSU1HXCIpO2dvb2cuZG9tLlRhZ05hbWUuSU5QVVQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJJTlBVVFwiKTtnb29nLmRvbS5UYWdOYW1lLklOUz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIklOU1wiKTtnb29nLmRvbS5UYWdOYW1lLklTSU5ERVg9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJJU0lOREVYXCIpO2dvb2cuZG9tLlRhZ05hbWUuS0JEPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiS0JEXCIpO1xuZ29vZy5kb20uVGFnTmFtZS5LRVlHRU49bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJLRVlHRU5cIik7Z29vZy5kb20uVGFnTmFtZS5MQUJFTD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIkxBQkVMXCIpO2dvb2cuZG9tLlRhZ05hbWUuTEVHRU5EPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiTEVHRU5EXCIpO2dvb2cuZG9tLlRhZ05hbWUuTEk9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJMSVwiKTtnb29nLmRvbS5UYWdOYW1lLkxJTks9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJMSU5LXCIpO2dvb2cuZG9tLlRhZ05hbWUuTUFJTj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIk1BSU5cIik7Z29vZy5kb20uVGFnTmFtZS5NQVA9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJNQVBcIik7Z29vZy5kb20uVGFnTmFtZS5NQVJLPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiTUFSS1wiKTtnb29nLmRvbS5UYWdOYW1lLk1BVEg9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJNQVRIXCIpO2dvb2cuZG9tLlRhZ05hbWUuTUVOVT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIk1FTlVcIik7XG5nb29nLmRvbS5UYWdOYW1lLk1FTlVJVEVNPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiTUVOVUlURU1cIik7Z29vZy5kb20uVGFnTmFtZS5NRVRBPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiTUVUQVwiKTtnb29nLmRvbS5UYWdOYW1lLk1FVEVSPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiTUVURVJcIik7Z29vZy5kb20uVGFnTmFtZS5OQVY9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJOQVZcIik7Z29vZy5kb20uVGFnTmFtZS5OT0ZSQU1FUz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIk5PRlJBTUVTXCIpO2dvb2cuZG9tLlRhZ05hbWUuTk9TQ1JJUFQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJOT1NDUklQVFwiKTtnb29nLmRvbS5UYWdOYW1lLk9CSkVDVD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIk9CSkVDVFwiKTtnb29nLmRvbS5UYWdOYW1lLk9MPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiT0xcIik7Z29vZy5kb20uVGFnTmFtZS5PUFRHUk9VUD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIk9QVEdST1VQXCIpO1xuZ29vZy5kb20uVGFnTmFtZS5PUFRJT049bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJPUFRJT05cIik7Z29vZy5kb20uVGFnTmFtZS5PVVRQVVQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJPVVRQVVRcIik7Z29vZy5kb20uVGFnTmFtZS5QPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUFwiKTtnb29nLmRvbS5UYWdOYW1lLlBBUkFNPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUEFSQU1cIik7Z29vZy5kb20uVGFnTmFtZS5QSUNUVVJFPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUElDVFVSRVwiKTtnb29nLmRvbS5UYWdOYW1lLlBSRT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlBSRVwiKTtnb29nLmRvbS5UYWdOYW1lLlBST0dSRVNTPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUFJPR1JFU1NcIik7Z29vZy5kb20uVGFnTmFtZS5RPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUVwiKTtnb29nLmRvbS5UYWdOYW1lLlJQPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUlBcIik7Z29vZy5kb20uVGFnTmFtZS5SVD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlJUXCIpO1xuZ29vZy5kb20uVGFnTmFtZS5SVEM9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJSVENcIik7Z29vZy5kb20uVGFnTmFtZS5SVUJZPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiUlVCWVwiKTtnb29nLmRvbS5UYWdOYW1lLlM9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJTXCIpO2dvb2cuZG9tLlRhZ05hbWUuU0FNUD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlNBTVBcIik7Z29vZy5kb20uVGFnTmFtZS5TQ1JJUFQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJTQ1JJUFRcIik7Z29vZy5kb20uVGFnTmFtZS5TRUNUSU9OPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU0VDVElPTlwiKTtnb29nLmRvbS5UYWdOYW1lLlNFTEVDVD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlNFTEVDVFwiKTtnb29nLmRvbS5UYWdOYW1lLlNNQUxMPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU01BTExcIik7Z29vZy5kb20uVGFnTmFtZS5TT1VSQ0U9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJTT1VSQ0VcIik7Z29vZy5kb20uVGFnTmFtZS5TUEFOPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU1BBTlwiKTtcbmdvb2cuZG9tLlRhZ05hbWUuU1RSSUtFPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU1RSSUtFXCIpO2dvb2cuZG9tLlRhZ05hbWUuU1RST05HPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU1RST05HXCIpO2dvb2cuZG9tLlRhZ05hbWUuU1RZTEU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJTVFlMRVwiKTtnb29nLmRvbS5UYWdOYW1lLlNVQj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlNVQlwiKTtnb29nLmRvbS5UYWdOYW1lLlNVTU1BUlk9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJTVU1NQVJZXCIpO2dvb2cuZG9tLlRhZ05hbWUuU1VQPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU1VQXCIpO2dvb2cuZG9tLlRhZ05hbWUuU1ZHPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiU1ZHXCIpO2dvb2cuZG9tLlRhZ05hbWUuVEFCTEU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJUQUJMRVwiKTtnb29nLmRvbS5UYWdOYW1lLlRCT0RZPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiVEJPRFlcIik7Z29vZy5kb20uVGFnTmFtZS5URD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlREXCIpO1xuZ29vZy5kb20uVGFnTmFtZS5URU1QTEFURT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlRFTVBMQVRFXCIpO2dvb2cuZG9tLlRhZ05hbWUuVEVYVEFSRUE9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJURVhUQVJFQVwiKTtnb29nLmRvbS5UYWdOYW1lLlRGT09UPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiVEZPT1RcIik7Z29vZy5kb20uVGFnTmFtZS5USD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlRIXCIpO2dvb2cuZG9tLlRhZ05hbWUuVEhFQUQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJUSEVBRFwiKTtnb29nLmRvbS5UYWdOYW1lLlRJTUU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJUSU1FXCIpO2dvb2cuZG9tLlRhZ05hbWUuVElUTEU9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJUSVRMRVwiKTtnb29nLmRvbS5UYWdOYW1lLlRSPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiVFJcIik7Z29vZy5kb20uVGFnTmFtZS5UUkFDSz1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlRSQUNLXCIpO2dvb2cuZG9tLlRhZ05hbWUuVFQ9bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJUVFwiKTtcbmdvb2cuZG9tLlRhZ05hbWUuVT1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlVcIik7Z29vZy5kb20uVGFnTmFtZS5VTD1uZXcgZ29vZy5kb20uVGFnTmFtZShcIlVMXCIpO2dvb2cuZG9tLlRhZ05hbWUuVkFSPW5ldyBnb29nLmRvbS5UYWdOYW1lKFwiVkFSXCIpO2dvb2cuZG9tLlRhZ05hbWUuVklERU89bmV3IGdvb2cuZG9tLlRhZ05hbWUoXCJWSURFT1wiKTtnb29nLmRvbS5UYWdOYW1lLldCUj1uZXcgZ29vZy5kb20uVGFnTmFtZShcIldCUlwiKTtnb29nLmRvbS50YWdzPXt9O2dvb2cuZG9tLnRhZ3MuVk9JRF9UQUdTXz17YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxjb21tYW5kOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9O2dvb2cuZG9tLnRhZ3MuaXNWb2lkVGFnPWZ1bmN0aW9uKGEpe3JldHVybiEwPT09Z29vZy5kb20udGFncy5WT0lEX1RBR1NfW2FdfTtnb29nLmh0bWw9e307Z29vZy5odG1sLnRydXN0ZWR0eXBlcz17fTtnb29nLmh0bWwudHJ1c3RlZHR5cGVzLlBSSVZBVEVfRE9fTk9UX0FDQ0VTU19PUl9FTFNFX1BPTElDWT1nb29nLlRSVVNURURfVFlQRVNfUE9MSUNZX05BTUU/Z29vZy5jcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3koZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV9OQU1FK1wiI2h0bWxcIik6bnVsbDtnb29nLnN0cmluZz17fTtnb29nLnN0cmluZy5UeXBlZFN0cmluZz1mdW5jdGlvbigpe307Z29vZy5zdHJpbmcuQ29uc3Q9ZnVuY3Rpb24oYSxiKXt0aGlzLnN0cmluZ0NvbnN0VmFsdWVXaXRoU2VjdXJpdHlDb250cmFjdF9fZ29vZ1N0cmluZ1NlY3VyaXR5UHJpdmF0ZV89YT09PWdvb2cuc3RyaW5nLkNvbnN0LkdPT0dfU1RSSU5HX0NPTlNUUlVDVE9SX1RPS0VOX1BSSVZBVEVfJiZifHxcIlwiO3RoaXMuU1RSSU5HX0NPTlNUX1RZUEVfTUFSS0VSX19HT09HX1NUUklOR19TRUNVUklUWV9QUklWQVRFXz1nb29nLnN0cmluZy5Db25zdC5UWVBFX01BUktFUl99O2dvb2cuc3RyaW5nLkNvbnN0LnByb3RvdHlwZS5pbXBsZW1lbnRzR29vZ1N0cmluZ1R5cGVkU3RyaW5nPSEwO2dvb2cuc3RyaW5nLkNvbnN0LnByb3RvdHlwZS5nZXRUeXBlZFN0cmluZ1ZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RyaW5nQ29uc3RWYWx1ZVdpdGhTZWN1cml0eUNvbnRyYWN0X19nb29nU3RyaW5nU2VjdXJpdHlQcml2YXRlX307XG5nb29nLnN0cmluZy5Db25zdC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIkNvbnN0e1wiK3RoaXMuc3RyaW5nQ29uc3RWYWx1ZVdpdGhTZWN1cml0eUNvbnRyYWN0X19nb29nU3RyaW5nU2VjdXJpdHlQcml2YXRlXytcIn1cIn07Z29vZy5zdHJpbmcuQ29uc3QudW53cmFwPWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBnb29nLnN0cmluZy5Db25zdCYmYS5jb25zdHJ1Y3Rvcj09PWdvb2cuc3RyaW5nLkNvbnN0JiZhLlNUUklOR19DT05TVF9UWVBFX01BUktFUl9fR09PR19TVFJJTkdfU0VDVVJJVFlfUFJJVkFURV89PT1nb29nLnN0cmluZy5Db25zdC5UWVBFX01BUktFUl8pcmV0dXJuIGEuc3RyaW5nQ29uc3RWYWx1ZVdpdGhTZWN1cml0eUNvbnRyYWN0X19nb29nU3RyaW5nU2VjdXJpdHlQcml2YXRlXztnb29nLmFzc2VydHMuZmFpbChcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIENvbnN0LCBnb3QgJ1wiK2ErXCInXCIpO3JldHVyblwidHlwZV9lcnJvcjpDb25zdFwifTtcbmdvb2cuc3RyaW5nLkNvbnN0LmZyb209ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBnb29nLnN0cmluZy5Db25zdChnb29nLnN0cmluZy5Db25zdC5HT09HX1NUUklOR19DT05TVFJVQ1RPUl9UT0tFTl9QUklWQVRFXyxhKX07Z29vZy5zdHJpbmcuQ29uc3QuVFlQRV9NQVJLRVJfPXt9O2dvb2cuc3RyaW5nLkNvbnN0LkdPT0dfU1RSSU5HX0NPTlNUUlVDVE9SX1RPS0VOX1BSSVZBVEVfPXt9O2dvb2cuc3RyaW5nLkNvbnN0LkVNUFRZPWdvb2cuc3RyaW5nLkNvbnN0LmZyb20oXCJcIik7Z29vZy5odG1sLlNhZmVTY3JpcHQ9ZnVuY3Rpb24oKXt0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTY3JpcHRXcmFwcGVkVmFsdWVfPVwiXCI7dGhpcy5TQUZFX1NDUklQVF9UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV89Z29vZy5odG1sLlNhZmVTY3JpcHQuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVffTtnb29nLmh0bWwuU2FmZVNjcmlwdC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZz0hMDtnb29nLmh0bWwuU2FmZVNjcmlwdC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV89e307Z29vZy5odG1sLlNhZmVTY3JpcHQuZnJvbUNvbnN0YW50PWZ1bmN0aW9uKGEpe2E9Z29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpO3JldHVybiAwPT09YS5sZW5ndGg/Z29vZy5odG1sLlNhZmVTY3JpcHQuRU1QVFk6Z29vZy5odG1sLlNhZmVTY3JpcHQuY3JlYXRlU2FmZVNjcmlwdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGEpfTtcbmdvb2cuaHRtbC5TYWZlU2NyaXB0LmZyb21Db25zdGFudEFuZEFyZ3M9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W10sZD0xO2Q8YXJndW1lbnRzLmxlbmd0aDtkKyspYy5wdXNoKGdvb2cuaHRtbC5TYWZlU2NyaXB0LnN0cmluZ2lmeV8oYXJndW1lbnRzW2RdKSk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlU2NyaXB0LmNyZWF0ZVNhZmVTY3JpcHRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcIihcIitnb29nLnN0cmluZy5Db25zdC51bndyYXAoYSkrXCIpKFwiK2Muam9pbihcIiwgXCIpK1wiKTtcIil9O2dvb2cuaHRtbC5TYWZlU2NyaXB0LmZyb21Kc29uPWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmh0bWwuU2FmZVNjcmlwdC5jcmVhdGVTYWZlU2NyaXB0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoZ29vZy5odG1sLlNhZmVTY3JpcHQuc3RyaW5naWZ5XyhhKSl9O2dvb2cuaHRtbC5TYWZlU2NyaXB0LnByb3RvdHlwZS5nZXRUeXBlZFN0cmluZ1ZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVNjcmlwdFdyYXBwZWRWYWx1ZV8udG9TdHJpbmcoKX07XG5nb29nLkRFQlVHJiYoZ29vZy5odG1sLlNhZmVTY3JpcHQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJTYWZlU2NyaXB0e1wiK3RoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVNjcmlwdFdyYXBwZWRWYWx1ZV8rXCJ9XCJ9KTtnb29nLmh0bWwuU2FmZVNjcmlwdC51bndyYXA9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaHRtbC5TYWZlU2NyaXB0LnVud3JhcFRydXN0ZWRTY3JpcHQoYSkudG9TdHJpbmcoKX07XG5nb29nLmh0bWwuU2FmZVNjcmlwdC51bndyYXBUcnVzdGVkU2NyaXB0PWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVNjcmlwdCYmYS5jb25zdHJ1Y3Rvcj09PWdvb2cuaHRtbC5TYWZlU2NyaXB0JiZhLlNBRkVfU0NSSVBUX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz09PWdvb2cuaHRtbC5TYWZlU2NyaXB0LlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXylyZXR1cm4gYS5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlU2NyaXB0V3JhcHBlZFZhbHVlXztnb29nLmFzc2VydHMuZmFpbChcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVTY3JpcHQsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitnb29nLnR5cGVPZihhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVTY3JpcHRcIn07XG5nb29nLmh0bWwuU2FmZVNjcmlwdC5zdHJpbmdpZnlfPWZ1bmN0aW9uKGEpe3JldHVybiBKU09OLnN0cmluZ2lmeShhKS5yZXBsYWNlKC88L2csXCJcXFxceDNjXCIpfTtnb29nLmh0bWwuU2FmZVNjcmlwdC5jcmVhdGVTYWZlU2NyaXB0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2U9ZnVuY3Rpb24oYSl7cmV0dXJuKG5ldyBnb29nLmh0bWwuU2FmZVNjcmlwdCkuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXyhhKX07XG5nb29nLmh0bWwuU2FmZVNjcmlwdC5wcm90b3R5cGUuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXz1mdW5jdGlvbihhKXt0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTY3JpcHRXcmFwcGVkVmFsdWVfPWdvb2cuaHRtbC50cnVzdGVkdHlwZXMuUFJJVkFURV9ET19OT1RfQUNDRVNTX09SX0VMU0VfUE9MSUNZP2dvb2cuaHRtbC50cnVzdGVkdHlwZXMuUFJJVkFURV9ET19OT1RfQUNDRVNTX09SX0VMU0VfUE9MSUNZLmNyZWF0ZVNjcmlwdChhKTphO3JldHVybiB0aGlzfTtnb29nLmh0bWwuU2FmZVNjcmlwdC5FTVBUWT1nb29nLmh0bWwuU2FmZVNjcmlwdC5jcmVhdGVTYWZlU2NyaXB0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXCJcIik7Z29vZy5mcz17fTtnb29nLmZzLnVybD17fTtnb29nLmZzLnVybC5jcmVhdGVPYmplY3RVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuZnMudXJsLmdldFVybE9iamVjdF8oKS5jcmVhdGVPYmplY3RVUkwoYSl9O2dvb2cuZnMudXJsLnJldm9rZU9iamVjdFVybD1mdW5jdGlvbihhKXtnb29nLmZzLnVybC5nZXRVcmxPYmplY3RfKCkucmV2b2tlT2JqZWN0VVJMKGEpfTtnb29nLmZzLnVybC5nZXRVcmxPYmplY3RfPWZ1bmN0aW9uKCl7dmFyIGE9Z29vZy5mcy51cmwuZmluZFVybE9iamVjdF8oKTtpZihudWxsIT1hKXJldHVybiBhO3Rocm93IEVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IGJsb2IgVVJMc1wiKTt9O1xuZ29vZy5mcy51cmwuZmluZFVybE9iamVjdF89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5pc0RlZihnb29nLmdsb2JhbC5VUkwpJiZnb29nLmlzRGVmKGdvb2cuZ2xvYmFsLlVSTC5jcmVhdGVPYmplY3RVUkwpP2dvb2cuZ2xvYmFsLlVSTDpnb29nLmlzRGVmKGdvb2cuZ2xvYmFsLndlYmtpdFVSTCkmJmdvb2cuaXNEZWYoZ29vZy5nbG9iYWwud2Via2l0VVJMLmNyZWF0ZU9iamVjdFVSTCk/Z29vZy5nbG9iYWwud2Via2l0VVJMOmdvb2cuaXNEZWYoZ29vZy5nbG9iYWwuY3JlYXRlT2JqZWN0VVJMKT9nb29nLmdsb2JhbDpudWxsfTtnb29nLmZzLnVybC5icm93c2VyU3VwcG9ydHNPYmplY3RVcmxzPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPWdvb2cuZnMudXJsLmZpbmRVcmxPYmplY3RfKCl9O2dvb2cuaTE4bj17fTtnb29nLmkxOG4uYmlkaT17fTtnb29nLmkxOG4uYmlkaS5GT1JDRV9SVEw9ITE7XG5nb29nLmkxOG4uYmlkaS5JU19SVEw9Z29vZy5pMThuLmJpZGkuRk9SQ0VfUlRMfHwoXCJhclwiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoMCwyKS50b0xvd2VyQ2FzZSgpfHxcImZhXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygwLDIpLnRvTG93ZXJDYXNlKCl8fFwiaGVcIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsMikudG9Mb3dlckNhc2UoKXx8XCJpd1wiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoMCwyKS50b0xvd2VyQ2FzZSgpfHxcInBzXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygwLDIpLnRvTG93ZXJDYXNlKCl8fFwic2RcIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsMikudG9Mb3dlckNhc2UoKXx8XCJ1Z1wiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoMCwyKS50b0xvd2VyQ2FzZSgpfHxcInVyXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygwLDIpLnRvTG93ZXJDYXNlKCl8fFwieWlcIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDAsMikudG9Mb3dlckNhc2UoKSkmJigyPT1nb29nLkxPQ0FMRS5sZW5ndGh8fFxuXCItXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygyLDMpfHxcIl9cIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDIsMykpfHwzPD1nb29nLkxPQ0FMRS5sZW5ndGgmJlwiY2tiXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygwLDMpLnRvTG93ZXJDYXNlKCkmJigzPT1nb29nLkxPQ0FMRS5sZW5ndGh8fFwiLVwiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoMyw0KXx8XCJfXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygzLDQpKXx8Nzw9Z29vZy5MT0NBTEUubGVuZ3RoJiYoXCItXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygyLDMpfHxcIl9cIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDIsMykpJiYoXCJhZGxtXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygzLDcpLnRvTG93ZXJDYXNlKCl8fFwiYXJhYlwiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoMyw3KS50b0xvd2VyQ2FzZSgpfHxcImhlYnJcIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDMsNykudG9Mb3dlckNhc2UoKXx8XCJua29vXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygzLFxuNykudG9Mb3dlckNhc2UoKXx8XCJyb2hnXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygzLDcpLnRvTG93ZXJDYXNlKCl8fFwidGhhYVwiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoMyw3KS50b0xvd2VyQ2FzZSgpKXx8ODw9Z29vZy5MT0NBTEUubGVuZ3RoJiYoXCItXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZygzLDQpfHxcIl9cIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDMsNCkpJiYoXCJhZGxtXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZyg0LDgpLnRvTG93ZXJDYXNlKCl8fFwiYXJhYlwiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoNCw4KS50b0xvd2VyQ2FzZSgpfHxcImhlYnJcIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDQsOCkudG9Mb3dlckNhc2UoKXx8XCJua29vXCI9PWdvb2cuTE9DQUxFLnN1YnN0cmluZyg0LDgpLnRvTG93ZXJDYXNlKCl8fFwicm9oZ1wiPT1nb29nLkxPQ0FMRS5zdWJzdHJpbmcoNCw4KS50b0xvd2VyQ2FzZSgpfHxcInRoYWFcIj09Z29vZy5MT0NBTEUuc3Vic3RyaW5nKDQsOCkudG9Mb3dlckNhc2UoKSk7XG5nb29nLmkxOG4uYmlkaS5Gb3JtYXQ9e0xSRTpcIlxcdTIwMmFcIixSTEU6XCJcXHUyMDJiXCIsUERGOlwiXFx1MjAyY1wiLExSTTpcIlxcdTIwMGVcIixSTE06XCJcXHUyMDBmXCJ9O2dvb2cuaTE4bi5iaWRpLkRpcj17TFRSOjEsUlRMOi0xLE5FVVRSQUw6MH07Z29vZy5pMThuLmJpZGkuUklHSFQ9XCJyaWdodFwiO2dvb2cuaTE4bi5iaWRpLkxFRlQ9XCJsZWZ0XCI7Z29vZy5pMThuLmJpZGkuSTE4Tl9SSUdIVD1nb29nLmkxOG4uYmlkaS5JU19SVEw/Z29vZy5pMThuLmJpZGkuTEVGVDpnb29nLmkxOG4uYmlkaS5SSUdIVDtnb29nLmkxOG4uYmlkaS5JMThOX0xFRlQ9Z29vZy5pMThuLmJpZGkuSVNfUlRMP2dvb2cuaTE4bi5iaWRpLlJJR0hUOmdvb2cuaTE4bi5iaWRpLkxFRlQ7XG5nb29nLmkxOG4uYmlkaS50b0Rpcj1mdW5jdGlvbihhLGIpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBhPzA8YT9nb29nLmkxOG4uYmlkaS5EaXIuTFRSOjA+YT9nb29nLmkxOG4uYmlkaS5EaXIuUlRMOmI/bnVsbDpnb29nLmkxOG4uYmlkaS5EaXIuTkVVVFJBTDpudWxsPT1hP251bGw6YT9nb29nLmkxOG4uYmlkaS5EaXIuUlRMOmdvb2cuaTE4bi5iaWRpLkRpci5MVFJ9O2dvb2cuaTE4bi5iaWRpLmx0ckNoYXJzXz1cIkEtWmEtelxcdTAwYzAtXFx1MDBkNlxcdTAwZDgtXFx1MDBmNlxcdTAwZjgtXFx1MDJiOFxcdTAzMDAtXFx1MDU5MFxcdTA5MDAtXFx1MWZmZlxcdTIwMGVcXHUyYzAwLVxcdWQ4MDFcXHVkODA0LVxcdWQ4MzlcXHVkODNjLVxcdWRiZmZcXHVmOTAwLVxcdWZiMWNcXHVmZTAwLVxcdWZlNmZcXHVmZWZkLVxcdWZmZmZcIjtnb29nLmkxOG4uYmlkaS5ydGxDaGFyc189XCJcXHUwNTkxLVxcdTA2ZWZcXHUwNmZhLVxcdTA4ZmZcXHUyMDBmXFx1ZDgwMi1cXHVkODAzXFx1ZDgzYS1cXHVkODNiXFx1ZmIxZC1cXHVmZGZmXFx1ZmU3MC1cXHVmZWZjXCI7XG5nb29nLmkxOG4uYmlkaS5odG1sU2tpcFJlZ189LzxbXj5dKj58JlteO10rOy9nO2dvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXz1mdW5jdGlvbihhLGIpe3JldHVybiBiP2EucmVwbGFjZShnb29nLmkxOG4uYmlkaS5odG1sU2tpcFJlZ18sXCJcIik6YX07Z29vZy5pMThuLmJpZGkucnRsQ2hhclJlZ189bmV3IFJlZ0V4cChcIltcIitnb29nLmkxOG4uYmlkaS5ydGxDaGFyc18rXCJdXCIpO2dvb2cuaTE4bi5iaWRpLmx0ckNoYXJSZWdfPW5ldyBSZWdFeHAoXCJbXCIrZ29vZy5pMThuLmJpZGkubHRyQ2hhcnNfK1wiXVwiKTtnb29nLmkxOG4uYmlkaS5oYXNBbnlSdGw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ29vZy5pMThuLmJpZGkucnRsQ2hhclJlZ18udGVzdChnb29nLmkxOG4uYmlkaS5zdHJpcEh0bWxJZk5lZWRlZF8oYSxiKSl9O2dvb2cuaTE4bi5iaWRpLmhhc1J0bENoYXI9Z29vZy5pMThuLmJpZGkuaGFzQW55UnRsO1xuZ29vZy5pMThuLmJpZGkuaGFzQW55THRyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLmx0ckNoYXJSZWdfLnRlc3QoZ29vZy5pMThuLmJpZGkuc3RyaXBIdG1sSWZOZWVkZWRfKGEsYikpfTtnb29nLmkxOG4uYmlkaS5sdHJSZV89bmV3IFJlZ0V4cChcIl5bXCIrZ29vZy5pMThuLmJpZGkubHRyQ2hhcnNfK1wiXVwiKTtnb29nLmkxOG4uYmlkaS5ydGxSZV89bmV3IFJlZ0V4cChcIl5bXCIrZ29vZy5pMThuLmJpZGkucnRsQ2hhcnNfK1wiXVwiKTtnb29nLmkxOG4uYmlkaS5pc1J0bENoYXI9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLnJ0bFJlXy50ZXN0KGEpfTtnb29nLmkxOG4uYmlkaS5pc0x0ckNoYXI9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLmx0clJlXy50ZXN0KGEpfTtnb29nLmkxOG4uYmlkaS5pc05ldXRyYWxDaGFyPWZ1bmN0aW9uKGEpe3JldHVybiFnb29nLmkxOG4uYmlkaS5pc0x0ckNoYXIoYSkmJiFnb29nLmkxOG4uYmlkaS5pc1J0bENoYXIoYSl9O1xuZ29vZy5pMThuLmJpZGkubHRyRGlyQ2hlY2tSZV89bmV3IFJlZ0V4cChcIl5bXlwiK2dvb2cuaTE4bi5iaWRpLnJ0bENoYXJzXytcIl0qW1wiK2dvb2cuaTE4bi5iaWRpLmx0ckNoYXJzXytcIl1cIik7Z29vZy5pMThuLmJpZGkucnRsRGlyQ2hlY2tSZV89bmV3IFJlZ0V4cChcIl5bXlwiK2dvb2cuaTE4bi5iaWRpLmx0ckNoYXJzXytcIl0qW1wiK2dvb2cuaTE4bi5iaWRpLnJ0bENoYXJzXytcIl1cIik7Z29vZy5pMThuLmJpZGkuc3RhcnRzV2l0aFJ0bD1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLmkxOG4uYmlkaS5ydGxEaXJDaGVja1JlXy50ZXN0KGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhhLGIpKX07Z29vZy5pMThuLmJpZGkuaXNSdGxUZXh0PWdvb2cuaTE4bi5iaWRpLnN0YXJ0c1dpdGhSdGw7XG5nb29nLmkxOG4uYmlkaS5zdGFydHNXaXRoTHRyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLmx0ckRpckNoZWNrUmVfLnRlc3QoZ29vZy5pMThuLmJpZGkuc3RyaXBIdG1sSWZOZWVkZWRfKGEsYikpfTtnb29nLmkxOG4uYmlkaS5pc0x0clRleHQ9Z29vZy5pMThuLmJpZGkuc3RhcnRzV2l0aEx0cjtnb29nLmkxOG4uYmlkaS5pc1JlcXVpcmVkTHRyUmVfPS9eaHR0cDpcXC9cXC8uKi87Z29vZy5pMThuLmJpZGkuaXNOZXV0cmFsVGV4dD1mdW5jdGlvbihhLGIpe2E9Z29vZy5pMThuLmJpZGkuc3RyaXBIdG1sSWZOZWVkZWRfKGEsYik7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLmlzUmVxdWlyZWRMdHJSZV8udGVzdChhKXx8IWdvb2cuaTE4bi5iaWRpLmhhc0FueUx0cihhKSYmIWdvb2cuaTE4bi5iaWRpLmhhc0FueVJ0bChhKX07XG5nb29nLmkxOG4uYmlkaS5sdHJFeGl0RGlyQ2hlY2tSZV89bmV3IFJlZ0V4cChcIltcIitnb29nLmkxOG4uYmlkaS5sdHJDaGFyc18rXCJdW15cIitnb29nLmkxOG4uYmlkaS5ydGxDaGFyc18rXCJdKiRcIik7Z29vZy5pMThuLmJpZGkucnRsRXhpdERpckNoZWNrUmVfPW5ldyBSZWdFeHAoXCJbXCIrZ29vZy5pMThuLmJpZGkucnRsQ2hhcnNfK1wiXVteXCIrZ29vZy5pMThuLmJpZGkubHRyQ2hhcnNfK1wiXSokXCIpO2dvb2cuaTE4bi5iaWRpLmVuZHNXaXRoTHRyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLmx0ckV4aXREaXJDaGVja1JlXy50ZXN0KGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhhLGIpKX07Z29vZy5pMThuLmJpZGkuaXNMdHJFeGl0VGV4dD1nb29nLmkxOG4uYmlkaS5lbmRzV2l0aEx0cjtcbmdvb2cuaTE4bi5iaWRpLmVuZHNXaXRoUnRsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLnJ0bEV4aXREaXJDaGVja1JlXy50ZXN0KGdvb2cuaTE4bi5iaWRpLnN0cmlwSHRtbElmTmVlZGVkXyhhLGIpKX07Z29vZy5pMThuLmJpZGkuaXNSdGxFeGl0VGV4dD1nb29nLmkxOG4uYmlkaS5lbmRzV2l0aFJ0bDtnb29nLmkxOG4uYmlkaS5ydGxMb2NhbGVzUmVfPS9eKGFyfGNrYnxkdnxoZXxpd3xmYXxucW98cHN8c2R8dWd8dXJ8eWl8LipbLV9dKEFkbG18QXJhYnxIZWJyfE5rb298Um9oZ3xUaGFhKSkoPyEuKlstX10oTGF0bnxDeXJsKSgkfC18XykpKCR8LXxfKS9pO2dvb2cuaTE4bi5iaWRpLmlzUnRsTGFuZ3VhZ2U9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaTE4bi5iaWRpLnJ0bExvY2FsZXNSZV8udGVzdChhKX07Z29vZy5pMThuLmJpZGkuYnJhY2tldEd1YXJkVGV4dFJlXz0vKFxcKC4qP1xcKSspfChcXFsuKj9cXF0rKXwoXFx7Lio/XFx9Kyl8KDwuKj8+KykvZztcbmdvb2cuaTE4bi5iaWRpLmd1YXJkQnJhY2tldEluVGV4dD1mdW5jdGlvbihhLGIpe2I9KHZvaWQgMD09PWI/Z29vZy5pMThuLmJpZGkuaGFzQW55UnRsKGEpOmIpP2dvb2cuaTE4bi5iaWRpLkZvcm1hdC5STE06Z29vZy5pMThuLmJpZGkuRm9ybWF0LkxSTTtyZXR1cm4gYS5yZXBsYWNlKGdvb2cuaTE4bi5iaWRpLmJyYWNrZXRHdWFyZFRleHRSZV8sYitcIiQmXCIrYil9O2dvb2cuaTE4bi5iaWRpLmVuZm9yY2VSdGxJbkh0bWw9ZnVuY3Rpb24oYSl7cmV0dXJuXCI8XCI9PWEuY2hhckF0KDApP2EucmVwbGFjZSgvPFxcdysvLFwiJCYgZGlyPXJ0bFwiKTpcIlxcbjxzcGFuIGRpcj1ydGw+XCIrYStcIjwvc3Bhbj5cIn07Z29vZy5pMThuLmJpZGkuZW5mb3JjZVJ0bEluVGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5pMThuLmJpZGkuRm9ybWF0LlJMRSthK2dvb2cuaTE4bi5iaWRpLkZvcm1hdC5QREZ9O1xuZ29vZy5pMThuLmJpZGkuZW5mb3JjZUx0ckluSHRtbD1mdW5jdGlvbihhKXtyZXR1cm5cIjxcIj09YS5jaGFyQXQoMCk/YS5yZXBsYWNlKC88XFx3Ky8sXCIkJiBkaXI9bHRyXCIpOlwiXFxuPHNwYW4gZGlyPWx0cj5cIithK1wiPC9zcGFuPlwifTtnb29nLmkxOG4uYmlkaS5lbmZvcmNlTHRySW5UZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmkxOG4uYmlkaS5Gb3JtYXQuTFJFK2ErZ29vZy5pMThuLmJpZGkuRm9ybWF0LlBERn07Z29vZy5pMThuLmJpZGkuZGltZW5zaW9uc1JlXz0vOlxccyooWy5cXGRdWy5cXHddKilcXHMrKFsuXFxkXVsuXFx3XSopXFxzKyhbLlxcZF1bLlxcd10qKVxccysoWy5cXGRdWy5cXHddKikvZztnb29nLmkxOG4uYmlkaS5sZWZ0UmVfPS9sZWZ0L2dpO2dvb2cuaTE4bi5iaWRpLnJpZ2h0UmVfPS9yaWdodC9naTtnb29nLmkxOG4uYmlkaS50ZW1wUmVfPS8lJSUlL2c7XG5nb29nLmkxOG4uYmlkaS5taXJyb3JDU1M9ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZShnb29nLmkxOG4uYmlkaS5kaW1lbnNpb25zUmVfLFwiOiQxICQ0ICQzICQyXCIpLnJlcGxhY2UoZ29vZy5pMThuLmJpZGkubGVmdFJlXyxcIiUlJSVcIikucmVwbGFjZShnb29nLmkxOG4uYmlkaS5yaWdodFJlXyxnb29nLmkxOG4uYmlkaS5MRUZUKS5yZXBsYWNlKGdvb2cuaTE4bi5iaWRpLnRlbXBSZV8sZ29vZy5pMThuLmJpZGkuUklHSFQpfTtnb29nLmkxOG4uYmlkaS5kb3VibGVRdW90ZVN1YnN0aXR1dGVSZV89LyhbXFx1MDU5MS1cXHUwNWYyXSlcIi9nO2dvb2cuaTE4bi5iaWRpLnNpbmdsZVF1b3RlU3Vic3RpdHV0ZVJlXz0vKFtcXHUwNTkxLVxcdTA1ZjJdKScvZztcbmdvb2cuaTE4bi5iaWRpLm5vcm1hbGl6ZUhlYnJld1F1b3RlPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoZ29vZy5pMThuLmJpZGkuZG91YmxlUXVvdGVTdWJzdGl0dXRlUmVfLFwiJDFcXHUwNWY0XCIpLnJlcGxhY2UoZ29vZy5pMThuLmJpZGkuc2luZ2xlUXVvdGVTdWJzdGl0dXRlUmVfLFwiJDFcXHUwNWYzXCIpfTtnb29nLmkxOG4uYmlkaS53b3JkU2VwYXJhdG9yUmVfPS9cXHMrLztnb29nLmkxOG4uYmlkaS5oYXNOdW1lcmFsc1JlXz0vW1xcZFxcdTA2ZjAtXFx1MDZmOV0vO2dvb2cuaTE4bi5iaWRpLnJ0bERldGVjdGlvblRocmVzaG9sZF89LjQ7XG5nb29nLmkxOG4uYmlkaS5lc3RpbWF0ZURpcmVjdGlvbj1mdW5jdGlvbihhLGIpe3ZhciBjPTAsZD0wLGU9ITE7YT1nb29nLmkxOG4uYmlkaS5zdHJpcEh0bWxJZk5lZWRlZF8oYSxiKS5zcGxpdChnb29nLmkxOG4uYmlkaS53b3JkU2VwYXJhdG9yUmVfKTtmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZj1hW2JdO2dvb2cuaTE4bi5iaWRpLnN0YXJ0c1dpdGhSdGwoZik/KGMrKyxkKyspOmdvb2cuaTE4bi5iaWRpLmlzUmVxdWlyZWRMdHJSZV8udGVzdChmKT9lPSEwOmdvb2cuaTE4bi5iaWRpLmhhc0FueUx0cihmKT9kKys6Z29vZy5pMThuLmJpZGkuaGFzTnVtZXJhbHNSZV8udGVzdChmKSYmKGU9ITApfXJldHVybiAwPT1kP2U/Z29vZy5pMThuLmJpZGkuRGlyLkxUUjpnb29nLmkxOG4uYmlkaS5EaXIuTkVVVFJBTDpjL2Q+Z29vZy5pMThuLmJpZGkucnRsRGV0ZWN0aW9uVGhyZXNob2xkXz9nb29nLmkxOG4uYmlkaS5EaXIuUlRMOmdvb2cuaTE4bi5iaWRpLkRpci5MVFJ9O1xuZ29vZy5pMThuLmJpZGkuZGV0ZWN0UnRsRGlyZWN0aW9uYWxpdHk9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ29vZy5pMThuLmJpZGkuZXN0aW1hdGVEaXJlY3Rpb24oYSxiKT09Z29vZy5pMThuLmJpZGkuRGlyLlJUTH07Z29vZy5pMThuLmJpZGkuc2V0RWxlbWVudERpckFuZEFsaWduPWZ1bmN0aW9uKGEsYil7YSYmKGI9Z29vZy5pMThuLmJpZGkudG9EaXIoYikpJiYoYS5zdHlsZS50ZXh0QWxpZ249Yj09Z29vZy5pMThuLmJpZGkuRGlyLlJUTD9nb29nLmkxOG4uYmlkaS5SSUdIVDpnb29nLmkxOG4uYmlkaS5MRUZULGEuZGlyPWI9PWdvb2cuaTE4bi5iaWRpLkRpci5SVEw/XCJydGxcIjpcImx0clwiKX07XG5nb29nLmkxOG4uYmlkaS5zZXRFbGVtZW50RGlyQnlUZXh0RGlyZWN0aW9uYWxpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goZ29vZy5pMThuLmJpZGkuZXN0aW1hdGVEaXJlY3Rpb24oYikpe2Nhc2UgZ29vZy5pMThuLmJpZGkuRGlyLkxUUjphLmRpcj1cImx0clwiO2JyZWFrO2Nhc2UgZ29vZy5pMThuLmJpZGkuRGlyLlJUTDphLmRpcj1cInJ0bFwiO2JyZWFrO2RlZmF1bHQ6YS5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIil9fTtnb29nLmkxOG4uYmlkaS5EaXJlY3Rpb25hbFN0cmluZz1mdW5jdGlvbigpe307Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybD1mdW5jdGlvbigpe3RoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlVHJ1c3RlZFJlc291cmNlVXJsV3JhcHBlZFZhbHVlXz1cIlwiO3RoaXMudHJ1c3RlZFVSTF89bnVsbDt0aGlzLlRSVVNURURfUkVTT1VSQ0VfVVJMX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz1nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFX307Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZz0hMDtnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnByb3RvdHlwZS5nZXRUeXBlZFN0cmluZ1ZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlVHJ1c3RlZFJlc291cmNlVXJsV3JhcHBlZFZhbHVlXy50b1N0cmluZygpfTtcbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwucHJvdG90eXBlLmltcGxlbWVudHNHb29nSTE4bkJpZGlEaXJlY3Rpb25hbFN0cmluZz0hMDtnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnByb3RvdHlwZS5nZXREaXJlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5pMThuLmJpZGkuRGlyLkxUUn07XG5nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnByb3RvdHlwZS5jbG9uZVdpdGhQYXJhbXM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcCh0aGlzKTtjPWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuVVJMX1BBUkFNX1BBUlNFUl8uZXhlYyhjKTt2YXIgZD1jWzNdfHxcIlwiO3JldHVybiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLmNyZWF0ZVRydXN0ZWRSZXNvdXJjZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGNbMV0rZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5zdHJpbmdpZnlQYXJhbXNfKFwiP1wiLGNbMl18fFwiXCIsYSkrZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5zdHJpbmdpZnlQYXJhbXNfKFwiI1wiLGQsYikpfTtcbmdvb2cuREVCVUcmJihnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiVHJ1c3RlZFJlc291cmNlVXJse1wiK3RoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlVHJ1c3RlZFJlc291cmNlVXJsV3JhcHBlZFZhbHVlXytcIn1cIn0pO2dvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwPWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcFRydXN0ZWRTY3JpcHRVUkwoYSkudG9TdHJpbmcoKX07XG5nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcFRydXN0ZWRTY3JpcHRVUkw9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwmJmEuY29uc3RydWN0b3I9PT1nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsJiZhLlRSVVNURURfUkVTT1VSQ0VfVVJMX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz09PWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfKXJldHVybiBhLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVRydXN0ZWRSZXNvdXJjZVVybFdyYXBwZWRWYWx1ZV87Z29vZy5hc3NlcnRzLmZhaWwoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBUcnVzdGVkUmVzb3VyY2VVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitnb29nLnR5cGVPZihhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlRydXN0ZWRSZXNvdXJjZVVybFwifTtcbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwVHJ1c3RlZFVSTD1mdW5jdGlvbihhKXtyZXR1cm4gYS50cnVzdGVkVVJMXz9hLnRydXN0ZWRVUkxfOmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKGEpfTtcbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuZm9ybWF0PWZ1bmN0aW9uKGEsYil7dmFyIGM9Z29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpO2lmKCFnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLkJBU0VfVVJMXy50ZXN0KGMpKXRocm93IEVycm9yKFwiSW52YWxpZCBUcnVzdGVkUmVzb3VyY2VVcmwgZm9ybWF0OiBcIitjKTthPWMucmVwbGFjZShnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLkZPUk1BVF9NQVJLRVJfLGZ1bmN0aW9uKGEsZSl7aWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLGUpKXRocm93IEVycm9yKCdGb3VuZCBtYXJrZXIsIFwiJytlKydcIiwgaW4gZm9ybWF0IHN0cmluZywgXCInK2MrJ1wiLCBidXQgbm8gdmFsaWQgbGFiZWwgbWFwcGluZyBmb3VuZCBpbiBhcmdzOiAnK0pTT04uc3RyaW5naWZ5KGIpKTthPWJbZV07cmV0dXJuIGEgaW5zdGFuY2VvZiBnb29nLnN0cmluZy5Db25zdD9nb29nLnN0cmluZy5Db25zdC51bndyYXAoYSk6XG5lbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGEpKX0pO3JldHVybiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLmNyZWF0ZVRydXN0ZWRSZXNvdXJjZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGEpfTtnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLkZPUk1BVF9NQVJLRVJfPS8leyhcXHcrKX0vZztnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLkJBU0VfVVJMXz0vXigoaHR0cHM6KT9cXC9cXC9bMC05YS16LjpbXFxdLV0rXFwvfFxcL1teL1xcXFxdfFteOi9cXFxcJV0rXFwvfFteOi9cXFxcJV0qWz8jXXxhYm91dDpibGFuayMpL2k7Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5VUkxfUEFSQU1fUEFSU0VSXz0vXihbXj8jXSopKFxcP1teI10qKT8oI1tcXHNcXFNdKik/Lztcbmdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuZm9ybWF0V2l0aFBhcmFtcz1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5mb3JtYXQoYSxiKS5jbG9uZVdpdGhQYXJhbXMoYyxkKX07Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5mcm9tQ29uc3RhbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuY3JlYXRlVHJ1c3RlZFJlc291cmNlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKX07Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5mcm9tQ29uc3RhbnRzPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1cIlwiLGM9MDtjPGEubGVuZ3RoO2MrKyliKz1nb29nLnN0cmluZy5Db25zdC51bndyYXAoYVtjXSk7cmV0dXJuIGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwuY3JlYXRlVHJ1c3RlZFJlc291cmNlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYil9O1xuZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV89e307XG5nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLmNyZWF0ZVRydXN0ZWRSZXNvdXJjZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsO2IucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlVHJ1c3RlZFJlc291cmNlVXJsV3JhcHBlZFZhbHVlXz1nb29nLmh0bWwudHJ1c3RlZHR5cGVzLlBSSVZBVEVfRE9fTk9UX0FDQ0VTU19PUl9FTFNFX1BPTElDWT9nb29nLmh0bWwudHJ1c3RlZHR5cGVzLlBSSVZBVEVfRE9fTk9UX0FDQ0VTU19PUl9FTFNFX1BPTElDWS5jcmVhdGVTY3JpcHRVUkwoYSk6YTtnb29nLmh0bWwudHJ1c3RlZHR5cGVzLlBSSVZBVEVfRE9fTk9UX0FDQ0VTU19PUl9FTFNFX1BPTElDWSYmKGIudHJ1c3RlZFVSTF89Z29vZy5odG1sLnRydXN0ZWR0eXBlcy5QUklWQVRFX0RPX05PVF9BQ0NFU1NfT1JfRUxTRV9QT0xJQ1kuY3JlYXRlVVJMKGEpKTtyZXR1cm4gYn07XG5nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnN0cmluZ2lmeVBhcmFtc189ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWMpcmV0dXJuIGI7aWYoZ29vZy5pc1N0cmluZyhjKSlyZXR1cm4gYz9hK2VuY29kZVVSSUNvbXBvbmVudChjKTpcIlwiO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT1jW2RdO2U9Z29vZy5pc0FycmF5KGUpP2U6W2VdO2Zvcih2YXIgZj0wO2Y8ZS5sZW5ndGg7ZisrKXt2YXIgZz1lW2ZdO251bGwhPWcmJihifHwoYj1hKSxiKz0oYi5sZW5ndGg+YS5sZW5ndGg/XCImXCI6XCJcIikrZW5jb2RlVVJJQ29tcG9uZW50KGQpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZykpKX19cmV0dXJuIGJ9O2dvb2cuc3RyaW5nLmludGVybmFsPXt9O2dvb2cuc3RyaW5nLmludGVybmFsLnN0YXJ0c1dpdGg9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMD09YS5sYXN0SW5kZXhPZihiLDApfTtnb29nLnN0cmluZy5pbnRlcm5hbC5lbmRzV2l0aD1mdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoLWIubGVuZ3RoO3JldHVybiAwPD1jJiZhLmluZGV4T2YoYixjKT09Y307Z29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aD1mdW5jdGlvbihhLGIpe3JldHVybiAwPT1nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVDb21wYXJlKGIsYS5zdWJzdHIoMCxiLmxlbmd0aCkpfTtnb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVFbmRzV2l0aD1mdW5jdGlvbihhLGIpe3JldHVybiAwPT1nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVDb21wYXJlKGIsYS5zdWJzdHIoYS5sZW5ndGgtYi5sZW5ndGgsYi5sZW5ndGgpKX07XG5nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVFcXVhbHM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS50b0xvd2VyQ2FzZSgpPT1iLnRvTG93ZXJDYXNlKCl9O2dvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2U9ZnVuY3Rpb24oYSl7cmV0dXJuL15bXFxzXFx4YTBdKiQvLnRlc3QoYSl9O2dvb2cuc3RyaW5nLmludGVybmFsLnRyaW09Z29vZy5UUlVTVEVEX1NJVEUmJlN0cmluZy5wcm90b3R5cGUudHJpbT9mdW5jdGlvbihhKXtyZXR1cm4gYS50cmltKCl9OmZ1bmN0aW9uKGEpe3JldHVybi9eW1xcc1xceGEwXSooW1xcc1xcU10qPylbXFxzXFx4YTBdKiQvLmV4ZWMoYSlbMV19O2dvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUNvbXBhcmU9ZnVuY3Rpb24oYSxiKXthPVN0cmluZyhhKS50b0xvd2VyQ2FzZSgpO2I9U3RyaW5nKGIpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGE8Yj8tMTphPT1iPzA6MX07XG5nb29nLnN0cmluZy5pbnRlcm5hbC5uZXdMaW5lVG9Ccj1mdW5jdGlvbihhLGIpe3JldHVybiBhLnJlcGxhY2UoLyhcXHJcXG58XFxyfFxcbikvZyxiP1wiPGJyIC8+XCI6XCI8YnI+XCIpfTtcbmdvb2cuc3RyaW5nLmludGVybmFsLmh0bWxFc2NhcGU9ZnVuY3Rpb24oYSxiKXtpZihiKWE9YS5yZXBsYWNlKGdvb2cuc3RyaW5nLmludGVybmFsLkFNUF9SRV8sXCImYW1wO1wiKS5yZXBsYWNlKGdvb2cuc3RyaW5nLmludGVybmFsLkxUX1JFXyxcIiZsdDtcIikucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5HVF9SRV8sXCImZ3Q7XCIpLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuUVVPVF9SRV8sXCImcXVvdDtcIikucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5TSU5HTEVfUVVPVEVfUkVfLFwiJiMzOTtcIikucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5OVUxMX1JFXyxcIiYjMDtcIik7ZWxzZXtpZighZ29vZy5zdHJpbmcuaW50ZXJuYWwuQUxMX1JFXy50ZXN0KGEpKXJldHVybiBhOy0xIT1hLmluZGV4T2YoXCImXCIpJiYoYT1hLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuQU1QX1JFXyxcIiZhbXA7XCIpKTstMSE9YS5pbmRleE9mKFwiPFwiKSYmKGE9YS5yZXBsYWNlKGdvb2cuc3RyaW5nLmludGVybmFsLkxUX1JFXyxcblwiJmx0O1wiKSk7LTEhPWEuaW5kZXhPZihcIj5cIikmJihhPWEucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5HVF9SRV8sXCImZ3Q7XCIpKTstMSE9YS5pbmRleE9mKCdcIicpJiYoYT1hLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuUVVPVF9SRV8sXCImcXVvdDtcIikpOy0xIT1hLmluZGV4T2YoXCInXCIpJiYoYT1hLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuU0lOR0xFX1FVT1RFX1JFXyxcIiYjMzk7XCIpKTstMSE9YS5pbmRleE9mKFwiXFx4MDBcIikmJihhPWEucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5OVUxMX1JFXyxcIiYjMDtcIikpfXJldHVybiBhfTtnb29nLnN0cmluZy5pbnRlcm5hbC5BTVBfUkVfPS8mL2c7Z29vZy5zdHJpbmcuaW50ZXJuYWwuTFRfUkVfPS88L2c7Z29vZy5zdHJpbmcuaW50ZXJuYWwuR1RfUkVfPS8+L2c7Z29vZy5zdHJpbmcuaW50ZXJuYWwuUVVPVF9SRV89L1wiL2c7Z29vZy5zdHJpbmcuaW50ZXJuYWwuU0lOR0xFX1FVT1RFX1JFXz0vJy9nO1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuTlVMTF9SRV89L1xceDAwL2c7Z29vZy5zdHJpbmcuaW50ZXJuYWwuQUxMX1JFXz0vW1xceDAwJjw+XCInXS87Z29vZy5zdHJpbmcuaW50ZXJuYWwud2hpdGVzcGFjZUVzY2FwZT1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLnN0cmluZy5pbnRlcm5hbC5uZXdMaW5lVG9CcihhLnJlcGxhY2UoLyAgL2csXCIgJiMxNjA7XCIpLGIpfTtnb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucz1mdW5jdGlvbihhLGIpe3JldHVybi0xIT1hLmluZGV4T2YoYil9O2dvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuc3RyaW5nLmludGVybmFsLmNvbnRhaW5zKGEudG9Mb3dlckNhc2UoKSxiLnRvTG93ZXJDYXNlKCkpfTtcbmdvb2cuc3RyaW5nLmludGVybmFsLmNvbXBhcmVWZXJzaW9ucz1mdW5jdGlvbihhLGIpe3ZhciBjPTA7YT1nb29nLnN0cmluZy5pbnRlcm5hbC50cmltKFN0cmluZyhhKSkuc3BsaXQoXCIuXCIpO2I9Z29vZy5zdHJpbmcuaW50ZXJuYWwudHJpbShTdHJpbmcoYikpLnNwbGl0KFwiLlwiKTtmb3IodmFyIGQ9TWF0aC5tYXgoYS5sZW5ndGgsYi5sZW5ndGgpLGU9MDswPT1jJiZlPGQ7ZSsrKXt2YXIgZj1hW2VdfHxcIlwiLGc9YltlXXx8XCJcIjtkb3tmPS8oXFxkKikoXFxEKikoLiopLy5leGVjKGYpfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07Zz0vKFxcZCopKFxcRCopKC4qKS8uZXhlYyhnKXx8W1wiXCIsXCJcIixcIlwiLFwiXCJdO2lmKDA9PWZbMF0ubGVuZ3RoJiYwPT1nWzBdLmxlbmd0aClicmVhaztjPTA9PWZbMV0ubGVuZ3RoPzA6cGFyc2VJbnQoZlsxXSwxMCk7dmFyIGg9MD09Z1sxXS5sZW5ndGg/MDpwYXJzZUludChnWzFdLDEwKTtjPWdvb2cuc3RyaW5nLmludGVybmFsLmNvbXBhcmVFbGVtZW50c18oYyxoKXx8Z29vZy5zdHJpbmcuaW50ZXJuYWwuY29tcGFyZUVsZW1lbnRzXygwPT1cbmZbMl0ubGVuZ3RoLDA9PWdbMl0ubGVuZ3RoKXx8Z29vZy5zdHJpbmcuaW50ZXJuYWwuY29tcGFyZUVsZW1lbnRzXyhmWzJdLGdbMl0pO2Y9ZlszXTtnPWdbM119d2hpbGUoMD09Yyl9cmV0dXJuIGN9O2dvb2cuc3RyaW5nLmludGVybmFsLmNvbXBhcmVFbGVtZW50c189ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9O2dvb2cuaHRtbC5TYWZlVXJsPWZ1bmN0aW9uKCl7dGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlVXJsV3JhcHBlZFZhbHVlXz1cIlwiO3RoaXMuU0FGRV9VUkxfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfPWdvb2cuaHRtbC5TYWZlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFX307Z29vZy5odG1sLlNhZmVVcmwuSU5OT0NVT1VTX1NUUklORz1cImFib3V0OmludmFsaWQjekNsb3N1cmV6XCI7Z29vZy5odG1sLlNhZmVVcmwucHJvdG90eXBlLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmc9ITA7Z29vZy5odG1sLlNhZmVVcmwucHJvdG90eXBlLmdldFR5cGVkU3RyaW5nVmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlVXJsV3JhcHBlZFZhbHVlXy50b1N0cmluZygpfTtcbmdvb2cuaHRtbC5TYWZlVXJsLnByb3RvdHlwZS5pbXBsZW1lbnRzR29vZ0kxOG5CaWRpRGlyZWN0aW9uYWxTdHJpbmc9ITA7Z29vZy5odG1sLlNhZmVVcmwucHJvdG90eXBlLmdldERpcmVjdGlvbj1mdW5jdGlvbigpe3JldHVybiBnb29nLmkxOG4uYmlkaS5EaXIuTFRSfTtnb29nLkRFQlVHJiYoZ29vZy5odG1sLlNhZmVVcmwucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJTYWZlVXJse1wiK3RoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVVybFdyYXBwZWRWYWx1ZV8rXCJ9XCJ9KTtnb29nLmh0bWwuU2FmZVVybC51bndyYXA9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcFRydXN0ZWRVUkwoYSkudG9TdHJpbmcoKX07XG5nb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMPWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybCYmYS5jb25zdHJ1Y3Rvcj09PWdvb2cuaHRtbC5TYWZlVXJsJiZhLlNBRkVfVVJMX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz09PWdvb2cuaHRtbC5TYWZlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXylyZXR1cm4gYS5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlVXJsV3JhcHBlZFZhbHVlXztnb29nLmFzc2VydHMuZmFpbChcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitnb29nLnR5cGVPZihhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVVcmxcIn07Z29vZy5odG1sLlNhZmVVcmwuZnJvbUNvbnN0YW50PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKX07XG5nb29nLmh0bWwuU0FGRV9NSU1FX1RZUEVfUEFUVEVSTl89L14oPzphdWRpb1xcLyg/OjNncHAyfDNncHB8YWFjfEwxNnxtaWRpfG1wM3xtcDR8bXBlZ3xvZ2F8b2dnfG9wdXN8eC1tNGF8eC13YXZ8d2F2fHdlYm0pfGltYWdlXFwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwfHgtaWNvbil8dGV4dFxcL2Nzdnx2aWRlb1xcLyg/Om1wZWd8bXA0fG9nZ3x3ZWJtfHF1aWNrdGltZSkpKD86O1xcdys9KD86XFx3K3xcIltcXHc7PV0rXCIpKSokL2k7Z29vZy5odG1sLlNhZmVVcmwuaXNTYWZlTWltZVR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuaHRtbC5TQUZFX01JTUVfVFlQRV9QQVRURVJOXy50ZXN0KGEpfTtnb29nLmh0bWwuU2FmZVVybC5mcm9tQmxvYj1mdW5jdGlvbihhKXthPWdvb2cuaHRtbC5TQUZFX01JTUVfVFlQRV9QQVRURVJOXy50ZXN0KGEudHlwZSk/Z29vZy5mcy51cmwuY3JlYXRlT2JqZWN0VXJsKGEpOmdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkc7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShhKX07XG5nb29nLmh0bWwuREFUQV9VUkxfUEFUVEVSTl89L15kYXRhOihbXixdKik7YmFzZTY0LFthLXowLTkrXFwvXSs9KiQvaTtnb29nLmh0bWwuU2FmZVVybC5mcm9tRGF0YVVybD1mdW5jdGlvbihhKXthPWEucmVwbGFjZSgvKCUwQXwlMEQpL2csXCJcIik7dmFyIGI9YS5tYXRjaChnb29nLmh0bWwuREFUQV9VUkxfUEFUVEVSTl8pO2I9YiYmZ29vZy5odG1sLlNBRkVfTUlNRV9UWVBFX1BBVFRFUk5fLnRlc3QoYlsxXSk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShiP2E6Z29vZy5odG1sLlNhZmVVcmwuSU5OT0NVT1VTX1NUUklORyl9O2dvb2cuaHRtbC5TYWZlVXJsLmZyb21UZWxVcmw9ZnVuY3Rpb24oYSl7Z29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aChhLFwidGVsOlwiKXx8KGE9Z29vZy5odG1sLlNhZmVVcmwuSU5OT0NVT1VTX1NUUklORyk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShhKX07XG5nb29nLmh0bWwuU0lQX1VSTF9QQVRURVJOXz0vXnNpcFtzXT86WythLXowLTlfLiEkJSYnKlxcLz1eYHt8fX4tXStAKFthLXowLTktXStcXC4pK1thLXowLTldezIsNjN9JC9pO2dvb2cuaHRtbC5TYWZlVXJsLmZyb21TaXBVcmw9ZnVuY3Rpb24oYSl7Z29vZy5odG1sLlNJUF9VUkxfUEFUVEVSTl8udGVzdChkZWNvZGVVUklDb21wb25lbnQoYSkpfHwoYT1nb29nLmh0bWwuU2FmZVVybC5JTk5PQ1VPVVNfU1RSSU5HKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlU2FmZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGEpfTtnb29nLmh0bWwuU2FmZVVybC5mcm9tRmFjZWJvb2tNZXNzZW5nZXJVcmw9ZnVuY3Rpb24oYSl7Z29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aChhLFwiZmItbWVzc2VuZ2VyOi8vc2hhcmVcIil8fChhPWdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkcpO3JldHVybiBnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O1xuZ29vZy5odG1sLlNhZmVVcmwuZnJvbVdoYXRzQXBwVXJsPWZ1bmN0aW9uKGEpe2dvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZVN0YXJ0c1dpdGgoYSxcIndoYXRzYXBwOi8vc2VuZFwiKXx8KGE9Z29vZy5odG1sLlNhZmVVcmwuSU5OT0NVT1VTX1NUUklORyk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShhKX07Z29vZy5odG1sLlNhZmVVcmwuZnJvbVNtc1VybD1mdW5jdGlvbihhKXtnb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVTdGFydHNXaXRoKGEsXCJzbXM6XCIpJiZnb29nLmh0bWwuU2FmZVVybC5pc1Ntc1VybEJvZHlWYWxpZF8oYSl8fChhPWdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkcpO3JldHVybiBnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O1xuZ29vZy5odG1sLlNhZmVVcmwuaXNTbXNVcmxCb2R5VmFsaWRfPWZ1bmN0aW9uKGEpe3ZhciBiPWEuaW5kZXhPZihcIiNcIik7MDxiJiYoYT1hLnN1YnN0cmluZygwLGIpKTtiPWEubWF0Y2goL1s/Jl1ib2R5PS9naSk7aWYoIWIpcmV0dXJuITA7aWYoMTxiLmxlbmd0aClyZXR1cm4hMTthPWEubWF0Y2goL1s/Jl1ib2R5PShbXiZdKikvKVsxXTtpZighYSlyZXR1cm4hMDt0cnl7ZGVjb2RlVVJJQ29tcG9uZW50KGEpfWNhdGNoKGMpe3JldHVybiExfXJldHVybi9eKD86W2EtejAtOVxcLV8ufl18JVswLTlhLWZdezJ9KSskL2kudGVzdChhKX07Z29vZy5odG1sLlNhZmVVcmwuZnJvbVNzaFVybD1mdW5jdGlvbihhKXtnb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVTdGFydHNXaXRoKGEsXCJzc2g6Ly9cIil8fChhPWdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkcpO3JldHVybiBnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O1xuZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVDaHJvbWVFeHRlbnNpb25Vcmw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVFeHRlbnNpb25VcmxfKC9eY2hyb21lLWV4dGVuc2lvbjpcXC9cXC8oW15cXC9dKylcXC8vLGEsYil9O2dvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplRmlyZWZveEV4dGVuc2lvblVybD1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUV4dGVuc2lvblVybF8oL15tb3otZXh0ZW5zaW9uOlxcL1xcLyhbXlxcL10rKVxcLy8sYSxiKX07Z29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVFZGdlRXh0ZW5zaW9uVXJsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplRXh0ZW5zaW9uVXJsXygvXm1zLWJyb3dzZXItZXh0ZW5zaW9uOlxcL1xcLyhbXlxcL10rKVxcLy8sYSxiKX07XG5nb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUV4dGVuc2lvblVybF89ZnVuY3Rpb24oYSxiLGMpeyhhPWEuZXhlYyhiKSk/KGE9YVsxXSwtMT09KGMgaW5zdGFuY2VvZiBnb29nLnN0cmluZy5Db25zdD9bZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGMpXTpjLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpfSkpLmluZGV4T2YoYSkmJihiPWdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkcpKTpiPWdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkc7cmV0dXJuIGdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShiKX07Z29vZy5odG1sLlNhZmVVcmwuZnJvbVRydXN0ZWRSZXNvdXJjZVVybD1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlU2FmZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKGEpKX07XG5nb29nLmh0bWwuU0FGRV9VUkxfUEFUVEVSTl89L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cCk6fFteOi8/I10qKD86Wy8/I118JCkpL2k7Z29vZy5odG1sLlNhZmVVcmwuU0FGRV9VUkxfUEFUVEVSTj1nb29nLmh0bWwuU0FGRV9VUkxfUEFUVEVSTl87Z29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemU9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlVXJsKXJldHVybiBhO2E9XCJvYmplY3RcIj09dHlwZW9mIGEmJmEuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZz9hLmdldFR5cGVkU3RyaW5nVmFsdWUoKTpTdHJpbmcoYSk7Z29vZy5odG1sLlNBRkVfVVJMX1BBVFRFUk5fLnRlc3QoYSl8fChhPWdvb2cuaHRtbC5TYWZlVXJsLklOTk9DVU9VU19TVFJJTkcpO3JldHVybiBnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O1xuZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVBc3NlcnRVbmNoYW5nZWQ9ZnVuY3Rpb24oYSxiKXtpZihhIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmwpcmV0dXJuIGE7YT1cIm9iamVjdFwiPT10eXBlb2YgYSYmYS5pbXBsZW1lbnRzR29vZ1N0cmluZ1R5cGVkU3RyaW5nP2EuZ2V0VHlwZWRTdHJpbmdWYWx1ZSgpOlN0cmluZyhhKTtpZihiJiYvXmRhdGE6L2kudGVzdChhKSYmKGI9Z29vZy5odG1sLlNhZmVVcmwuZnJvbURhdGFVcmwoYSksYi5nZXRUeXBlZFN0cmluZ1ZhbHVlKCk9PWEpKXJldHVybiBiO2dvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5odG1sLlNBRkVfVVJMX1BBVFRFUk5fLnRlc3QoYSksXCIlcyBkb2VzIG5vdCBtYXRjaCB0aGUgc2FmZSBVUkwgcGF0dGVyblwiLGEpfHwoYT1nb29nLmh0bWwuU2FmZVVybC5JTk5PQ1VPVVNfU1RSSU5HKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlU2FmZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGEpfTtcbmdvb2cuaHRtbC5TYWZlVXJsLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz17fTtnb29nLmh0bWwuU2FmZVVybC5jcmVhdGVTYWZlVXJsU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2U9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IGdvb2cuaHRtbC5TYWZlVXJsO2IucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVVybFdyYXBwZWRWYWx1ZV89Z29vZy5odG1sLnRydXN0ZWR0eXBlcy5QUklWQVRFX0RPX05PVF9BQ0NFU1NfT1JfRUxTRV9QT0xJQ1k/Z29vZy5odG1sLnRydXN0ZWR0eXBlcy5QUklWQVRFX0RPX05PVF9BQ0NFU1NfT1JfRUxTRV9QT0xJQ1kuY3JlYXRlVVJMKGEpOmE7cmV0dXJuIGJ9O2dvb2cuaHRtbC5TYWZlVXJsLkFCT1VUX0JMQU5LPWdvb2cuaHRtbC5TYWZlVXJsLmNyZWF0ZVNhZmVVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcImFib3V0OmJsYW5rXCIpO2dvb2cuaHRtbC5TYWZlU3R5bGU9ZnVuY3Rpb24oKXt0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVdyYXBwZWRWYWx1ZV89XCJcIjt0aGlzLlNBRkVfU1RZTEVfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfPWdvb2cuaHRtbC5TYWZlU3R5bGUuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVffTtnb29nLmh0bWwuU2FmZVN0eWxlLnByb3RvdHlwZS5pbXBsZW1lbnRzR29vZ1N0cmluZ1R5cGVkU3RyaW5nPSEwO2dvb2cuaHRtbC5TYWZlU3R5bGUuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfPXt9O1xuZ29vZy5odG1sLlNhZmVTdHlsZS5mcm9tQ29uc3RhbnQ9ZnVuY3Rpb24oYSl7YT1nb29nLnN0cmluZy5Db25zdC51bndyYXAoYSk7aWYoMD09PWEubGVuZ3RoKXJldHVybiBnb29nLmh0bWwuU2FmZVN0eWxlLkVNUFRZO2dvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5zdHJpbmcuaW50ZXJuYWwuZW5kc1dpdGgoYSxcIjtcIiksXCJMYXN0IGNoYXJhY3RlciBvZiBzdHlsZSBzdHJpbmcgaXMgbm90ICc7JzogXCIrYSk7Z29vZy5hc3NlcnRzLmFzc2VydChnb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucyhhLFwiOlwiKSxcIlN0eWxlIHN0cmluZyBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lICc6JywgdG8gc3BlY2lmeSBhIFxcXCJuYW1lOiB2YWx1ZVxcXCIgcGFpcjogXCIrYSk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlU2FmZVN0eWxlU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O1xuZ29vZy5odG1sLlNhZmVTdHlsZS5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVdyYXBwZWRWYWx1ZV99O2dvb2cuREVCVUcmJihnb29nLmh0bWwuU2FmZVN0eWxlLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZVN0eWxle1wiK3RoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVN0eWxlV3JhcHBlZFZhbHVlXytcIn1cIn0pO1xuZ29vZy5odG1sLlNhZmVTdHlsZS51bndyYXA9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlU3R5bGUmJmEuY29uc3RydWN0b3I9PT1nb29nLmh0bWwuU2FmZVN0eWxlJiZhLlNBRkVfU1RZTEVfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfPT09Z29vZy5odG1sLlNhZmVTdHlsZS5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV8pcmV0dXJuIGEucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVN0eWxlV3JhcHBlZFZhbHVlXztnb29nLmFzc2VydHMuZmFpbChcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVTdHlsZSwgZ290ICdcIithK1wiJyBvZiB0eXBlIFwiK2dvb2cudHlwZU9mKGEpKTtyZXR1cm5cInR5cGVfZXJyb3I6U2FmZVN0eWxlXCJ9O2dvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlU2FmZVN0eWxlU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2U9ZnVuY3Rpb24oYSl7cmV0dXJuKG5ldyBnb29nLmh0bWwuU2FmZVN0eWxlKS5pbml0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VfKGEpfTtcbmdvb2cuaHRtbC5TYWZlU3R5bGUucHJvdG90eXBlLmluaXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZV89ZnVuY3Rpb24oYSl7dGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlU3R5bGVXcmFwcGVkVmFsdWVfPWE7cmV0dXJuIHRoaXN9O2dvb2cuaHRtbC5TYWZlU3R5bGUuRU1QVFk9Z29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGVTYWZlU3R5bGVTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcIlwiKTtnb29nLmh0bWwuU2FmZVN0eWxlLklOTk9DVU9VU19TVFJJTkc9XCJ6Q2xvc3VyZXpcIjtcbmdvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPVwiXCIsYztmb3IoYyBpbiBhKXtpZighL15bLV9hLXpBLVowLTldKyQvLnRlc3QoYykpdGhyb3cgRXJyb3IoXCJOYW1lIGFsbG93cyBvbmx5IFstX2EtekEtWjAtOV0sIGdvdDogXCIrYyk7dmFyIGQ9YVtjXTtudWxsIT1kJiYoZD1nb29nLmlzQXJyYXkoZCk/Z29vZy5hcnJheS5tYXAoZCxnb29nLmh0bWwuU2FmZVN0eWxlLnNhbml0aXplUHJvcGVydHlWYWx1ZV8pLmpvaW4oXCIgXCIpOmdvb2cuaHRtbC5TYWZlU3R5bGUuc2FuaXRpemVQcm9wZXJ0eVZhbHVlXyhkKSxiKz1jK1wiOlwiK2QrXCI7XCIpfXJldHVybiBiP2dvb2cuaHRtbC5TYWZlU3R5bGUuY3JlYXRlU2FmZVN0eWxlU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYik6Z29vZy5odG1sLlNhZmVTdHlsZS5FTVBUWX07XG5nb29nLmh0bWwuU2FmZVN0eWxlLnNhbml0aXplUHJvcGVydHlWYWx1ZV89ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlVXJsKXJldHVybid1cmwoXCInK2dvb2cuaHRtbC5TYWZlVXJsLnVud3JhcChhKS5yZXBsYWNlKC88L2csXCIlM2NcIikucmVwbGFjZSgvW1xcXFxcIl0vZyxcIlxcXFwkJlwiKSsnXCIpJzthPWEgaW5zdGFuY2VvZiBnb29nLnN0cmluZy5Db25zdD9nb29nLnN0cmluZy5Db25zdC51bndyYXAoYSk6Z29vZy5odG1sLlNhZmVTdHlsZS5zYW5pdGl6ZVByb3BlcnR5VmFsdWVTdHJpbmdfKFN0cmluZyhhKSk7aWYoL1t7O31dLy50ZXN0KGEpKXRocm93IG5ldyBnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IoXCJWYWx1ZSBkb2VzIG5vdCBhbGxvdyBbezt9XSwgZ290OiAlcy5cIixbYV0pO3JldHVybiBhfTtcbmdvb2cuaHRtbC5TYWZlU3R5bGUuc2FuaXRpemVQcm9wZXJ0eVZhbHVlU3RyaW5nXz1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoZ29vZy5odG1sLlNhZmVTdHlsZS5GVU5DVElPTlNfUkVfLFwiJDFcIikucmVwbGFjZShnb29nLmh0bWwuU2FmZVN0eWxlLkZVTkNUSU9OU19SRV8sXCIkMVwiKS5yZXBsYWNlKGdvb2cuaHRtbC5TYWZlU3R5bGUuVVJMX1JFXyxcInVybFwiKTtpZihnb29nLmh0bWwuU2FmZVN0eWxlLlZBTFVFX1JFXy50ZXN0KGIpKXtpZihnb29nLmh0bWwuU2FmZVN0eWxlLkNPTU1FTlRfUkVfLnRlc3QoYSkpcmV0dXJuIGdvb2cuYXNzZXJ0cy5mYWlsKFwiU3RyaW5nIHZhbHVlIGRpc2FsbG93cyBjb21tZW50cywgZ290OiBcIithKSxnb29nLmh0bWwuU2FmZVN0eWxlLklOTk9DVU9VU19TVFJJTkc7aWYoIWdvb2cuaHRtbC5TYWZlU3R5bGUuaGFzQmFsYW5jZWRRdW90ZXNfKGEpKXJldHVybiBnb29nLmFzc2VydHMuZmFpbChcIlN0cmluZyB2YWx1ZSByZXF1aXJlcyBiYWxhbmNlZCBxdW90ZXMsIGdvdDogXCIrXG5hKSxnb29nLmh0bWwuU2FmZVN0eWxlLklOTk9DVU9VU19TVFJJTkc7aWYoIWdvb2cuaHRtbC5TYWZlU3R5bGUuaGFzQmFsYW5jZWRTcXVhcmVCcmFja2V0c18oYSkpcmV0dXJuIGdvb2cuYXNzZXJ0cy5mYWlsKFwiU3RyaW5nIHZhbHVlIHJlcXVpcmVzIGJhbGFuY2VkIHNxdWFyZSBicmFja2V0cyBhbmQgb25lIGlkZW50aWZpZXIgcGVyIHBhaXIgb2YgYnJhY2tldHMsIGdvdDogXCIrYSksZ29vZy5odG1sLlNhZmVTdHlsZS5JTk5PQ1VPVVNfU1RSSU5HfWVsc2UgcmV0dXJuIGdvb2cuYXNzZXJ0cy5mYWlsKFwiU3RyaW5nIHZhbHVlIGFsbG93cyBvbmx5IFwiK2dvb2cuaHRtbC5TYWZlU3R5bGUuVkFMVUVfQUxMT1dFRF9DSEFSU18rXCIgYW5kIHNpbXBsZSBmdW5jdGlvbnMsIGdvdDogXCIrYSksZ29vZy5odG1sLlNhZmVTdHlsZS5JTk5PQ1VPVVNfU1RSSU5HO3JldHVybiBnb29nLmh0bWwuU2FmZVN0eWxlLnNhbml0aXplVXJsXyhhKX07XG5nb29nLmh0bWwuU2FmZVN0eWxlLmhhc0JhbGFuY2VkUXVvdGVzXz1mdW5jdGlvbihhKXtmb3IodmFyIGI9ITAsYz0hMCxkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWEuY2hhckF0KGQpO1wiJ1wiPT1lJiZjP2I9IWI6J1wiJz09ZSYmYiYmKGM9IWMpfXJldHVybiBiJiZjfTtnb29nLmh0bWwuU2FmZVN0eWxlLmhhc0JhbGFuY2VkU3F1YXJlQnJhY2tldHNfPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0hMCxjPS9eWy1fYS16QS1aMC05XSQvLGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGU9YS5jaGFyQXQoZCk7aWYoXCJdXCI9PWUpe2lmKGIpcmV0dXJuITE7Yj0hMH1lbHNlIGlmKFwiW1wiPT1lKXtpZighYilyZXR1cm4hMTtiPSExfWVsc2UgaWYoIWImJiFjLnRlc3QoZSkpcmV0dXJuITF9cmV0dXJuIGJ9O2dvb2cuaHRtbC5TYWZlU3R5bGUuVkFMVUVfQUxMT1dFRF9DSEFSU189XCJbLSwuXFxcIiclXyEjIGEtekEtWjAtOVxcXFxbXFxcXF1dXCI7XG5nb29nLmh0bWwuU2FmZVN0eWxlLlZBTFVFX1JFXz1uZXcgUmVnRXhwKFwiXlwiK2dvb2cuaHRtbC5TYWZlU3R5bGUuVkFMVUVfQUxMT1dFRF9DSEFSU18rXCIrJFwiKTtnb29nLmh0bWwuU2FmZVN0eWxlLlVSTF9SRV89L1xcYih1cmxcXChbIFxcdFxcbl0qKSgnWyAtJigtXFxbXFxdLX5dKid8XCJbICEjLVxcW1xcXS1+XSpcInxbISMtJiotXFxbXFxdLX5dKikoWyBcXHRcXG5dKlxcKSkvZztnb29nLmh0bWwuU2FmZVN0eWxlLkZVTkNUSU9OU19SRV89L1xcYihoc2x8aHNsYXxyZ2J8cmdiYXxtYXRyaXh8Y2FsY3xtaW5tYXh8Zml0LWNvbnRlbnR8cmVwZWF0fChyb3RhdGV8c2NhbGV8dHJhbnNsYXRlKShYfFl8WnwzZCk/KVxcKFstKyovMC05YS16LiVcXFtcXF0sIF0rXFwpL2c7Z29vZy5odG1sLlNhZmVTdHlsZS5DT01NRU5UX1JFXz0vXFwvXFwqLztcbmdvb2cuaHRtbC5TYWZlU3R5bGUuc2FuaXRpemVVcmxfPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoZ29vZy5odG1sLlNhZmVTdHlsZS5VUkxfUkVfLGZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBiPVwiXCI7ZD1kLnJlcGxhY2UoL14oWydcIl0pKC4qKVxcMSQvLGZ1bmN0aW9uKGEsYyxkKXtiPWM7cmV0dXJuIGR9KTthPWdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplKGQpLmdldFR5cGVkU3RyaW5nVmFsdWUoKTtyZXR1cm4gYytiK2ErYitlfSl9O2dvb2cuaHRtbC5TYWZlU3R5bGUuY29uY2F0PWZ1bmN0aW9uKGEpe3ZhciBiPVwiXCIsYz1mdW5jdGlvbihhKXtnb29nLmlzQXJyYXkoYSk/Z29vZy5hcnJheS5mb3JFYWNoKGEsYyk6Yis9Z29vZy5odG1sLlNhZmVTdHlsZS51bndyYXAoYSl9O2dvb2cuYXJyYXkuZm9yRWFjaChhcmd1bWVudHMsYyk7cmV0dXJuIGI/Z29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGVTYWZlU3R5bGVTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShiKTpnb29nLmh0bWwuU2FmZVN0eWxlLkVNUFRZfTtnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQ9ZnVuY3Rpb24oKXt0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVNoZWV0V3JhcHBlZFZhbHVlXz1cIlwiO3RoaXMuU0FGRV9TVFlMRV9TSEVFVF9UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV89Z29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFX307Z29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LnByb3RvdHlwZS5pbXBsZW1lbnRzR29vZ1N0cmluZ1R5cGVkU3RyaW5nPSEwO2dvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV89e307XG5nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuY3JlYXRlUnVsZT1mdW5jdGlvbihhLGIpe2lmKGdvb2cuc3RyaW5nLmludGVybmFsLmNvbnRhaW5zKGEsXCI8XCIpKXRocm93IEVycm9yKFwiU2VsZWN0b3IgZG9lcyBub3QgYWxsb3cgJzwnLCBnb3Q6IFwiK2EpO3ZhciBjPWEucmVwbGFjZSgvKCd8XCIpKCg/IVxcMSlbXlxcclxcblxcZlxcXFxdfFxcXFxbXFxzXFxTXSkqXFwxL2csXCJcIik7aWYoIS9eWy1fYS16QS1aMC05Iy46KiAsPit+W1xcXSgpPV4kfF0rJC8udGVzdChjKSl0aHJvdyBFcnJvcihcIlNlbGVjdG9yIGFsbG93cyBvbmx5IFstX2EtekEtWjAtOSMuOiogLD4rfltcXFxcXSgpPV4kfF0gYW5kIHN0cmluZ3MsIGdvdDogXCIrYSk7aWYoIWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5oYXNCYWxhbmNlZEJyYWNrZXRzXyhjKSl0aHJvdyBFcnJvcihcIigpIGFuZCBbXSBpbiBzZWxlY3RvciBtdXN0IGJlIGJhbGFuY2VkLCBnb3Q6IFwiK2EpO2IgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVN0eWxlfHwoYj1nb29nLmh0bWwuU2FmZVN0eWxlLmNyZWF0ZShiKSk7XG5hPWErXCJ7XCIrZ29vZy5odG1sLlNhZmVTdHlsZS51bndyYXAoYikucmVwbGFjZSgvPC9nLFwiXFxcXDNDIFwiKStcIn1cIjtyZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNyZWF0ZVNhZmVTdHlsZVNoZWV0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O2dvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5oYXNCYWxhbmNlZEJyYWNrZXRzXz1mdW5jdGlvbihhKXtmb3IodmFyIGI9e1wiKFwiOlwiKVwiLFwiW1wiOlwiXVwifSxjPVtdLGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGU9YVtkXTtpZihiW2VdKWMucHVzaChiW2VdKTtlbHNlIGlmKGdvb2cub2JqZWN0LmNvbnRhaW5zKGIsZSkmJmMucG9wKCkhPWUpcmV0dXJuITF9cmV0dXJuIDA9PWMubGVuZ3RofTtcbmdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5jb25jYXQ9ZnVuY3Rpb24oYSl7dmFyIGI9XCJcIixjPWZ1bmN0aW9uKGEpe2dvb2cuaXNBcnJheShhKT9nb29nLmFycmF5LmZvckVhY2goYSxjKTpiKz1nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQudW53cmFwKGEpfTtnb29nLmFycmF5LmZvckVhY2goYXJndW1lbnRzLGMpO3JldHVybiBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuY3JlYXRlU2FmZVN0eWxlU2hlZXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShiKX07XG5nb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuZnJvbUNvbnN0YW50PWZ1bmN0aW9uKGEpe2E9Z29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpO2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LkVNUFRZO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuc3RyaW5nLmludGVybmFsLmNvbnRhaW5zKGEsXCI8XCIpLFwiRm9yYmlkZGVuICc8JyBjaGFyYWN0ZXIgaW4gc3R5bGUgc2hlZXQgc3RyaW5nOiBcIithKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNyZWF0ZVNhZmVTdHlsZVNoZWV0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYSl9O2dvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0VHlwZWRTdHJpbmdWYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVNoZWV0V3JhcHBlZFZhbHVlX307XG5nb29nLkRFQlVHJiYoZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZVN0eWxlU2hlZXR7XCIrdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlU3R5bGVTaGVldFdyYXBwZWRWYWx1ZV8rXCJ9XCJ9KTtcbmdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC51bndyYXA9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldCYmYS5jb25zdHJ1Y3Rvcj09PWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldCYmYS5TQUZFX1NUWUxFX1NIRUVUX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz09PWdvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV8pcmV0dXJuIGEucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZVN0eWxlU2hlZXRXcmFwcGVkVmFsdWVfO2dvb2cuYXNzZXJ0cy5mYWlsKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZVN0eWxlU2hlZXQsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitnb29nLnR5cGVPZihhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVTdHlsZVNoZWV0XCJ9O1xuZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNyZWF0ZVNhZmVTdHlsZVNoZWV0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2U9ZnVuY3Rpb24oYSl7cmV0dXJuKG5ldyBnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQpLmluaXRTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZV8oYSl9O2dvb2cuaHRtbC5TYWZlU3R5bGVTaGVldC5wcm90b3R5cGUuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXz1mdW5jdGlvbihhKXt0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVTdHlsZVNoZWV0V3JhcHBlZFZhbHVlXz1hO3JldHVybiB0aGlzfTtnb29nLmh0bWwuU2FmZVN0eWxlU2hlZXQuRU1QVFk9Z29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNyZWF0ZVNhZmVTdHlsZVNoZWV0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXCJcIik7Z29vZy5sYWJzPXt9O2dvb2cubGFicy51c2VyQWdlbnQ9e307Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsPXt9O2dvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXROYXRpdmVVc2VyQWdlbnRTdHJpbmdfPWZ1bmN0aW9uKCl7dmFyIGE9Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldE5hdmlnYXRvcl8oKTtyZXR1cm4gYSYmKGE9YS51c2VyQWdlbnQpP2E6XCJcIn07Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldE5hdmlnYXRvcl89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5nbG9iYWwubmF2aWdhdG9yfTtnb29nLmxhYnMudXNlckFnZW50LnV0aWwudXNlckFnZW50Xz1nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF0aXZlVXNlckFnZW50U3RyaW5nXygpO2dvb2cubGFicy51c2VyQWdlbnQudXRpbC5zZXRVc2VyQWdlbnQ9ZnVuY3Rpb24oYSl7Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLnVzZXJBZ2VudF89YXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldE5hdGl2ZVVzZXJBZ2VudFN0cmluZ18oKX07XG5nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0VXNlckFnZW50PWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC51c2VyQWdlbnRffTtnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldFVzZXJBZ2VudCgpO3JldHVybiBnb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucyhiLGEpfTtnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnRJZ25vcmVDYXNlPWZ1bmN0aW9uKGEpe3ZhciBiPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtyZXR1cm4gZ29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlQ29udGFpbnMoYixhKX07XG5nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZXh0cmFjdFZlcnNpb25UdXBsZXM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPS8oXFx3W1xcdyBdKylcXC8oW15cXHNdKylcXHMqKD86XFwoKC4qPylcXCkpPy9nLGM9W10sZDtkPWIuZXhlYyhhKTspYy5wdXNoKFtkWzFdLGRbMl0sZFszXXx8dm9pZCAwXSk7cmV0dXJuIGN9O2dvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlcj17fTtnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hPcGVyYV89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiT3BlcmFcIil9O2dvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaElFXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJUcmlkZW50XCIpfHxnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJNU0lFXCIpfTtnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hFZGdlSHRtbF89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiRWRnZVwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZUNocm9taXVtXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJFZGcvXCIpfTtcbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaE9wZXJhQ2hyb21pdW1fPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIk9QUlwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRmlyZWZveF89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiRmlyZWZveFwiKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiRnhpT1NcIil9O1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoU2FmYXJpXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJTYWZhcmlcIikmJiEoZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXygpfHxnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hDb2FzdF8oKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoT3BlcmFfKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEVkZ2VIdG1sXygpfHxnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hFZGdlQ2hyb21pdW1fKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaE9wZXJhQ2hyb21pdW1fKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEZpcmVmb3hfKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc1NpbGsoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiQW5kcm9pZFwiKSl9O1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ29hc3RfPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkNvYXN0XCIpfTtnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hJb3NXZWJ2aWV3Xz1mdW5jdGlvbigpe3JldHVybihnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUGFkXCIpfHxnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUGhvbmVcIikpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoU2FmYXJpXygpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXygpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ29hc3RfKCkmJiFnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hGaXJlZm94XygpJiZnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJBcHBsZVdlYktpdFwiKX07XG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hDaHJvbWVfPWZ1bmN0aW9uKCl7cmV0dXJuKGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkNocm9tZVwiKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiQ3JpT1NcIikpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZUh0bWxfKCl9O2dvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEFuZHJvaWRCcm93c2VyXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJBbmRyb2lkXCIpJiYhKGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0Nocm9tZSgpfHxnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNGaXJlZm94KCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc09wZXJhKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc1NpbGsoKSl9O1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmE9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoT3BlcmFfO2dvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0lFPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaElFXztnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNFZGdlPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEVkZ2VIdG1sXztnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNFZGdlQ2hyb21pdW09Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZUNocm9taXVtXztnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNPcGVyYUNocm9taXVtPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaE9wZXJhQ2hyb21pdW1fO2dvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0ZpcmVmb3g9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRmlyZWZveF87XG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNTYWZhcmk9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoU2FmYXJpXztnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNDb2FzdD1nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hDb2FzdF87Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzSW9zV2Vidmlldz1nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hJb3NXZWJ2aWV3Xztnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNDaHJvbWU9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXztnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNBbmRyb2lkQnJvd3Nlcj1nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hBbmRyb2lkQnJvd3Nlcl87Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzU2lsaz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJTaWxrXCIpfTtcbmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5nZXRWZXJzaW9uPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXthPWdvb2cuYXJyYXkuZmluZChhLGQpO3JldHVybiBjW2FdfHxcIlwifXZhciBiPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtpZihnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNJRSgpKXJldHVybiBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuZ2V0SUVWZXJzaW9uXyhiKTtiPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5leHRyYWN0VmVyc2lvblR1cGxlcyhiKTt2YXIgYz17fTtnb29nLmFycmF5LmZvckVhY2goYixmdW5jdGlvbihhKXtjW2FbMF1dPWFbMV19KTt2YXIgZD1nb29nLnBhcnRpYWwoZ29vZy5vYmplY3QuY29udGFpbnNLZXksYyk7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc09wZXJhKCk/YShbXCJWZXJzaW9uXCIsXCJPcGVyYVwiXSk6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzRWRnZSgpP2EoW1wiRWRnZVwiXSk6XG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNFZGdlQ2hyb21pdW0oKT9hKFtcIkVkZ1wiXSk6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQ2hyb21lKCk/YShbXCJDaHJvbWVcIixcIkNyaU9TXCJdKTooYj1iWzJdKSYmYlsxXXx8XCJcIn07Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzVmVyc2lvbk9ySGlnaGVyPWZ1bmN0aW9uKGEpe3JldHVybiAwPD1nb29nLnN0cmluZy5pbnRlcm5hbC5jb21wYXJlVmVyc2lvbnMoZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmdldFZlcnNpb24oKSxhKX07XG5nb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuZ2V0SUVWZXJzaW9uXz1mdW5jdGlvbihhKXt2YXIgYj0vcnY6ICooW1xcZFxcLl0qKS8uZXhlYyhhKTtpZihiJiZiWzFdKXJldHVybiBiWzFdO2I9XCJcIjt2YXIgYz0vTVNJRSArKFtcXGRcXC5dKykvLmV4ZWMoYSk7aWYoYyYmY1sxXSlpZihhPS9UcmlkZW50XFwvKFxcZC5cXGQpLy5leGVjKGEpLFwiNy4wXCI9PWNbMV0paWYoYSYmYVsxXSlzd2l0Y2goYVsxXSl7Y2FzZSBcIjQuMFwiOmI9XCI4LjBcIjticmVhaztjYXNlIFwiNS4wXCI6Yj1cIjkuMFwiO2JyZWFrO2Nhc2UgXCI2LjBcIjpiPVwiMTAuMFwiO2JyZWFrO2Nhc2UgXCI3LjBcIjpiPVwiMTEuMFwifWVsc2UgYj1cIjcuMFwiO2Vsc2UgYj1jWzFdO3JldHVybiBifTtnb29nLmh0bWwuU2FmZUh0bWw9ZnVuY3Rpb24oKXt0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVNhZmVIdG1sV3JhcHBlZFZhbHVlXz1cIlwiO3RoaXMuU0FGRV9IVE1MX1RZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXz1nb29nLmh0bWwuU2FmZUh0bWwuVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfO3RoaXMuZGlyXz1udWxsfTtnb29nLmh0bWwuU2FmZUh0bWwucHJvdG90eXBlLmltcGxlbWVudHNHb29nSTE4bkJpZGlEaXJlY3Rpb25hbFN0cmluZz0hMDtnb29nLmh0bWwuU2FmZUh0bWwucHJvdG90eXBlLmdldERpcmVjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRpcl99O2dvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGUuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZz0hMDtnb29nLmh0bWwuU2FmZUh0bWwucHJvdG90eXBlLmdldFR5cGVkU3RyaW5nVmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlSHRtbFdyYXBwZWRWYWx1ZV8udG9TdHJpbmcoKX07XG5nb29nLkRFQlVHJiYoZ29vZy5odG1sLlNhZmVIdG1sLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZUh0bWx7XCIrdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlSHRtbFdyYXBwZWRWYWx1ZV8rXCJ9XCJ9KTtnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwPWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwVHJ1c3RlZEhUTUwoYSkudG9TdHJpbmcoKX07XG5nb29nLmh0bWwuU2FmZUh0bWwudW53cmFwVHJ1c3RlZEhUTUw9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlSHRtbCYmYS5jb25zdHJ1Y3Rvcj09PWdvb2cuaHRtbC5TYWZlSHRtbCYmYS5TQUZFX0hUTUxfVFlQRV9NQVJLRVJfR09PR19IVE1MX1NFQ1VSSVRZX1BSSVZBVEVfPT09Z29vZy5odG1sLlNhZmVIdG1sLlRZUEVfTUFSS0VSX0dPT0dfSFRNTF9TRUNVUklUWV9QUklWQVRFXylyZXR1cm4gYS5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VTYWZlSHRtbFdyYXBwZWRWYWx1ZV87Z29vZy5hc3NlcnRzLmZhaWwoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBTYWZlSHRtbCwgZ290ICdcIithK1wiJyBvZiB0eXBlIFwiK2dvb2cudHlwZU9mKGEpKTtyZXR1cm5cInR5cGVfZXJyb3I6U2FmZUh0bWxcIn07XG5nb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZT1mdW5jdGlvbihhKXtpZihhIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVIdG1sKXJldHVybiBhO3ZhciBiPVwib2JqZWN0XCI9PXR5cGVvZiBhLGM9bnVsbDtiJiZhLmltcGxlbWVudHNHb29nSTE4bkJpZGlEaXJlY3Rpb25hbFN0cmluZyYmKGM9YS5nZXREaXJlY3Rpb24oKSk7YT1iJiZhLmltcGxlbWVudHNHb29nU3RyaW5nVHlwZWRTdHJpbmc/YS5nZXRUeXBlZFN0cmluZ1ZhbHVlKCk6U3RyaW5nKGEpO3JldHVybiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShnb29nLnN0cmluZy5pbnRlcm5hbC5odG1sRXNjYXBlKGEpLGMpfTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlUHJlc2VydmluZ05ld2xpbmVzPWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZUh0bWwpcmV0dXJuIGE7YT1nb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZShhKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwubmV3TGluZVRvQnIoZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcChhKSksYS5nZXREaXJlY3Rpb24oKSl9O1xuZ29vZy5odG1sLlNhZmVIdG1sLmh0bWxFc2NhcGVQcmVzZXJ2aW5nTmV3bGluZXNBbmRTcGFjZXM9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlSHRtbClyZXR1cm4gYTthPWdvb2cuaHRtbC5TYWZlSHRtbC5odG1sRXNjYXBlKGEpO3JldHVybiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShnb29nLnN0cmluZy5pbnRlcm5hbC53aGl0ZXNwYWNlRXNjYXBlKGdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXAoYSkpLGEuZ2V0RGlyZWN0aW9uKCkpfTtnb29nLmh0bWwuU2FmZUh0bWwuZnJvbT1nb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZTtnb29nLmh0bWwuU2FmZUh0bWwuVkFMSURfTkFNRVNfSU5fVEFHXz0vXlthLXpBLVowLTktXSskLztcbmdvb2cuaHRtbC5TYWZlSHRtbC5VUkxfQVRUUklCVVRFU189e2FjdGlvbjohMCxjaXRlOiEwLGRhdGE6ITAsZm9ybWFjdGlvbjohMCxocmVmOiEwLG1hbmlmZXN0OiEwLHBvc3RlcjohMCxzcmM6ITB9O2dvb2cuaHRtbC5TYWZlSHRtbC5OT1RfQUxMT1dFRF9UQUdfTkFNRVNfPXtBUFBMRVQ6ITAsQkFTRTohMCxFTUJFRDohMCxJRlJBTUU6ITAsTElOSzohMCxNQVRIOiEwLE1FVEE6ITAsT0JKRUNUOiEwLFNDUklQVDohMCxTVFlMRTohMCxTVkc6ITAsVEVNUExBVEU6ITB9O2dvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGU9ZnVuY3Rpb24oYSxiLGMpe2dvb2cuaHRtbC5TYWZlSHRtbC52ZXJpZnlUYWdOYW1lKFN0cmluZyhhKSk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFRhZ1NlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFN0cmluZyhhKSxiLGMpfTtcbmdvb2cuaHRtbC5TYWZlSHRtbC52ZXJpZnlUYWdOYW1lPWZ1bmN0aW9uKGEpe2lmKCFnb29nLmh0bWwuU2FmZUh0bWwuVkFMSURfTkFNRVNfSU5fVEFHXy50ZXN0KGEpKXRocm93IEVycm9yKFwiSW52YWxpZCB0YWcgbmFtZSA8XCIrYStcIj4uXCIpO2lmKGEudG9VcHBlckNhc2UoKWluIGdvb2cuaHRtbC5TYWZlSHRtbC5OT1RfQUxMT1dFRF9UQUdfTkFNRVNfKXRocm93IEVycm9yKFwiVGFnIG5hbWUgPFwiK2ErXCI+IGlzIG5vdCBhbGxvd2VkIGZvciBTYWZlSHRtbC5cIik7fTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVJZnJhbWU9ZnVuY3Rpb24oYSxiLGMsZCl7YSYmZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXAoYSk7dmFyIGU9e307ZS5zcmM9YXx8bnVsbDtlLnNyY2RvYz1iJiZnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwKGIpO2E9Z29vZy5odG1sLlNhZmVIdG1sLmNvbWJpbmVBdHRyaWJ1dGVzKGUse3NhbmRib3g6XCJcIn0sYyk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFRhZ1NlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFwiaWZyYW1lXCIsYSxkKX07XG5nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FuZGJveElmcmFtZT1mdW5jdGlvbihhLGIsYyxkKXtpZighZ29vZy5odG1sLlNhZmVIdG1sLmNhblVzZVNhbmRib3hJZnJhbWUoKSl0aHJvdyBFcnJvcihcIlRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgc2FuZGJveGVkIGlmcmFtZXMuXCIpO3ZhciBlPXt9O2Uuc3JjPWE/Z29vZy5odG1sLlNhZmVVcmwudW53cmFwKGdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplKGEpKTpudWxsO2Uuc3JjZG9jPWJ8fG51bGw7ZS5zYW5kYm94PVwiXCI7YT1nb29nLmh0bWwuU2FmZUh0bWwuY29tYmluZUF0dHJpYnV0ZXMoZSx7fSxjKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sVGFnU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXCJpZnJhbWVcIixhLGQpfTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5jYW5Vc2VTYW5kYm94SWZyYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuZ2xvYmFsLkhUTUxJRnJhbWVFbGVtZW50JiZcInNhbmRib3hcImluIGdvb2cuZ2xvYmFsLkhUTUxJRnJhbWVFbGVtZW50LnByb3RvdHlwZX07Z29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNjcmlwdFNyYz1mdW5jdGlvbihhLGIpe2dvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwKGEpO2E9Z29vZy5odG1sLlNhZmVIdG1sLmNvbWJpbmVBdHRyaWJ1dGVzKHtzcmM6YX0se30sYik7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFRhZ1NlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFwic2NyaXB0XCIsYSl9O1xuZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNjcmlwdD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYyBpbiBiKXt2YXIgZD1jLnRvTG93ZXJDYXNlKCk7aWYoXCJsYW5ndWFnZVwiPT1kfHxcInNyY1wiPT1kfHxcInRleHRcIj09ZHx8XCJ0eXBlXCI9PWQpdGhyb3cgRXJyb3IoJ0Nhbm5vdCBzZXQgXCInK2QrJ1wiIGF0dHJpYnV0ZScpO31jPVwiXCI7YT1nb29nLmFycmF5LmNvbmNhdChhKTtmb3IoZD0wO2Q8YS5sZW5ndGg7ZCsrKWMrPWdvb2cuaHRtbC5TYWZlU2NyaXB0LnVud3JhcChhW2RdKTthPWdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGMsZ29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUwpO3JldHVybiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxUYWdTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcInNjcmlwdFwiLGIsYSl9O1xuZ29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVN0eWxlPWZ1bmN0aW9uKGEsYil7Yj1nb29nLmh0bWwuU2FmZUh0bWwuY29tYmluZUF0dHJpYnV0ZXMoe3R5cGU6XCJ0ZXh0L2Nzc1wifSx7fSxiKTt2YXIgYz1cIlwiO2E9Z29vZy5hcnJheS5jb25jYXQoYSk7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aDtkKyspYys9Z29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LnVud3JhcChhW2RdKTthPWdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGMsZ29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUwpO3JldHVybiBnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxUYWdTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcInN0eWxlXCIsYixhKX07XG5nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlTWV0YVJlZnJlc2g9ZnVuY3Rpb24oYSxiKXthPWdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcChnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZShhKSk7KGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0lFKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0VkZ2UoKSkmJmdvb2cuc3RyaW5nLmludGVybmFsLmNvbnRhaW5zKGEsXCI7XCIpJiYoYT1cIidcIithLnJlcGxhY2UoLycvZyxcIiUyN1wiKStcIidcIik7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFRhZ1NlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFwibWV0YVwiLHtcImh0dHAtZXF1aXZcIjpcInJlZnJlc2hcIixjb250ZW50OihifHwwKStcIjsgdXJsPVwiK2F9KX07XG5nb29nLmh0bWwuU2FmZUh0bWwuZ2V0QXR0ck5hbWVBbmRWYWx1ZV89ZnVuY3Rpb24oYSxiLGMpe2lmKGMgaW5zdGFuY2VvZiBnb29nLnN0cmluZy5Db25zdCljPWdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChjKTtlbHNlIGlmKFwic3R5bGVcIj09Yi50b0xvd2VyQ2FzZSgpKWM9Z29vZy5odG1sLlNhZmVIdG1sLmdldFN0eWxlVmFsdWVfKGMpO2Vsc2V7aWYoL15vbi9pLnRlc3QoYikpdGhyb3cgRXJyb3IoJ0F0dHJpYnV0ZSBcIicrYisnXCIgcmVxdWlyZXMgZ29vZy5zdHJpbmcuQ29uc3QgdmFsdWUsIFwiJytjKydcIiBnaXZlbi4nKTtpZihiLnRvTG93ZXJDYXNlKClpbiBnb29nLmh0bWwuU2FmZUh0bWwuVVJMX0FUVFJJQlVURVNfKWlmKGMgaW5zdGFuY2VvZiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsKWM9Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXAoYyk7ZWxzZSBpZihjIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmwpYz1nb29nLmh0bWwuU2FmZVVybC51bndyYXAoYyk7XG5lbHNlIGlmKGdvb2cuaXNTdHJpbmcoYykpYz1nb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZShjKS5nZXRUeXBlZFN0cmluZ1ZhbHVlKCk7ZWxzZSB0aHJvdyBFcnJvcignQXR0cmlidXRlIFwiJytiKydcIiBvbiB0YWcgXCInK2ErJ1wiIHJlcXVpcmVzIGdvb2cuaHRtbC5TYWZlVXJsLCBnb29nLnN0cmluZy5Db25zdCwgb3Igc3RyaW5nLCB2YWx1ZSBcIicrYysnXCIgZ2l2ZW4uJyk7fWMuaW1wbGVtZW50c0dvb2dTdHJpbmdUeXBlZFN0cmluZyYmKGM9Yy5nZXRUeXBlZFN0cmluZ1ZhbHVlKCkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5pc1N0cmluZyhjKXx8Z29vZy5pc051bWJlcihjKSxcIlN0cmluZyBvciBudW1iZXIgdmFsdWUgZXhwZWN0ZWQsIGdvdCBcIit0eXBlb2YgYytcIiB3aXRoIHZhbHVlOiBcIitjKTtyZXR1cm4gYisnPVwiJytnb29nLnN0cmluZy5pbnRlcm5hbC5odG1sRXNjYXBlKFN0cmluZyhjKSkrJ1wiJ307XG5nb29nLmh0bWwuU2FmZUh0bWwuZ2V0U3R5bGVWYWx1ZV89ZnVuY3Rpb24oYSl7aWYoIWdvb2cuaXNPYmplY3QoYSkpdGhyb3cgRXJyb3IoJ1RoZSBcInN0eWxlXCIgYXR0cmlidXRlIHJlcXVpcmVzIGdvb2cuaHRtbC5TYWZlU3R5bGUgb3IgbWFwIG9mIHN0eWxlIHByb3BlcnRpZXMsICcrdHlwZW9mIGErXCIgZ2l2ZW46IFwiK2EpO2EgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVN0eWxlfHwoYT1nb29nLmh0bWwuU2FmZVN0eWxlLmNyZWF0ZShhKSk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlU3R5bGUudW53cmFwKGEpfTtnb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlV2l0aERpcj1mdW5jdGlvbihhLGIsYyxkKXtiPWdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGUoYixjLGQpO2IuZGlyXz1hO3JldHVybiBifTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5qb2luPWZ1bmN0aW9uKGEsYil7YT1nb29nLmh0bWwuU2FmZUh0bWwuaHRtbEVzY2FwZShhKTt2YXIgYz1hLmdldERpcmVjdGlvbigpLGQ9W10sZT1mdW5jdGlvbihhKXtnb29nLmlzQXJyYXkoYSk/Z29vZy5hcnJheS5mb3JFYWNoKGEsZSk6KGE9Z29vZy5odG1sLlNhZmVIdG1sLmh0bWxFc2NhcGUoYSksZC5wdXNoKGdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXAoYSkpLGE9YS5nZXREaXJlY3Rpb24oKSxjPT1nb29nLmkxOG4uYmlkaS5EaXIuTkVVVFJBTD9jPWE6YSE9Z29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUwmJmMhPWEmJihjPW51bGwpKX07Z29vZy5hcnJheS5mb3JFYWNoKGIsZSk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGQuam9pbihnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwKGEpKSxjKX07XG5nb29nLmh0bWwuU2FmZUh0bWwuY29uY2F0PWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLmh0bWwuU2FmZUh0bWwuam9pbihnb29nLmh0bWwuU2FmZUh0bWwuRU1QVFksQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSl9O2dvb2cuaHRtbC5TYWZlSHRtbC5jb25jYXRXaXRoRGlyPWZ1bmN0aW9uKGEsYil7dmFyIGM9Z29vZy5odG1sLlNhZmVIdG1sLmNvbmNhdChnb29nLmFycmF5LnNsaWNlKGFyZ3VtZW50cywxKSk7Yy5kaXJfPWE7cmV0dXJuIGN9O2dvb2cuaHRtbC5TYWZlSHRtbC5UWVBFX01BUktFUl9HT09HX0hUTUxfU0VDVVJJVFlfUFJJVkFURV89e307Z29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2U9ZnVuY3Rpb24oYSxiKXtyZXR1cm4obmV3IGdvb2cuaHRtbC5TYWZlSHRtbCkuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXyhhLGIpfTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5wcm90b3R5cGUuaW5pdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlXz1mdW5jdGlvbihhLGIpe3RoaXMucHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlU2FmZUh0bWxXcmFwcGVkVmFsdWVfPWdvb2cuaHRtbC50cnVzdGVkdHlwZXMuUFJJVkFURV9ET19OT1RfQUNDRVNTX09SX0VMU0VfUE9MSUNZP2dvb2cuaHRtbC50cnVzdGVkdHlwZXMuUFJJVkFURV9ET19OT1RfQUNDRVNTX09SX0VMU0VfUE9MSUNZLmNyZWF0ZUhUTUwoYSk6YTt0aGlzLmRpcl89YjtyZXR1cm4gdGhpc307XG5nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxUYWdTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bnVsbDt2YXIgZT1cIjxcIithK2dvb2cuaHRtbC5TYWZlSHRtbC5zdHJpbmdpZnlBdHRyaWJ1dGVzKGEsYik7Z29vZy5pc0RlZkFuZE5vdE51bGwoYyk/Z29vZy5pc0FycmF5KGMpfHwoYz1bY10pOmM9W107Z29vZy5kb20udGFncy5pc1ZvaWRUYWcoYS50b0xvd2VyQ2FzZSgpKT8oZ29vZy5hc3NlcnRzLmFzc2VydCghYy5sZW5ndGgsXCJWb2lkIHRhZyA8XCIrYStcIj4gZG9lcyBub3QgYWxsb3cgY29udGVudC5cIiksZSs9XCI+XCIpOihkPWdvb2cuaHRtbC5TYWZlSHRtbC5jb25jYXQoYyksZSs9XCI+XCIrZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcChkKStcIjwvXCIrYStcIj5cIixkPWQuZ2V0RGlyZWN0aW9uKCkpOyhhPWImJmIuZGlyKSYmKGQ9L14obHRyfHJ0bHxhdXRvKSQvaS50ZXN0KGEpP2dvb2cuaTE4bi5iaWRpLkRpci5ORVVUUkFMOlxubnVsbCk7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGUsZCl9O2dvb2cuaHRtbC5TYWZlSHRtbC5zdHJpbmdpZnlBdHRyaWJ1dGVzPWZ1bmN0aW9uKGEsYil7dmFyIGM9XCJcIjtpZihiKWZvcih2YXIgZCBpbiBiKXtpZighZ29vZy5odG1sLlNhZmVIdG1sLlZBTElEX05BTUVTX0lOX1RBR18udGVzdChkKSl0aHJvdyBFcnJvcignSW52YWxpZCBhdHRyaWJ1dGUgbmFtZSBcIicrZCsnXCIuJyk7dmFyIGU9YltkXTtnb29nLmlzRGVmQW5kTm90TnVsbChlKSYmKGMrPVwiIFwiK2dvb2cuaHRtbC5TYWZlSHRtbC5nZXRBdHRyTmFtZUFuZFZhbHVlXyhhLGQsZSkpfXJldHVybiBjfTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5jb21iaW5lQXR0cmlidXRlcz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9e30sZTtmb3IoZSBpbiBhKWdvb2cuYXNzZXJ0cy5hc3NlcnQoZS50b0xvd2VyQ2FzZSgpPT1lLFwiTXVzdCBiZSBsb3dlciBjYXNlXCIpLGRbZV09YVtlXTtmb3IoZSBpbiBiKWdvb2cuYXNzZXJ0cy5hc3NlcnQoZS50b0xvd2VyQ2FzZSgpPT1lLFwiTXVzdCBiZSBsb3dlciBjYXNlXCIpLGRbZV09YltlXTtmb3IoZSBpbiBjKXt2YXIgZj1lLnRvTG93ZXJDYXNlKCk7aWYoZiBpbiBhKXRocm93IEVycm9yKCdDYW5ub3Qgb3ZlcnJpZGUgXCInK2YrJ1wiIGF0dHJpYnV0ZSwgZ290IFwiJytlKydcIiB3aXRoIHZhbHVlIFwiJytjW2VdKydcIicpO2YgaW4gYiYmZGVsZXRlIGRbZl07ZFtlXT1jW2VdfXJldHVybiBkfTtcbmdvb2cuaHRtbC5TYWZlSHRtbC5ET0NUWVBFX0hUTUw9Z29vZy5odG1sLlNhZmVIdG1sLmNyZWF0ZVNhZmVIdG1sU2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoXCI8IURPQ1RZUEUgaHRtbD5cIixnb29nLmkxOG4uYmlkaS5EaXIuTkVVVFJBTCk7Z29vZy5odG1sLlNhZmVIdG1sLkVNUFRZPWdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKFwiXCIsZ29vZy5pMThuLmJpZGkuRGlyLk5FVVRSQUwpO2dvb2cuaHRtbC5TYWZlSHRtbC5CUj1nb29nLmh0bWwuU2FmZUh0bWwuY3JlYXRlU2FmZUh0bWxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShcIjxicj5cIixnb29nLmkxOG4uYmlkaS5EaXIuTkVVVFJBTCk7Z29vZy5odG1sLnVuY2hlY2tlZGNvbnZlcnNpb25zPXt9O2dvb2cuaHRtbC51bmNoZWNrZWRjb252ZXJzaW9ucy5zYWZlSHRtbEZyb21TdHJpbmdLbm93blRvU2F0aXNmeVR5cGVDb250cmFjdD1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydFN0cmluZyhnb29nLnN0cmluZy5Db25zdC51bndyYXAoYSksXCJtdXN0IHByb3ZpZGUganVzdGlmaWNhdGlvblwiKTtnb29nLmFzc2VydHMuYXNzZXJ0KCFnb29nLnN0cmluZy5pbnRlcm5hbC5pc0VtcHR5T3JXaGl0ZXNwYWNlKGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChhKSksXCJtdXN0IHByb3ZpZGUgbm9uLWVtcHR5IGp1c3RpZmljYXRpb25cIik7cmV0dXJuIGdvb2cuaHRtbC5TYWZlSHRtbC5jcmVhdGVTYWZlSHRtbFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGIsY3x8bnVsbCl9O1xuZ29vZy5odG1sLnVuY2hlY2tlZGNvbnZlcnNpb25zLnNhZmVTY3JpcHRGcm9tU3RyaW5nS25vd25Ub1NhdGlzZnlUeXBlQ29udHJhY3Q9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0U3RyaW5nKGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChhKSxcIm11c3QgcHJvdmlkZSBqdXN0aWZpY2F0aW9uXCIpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKSxcIm11c3QgcHJvdmlkZSBub24tZW1wdHkganVzdGlmaWNhdGlvblwiKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVTY3JpcHQuY3JlYXRlU2FmZVNjcmlwdFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGIpfTtcbmdvb2cuaHRtbC51bmNoZWNrZWRjb252ZXJzaW9ucy5zYWZlU3R5bGVGcm9tU3RyaW5nS25vd25Ub1NhdGlzZnlUeXBlQ29udHJhY3Q9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0U3RyaW5nKGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChhKSxcIm11c3QgcHJvdmlkZSBqdXN0aWZpY2F0aW9uXCIpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKSxcIm11c3QgcHJvdmlkZSBub24tZW1wdHkganVzdGlmaWNhdGlvblwiKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZS5jcmVhdGVTYWZlU3R5bGVTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShiKX07XG5nb29nLmh0bWwudW5jaGVja2VkY29udmVyc2lvbnMuc2FmZVN0eWxlU2hlZXRGcm9tU3RyaW5nS25vd25Ub1NhdGlzZnlUeXBlQ29udHJhY3Q9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0U3RyaW5nKGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChhKSxcIm11c3QgcHJvdmlkZSBqdXN0aWZpY2F0aW9uXCIpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKSxcIm11c3QgcHJvdmlkZSBub24tZW1wdHkganVzdGlmaWNhdGlvblwiKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVTdHlsZVNoZWV0LmNyZWF0ZVNhZmVTdHlsZVNoZWV0U2VjdXJpdHlQcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2UoYil9O1xuZ29vZy5odG1sLnVuY2hlY2tlZGNvbnZlcnNpb25zLnNhZmVVcmxGcm9tU3RyaW5nS25vd25Ub1NhdGlzZnlUeXBlQ29udHJhY3Q9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0U3RyaW5nKGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChhKSxcIm11c3QgcHJvdmlkZSBqdXN0aWZpY2F0aW9uXCIpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKSxcIm11c3QgcHJvdmlkZSBub24tZW1wdHkganVzdGlmaWNhdGlvblwiKTtyZXR1cm4gZ29vZy5odG1sLlNhZmVVcmwuY3JlYXRlU2FmZVVybFNlY3VyaXR5UHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlKGIpfTtcbmdvb2cuaHRtbC51bmNoZWNrZWRjb252ZXJzaW9ucy50cnVzdGVkUmVzb3VyY2VVcmxGcm9tU3RyaW5nS25vd25Ub1NhdGlzZnlUeXBlQ29udHJhY3Q9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0U3RyaW5nKGdvb2cuc3RyaW5nLkNvbnN0LnVud3JhcChhKSxcIm11c3QgcHJvdmlkZSBqdXN0aWZpY2F0aW9uXCIpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGEpKSxcIm11c3QgcHJvdmlkZSBub24tZW1wdHkganVzdGlmaWNhdGlvblwiKTtyZXR1cm4gZ29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC5jcmVhdGVUcnVzdGVkUmVzb3VyY2VVcmxTZWN1cml0eVByaXZhdGVEb05vdEFjY2Vzc09yRWxzZShiKX07Z29vZy5kb20uc2FmZT17fTtnb29nLmRvbS5zYWZlLkluc2VydEFkamFjZW50SHRtbFBvc2l0aW9uPXtBRlRFUkJFR0lOOlwiYWZ0ZXJiZWdpblwiLEFGVEVSRU5EOlwiYWZ0ZXJlbmRcIixCRUZPUkVCRUdJTjpcImJlZm9yZWJlZ2luXCIsQkVGT1JFRU5EOlwiYmVmb3JlZW5kXCJ9O2dvb2cuZG9tLnNhZmUuaW5zZXJ0QWRqYWNlbnRIdG1sPWZ1bmN0aW9uKGEsYixjKXthLmluc2VydEFkamFjZW50SFRNTChiLGdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXBUcnVzdGVkSFRNTChjKSl9O2dvb2cuZG9tLnNhZmUuU0VUX0lOTkVSX0hUTUxfRElTQUxMT1dFRF9UQUdTXz17TUFUSDohMCxTQ1JJUFQ6ITAsU1RZTEU6ITAsU1ZHOiEwLFRFTVBMQVRFOiEwfTtcbmdvb2cuZG9tLnNhZmUuaXNJbm5lckh0bWxDbGVhbnVwUmVjdXJzaXZlXz1nb29nLmZ1bmN0aW9ucy5jYWNoZVJldHVyblZhbHVlKGZ1bmN0aW9uKCl7aWYoZ29vZy5ERUJVRyYmXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBkb2N1bWVudClyZXR1cm4hMTt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtiLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO2EuYXBwZW5kQ2hpbGQoYik7aWYoZ29vZy5ERUJVRyYmIWEuZmlyc3RDaGlsZClyZXR1cm4hMTtiPWEuZmlyc3RDaGlsZC5maXJzdENoaWxkO2EuaW5uZXJIVE1MPWdvb2cuaHRtbC5TYWZlSHRtbC51bndyYXBUcnVzdGVkSFRNTChnb29nLmh0bWwuU2FmZUh0bWwuRU1QVFkpO3JldHVybiFiLnBhcmVudEVsZW1lbnR9KTtcbmdvb2cuZG9tLnNhZmUudW5zYWZlU2V0SW5uZXJIdG1sRG9Ob3RVc2VPckVsc2U9ZnVuY3Rpb24oYSxiKXtpZihnb29nLmRvbS5zYWZlLmlzSW5uZXJIdG1sQ2xlYW51cFJlY3Vyc2l2ZV8oKSlmb3IoO2EubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEubGFzdENoaWxkKTthLmlubmVySFRNTD1nb29nLmh0bWwuU2FmZUh0bWwudW53cmFwVHJ1c3RlZEhUTUwoYil9O1xuZ29vZy5kb20uc2FmZS5zZXRJbm5lckh0bWw9ZnVuY3Rpb24oYSxiKXtpZihnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMpe3ZhciBjPWEudGFnTmFtZS50b1VwcGVyQ2FzZSgpO2lmKGdvb2cuZG9tLnNhZmUuU0VUX0lOTkVSX0hUTUxfRElTQUxMT1dFRF9UQUdTX1tjXSl0aHJvdyBFcnJvcihcImdvb2cuZG9tLnNhZmUuc2V0SW5uZXJIdG1sIGNhbm5vdCBiZSB1c2VkIHRvIHNldCBjb250ZW50IG9mIFwiK2EudGFnTmFtZStcIi5cIik7fWdvb2cuZG9tLnNhZmUudW5zYWZlU2V0SW5uZXJIdG1sRG9Ob3RVc2VPckVsc2UoYSxiKX07Z29vZy5kb20uc2FmZS5zZXRPdXRlckh0bWw9ZnVuY3Rpb24oYSxiKXthLm91dGVySFRNTD1nb29nLmh0bWwuU2FmZUh0bWwudW53cmFwVHJ1c3RlZEhUTUwoYil9O1xuZ29vZy5kb20uc2FmZS5zZXRGb3JtRWxlbWVudEFjdGlvbj1mdW5jdGlvbihhLGIpe2I9YiBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlVXJsP2I6Z29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVBc3NlcnRVbmNoYW5nZWQoYik7Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxGb3JtRWxlbWVudChhKS5hY3Rpb249Z29vZy5odG1sLlNhZmVVcmwudW53cmFwVHJ1c3RlZFVSTChiKX07Z29vZy5kb20uc2FmZS5zZXRCdXR0b25Gb3JtQWN0aW9uPWZ1bmN0aW9uKGEsYil7Yj1iIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmw/Yjpnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUFzc2VydFVuY2hhbmdlZChiKTtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTEJ1dHRvbkVsZW1lbnQoYSkuZm9ybUFjdGlvbj1nb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMKGIpfTtcbmdvb2cuZG9tLnNhZmUuc2V0SW5wdXRGb3JtQWN0aW9uPWZ1bmN0aW9uKGEsYil7Yj1iIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmw/Yjpnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUFzc2VydFVuY2hhbmdlZChiKTtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTElucHV0RWxlbWVudChhKS5mb3JtQWN0aW9uPWdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcFRydXN0ZWRVUkwoYil9O2dvb2cuZG9tLnNhZmUuc2V0U3R5bGU9ZnVuY3Rpb24oYSxiKXthLnN0eWxlLmNzc1RleHQ9Z29vZy5odG1sLlNhZmVTdHlsZS51bndyYXAoYil9O2dvb2cuZG9tLnNhZmUuZG9jdW1lbnRXcml0ZT1mdW5jdGlvbihhLGIpe2Eud3JpdGUoZ29vZy5odG1sLlNhZmVIdG1sLnVud3JhcFRydXN0ZWRIVE1MKGIpKX07XG5nb29nLmRvbS5zYWZlLnNldEFuY2hvckhyZWY9ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTEFuY2hvckVsZW1lbnQoYSk7Yj1iIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmw/Yjpnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUFzc2VydFVuY2hhbmdlZChiKTthLmhyZWY9Z29vZy5odG1sLlNhZmVVcmwudW53cmFwVHJ1c3RlZFVSTChiKX07Z29vZy5kb20uc2FmZS5zZXRJbWFnZVNyYz1mdW5jdGlvbihhLGIpe2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MSW1hZ2VFbGVtZW50KGEpO2lmKCEoYiBpbnN0YW5jZW9mIGdvb2cuaHRtbC5TYWZlVXJsKSl7dmFyIGM9L15kYXRhOmltYWdlXFwvL2kudGVzdChiKTtiPWdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplQXNzZXJ0VW5jaGFuZ2VkKGIsYyl9YS5zcmM9Z29vZy5odG1sLlNhZmVVcmwudW53cmFwVHJ1c3RlZFVSTChiKX07XG5nb29nLmRvbS5zYWZlLnNldEF1ZGlvU3JjPWZ1bmN0aW9uKGEsYil7Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxBdWRpb0VsZW1lbnQoYSk7aWYoIShiIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmwpKXt2YXIgYz0vXmRhdGE6YXVkaW9cXC8vaS50ZXN0KGIpO2I9Z29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVBc3NlcnRVbmNoYW5nZWQoYixjKX1hLnNyYz1nb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMKGIpfTtnb29nLmRvbS5zYWZlLnNldFZpZGVvU3JjPWZ1bmN0aW9uKGEsYil7Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxWaWRlb0VsZW1lbnQoYSk7aWYoIShiIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmwpKXt2YXIgYz0vXmRhdGE6dmlkZW9cXC8vaS50ZXN0KGIpO2I9Z29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVBc3NlcnRVbmNoYW5nZWQoYixjKX1hLnNyYz1nb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMKGIpfTtcbmdvb2cuZG9tLnNhZmUuc2V0RW1iZWRTcmM9ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTEVtYmVkRWxlbWVudChhKTthLnNyYz1nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcFRydXN0ZWRTY3JpcHRVUkwoYil9O2dvb2cuZG9tLnNhZmUuc2V0RnJhbWVTcmM9ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTEZyYW1lRWxlbWVudChhKTthLnNyYz1nb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcFRydXN0ZWRVUkwoYil9O2dvb2cuZG9tLnNhZmUuc2V0SWZyYW1lU3JjPWZ1bmN0aW9uKGEsYil7Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxJRnJhbWVFbGVtZW50KGEpO2Euc3JjPWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwVHJ1c3RlZFVSTChiKX07XG5nb29nLmRvbS5zYWZlLnNldElmcmFtZVNyY2RvYz1mdW5jdGlvbihhLGIpe2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNIVE1MSUZyYW1lRWxlbWVudChhKTthLnNyY2RvYz1nb29nLmh0bWwuU2FmZUh0bWwudW53cmFwVHJ1c3RlZEhUTUwoYil9O1xuZ29vZy5kb20uc2FmZS5zZXRMaW5rSHJlZkFuZFJlbD1mdW5jdGlvbihhLGIsYyl7Z29vZy5kb20uYXNzZXJ0cy5hc3NlcnRJc0hUTUxMaW5rRWxlbWVudChhKTthLnJlbD1jO2dvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zKGMsXCJzdHlsZXNoZWV0XCIpPyhnb29nLmFzc2VydHMuYXNzZXJ0KGIgaW5zdGFuY2VvZiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsLCdVUkwgbXVzdCBiZSBUcnVzdGVkUmVzb3VyY2VVcmwgYmVjYXVzZSBcInJlbFwiIGNvbnRhaW5zIFwic3R5bGVzaGVldFwiJyksYS5ocmVmPWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwVHJ1c3RlZFVSTChiKSk6YS5ocmVmPWIgaW5zdGFuY2VvZiBnb29nLmh0bWwuVHJ1c3RlZFJlc291cmNlVXJsP2dvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwVHJ1c3RlZFVSTChiKTpiIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmw/Z29vZy5odG1sLlNhZmVVcmwudW53cmFwVHJ1c3RlZFVSTChiKTpcbmdvb2cuaHRtbC5TYWZlVXJsLnVud3JhcFRydXN0ZWRVUkwoZ29vZy5odG1sLlNhZmVVcmwuc2FuaXRpemVBc3NlcnRVbmNoYW5nZWQoYikpfTtnb29nLmRvbS5zYWZlLnNldE9iamVjdERhdGE9ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTE9iamVjdEVsZW1lbnQoYSk7YS5kYXRhPWdvb2cuaHRtbC5UcnVzdGVkUmVzb3VyY2VVcmwudW53cmFwVHJ1c3RlZFNjcmlwdFVSTChiKX07Z29vZy5kb20uc2FmZS5zZXRTY3JpcHRTcmM9ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTFNjcmlwdEVsZW1lbnQoYSk7YS5zcmM9Z29vZy5odG1sLlRydXN0ZWRSZXNvdXJjZVVybC51bndyYXBUcnVzdGVkU2NyaXB0VVJMKGIpOyhiPWdvb2cuZ2V0U2NyaXB0Tm9uY2UoKSkmJmEuc2V0QXR0cmlidXRlKFwibm9uY2VcIixiKX07XG5nb29nLmRvbS5zYWZlLnNldFNjcmlwdENvbnRlbnQ9ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzSFRNTFNjcmlwdEVsZW1lbnQoYSk7YS50ZXh0PWdvb2cuaHRtbC5TYWZlU2NyaXB0LnVud3JhcFRydXN0ZWRTY3JpcHQoYik7KGI9Z29vZy5nZXRTY3JpcHROb25jZSgpKSYmYS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGIpfTtnb29nLmRvbS5zYWZlLnNldExvY2F0aW9uSHJlZj1mdW5jdGlvbihhLGIpe2dvb2cuZG9tLmFzc2VydHMuYXNzZXJ0SXNMb2NhdGlvbihhKTtiPWIgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybD9iOmdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplQXNzZXJ0VW5jaGFuZ2VkKGIpO2EuaHJlZj1nb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMKGIpfTtcbmdvb2cuZG9tLnNhZmUuYXNzaWduTG9jYXRpb249ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzTG9jYXRpb24oYSk7Yj1iIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmw/Yjpnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUFzc2VydFVuY2hhbmdlZChiKTthLmFzc2lnbihnb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMKGIpKX07Z29vZy5kb20uc2FmZS5yZXBsYWNlTG9jYXRpb249ZnVuY3Rpb24oYSxiKXtnb29nLmRvbS5hc3NlcnRzLmFzc2VydElzTG9jYXRpb24oYSk7Yj1iIGluc3RhbmNlb2YgZ29vZy5odG1sLlNhZmVVcmw/Yjpnb29nLmh0bWwuU2FmZVVybC5zYW5pdGl6ZUFzc2VydFVuY2hhbmdlZChiKTthLnJlcGxhY2UoZ29vZy5odG1sLlNhZmVVcmwudW53cmFwVHJ1c3RlZFVSTChiKSl9O1xuZ29vZy5kb20uc2FmZS5vcGVuSW5XaW5kb3c9ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWEgaW5zdGFuY2VvZiBnb29nLmh0bWwuU2FmZVVybD9hOmdvb2cuaHRtbC5TYWZlVXJsLnNhbml0aXplQXNzZXJ0VW5jaGFuZ2VkKGEpO3JldHVybihifHxnb29nLmdsb2JhbCkub3Blbihnb29nLmh0bWwuU2FmZVVybC51bndyYXBUcnVzdGVkVVJMKGEpLGM/Z29vZy5zdHJpbmcuQ29uc3QudW53cmFwKGMpOlwiXCIsZCxlKX07Z29vZy5kb20uc2FmZS5wYXJzZUZyb21TdHJpbmdIdG1sPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdvb2cuZG9tLnNhZmUucGFyc2VGcm9tU3RyaW5nKGEsYixcInRleHQvaHRtbFwiKX07Z29vZy5kb20uc2FmZS5wYXJzZUZyb21TdHJpbmc9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhLnBhcnNlRnJvbVN0cmluZyhnb29nLmh0bWwuU2FmZUh0bWwudW53cmFwVHJ1c3RlZEhUTUwoYiksYyl9O1xuZ29vZy5kb20uc2FmZS5jcmVhdGVJbWFnZUZyb21CbG9iPWZ1bmN0aW9uKGEpe2lmKCEvXmltYWdlXFwvLiovZy50ZXN0KGEudHlwZSkpdGhyb3cgRXJyb3IoXCJnb29nLmRvbS5zYWZlLmNyZWF0ZUltYWdlRnJvbUJsb2Igb25seSBhY2NlcHRzIE1JTUUgdHlwZSBpbWFnZS8uKi5cIik7dmFyIGI9Z29vZy5nbG9iYWwuVVJMLmNyZWF0ZU9iamVjdFVSTChhKTthPW5ldyBnb29nLmdsb2JhbC5JbWFnZTthLm9ubG9hZD1mdW5jdGlvbigpe2dvb2cuZ2xvYmFsLlVSTC5yZXZva2VPYmplY3RVUkwoYil9O2dvb2cuZG9tLnNhZmUuc2V0SW1hZ2VTcmMoYSxnb29nLmh0bWwudW5jaGVja2VkY29udmVyc2lvbnMuc2FmZVVybEZyb21TdHJpbmdLbm93blRvU2F0aXNmeVR5cGVDb250cmFjdChnb29nLnN0cmluZy5Db25zdC5mcm9tKFwiSW1hZ2UgYmxvYiBVUkwuXCIpLGIpKTtyZXR1cm4gYX07Z29vZy5zdHJpbmcuREVURUNUX0RPVUJMRV9FU0NBUElORz0hMTtnb29nLnN0cmluZy5GT1JDRV9OT05fRE9NX0hUTUxfVU5FU0NBUElORz0hMTtnb29nLnN0cmluZy5Vbmljb2RlPXtOQlNQOlwiXFx1MDBhMFwifTtnb29nLnN0cmluZy5zdGFydHNXaXRoPWdvb2cuc3RyaW5nLmludGVybmFsLnN0YXJ0c1dpdGg7Z29vZy5zdHJpbmcuZW5kc1dpdGg9Z29vZy5zdHJpbmcuaW50ZXJuYWwuZW5kc1dpdGg7Z29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aD1nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVTdGFydHNXaXRoO2dvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUVuZHNXaXRoPWdvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUVuZHNXaXRoO2dvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUVxdWFscz1nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVFcXVhbHM7XG5nb29nLnN0cmluZy5zdWJzPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEuc3BsaXQoXCIlc1wiKSxkPVwiXCIsZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7ZS5sZW5ndGgmJjE8Yy5sZW5ndGg7KWQrPWMuc2hpZnQoKStlLnNoaWZ0KCk7cmV0dXJuIGQrYy5qb2luKFwiJXNcIil9O2dvb2cuc3RyaW5nLmNvbGxhcHNlV2hpdGVzcGFjZT1mdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9bXFxzXFx4YTBdKy9nLFwiIFwiKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpfTtnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlPWdvb2cuc3RyaW5nLmludGVybmFsLmlzRW1wdHlPcldoaXRlc3BhY2U7Z29vZy5zdHJpbmcuaXNFbXB0eVN0cmluZz1mdW5jdGlvbihhKXtyZXR1cm4gMD09YS5sZW5ndGh9O2dvb2cuc3RyaW5nLmlzRW1wdHk9Z29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZTtnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlU2FmZT1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZShnb29nLnN0cmluZy5tYWtlU2FmZShhKSl9O1xuZ29vZy5zdHJpbmcuaXNFbXB0eVNhZmU9Z29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZVNhZmU7Z29vZy5zdHJpbmcuaXNCcmVha2luZ1doaXRlc3BhY2U9ZnVuY3Rpb24oYSl7cmV0dXJuIS9bXlxcdFxcblxcciBdLy50ZXN0KGEpfTtnb29nLnN0cmluZy5pc0FscGhhPWZ1bmN0aW9uKGEpe3JldHVybiEvW15hLXpBLVpdLy50ZXN0KGEpfTtnb29nLnN0cmluZy5pc051bWVyaWM9ZnVuY3Rpb24oYSl7cmV0dXJuIS9bXjAtOV0vLnRlc3QoYSl9O2dvb2cuc3RyaW5nLmlzQWxwaGFOdW1lcmljPWZ1bmN0aW9uKGEpe3JldHVybiEvW15hLXpBLVowLTldLy50ZXN0KGEpfTtnb29nLnN0cmluZy5pc1NwYWNlPWZ1bmN0aW9uKGEpe3JldHVyblwiIFwiPT1hfTtnb29nLnN0cmluZy5pc1VuaWNvZGVDaGFyPWZ1bmN0aW9uKGEpe3JldHVybiAxPT1hLmxlbmd0aCYmXCIgXCI8PWEmJlwiflwiPj1hfHxcIlxcdTAwODBcIjw9YSYmXCJcXHVmZmZkXCI+PWF9O1xuZ29vZy5zdHJpbmcuc3RyaXBOZXdsaW5lcz1mdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC8oXFxyXFxufFxccnxcXG4pKy9nLFwiIFwiKX07Z29vZy5zdHJpbmcuY2Fub25pY2FsaXplTmV3bGluZXM9ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLFwiXFxuXCIpfTtnb29nLnN0cmluZy5ub3JtYWxpemVXaGl0ZXNwYWNlPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xceGEwfFxccy9nLFwiIFwiKX07Z29vZy5zdHJpbmcubm9ybWFsaXplU3BhY2VzPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xceGEwfFsgXFx0XSsvZyxcIiBcIil9O2dvb2cuc3RyaW5nLmNvbGxhcHNlQnJlYWtpbmdTcGFjZXM9ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvW1xcdFxcclxcbiBdKy9nLFwiIFwiKS5yZXBsYWNlKC9eW1xcdFxcclxcbiBdK3xbXFx0XFxyXFxuIF0rJC9nLFwiXCIpfTtnb29nLnN0cmluZy50cmltPWdvb2cuc3RyaW5nLmludGVybmFsLnRyaW07XG5nb29nLnN0cmluZy50cmltTGVmdD1mdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9eW1xcc1xceGEwXSsvLFwiXCIpfTtnb29nLnN0cmluZy50cmltUmlnaHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvW1xcc1xceGEwXSskLyxcIlwiKX07Z29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlQ29tcGFyZT1nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVDb21wYXJlO1xuZ29vZy5zdHJpbmcubnVtYmVyQXdhcmVDb21wYXJlXz1mdW5jdGlvbihhLGIsYyl7aWYoYT09YilyZXR1cm4gMDtpZighYSlyZXR1cm4tMTtpZighYilyZXR1cm4gMTtmb3IodmFyIGQ9YS50b0xvd2VyQ2FzZSgpLm1hdGNoKGMpLGU9Yi50b0xvd2VyQ2FzZSgpLm1hdGNoKGMpLGY9TWF0aC5taW4oZC5sZW5ndGgsZS5sZW5ndGgpLGc9MDtnPGY7ZysrKXtjPWRbZ107dmFyIGg9ZVtnXTtpZihjIT1oKXJldHVybiBhPXBhcnNlSW50KGMsMTApLCFpc05hTihhKSYmKGI9cGFyc2VJbnQoaCwxMCksIWlzTmFOKGIpJiZhLWIpP2EtYjpjPGg/LTE6MX1yZXR1cm4gZC5sZW5ndGghPWUubGVuZ3RoP2QubGVuZ3RoLWUubGVuZ3RoOmE8Yj8tMToxfTtnb29nLnN0cmluZy5pbnRBd2FyZUNvbXBhcmU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ29vZy5zdHJpbmcubnVtYmVyQXdhcmVDb21wYXJlXyhhLGIsL1xcZCt8XFxEKy9nKX07XG5nb29nLnN0cmluZy5mbG9hdEF3YXJlQ29tcGFyZT1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLnN0cmluZy5udW1iZXJBd2FyZUNvbXBhcmVfKGEsYiwvXFxkK3xcXC5cXGQrfFxcRCsvZyl9O2dvb2cuc3RyaW5nLm51bWVyYXRlQ29tcGFyZT1nb29nLnN0cmluZy5mbG9hdEF3YXJlQ29tcGFyZTtnb29nLnN0cmluZy51cmxFbmNvZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYSkpfTtnb29nLnN0cmluZy51cmxEZWNvZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChhLnJlcGxhY2UoL1xcKy9nLFwiIFwiKSl9O2dvb2cuc3RyaW5nLm5ld0xpbmVUb0JyPWdvb2cuc3RyaW5nLmludGVybmFsLm5ld0xpbmVUb0JyO1xuZ29vZy5zdHJpbmcuaHRtbEVzY2FwZT1mdW5jdGlvbihhLGIpe2E9Z29vZy5zdHJpbmcuaW50ZXJuYWwuaHRtbEVzY2FwZShhLGIpO2dvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcmJihhPWEucmVwbGFjZShnb29nLnN0cmluZy5FX1JFXyxcIiYjMTAxO1wiKSk7cmV0dXJuIGF9O2dvb2cuc3RyaW5nLkVfUkVfPS9lL2c7Z29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllcz1mdW5jdGlvbihhKXtyZXR1cm4gZ29vZy5zdHJpbmcuY29udGFpbnMoYSxcIiZcIik/IWdvb2cuc3RyaW5nLkZPUkNFX05PTl9ET01fSFRNTF9VTkVTQ0FQSU5HJiZcImRvY3VtZW50XCJpbiBnb29nLmdsb2JhbD9nb29nLnN0cmluZy51bmVzY2FwZUVudGl0aWVzVXNpbmdEb21fKGEpOmdvb2cuc3RyaW5nLnVuZXNjYXBlUHVyZVhtbEVudGl0aWVzXyhhKTphfTtcbmdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNXaXRoRG9jdW1lbnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ29vZy5zdHJpbmcuY29udGFpbnMoYSxcIiZcIik/Z29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllc1VzaW5nRG9tXyhhLGIpOmF9O1xuZ29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllc1VzaW5nRG9tXz1mdW5jdGlvbihhLGIpe3ZhciBjPXtcIiZhbXA7XCI6XCImXCIsXCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImcXVvdDtcIjonXCInfTt2YXIgZD1iP2IuY3JlYXRlRWxlbWVudChcImRpdlwiKTpnb29nLmdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBhLnJlcGxhY2UoZ29vZy5zdHJpbmcuSFRNTF9FTlRJVFlfUEFUVEVSTl8sZnVuY3Rpb24oYSxiKXt2YXIgZT1jW2FdO2lmKGUpcmV0dXJuIGU7XCIjXCI9PWIuY2hhckF0KDApJiYoYj1OdW1iZXIoXCIwXCIrYi5zdWJzdHIoMSkpLGlzTmFOKGIpfHwoZT1TdHJpbmcuZnJvbUNoYXJDb2RlKGIpKSk7ZXx8KGdvb2cuZG9tLnNhZmUuc2V0SW5uZXJIdG1sKGQsZ29vZy5odG1sLnVuY2hlY2tlZGNvbnZlcnNpb25zLnNhZmVIdG1sRnJvbVN0cmluZ0tub3duVG9TYXRpc2Z5VHlwZUNvbnRyYWN0KGdvb2cuc3RyaW5nLkNvbnN0LmZyb20oXCJTaW5nbGUgSFRNTCBlbnRpdHkuXCIpLFxuYStcIiBcIikpLGU9ZC5maXJzdENoaWxkLm5vZGVWYWx1ZS5zbGljZSgwLC0xKSk7cmV0dXJuIGNbYV09ZX0pfTtnb29nLnN0cmluZy51bmVzY2FwZVB1cmVYbWxFbnRpdGllc189ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvJihbXjtdKyk7L2csZnVuY3Rpb24oYSxjKXtzd2l0Y2goYyl7Y2FzZSBcImFtcFwiOnJldHVyblwiJlwiO2Nhc2UgXCJsdFwiOnJldHVyblwiPFwiO2Nhc2UgXCJndFwiOnJldHVyblwiPlwiO2Nhc2UgXCJxdW90XCI6cmV0dXJuJ1wiJztkZWZhdWx0OnJldHVyblwiI1wiIT1jLmNoYXJBdCgwKXx8KGM9TnVtYmVyKFwiMFwiK2Muc3Vic3RyKDEpKSxpc05hTihjKSk/YTpTdHJpbmcuZnJvbUNoYXJDb2RlKGMpfX0pfTtnb29nLnN0cmluZy5IVE1MX0VOVElUWV9QQVRURVJOXz0vJihbXjtcXHM8Jl0rKTs/L2c7Z29vZy5zdHJpbmcud2hpdGVzcGFjZUVzY2FwZT1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLnN0cmluZy5uZXdMaW5lVG9CcihhLnJlcGxhY2UoLyAgL2csXCIgJiMxNjA7XCIpLGIpfTtcbmdvb2cuc3RyaW5nLnByZXNlcnZlU3BhY2VzPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoLyhefFtcXG4gXSkgL2csXCIkMVwiK2dvb2cuc3RyaW5nLlVuaWNvZGUuTkJTUCl9O2dvb2cuc3RyaW5nLnN0cmlwUXVvdGVzPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIubGVuZ3RoLGQ9MDtkPGM7ZCsrKXt2YXIgZT0xPT1jP2I6Yi5jaGFyQXQoZCk7aWYoYS5jaGFyQXQoMCk9PWUmJmEuY2hhckF0KGEubGVuZ3RoLTEpPT1lKXJldHVybiBhLnN1YnN0cmluZygxLGEubGVuZ3RoLTEpfXJldHVybiBhfTtnb29nLnN0cmluZy50cnVuY2F0ZT1mdW5jdGlvbihhLGIsYyl7YyYmKGE9Z29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllcyhhKSk7YS5sZW5ndGg+YiYmKGE9YS5zdWJzdHJpbmcoMCxiLTMpK1wiLi4uXCIpO2MmJihhPWdvb2cuc3RyaW5nLmh0bWxFc2NhcGUoYSkpO3JldHVybiBhfTtcbmdvb2cuc3RyaW5nLnRydW5jYXRlTWlkZGxlPWZ1bmN0aW9uKGEsYixjLGQpe2MmJihhPWdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXMoYSkpO2lmKGQmJmEubGVuZ3RoPmIpe2Q+YiYmKGQ9Yik7dmFyIGU9YS5sZW5ndGgtZDthPWEuc3Vic3RyaW5nKDAsYi1kKStcIi4uLlwiK2Euc3Vic3RyaW5nKGUpfWVsc2UgYS5sZW5ndGg+YiYmKGQ9TWF0aC5mbG9vcihiLzIpLGU9YS5sZW5ndGgtZCxhPWEuc3Vic3RyaW5nKDAsZCtiJTIpK1wiLi4uXCIrYS5zdWJzdHJpbmcoZSkpO2MmJihhPWdvb2cuc3RyaW5nLmh0bWxFc2NhcGUoYSkpO3JldHVybiBhfTtnb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfPXtcIlxceDAwXCI6XCJcXFxcMFwiLFwiXFxiXCI6XCJcXFxcYlwiLFwiXFxmXCI6XCJcXFxcZlwiLFwiXFxuXCI6XCJcXFxcblwiLFwiXFxyXCI6XCJcXFxcclwiLFwiXFx0XCI6XCJcXFxcdFwiLFwiXFx4MEJcIjpcIlxcXFx4MEJcIiwnXCInOidcXFxcXCInLFwiXFxcXFwiOlwiXFxcXFxcXFxcIixcIjxcIjpcIlxcXFx1MDAzQ1wifTtnb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlXz17XCInXCI6XCJcXFxcJ1wifTtcbmdvb2cuc3RyaW5nLnF1b3RlPWZ1bmN0aW9uKGEpe2E9U3RyaW5nKGEpO2Zvcih2YXIgYj1bJ1wiJ10sYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hLmNoYXJBdChjKSxlPWQuY2hhckNvZGVBdCgwKTtiW2MrMV09Z29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzX1tkXXx8KDMxPGUmJjEyNz5lP2Q6Z29vZy5zdHJpbmcuZXNjYXBlQ2hhcihkKSl9Yi5wdXNoKCdcIicpO3JldHVybiBiLmpvaW4oXCJcIil9O2dvb2cuc3RyaW5nLmVzY2FwZVN0cmluZz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0wO2M8YS5sZW5ndGg7YysrKWJbY109Z29vZy5zdHJpbmcuZXNjYXBlQ2hhcihhLmNoYXJBdChjKSk7cmV0dXJuIGIuam9pbihcIlwiKX07XG5nb29nLnN0cmluZy5lc2NhcGVDaGFyPWZ1bmN0aW9uKGEpe2lmKGEgaW4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV8pcmV0dXJuIGdvb2cuc3RyaW5nLmpzRXNjYXBlQ2FjaGVfW2FdO2lmKGEgaW4gZ29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzXylyZXR1cm4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV9bYV09Z29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzX1thXTt2YXIgYj1hLmNoYXJDb2RlQXQoMCk7aWYoMzE8YiYmMTI3PmIpdmFyIGM9YTtlbHNle2lmKDI1Nj5iKXtpZihjPVwiXFxcXHhcIiwxNj5ifHwyNTY8YiljKz1cIjBcIn1lbHNlIGM9XCJcXFxcdVwiLDQwOTY+YiYmKGMrPVwiMFwiKTtjKz1iLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfXJldHVybiBnb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlX1thXT1jfTtnb29nLnN0cmluZy5jb250YWlucz1nb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucztnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVDb250YWlucz1nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVDb250YWlucztcbmdvb2cuc3RyaW5nLmNvdW50T2Y9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSYmYj9hLnNwbGl0KGIpLmxlbmd0aC0xOjB9O2dvb2cuc3RyaW5nLnJlbW92ZUF0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hOzA8PWImJmI8YS5sZW5ndGgmJjA8YyYmKGQ9YS5zdWJzdHIoMCxiKSthLnN1YnN0cihiK2MsYS5sZW5ndGgtYi1jKSk7cmV0dXJuIGR9O2dvb2cuc3RyaW5nLnJlbW92ZT1mdW5jdGlvbihhLGIpe3JldHVybiBhLnJlcGxhY2UoYixcIlwiKX07Z29vZy5zdHJpbmcucmVtb3ZlQWxsPWZ1bmN0aW9uKGEsYil7Yj1uZXcgUmVnRXhwKGdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShiKSxcImdcIik7cmV0dXJuIGEucmVwbGFjZShiLFwiXCIpfTtnb29nLnN0cmluZy5yZXBsYWNlQWxsPWZ1bmN0aW9uKGEsYixjKXtiPW5ldyBSZWdFeHAoZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKGIpLFwiZ1wiKTtyZXR1cm4gYS5yZXBsYWNlKGIsYy5yZXBsYWNlKC9cXCQvZyxcIiQkJCRcIikpfTtcbmdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZT1mdW5jdGlvbihhKXtyZXR1cm4gU3RyaW5nKGEpLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLFwiXFxcXCQxXCIpLnJlcGxhY2UoL1xceDA4L2csXCJcXFxceDA4XCIpfTtnb29nLnN0cmluZy5yZXBlYXQ9U3RyaW5nLnByb3RvdHlwZS5yZXBlYXQ/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5yZXBlYXQoYil9OmZ1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5KGIrMSkuam9pbihhKX07Z29vZy5zdHJpbmcucGFkTnVtYmVyPWZ1bmN0aW9uKGEsYixjKXthPWdvb2cuaXNEZWYoYyk/YS50b0ZpeGVkKGMpOlN0cmluZyhhKTtjPWEuaW5kZXhPZihcIi5cIik7LTE9PWMmJihjPWEubGVuZ3RoKTtyZXR1cm4gZ29vZy5zdHJpbmcucmVwZWF0KFwiMFwiLE1hdGgubWF4KDAsYi1jKSkrYX07Z29vZy5zdHJpbmcubWFrZVNhZmU9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjpTdHJpbmcoYSl9O1xuZ29vZy5zdHJpbmcuYnVpbGRTdHJpbmc9ZnVuY3Rpb24oYSl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLFwiXCIpfTtnb29nLnN0cmluZy5nZXRSYW5kb21TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcigyMTQ3NDgzNjQ4Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KStNYXRoLmFicyhNYXRoLmZsb29yKDIxNDc0ODM2NDgqTWF0aC5yYW5kb20oKSleZ29vZy5ub3coKSkudG9TdHJpbmcoMzYpfTtnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnM9Z29vZy5zdHJpbmcuaW50ZXJuYWwuY29tcGFyZVZlcnNpb25zO2dvb2cuc3RyaW5nLmhhc2hDb2RlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9MDtjPGEubGVuZ3RoOysrYyliPTMxKmIrYS5jaGFyQ29kZUF0KGMpPj4+MDtyZXR1cm4gYn07Z29vZy5zdHJpbmcudW5pcXVlU3RyaW5nQ291bnRlcl89MjE0NzQ4MzY0OCpNYXRoLnJhbmRvbSgpfDA7XG5nb29nLnN0cmluZy5jcmVhdGVVbmlxdWVTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cImdvb2dfXCIrZ29vZy5zdHJpbmcudW5pcXVlU3RyaW5nQ291bnRlcl8rK307Z29vZy5zdHJpbmcudG9OdW1iZXI9ZnVuY3Rpb24oYSl7dmFyIGI9TnVtYmVyKGEpO3JldHVybiAwPT1iJiZnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlKGEpP05hTjpifTtnb29nLnN0cmluZy5pc0xvd2VyQ2FtZWxDYXNlPWZ1bmN0aW9uKGEpe3JldHVybi9eW2Etel0rKFtBLVpdW2Etel0qKSokLy50ZXN0KGEpfTtnb29nLnN0cmluZy5pc1VwcGVyQ2FtZWxDYXNlPWZ1bmN0aW9uKGEpe3JldHVybi9eKFtBLVpdW2Etel0qKSskLy50ZXN0KGEpfTtnb29nLnN0cmluZy50b0NhbWVsQ2FzZT1mdW5jdGlvbihhKXtyZXR1cm4gU3RyaW5nKGEpLnJlcGxhY2UoL1xcLShbYS16XSkvZyxmdW5jdGlvbihhLGMpe3JldHVybiBjLnRvVXBwZXJDYXNlKCl9KX07XG5nb29nLnN0cmluZy50b1NlbGVjdG9yQ2FzZT1mdW5jdGlvbihhKXtyZXR1cm4gU3RyaW5nKGEpLnJlcGxhY2UoLyhbQS1aXSkvZyxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpfTtnb29nLnN0cmluZy50b1RpdGxlQ2FzZT1mdW5jdGlvbihhLGIpe2I9Z29vZy5pc1N0cmluZyhiKT9nb29nLnN0cmluZy5yZWdFeHBFc2NhcGUoYik6XCJcXFxcc1wiO3JldHVybiBhLnJlcGxhY2UobmV3IFJlZ0V4cChcIiheXCIrKGI/XCJ8W1wiK2IrXCJdK1wiOlwiXCIpK1wiKShbYS16XSlcIixcImdcIiksZnVuY3Rpb24oYSxiLGUpe3JldHVybiBiK2UudG9VcHBlckNhc2UoKX0pfTtnb29nLnN0cmluZy5jYXBpdGFsaXplPWZ1bmN0aW9uKGEpe3JldHVybiBTdHJpbmcoYS5jaGFyQXQoMCkpLnRvVXBwZXJDYXNlKCkrU3RyaW5nKGEuc3Vic3RyKDEpKS50b0xvd2VyQ2FzZSgpfTtcbmdvb2cuc3RyaW5nLnBhcnNlSW50PWZ1bmN0aW9uKGEpe2lzRmluaXRlKGEpJiYoYT1TdHJpbmcoYSkpO3JldHVybiBnb29nLmlzU3RyaW5nKGEpPy9eXFxzKi0/MHgvaS50ZXN0KGEpP3BhcnNlSW50KGEsMTYpOnBhcnNlSW50KGEsMTApOk5hTn07Z29vZy5zdHJpbmcuc3BsaXRMaW1pdD1mdW5jdGlvbihhLGIsYyl7YT1hLnNwbGl0KGIpO2Zvcih2YXIgZD1bXTswPGMmJmEubGVuZ3RoOylkLnB1c2goYS5zaGlmdCgpKSxjLS07YS5sZW5ndGgmJmQucHVzaChhLmpvaW4oYikpO3JldHVybiBkfTtnb29nLnN0cmluZy5sYXN0Q29tcG9uZW50PWZ1bmN0aW9uKGEsYil7aWYoYilcInN0cmluZ1wiPT10eXBlb2YgYiYmKGI9W2JdKTtlbHNlIHJldHVybiBhO2Zvcih2YXIgYz0tMSxkPTA7ZDxiLmxlbmd0aDtkKyspaWYoXCJcIiE9YltkXSl7dmFyIGU9YS5sYXN0SW5kZXhPZihiW2RdKTtlPmMmJihjPWUpfXJldHVybi0xPT1jP2E6YS5zbGljZShjKzEpfTtcbmdvb2cuc3RyaW5nLmVkaXREaXN0YW5jZT1mdW5jdGlvbihhLGIpe3ZhciBjPVtdLGQ9W107aWYoYT09YilyZXR1cm4gMDtpZighYS5sZW5ndGh8fCFiLmxlbmd0aClyZXR1cm4gTWF0aC5tYXgoYS5sZW5ndGgsYi5sZW5ndGgpO2Zvcih2YXIgZT0wO2U8Yi5sZW5ndGgrMTtlKyspY1tlXT1lO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2RbMF09ZSsxO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKWRbZisxXT1NYXRoLm1pbihkW2ZdKzEsY1tmKzFdKzEsY1tmXStOdW1iZXIoYVtlXSE9YltmXSkpO2ZvcihmPTA7ZjxjLmxlbmd0aDtmKyspY1tmXT1kW2ZdfXJldHVybiBkW2IubGVuZ3RoXX07Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmU9e307Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNQcmVzdG89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiUHJlc3RvXCIpfTtnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1RyaWRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiVHJpZGVudFwiKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiTVNJRVwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNFZGdlPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkVkZ2VcIil9O1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNXZWJLaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50SWdub3JlQ2FzZShcIldlYktpdFwiKSYmIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpfTtnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc0dlY2tvPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkdlY2tvXCIpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNXZWJLaXQoKSYmIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzVHJpZGVudCgpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNFZGdlKCl9O1xuZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbj1mdW5jdGlvbigpe3ZhciBhPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtpZihhKXthPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5leHRyYWN0VmVyc2lvblR1cGxlcyhhKTt2YXIgYj1nb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5nZXRFbmdpbmVUdXBsZV8oYSk7aWYoYilyZXR1cm5cIkdlY2tvXCI9PWJbMF0/Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbkZvcktleV8oYSxcIkZpcmVmb3hcIik6YlsxXTthPWFbMF07dmFyIGM7aWYoYSYmKGM9YVsyXSkmJihjPS9UcmlkZW50XFwvKFteXFxzO10rKS8uZXhlYyhjKSkpcmV0dXJuIGNbMV19cmV0dXJuXCJcIn07XG5nb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5nZXRFbmdpbmVUdXBsZV89ZnVuY3Rpb24oYSl7aWYoIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpKXJldHVybiBhWzFdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO2lmKFwiRWRnZVwiPT1jWzBdKXJldHVybiBjfX07Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNWZXJzaW9uT3JIaWdoZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIDA8PWdvb2cuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucyhnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5nZXRWZXJzaW9uKCksYSl9O2dvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmdldFZlcnNpb25Gb3JLZXlfPWZ1bmN0aW9uKGEsYil7cmV0dXJuKGE9Z29vZy5hcnJheS5maW5kKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGI9PWFbMF19KSkmJmFbMV18fFwiXCJ9O2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm09e307Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0FuZHJvaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiQW5kcm9pZFwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwb2Q9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiaVBvZFwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwaG9uZT1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUGhvbmVcIikmJiFnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUG9kXCIpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiaVBhZFwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiaVBhZFwiKX07XG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSW9zPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcGhvbmUoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwb2QoKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc01hY2ludG9zaD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJNYWNpbnRvc2hcIil9O2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNMaW51eD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJMaW51eFwiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc1dpbmRvd3M9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiV2luZG93c1wiKX07XG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQ2hyb21lT1M9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiQ3JPU1wiKX07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0Nocm9tZWNhc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiQ3JLZXlcIil9O2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNLYWlPUz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnRJZ25vcmVDYXNlKFwiS2FpT1NcIil9O2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNHbzJQaG9uZT1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnRJZ25vcmVDYXNlKFwiR0FGUFwiKX07XG5nb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmdldFZlcnNpb249ZnVuY3Rpb24oKXt2YXIgYT1nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0VXNlckFnZW50KCksYj1cIlwiO2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNXaW5kb3dzKCk/KGI9L1dpbmRvd3MgKD86TlR8UGhvbmUpIChbMC05Ll0rKS8sYj0oYT1iLmV4ZWMoYSkpP2FbMV06XCIwLjBcIik6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lvcygpPyhiPS8oPzppUGhvbmV8aVBvZHxpUGFkfENQVSlcXHMrT1NcXHMrKFxcUyspLyxiPShhPWIuZXhlYyhhKSkmJmFbMV0ucmVwbGFjZSgvXy9nLFwiLlwiKSk6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc01hY2ludG9zaCgpPyhiPS9NYWMgT1MgWCAoWzAtOV8uXSspLyxiPShhPWIuZXhlYyhhKSk/YVsxXS5yZXBsYWNlKC9fL2csXCIuXCIpOlwiMTBcIik6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0thaU9TKCk/KGI9Lyg/OkthaU9TKVxcLyhcXFMrKS9pLFxuYj0oYT1iLmV4ZWMoYSkpJiZhWzFdKTpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQW5kcm9pZCgpPyhiPS9BbmRyb2lkXFxzKyhbXlxcKTtdKykoXFwpfDspLyxiPShhPWIuZXhlYyhhKSkmJmFbMV0pOmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNDaHJvbWVPUygpJiYoYj0vKD86Q3JPU1xccysoPzppNjg2fHg4Nl82NClcXHMrKFswLTkuXSspKS8sYj0oYT1iLmV4ZWMoYSkpJiZhWzFdKTtyZXR1cm4gYnx8XCJcIn07Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc1ZlcnNpb25PckhpZ2hlcj1mdW5jdGlvbihhKXtyZXR1cm4gMDw9Z29vZy5zdHJpbmcuY29tcGFyZVZlcnNpb25zKGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uZ2V0VmVyc2lvbigpLGEpfTtnb29nLnJlZmxlY3Q9e307Z29vZy5yZWZsZWN0Lm9iamVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBifTtnb29nLnJlZmxlY3Qub2JqZWN0UHJvcGVydHk9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYX07Z29vZy5yZWZsZWN0LnNpbmtWYWx1ZT1mdW5jdGlvbihhKXtnb29nLnJlZmxlY3Quc2lua1ZhbHVlW1wiIFwiXShhKTtyZXR1cm4gYX07Z29vZy5yZWZsZWN0LnNpbmtWYWx1ZVtcIiBcIl09Z29vZy5udWxsRnVuY3Rpb247Z29vZy5yZWZsZWN0LmNhbkFjY2Vzc1Byb3BlcnR5PWZ1bmN0aW9uKGEsYil7dHJ5e3JldHVybiBnb29nLnJlZmxlY3Quc2lua1ZhbHVlKGFbYl0pLCEwfWNhdGNoKGMpe31yZXR1cm4hMX07Z29vZy5yZWZsZWN0LmNhY2hlPWZ1bmN0aW9uKGEsYixjLGQpe2Q9ZD9kKGIpOmI7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGQpP2FbZF06YVtkXT1jKGIpfTtnb29nLnVzZXJBZ2VudD17fTtnb29nLnVzZXJBZ2VudC5BU1NVTUVfSUU9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX0VER0U9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX0dFQ0tPPSExO2dvb2cudXNlckFnZW50LkFTU1VNRV9XRUJLSVQ9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX01PQklMRV9XRUJLSVQ9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBPSExO2dvb2cudXNlckFnZW50LkFTU1VNRV9BTllfVkVSU0lPTj0hMTtnb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz1nb29nLnVzZXJBZ2VudC5BU1NVTUVfSUV8fGdvb2cudXNlckFnZW50LkFTU1VNRV9FREdFfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfR0VDS098fGdvb2cudXNlckFnZW50LkFTU1VNRV9NT0JJTEVfV0VCS0lUfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfT1BFUkE7Z29vZy51c2VyQWdlbnQuZ2V0VXNlckFnZW50U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKX07XG5nb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3JUeXBlZD1mdW5jdGlvbigpe3JldHVybiBnb29nLmdsb2JhbC5uYXZpZ2F0b3J8fG51bGx9O2dvb2cudXNlckFnZW50LmdldE5hdmlnYXRvcj1mdW5jdGlvbigpe3JldHVybiBnb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3JUeXBlZCgpfTtnb29nLnVzZXJBZ2VudC5PUEVSQT1nb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfT1BFUkE6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmEoKTtnb29nLnVzZXJBZ2VudC5JRT1nb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfSUU6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzSUUoKTtnb29nLnVzZXJBZ2VudC5FREdFPWdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9FREdFOmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpO1xuZ29vZy51c2VyQWdlbnQuRURHRV9PUl9JRT1nb29nLnVzZXJBZ2VudC5FREdFfHxnb29nLnVzZXJBZ2VudC5JRTtnb29nLnVzZXJBZ2VudC5HRUNLTz1nb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfR0VDS086Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNHZWNrbygpO2dvb2cudXNlckFnZW50LldFQktJVD1nb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfTU9CSUxFX1dFQktJVDpnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1dlYktpdCgpO2dvb2cudXNlckFnZW50LmlzTW9iaWxlXz1mdW5jdGlvbigpe3JldHVybiBnb29nLnVzZXJBZ2VudC5XRUJLSVQmJmdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIk1vYmlsZVwiKX07XG5nb29nLnVzZXJBZ2VudC5NT0JJTEU9Z29vZy51c2VyQWdlbnQuQVNTVU1FX01PQklMRV9XRUJLSVR8fGdvb2cudXNlckFnZW50LmlzTW9iaWxlXygpO2dvb2cudXNlckFnZW50LlNBRkFSST1nb29nLnVzZXJBZ2VudC5XRUJLSVQ7Z29vZy51c2VyQWdlbnQuZGV0ZXJtaW5lUGxhdGZvcm1fPWZ1bmN0aW9uKCl7dmFyIGE9Z29vZy51c2VyQWdlbnQuZ2V0TmF2aWdhdG9yVHlwZWQoKTtyZXR1cm4gYSYmYS5wbGF0Zm9ybXx8XCJcIn07Z29vZy51c2VyQWdlbnQuUExBVEZPUk09Z29vZy51c2VyQWdlbnQuZGV0ZXJtaW5lUGxhdGZvcm1fKCk7Z29vZy51c2VyQWdlbnQuQVNTVU1FX01BQz0hMTtnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XUz0hMTtnb29nLnVzZXJBZ2VudC5BU1NVTUVfTElOVVg9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMT0hMTtnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRD0hMTtnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FPSExO1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQQUQ9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lQT0Q9ITE7Z29vZy51c2VyQWdlbnQuQVNTVU1FX0tBSU9TPSExO2dvb2cudXNlckFnZW50LkFTU1VNRV9HTzJQSE9ORT0hMTtnb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl89Z29vZy51c2VyQWdlbnQuQVNTVU1FX01BQ3x8Z29vZy51c2VyQWdlbnQuQVNTVU1FX1dJTkRPV1N8fGdvb2cudXNlckFnZW50LkFTU1VNRV9MSU5VWHx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMXx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX0FORFJPSUR8fGdvb2cudXNlckFnZW50LkFTU1VNRV9JUEhPTkV8fGdvb2cudXNlckFnZW50LkFTU1VNRV9JUEFEfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBPRDtnb29nLnVzZXJBZ2VudC5NQUM9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9NQUM6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc01hY2ludG9zaCgpO1xuZ29vZy51c2VyQWdlbnQuV0lORE9XUz1nb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX1dJTkRPV1M6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc1dpbmRvd3MoKTtnb29nLnVzZXJBZ2VudC5pc0xlZ2FjeUxpbnV4Xz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTGludXgoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0Nocm9tZU9TKCl9O2dvb2cudXNlckFnZW50LkxJTlVYPWdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfTElOVVg6Z29vZy51c2VyQWdlbnQuaXNMZWdhY3lMaW51eF8oKTtnb29nLnVzZXJBZ2VudC5pc1gxMV89ZnVuY3Rpb24oKXt2YXIgYT1nb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3JUeXBlZCgpO3JldHVybiEhYSYmZ29vZy5zdHJpbmcuY29udGFpbnMoYS5hcHBWZXJzaW9ufHxcIlwiLFwiWDExXCIpfTtcbmdvb2cudXNlckFnZW50LlgxMT1nb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMTpnb29nLnVzZXJBZ2VudC5pc1gxMV8oKTtnb29nLnVzZXJBZ2VudC5BTkRST0lEPWdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRDpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQW5kcm9pZCgpO2dvb2cudXNlckFnZW50LklQSE9ORT1nb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lQSE9ORTpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lKCk7Z29vZy51c2VyQWdlbnQuSVBBRD1nb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lQQUQ6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQoKTtcbmdvb2cudXNlckFnZW50LklQT0Q9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9JUE9EOmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcG9kKCk7Z29vZy51c2VyQWdlbnQuSU9TPWdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBBRHx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lQT0Q6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lvcygpO2dvb2cudXNlckFnZW50LktBSU9TPWdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfS0FJT1M6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0thaU9TKCk7Z29vZy51c2VyQWdlbnQuR08yUEhPTkU9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9HTzJQSE9ORTpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzR28yUGhvbmUoKTtcbmdvb2cudXNlckFnZW50LmRldGVybWluZVZlcnNpb25fPWZ1bmN0aW9uKCl7dmFyIGE9XCJcIixiPWdvb2cudXNlckFnZW50LmdldFZlcnNpb25SZWdleFJlc3VsdF8oKTtiJiYoYT1iP2JbMV06XCJcIik7cmV0dXJuIGdvb2cudXNlckFnZW50LklFJiYoYj1nb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfKCksbnVsbCE9YiYmYj5wYXJzZUZsb2F0KGEpKT9TdHJpbmcoYik6YX07XG5nb29nLnVzZXJBZ2VudC5nZXRWZXJzaW9uUmVnZXhSZXN1bHRfPWZ1bmN0aW9uKCl7dmFyIGE9Z29vZy51c2VyQWdlbnQuZ2V0VXNlckFnZW50U3RyaW5nKCk7aWYoZ29vZy51c2VyQWdlbnQuR0VDS08pcmV0dXJuL3J2OihbXlxcKTtdKykoXFwpfDspLy5leGVjKGEpO2lmKGdvb2cudXNlckFnZW50LkVER0UpcmV0dXJuL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZihnb29nLnVzZXJBZ2VudC5JRSlyZXR1cm4vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoZ29vZy51c2VyQWdlbnQuV0VCS0lUKXJldHVybi9XZWJLaXRcXC8oXFxTKykvLmV4ZWMoYSk7aWYoZ29vZy51c2VyQWdlbnQuT1BFUkEpcmV0dXJuLyg/OlZlcnNpb24pWyBcXC9dPyhcXFMrKS8uZXhlYyhhKX07Z29vZy51c2VyQWdlbnQuZ2V0RG9jdW1lbnRNb2RlXz1mdW5jdGlvbigpe3ZhciBhPWdvb2cuZ2xvYmFsLmRvY3VtZW50O3JldHVybiBhP2EuZG9jdW1lbnRNb2RlOnZvaWQgMH07XG5nb29nLnVzZXJBZ2VudC5WRVJTSU9OPWdvb2cudXNlckFnZW50LmRldGVybWluZVZlcnNpb25fKCk7Z29vZy51c2VyQWdlbnQuY29tcGFyZT1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMoYSxiKX07Z29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJDYWNoZV89e307Z29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cudXNlckFnZW50LkFTU1VNRV9BTllfVkVSU0lPTnx8Z29vZy5yZWZsZWN0LmNhY2hlKGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyQ2FjaGVfLGEsZnVuY3Rpb24oKXtyZXR1cm4gMDw9Z29vZy5zdHJpbmcuY29tcGFyZVZlcnNpb25zKGdvb2cudXNlckFnZW50LlZFUlNJT04sYSl9KX07Z29vZy51c2VyQWdlbnQuaXNWZXJzaW9uPWdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyO1xuZ29vZy51c2VyQWdlbnQuaXNEb2N1bWVudE1vZGVPckhpZ2hlcj1mdW5jdGlvbihhKXtyZXR1cm4gTnVtYmVyKGdvb2cudXNlckFnZW50LkRPQ1VNRU5UX01PREUpPj1hfTtnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZT1nb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyO2dvb2cudXNlckFnZW50LkRPQ1VNRU5UX01PREU9ZnVuY3Rpb24oKXtpZihnb29nLmdsb2JhbC5kb2N1bWVudCYmZ29vZy51c2VyQWdlbnQuSUUpcmV0dXJuIGdvb2cudXNlckFnZW50LmdldERvY3VtZW50TW9kZV8oKX0oKTtnb29nLnVzZXJBZ2VudC5wcm9kdWN0PXt9O2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0ZJUkVGT1g9ITE7Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBIT05FPSExO2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQQUQ9ITE7Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfQU5EUk9JRD0hMTtnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9DSFJPTUU9ITE7Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfU0FGQVJJPSExO1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXz1nb29nLnVzZXJBZ2VudC5BU1NVTUVfSUV8fGdvb2cudXNlckFnZW50LkFTU1VNRV9FREdFfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfT1BFUkF8fGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0ZJUkVGT1h8fGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQSE9ORXx8Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBBRHx8Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfQU5EUk9JRHx8Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfQ0hST01FfHxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9TQUZBUkk7Z29vZy51c2VyQWdlbnQucHJvZHVjdC5PUEVSQT1nb29nLnVzZXJBZ2VudC5PUEVSQTtnb29nLnVzZXJBZ2VudC5wcm9kdWN0LklFPWdvb2cudXNlckFnZW50LklFO2dvb2cudXNlckFnZW50LnByb2R1Y3QuRURHRT1nb29nLnVzZXJBZ2VudC5FREdFO1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5GSVJFRk9YPWdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl8/Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfRklSRUZPWDpnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNGaXJlZm94KCk7Z29vZy51c2VyQWdlbnQucHJvZHVjdC5pc0lwaG9uZU9ySXBvZF89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwaG9uZSgpfHxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBvZCgpfTtnb29nLnVzZXJBZ2VudC5wcm9kdWN0LklQSE9ORT1nb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fP2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQSE9ORTpnb29nLnVzZXJBZ2VudC5wcm9kdWN0LmlzSXBob25lT3JJcG9kXygpO1xuZ29vZy51c2VyQWdlbnQucHJvZHVjdC5JUEFEPWdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl8/Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBBRDpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBhZCgpO2dvb2cudXNlckFnZW50LnByb2R1Y3QuQU5EUk9JRD1nb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fP2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0FORFJPSUQ6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQW5kcm9pZEJyb3dzZXIoKTtnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkNIUk9NRT1nb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fP2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0NIUk9NRTpnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNDaHJvbWUoKTtcbmdvb2cudXNlckFnZW50LnByb2R1Y3QuaXNTYWZhcmlEZXNrdG9wXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNTYWZhcmkoKSYmIWdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJb3MoKX07Z29vZy51c2VyQWdlbnQucHJvZHVjdC5TQUZBUkk9Z29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9TQUZBUkk6Z29vZy51c2VyQWdlbnQucHJvZHVjdC5pc1NhZmFyaURlc2t0b3BfKCk7Z29vZy5jcnlwdC5iYXNlNjQ9e307Z29vZy5jcnlwdC5iYXNlNjQuREVGQVVMVF9BTFBIQUJFVF9DT01NT05fPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIjtnb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFM9Z29vZy5jcnlwdC5iYXNlNjQuREVGQVVMVF9BTFBIQUJFVF9DT01NT05fK1wiKy89XCI7Z29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX1dFQlNBRkU9Z29vZy5jcnlwdC5iYXNlNjQuREVGQVVMVF9BTFBIQUJFVF9DT01NT05fK1wiLV8uXCI7Z29vZy5jcnlwdC5iYXNlNjQuQWxwaGFiZXQ9e0RFRkFVTFQ6MCxOT19QQURESU5HOjEsV0VCU0FGRToyLFdFQlNBRkVfRE9UX1BBRERJTkc6MyxXRUJTQUZFX05PX1BBRERJTkc6NH07Z29vZy5jcnlwdC5iYXNlNjQucGFkZGluZ0NoYXJzXz1cIj0uXCI7XG5nb29nLmNyeXB0LmJhc2U2NC5pc1BhZGRpbmdfPWZ1bmN0aW9uKGEpe3JldHVybiBnb29nLnN0cmluZy5jb250YWlucyhnb29nLmNyeXB0LmJhc2U2NC5wYWRkaW5nQ2hhcnNfLGEpfTtnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwc189e307Z29vZy5jcnlwdC5iYXNlNjQuY2hhclRvQnl0ZU1hcF89bnVsbDtnb29nLmNyeXB0LmJhc2U2NC5BU1NVTUVfTkFUSVZFX1NVUFBPUlRfPWdvb2cudXNlckFnZW50LkdFQ0tPfHxnb29nLnVzZXJBZ2VudC5XRUJLSVQmJiFnb29nLnVzZXJBZ2VudC5wcm9kdWN0LlNBRkFSSXx8Z29vZy51c2VyQWdlbnQuT1BFUkE7Z29vZy5jcnlwdC5iYXNlNjQuSEFTX05BVElWRV9FTkNPREVfPWdvb2cuY3J5cHQuYmFzZTY0LkFTU1VNRV9OQVRJVkVfU1VQUE9SVF98fFwiZnVuY3Rpb25cIj09dHlwZW9mIGdvb2cuZ2xvYmFsLmJ0b2E7XG5nb29nLmNyeXB0LmJhc2U2NC5IQVNfTkFUSVZFX0RFQ09ERV89Z29vZy5jcnlwdC5iYXNlNjQuQVNTVU1FX05BVElWRV9TVVBQT1JUX3x8IWdvb2cudXNlckFnZW50LnByb2R1Y3QuU0FGQVJJJiYhZ29vZy51c2VyQWdlbnQuSUUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGdvb2cuZ2xvYmFsLmF0b2I7XG5nb29nLmNyeXB0LmJhc2U2NC5lbmNvZGVCeXRlQXJyYXk9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0KGdvb2cuaXNBcnJheUxpa2UoYSksXCJlbmNvZGVCeXRlQXJyYXkgdGFrZXMgYW4gYXJyYXkgYXMgYSBwYXJhbWV0ZXJcIik7dm9pZCAwPT09YiYmKGI9Z29vZy5jcnlwdC5iYXNlNjQuQWxwaGFiZXQuREVGQVVMVCk7Z29vZy5jcnlwdC5iYXNlNjQuaW5pdF8oKTtiPWdvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBzX1tiXTtmb3IodmFyIGM9W10sZD0wO2Q8YS5sZW5ndGg7ZCs9Myl7dmFyIGU9YVtkXSxmPWQrMTxhLmxlbmd0aCxnPWY/YVtkKzFdOjAsaD1kKzI8YS5sZW5ndGgsaz1oP2FbZCsyXTowLGw9ZT4+MjtlPShlJjMpPDw0fGc+PjQ7Zz0oZyYxNSk8PDJ8az4+NjtrJj02MztofHwoaz02NCxmfHwoZz02NCkpO2MucHVzaChiW2xdLGJbZV0sYltnXXx8XCJcIixiW2tdfHxcIlwiKX1yZXR1cm4gYy5qb2luKFwiXCIpfTtcbmdvb2cuY3J5cHQuYmFzZTY0LmVuY29kZVN0cmluZz1mdW5jdGlvbihhLGIpe3JldHVybiBnb29nLmNyeXB0LmJhc2U2NC5IQVNfTkFUSVZFX0VOQ09ERV8mJiFiP2dvb2cuZ2xvYmFsLmJ0b2EoYSk6Z29vZy5jcnlwdC5iYXNlNjQuZW5jb2RlQnl0ZUFycmF5KGdvb2cuY3J5cHQuc3RyaW5nVG9CeXRlQXJyYXkoYSksYil9O2dvb2cuY3J5cHQuYmFzZTY0LmRlY29kZVN0cmluZz1mdW5jdGlvbihhLGIpe2lmKGdvb2cuY3J5cHQuYmFzZTY0LkhBU19OQVRJVkVfREVDT0RFXyYmIWIpcmV0dXJuIGdvb2cuZ2xvYmFsLmF0b2IoYSk7dmFyIGM9XCJcIjtnb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmdJbnRlcm5hbF8oYSxmdW5jdGlvbihhKXtjKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGEpfSk7cmV0dXJuIGN9O1xuZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXk9ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXTtnb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmdJbnRlcm5hbF8oYSxmdW5jdGlvbihhKXtjLnB1c2goYSl9KTtyZXR1cm4gY307XG5nb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmdUb1VpbnQ4QXJyYXk9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydCghZ29vZy51c2VyQWdlbnQuSUV8fGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyKFwiMTBcIiksXCJCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzXCIpO3ZhciBiPWEubGVuZ3RoLGM9MypiLzQ7YyUzP2M9TWF0aC5mbG9vcihjKTpnb29nLmNyeXB0LmJhc2U2NC5pc1BhZGRpbmdfKGFbYi0xXSkmJihjPWdvb2cuY3J5cHQuYmFzZTY0LmlzUGFkZGluZ18oYVtiLTJdKT9jLTI6Yy0xKTt2YXIgZD1uZXcgVWludDhBcnJheShjKSxlPTA7Z29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nSW50ZXJuYWxfKGEsZnVuY3Rpb24oYSl7ZFtlKytdPWF9KTtyZXR1cm4gZC5zdWJhcnJheSgwLGUpfTtcbmdvb2cuY3J5cHQuYmFzZTY0LmRlY29kZVN0cmluZ0ludGVybmFsXz1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYil7Zm9yKDtkPGEubGVuZ3RoOyl7dmFyIGM9YS5jaGFyQXQoZCsrKSxlPWdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBfW2NdO2lmKG51bGwhPWUpcmV0dXJuIGU7aWYoIWdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UoYykpdGhyb3cgRXJyb3IoXCJVbmtub3duIGJhc2U2NCBlbmNvZGluZyBhdCBjaGFyOiBcIitjKTt9cmV0dXJuIGJ9Z29vZy5jcnlwdC5iYXNlNjQuaW5pdF8oKTtmb3IodmFyIGQ9MDs7KXt2YXIgZT1jKC0xKSxmPWMoMCksZz1jKDY0KSxoPWMoNjQpO2lmKDY0PT09aCYmLTE9PT1lKWJyZWFrO2IoZTw8MnxmPj40KTs2NCE9ZyYmKGIoZjw8NCYyNDB8Zz4+MiksNjQhPWgmJmIoZzw8NiYxOTJ8aCkpfX07XG5nb29nLmNyeXB0LmJhc2U2NC5pbml0Xz1mdW5jdGlvbigpe2lmKCFnb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwXyl7Z29vZy5jcnlwdC5iYXNlNjQuY2hhclRvQnl0ZU1hcF89e307Zm9yKHZhciBhPWdvb2cuY3J5cHQuYmFzZTY0LkRFRkFVTFRfQUxQSEFCRVRfQ09NTU9OXy5zcGxpdChcIlwiKSxiPVtcIisvPVwiLFwiKy9cIixcIi1fPVwiLFwiLV8uXCIsXCItX1wiXSxjPTA7NT5jO2MrKyl7dmFyIGQ9YS5jb25jYXQoYltjXS5zcGxpdChcIlwiKSk7Z29vZy5jcnlwdC5iYXNlNjQuYnl0ZVRvQ2hhck1hcHNfW2NdPWQ7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe3ZhciBmPWRbZV0sZz1nb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwX1tmXTt2b2lkIDA9PT1nP2dvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBfW2ZdPWU6Z29vZy5hc3NlcnRzLmFzc2VydChnPT09ZSl9fX19O2pzcGIudXRpbHM9e307anNwYi51dGlscy5zcGxpdDY0TG93PTA7anNwYi51dGlscy5zcGxpdDY0SGlnaD0wO2pzcGIudXRpbHMuc3BsaXRVaW50NjQ9ZnVuY3Rpb24oYSl7dmFyIGI9YT4+PjA7YT1NYXRoLmZsb29yKChhLWIpL2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMik+Pj4wO2pzcGIudXRpbHMuc3BsaXQ2NExvdz1iO2pzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9YX07anNwYi51dGlscy5zcGxpdEludDY0PWZ1bmN0aW9uKGEpe3ZhciBiPTA+YTthPU1hdGguYWJzKGEpO3ZhciBjPWE+Pj4wO2E9TWF0aC5mbG9vcigoYS1jKS9qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpO2E+Pj49MDtiJiYoYT1+YT4+PjAsYz0ofmM+Pj4wKSsxLDQyOTQ5NjcyOTU8YyYmKGM9MCxhKyssNDI5NDk2NzI5NTxhJiYoYT0wKSkpO2pzcGIudXRpbHMuc3BsaXQ2NExvdz1jO2pzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9YX07XG5qc3BiLnV0aWxzLnNwbGl0WmlnemFnNjQ9ZnVuY3Rpb24oYSl7dmFyIGI9MD5hO2E9MipNYXRoLmFicyhhKTtqc3BiLnV0aWxzLnNwbGl0VWludDY0KGEpO2E9anNwYi51dGlscy5zcGxpdDY0TG93O3ZhciBjPWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g7YiYmKDA9PWE/MD09Yz9jPWE9NDI5NDk2NzI5NTooYy0tLGE9NDI5NDk2NzI5NSk6YS0tKTtqc3BiLnV0aWxzLnNwbGl0NjRMb3c9YTtqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPWN9O1xuanNwYi51dGlscy5zcGxpdEZsb2F0MzI9ZnVuY3Rpb24oYSl7dmFyIGI9MD5hPzE6MDthPWI/LWE6YTtpZigwPT09YSkwPDEvYT8oanNwYi51dGlscy5zcGxpdDY0SGlnaD0wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz0wKTooanNwYi51dGlscy5zcGxpdDY0SGlnaD0wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz0yMTQ3NDgzNjQ4KTtlbHNlIGlmKGlzTmFOKGEpKWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9MCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9MjE0NzQ4MzY0NztlbHNlIGlmKGE+anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQzMl9NQVgpanNwYi51dGlscy5zcGxpdDY0SGlnaD0wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz0oYjw8MzF8MjEzOTA5NTA0MCk+Pj4wO2Vsc2UgaWYoYTxqc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX01JTilhPU1hdGgucm91bmQoYS9NYXRoLnBvdygyLC0xNDkpKSxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPTAsanNwYi51dGlscy5zcGxpdDY0TG93PShiPDwzMXxcbmEpPj4+MDtlbHNle3ZhciBjPU1hdGguZmxvb3IoTWF0aC5sb2coYSkvTWF0aC5MTjIpO2EqPU1hdGgucG93KDIsLWMpO2E9TWF0aC5yb3VuZChhKmpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18yMyk7MTY3NzcyMTY8PWEmJisrYztqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPTA7anNwYi51dGlscy5zcGxpdDY0TG93PShiPDwzMXxjKzEyNzw8MjN8YSY4Mzg4NjA3KT4+PjB9fTtcbmpzcGIudXRpbHMuc3BsaXRGbG9hdDY0PWZ1bmN0aW9uKGEpe3ZhciBiPTA+YT8xOjA7YT1iPy1hOmE7aWYoMD09PWEpanNwYi51dGlscy5zcGxpdDY0SGlnaD0wPDEvYT8wOjIxNDc0ODM2NDgsanNwYi51dGlscy5zcGxpdDY0TG93PTA7ZWxzZSBpZihpc05hTihhKSlqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPTIxNDc0ODM2NDcsanNwYi51dGlscy5zcGxpdDY0TG93PTQyOTQ5NjcyOTU7ZWxzZSBpZihhPmpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUNjRfTUFYKWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9KGI8PDMxfDIxNDY0MzUwNzIpPj4+MCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9MDtlbHNlIGlmKGE8anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9NSU4pe3ZhciBjPWEvTWF0aC5wb3coMiwtMTA3NCk7YT1jL2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMjtqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPShiPDwzMXxhKT4+PjA7anNwYi51dGlscy5zcGxpdDY0TG93PWM+Pj4wfWVsc2V7Yz1cbmE7dmFyIGQ9MDtpZigyPD1jKWZvcig7Mjw9YyYmMTAyMz5kOylkKyssYy89MjtlbHNlIGZvcig7MT5jJiYtMTAyMjxkOyljKj0yLGQtLTtjPWEqTWF0aC5wb3coMiwtZCk7YT1jKmpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18yMCYxMDQ4NTc1O2M9Yypqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNTI+Pj4wO2pzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9KGI8PDMxfGQrMTAyMzw8MjB8YSk+Pj4wO2pzcGIudXRpbHMuc3BsaXQ2NExvdz1jfX07XG5qc3BiLnV0aWxzLnNwbGl0SGFzaDY0PWZ1bmN0aW9uKGEpe3ZhciBiPWEuY2hhckNvZGVBdCgwKSxjPWEuY2hhckNvZGVBdCgxKSxkPWEuY2hhckNvZGVBdCgyKSxlPWEuY2hhckNvZGVBdCgzKSxmPWEuY2hhckNvZGVBdCg0KSxnPWEuY2hhckNvZGVBdCg1KSxoPWEuY2hhckNvZGVBdCg2KTthPWEuY2hhckNvZGVBdCg3KTtqc3BiLnV0aWxzLnNwbGl0NjRMb3c9YisoYzw8OCkrKGQ8PDE2KSsoZTw8MjQpPj4+MDtqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPWYrKGc8PDgpKyhoPDwxNikrKGE8PDI0KT4+PjB9O2pzcGIudXRpbHMuam9pblVpbnQ2ND1mdW5jdGlvbihhLGIpe3JldHVybiBiKmpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMisoYT4+PjApfTtcbmpzcGIudXRpbHMuam9pbkludDY0PWZ1bmN0aW9uKGEsYil7dmFyIGM9YiYyMTQ3NDgzNjQ4O2MmJihhPX5hKzE+Pj4wLGI9fmI+Pj4wLDA9PWEmJihiPWIrMT4+PjApKTthPWpzcGIudXRpbHMuam9pblVpbnQ2NChhLGIpO3JldHVybiBjPy1hOmF9O2pzcGIudXRpbHMudG9aaWd6YWc2ND1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yj4+MzE7cmV0dXJuIGMoYTw8MV5kLChiPDwxfGE+Pj4zMSleZCl9O2pzcGIudXRpbHMuam9pblppZ3phZzY0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGpzcGIudXRpbHMuZnJvbVppZ3phZzY0KGEsYixqc3BiLnV0aWxzLmpvaW5JbnQ2NCl9O2pzcGIudXRpbHMuZnJvbVppZ3phZzY0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD0tKGEmMSk7cmV0dXJuIGMoKGE+Pj4xfGI8PDMxKV5kLGI+Pj4xXmQpfTtcbmpzcGIudXRpbHMuam9pbkZsb2F0MzI9ZnVuY3Rpb24oYSxiKXtiPTIqKGE+PjMxKSsxO3ZhciBjPWE+Pj4yMyYyNTU7YSY9ODM4ODYwNztyZXR1cm4gMjU1PT1jP2E/TmFOOkluZmluaXR5KmI6MD09Yz9iKk1hdGgucG93KDIsLTE0OSkqYTpiKk1hdGgucG93KDIsYy0xNTApKihhK01hdGgucG93KDIsMjMpKX07anNwYi51dGlscy5qb2luRmxvYXQ2ND1mdW5jdGlvbihhLGIpe3ZhciBjPTIqKGI+PjMxKSsxLGQ9Yj4+PjIwJjIwNDc7YT1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIqKGImMTA0ODU3NSkrYTtyZXR1cm4gMjA0Nz09ZD9hP05hTjpJbmZpbml0eSpjOjA9PWQ/YypNYXRoLnBvdygyLC0xMDc0KSphOmMqTWF0aC5wb3coMixkLTEwNzUpKihhK2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT181Mil9O1xuanNwYi51dGlscy5qb2luSGFzaDY0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYT4+PjAmMjU1LGE+Pj44JjI1NSxhPj4+MTYmMjU1LGE+Pj4yNCYyNTUsYj4+PjAmMjU1LGI+Pj44JjI1NSxiPj4+MTYmMjU1LGI+Pj4yNCYyNTUpfTtqc3BiLnV0aWxzLkRJR0lUUz1cIjAxMjM0NTY3ODlhYmNkZWZcIi5zcGxpdChcIlwiKTtqc3BiLnV0aWxzLlpFUk9fQ0hBUl9DT0RFXz00ODtqc3BiLnV0aWxzLkFfQ0hBUl9DT0RFXz05NztcbmpzcGIudXRpbHMuam9pblVuc2lnbmVkRGVjaW1hbFN0cmluZz1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiKXthPWE/U3RyaW5nKGEpOlwiXCI7cmV0dXJuIGI/XCIwMDAwMDAwXCIuc2xpY2UoYS5sZW5ndGgpK2E6YX1pZigyMDk3MTUxPj1iKXJldHVyblwiXCIranNwYi51dGlscy5qb2luVWludDY0KGEsYik7dmFyIGQ9KGE+Pj4yNHxiPDw4KT4+PjAmMTY3NzcyMTU7Yj1iPj4xNiY2NTUzNTthPShhJjE2Nzc3MjE1KSs2Nzc3MjE2KmQrNjcxMDY1NipiO2QrPTgxNDc0OTcqYjtiKj0yOzFFNzw9YSYmKGQrPU1hdGguZmxvb3IoYS8xRTcpLGElPTFFNyk7MUU3PD1kJiYoYis9TWF0aC5mbG9vcihkLzFFNyksZCU9MUU3KTtyZXR1cm4gYyhiLDApK2MoZCxiKStjKGEsMSl9O1xuanNwYi51dGlscy5qb2luU2lnbmVkRGVjaW1hbFN0cmluZz1mdW5jdGlvbihhLGIpe3ZhciBjPWImMjE0NzQ4MzY0ODtjJiYoYT1+YSsxPj4+MCxiPX5iKygwPT1hPzE6MCk+Pj4wKTthPWpzcGIudXRpbHMuam9pblVuc2lnbmVkRGVjaW1hbFN0cmluZyhhLGIpO3JldHVybiBjP1wiLVwiK2E6YX07anNwYi51dGlscy5oYXNoNjRUb0RlY2ltYWxTdHJpbmc9ZnVuY3Rpb24oYSxiKXtqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGEpO2E9anNwYi51dGlscy5zcGxpdDY0TG93O3ZhciBjPWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g7cmV0dXJuIGI/anNwYi51dGlscy5qb2luU2lnbmVkRGVjaW1hbFN0cmluZyhhLGMpOmpzcGIudXRpbHMuam9pblVuc2lnbmVkRGVjaW1hbFN0cmluZyhhLGMpfTtcbmpzcGIudXRpbHMuaGFzaDY0QXJyYXlUb0RlY2ltYWxTdHJpbmdzPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPUFycmF5KGEubGVuZ3RoKSxkPTA7ZDxhLmxlbmd0aDtkKyspY1tkXT1qc3BiLnV0aWxzLmhhc2g2NFRvRGVjaW1hbFN0cmluZyhhW2RdLGIpO3JldHVybiBjfTtcbmpzcGIudXRpbHMuZGVjaW1hbFN0cmluZ1RvSGFzaDY0PWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSxiKXtmb3IodmFyIGM9MDs4PmMmJigxIT09YXx8MDxiKTtjKyspYj1hKmVbY10rYixlW2NdPWImMjU1LGI+Pj49OH1mdW5jdGlvbiBjKCl7Zm9yKHZhciBhPTA7OD5hO2ErKyllW2FdPX5lW2FdJjI1NX1nb29nLmFzc2VydHMuYXNzZXJ0KDA8YS5sZW5ndGgpO3ZhciBkPSExO1wiLVwiPT09YVswXSYmKGQ9ITAsYT1hLnNsaWNlKDEpKTtmb3IodmFyIGU9WzAsMCwwLDAsMCwwLDAsMF0sZj0wO2Y8YS5sZW5ndGg7ZisrKWIoMTAsYS5jaGFyQ29kZUF0KGYpLWpzcGIudXRpbHMuWkVST19DSEFSX0NPREVfKTtkJiYoYygpLGIoMSwxKSk7cmV0dXJuIGdvb2cuY3J5cHQuYnl0ZUFycmF5VG9TdHJpbmcoZSl9O2pzcGIudXRpbHMuc3BsaXREZWNpbWFsU3RyaW5nPWZ1bmN0aW9uKGEpe2pzcGIudXRpbHMuc3BsaXRIYXNoNjQoanNwYi51dGlscy5kZWNpbWFsU3RyaW5nVG9IYXNoNjQoYSkpfTtcbmpzcGIudXRpbHMudG9IZXhEaWdpdF89ZnVuY3Rpb24oYSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMTA+YT9qc3BiLnV0aWxzLlpFUk9fQ0hBUl9DT0RFXythOmpzcGIudXRpbHMuQV9DSEFSX0NPREVfLTEwK2EpfTtqc3BiLnV0aWxzLmZyb21IZXhDaGFyQ29kZV89ZnVuY3Rpb24oYSl7cmV0dXJuIGE+PWpzcGIudXRpbHMuQV9DSEFSX0NPREVfP2EtanNwYi51dGlscy5BX0NIQVJfQ09ERV8rMTA6YS1qc3BiLnV0aWxzLlpFUk9fQ0hBUl9DT0RFX307anNwYi51dGlscy5oYXNoNjRUb0hleFN0cmluZz1mdW5jdGlvbihhKXt2YXIgYj1BcnJheSgxOCk7YlswXT1cIjBcIjtiWzFdPVwieFwiO2Zvcih2YXIgYz0wOzg+YztjKyspe3ZhciBkPWEuY2hhckNvZGVBdCg3LWMpO2JbMipjKzJdPWpzcGIudXRpbHMudG9IZXhEaWdpdF8oZD4+NCk7YlsyKmMrM109anNwYi51dGlscy50b0hleERpZ2l0XyhkJjE1KX1yZXR1cm4gYi5qb2luKFwiXCIpfTtcbmpzcGIudXRpbHMuaGV4U3RyaW5nVG9IYXNoNjQ9ZnVuY3Rpb24oYSl7YT1hLnRvTG93ZXJDYXNlKCk7Z29vZy5hc3NlcnRzLmFzc2VydCgxOD09YS5sZW5ndGgpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoXCIwXCI9PWFbMF0pO2dvb2cuYXNzZXJ0cy5hc3NlcnQoXCJ4XCI9PWFbMV0pO2Zvcih2YXIgYj1cIlwiLGM9MDs4PmM7YysrKXt2YXIgZD1qc3BiLnV0aWxzLmZyb21IZXhDaGFyQ29kZV8oYS5jaGFyQ29kZUF0KDIqYysyKSksZT1qc3BiLnV0aWxzLmZyb21IZXhDaGFyQ29kZV8oYS5jaGFyQ29kZUF0KDIqYyszKSk7Yj1TdHJpbmcuZnJvbUNoYXJDb2RlKDE2KmQrZSkrYn1yZXR1cm4gYn07XG5qc3BiLnV0aWxzLmhhc2g2NFRvTnVtYmVyPWZ1bmN0aW9uKGEsYil7anNwYi51dGlscy5zcGxpdEhhc2g2NChhKTthPWpzcGIudXRpbHMuc3BsaXQ2NExvdzt2YXIgYz1qc3BiLnV0aWxzLnNwbGl0NjRIaWdoO3JldHVybiBiP2pzcGIudXRpbHMuam9pbkludDY0KGEsYyk6anNwYi51dGlscy5qb2luVWludDY0KGEsYyl9O2pzcGIudXRpbHMubnVtYmVyVG9IYXNoNjQ9ZnVuY3Rpb24oYSl7anNwYi51dGlscy5zcGxpdEludDY0KGEpO3JldHVybiBqc3BiLnV0aWxzLmpvaW5IYXNoNjQoanNwYi51dGlscy5zcGxpdDY0TG93LGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2gpfTtqc3BiLnV0aWxzLmNvdW50VmFyaW50cz1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTAsZT1iO2U8YztlKyspZCs9YVtlXT4+NztyZXR1cm4gYy1iLWR9O1xuanNwYi51dGlscy5jb3VudFZhcmludEZpZWxkcz1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT0wO2Q9OCpkK2pzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVDtpZigxMjg+ZClmb3IoO2I8YyYmYVtiKytdPT1kOylmb3IoZSsrOzspe3ZhciBmPWFbYisrXTtpZigwPT0oZiYxMjgpKWJyZWFrfWVsc2UgZm9yKDtiPGM7KXtmb3IoZj1kOzEyODxmOyl7aWYoYVtiXSE9KGYmMTI3fDEyOCkpcmV0dXJuIGU7YisrO2Y+Pj03fWlmKGFbYisrXSE9ZilicmVhaztmb3IoZSsrO2Y9YVtiKytdLDAhPShmJjEyOCk7KTt9cmV0dXJuIGV9O2pzcGIudXRpbHMuY291bnRGaXhlZEZpZWxkc189ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj0wO2lmKDEyOD5kKWZvcig7YjxjJiZhW2IrK109PWQ7KWYrKyxiKz1lO2Vsc2UgZm9yKDtiPGM7KXtmb3IodmFyIGc9ZDsxMjg8Zzspe2lmKGFbYisrXSE9KGcmMTI3fDEyOCkpcmV0dXJuIGY7Zz4+PTd9aWYoYVtiKytdIT1nKWJyZWFrO2YrKztiKz1lfXJldHVybiBmfTtcbmpzcGIudXRpbHMuY291bnRGaXhlZDMyRmllbGRzPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBqc3BiLnV0aWxzLmNvdW50Rml4ZWRGaWVsZHNfKGEsYixjLDgqZCtqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDMyLDQpfTtqc3BiLnV0aWxzLmNvdW50Rml4ZWQ2NEZpZWxkcz1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4ganNwYi51dGlscy5jb3VudEZpeGVkRmllbGRzXyhhLGIsYyw4KmQranNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCw4KX07XG5qc3BiLnV0aWxzLmNvdW50RGVsaW1pdGVkRmllbGRzPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPTA7Zm9yKGQ9OCpkK2pzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRDtiPGM7KXtmb3IodmFyIGY9ZDsxMjg8Zjspe2lmKGFbYisrXSE9KGYmMTI3fDEyOCkpcmV0dXJuIGU7Zj4+PTd9aWYoYVtiKytdIT1mKWJyZWFrO2UrKztmb3IodmFyIGc9MCxoPTE7Zj1hW2IrK10sZys9KGYmMTI3KSpoLGgqPTEyOCwwIT0oZiYxMjgpOyk7Yis9Z31yZXR1cm4gZX07anNwYi51dGlscy5kZWJ1Z0J5dGVzVG9UZXh0Rm9ybWF0PWZ1bmN0aW9uKGEpe3ZhciBiPSdcIic7aWYoYSl7YT1qc3BiLnV0aWxzLmJ5dGVTb3VyY2VUb1VpbnQ4QXJyYXkoYSk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYis9XCJcXFxceFwiLDE2PmFbY10mJihiKz1cIjBcIiksYis9YVtjXS50b1N0cmluZygxNil9cmV0dXJuIGIrJ1wiJ307XG5qc3BiLnV0aWxzLmRlYnVnU2NhbGFyVG9UZXh0Rm9ybWF0PWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT9nb29nLnN0cmluZy5xdW90ZShhKTphLnRvU3RyaW5nKCl9O2pzcGIudXRpbHMuc3RyaW5nVG9CeXRlQXJyYXk9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPW5ldyBVaW50OEFycmF5KGEubGVuZ3RoKSxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWEuY2hhckNvZGVBdChjKTtpZigyNTU8ZCl0aHJvdyBFcnJvcihcIkNvbnZlcnNpb24gZXJyb3I6IHN0cmluZyBjb250YWlucyBjb2RlcG9pbnQgb3V0c2lkZSBvZiBieXRlIHJhbmdlXCIpO2JbY109ZH1yZXR1cm4gYn07XG5qc3BiLnV0aWxzLmJ5dGVTb3VyY2VUb1VpbnQ4QXJyYXk9ZnVuY3Rpb24oYSl7aWYoYS5jb25zdHJ1Y3Rvcj09PVVpbnQ4QXJyYXkpcmV0dXJuIGE7aWYoYS5jb25zdHJ1Y3Rvcj09PUFycmF5QnVmZmVyfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyJiZhLmNvbnN0cnVjdG9yPT09QnVmZmVyfHxhLmNvbnN0cnVjdG9yPT09QXJyYXkpcmV0dXJuIG5ldyBVaW50OEFycmF5KGEpO2lmKGEuY29uc3RydWN0b3I9PT1TdHJpbmcpcmV0dXJuIGdvb2cuY3J5cHQuYmFzZTY0LmRlY29kZVN0cmluZ1RvVWludDhBcnJheShhKTtnb29nLmFzc2VydHMuZmFpbChcIlR5cGUgbm90IGNvbnZlcnRpYmxlIHRvIFVpbnQ4QXJyYXkuXCIpO3JldHVybiBuZXcgVWludDhBcnJheSgwKX07anNwYi5CaW5hcnlEZWNvZGVyPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmJ5dGVzXz1udWxsO3RoaXMuY3Vyc29yXz10aGlzLmVuZF89dGhpcy5zdGFydF89MDt0aGlzLmVycm9yXz0hMTthJiZ0aGlzLnNldEJsb2NrKGEsYixjKX07anNwYi5CaW5hcnlEZWNvZGVyLmluc3RhbmNlQ2FjaGVfPVtdO2pzcGIuQmluYXJ5RGVjb2Rlci5hbGxvYz1mdW5jdGlvbihhLGIsYyl7aWYoanNwYi5CaW5hcnlEZWNvZGVyLmluc3RhbmNlQ2FjaGVfLmxlbmd0aCl7dmFyIGQ9anNwYi5CaW5hcnlEZWNvZGVyLmluc3RhbmNlQ2FjaGVfLnBvcCgpO2EmJmQuc2V0QmxvY2soYSxiLGMpO3JldHVybiBkfXJldHVybiBuZXcganNwYi5CaW5hcnlEZWNvZGVyKGEsYixjKX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5mcmVlPWZ1bmN0aW9uKCl7dGhpcy5jbGVhcigpOzEwMD5qc3BiLkJpbmFyeURlY29kZXIuaW5zdGFuY2VDYWNoZV8ubGVuZ3RoJiZqc3BiLkJpbmFyeURlY29kZXIuaW5zdGFuY2VDYWNoZV8ucHVzaCh0aGlzKX07XG5qc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuQmluYXJ5RGVjb2Rlci5hbGxvYyh0aGlzLmJ5dGVzXyx0aGlzLnN0YXJ0Xyx0aGlzLmVuZF8tdGhpcy5zdGFydF8pfTtqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5ieXRlc189bnVsbDt0aGlzLmN1cnNvcl89dGhpcy5lbmRfPXRoaXMuc3RhcnRfPTA7dGhpcy5lcnJvcl89ITF9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnl0ZXNffTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuc2V0QmxvY2s9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYnl0ZXNfPWpzcGIudXRpbHMuYnl0ZVNvdXJjZVRvVWludDhBcnJheShhKTt0aGlzLnN0YXJ0Xz12b2lkIDAhPT1iP2I6MDt0aGlzLmVuZF89dm9pZCAwIT09Yz90aGlzLnN0YXJ0XytjOnRoaXMuYnl0ZXNfLmxlbmd0aDt0aGlzLmN1cnNvcl89dGhpcy5zdGFydF99O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuZ2V0RW5kPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kX307anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5zZXRFbmQ9ZnVuY3Rpb24oYSl7dGhpcy5lbmRfPWF9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmN1cnNvcl89dGhpcy5zdGFydF99O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuZ2V0Q3Vyc29yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3Vyc29yX307XG5qc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnNldEN1cnNvcj1mdW5jdGlvbihhKXt0aGlzLmN1cnNvcl89YX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5hZHZhbmNlPWZ1bmN0aW9uKGEpe3RoaXMuY3Vyc29yXys9YTtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5hdEVuZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnNvcl89PXRoaXMuZW5kX307anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5wYXN0RW5kPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3Vyc29yXz50aGlzLmVuZF99O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuZ2V0RXJyb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcnJvcl98fDA+dGhpcy5jdXJzb3JffHx0aGlzLmN1cnNvcl8+dGhpcy5lbmRffTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNwbGl0VmFyaW50NjQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTEyOCxjPTAsZD0wLGU9MDs0PmUmJjEyODw9YjtlKyspYj10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rK10sY3w9KGImMTI3KTw8NyplOzEyODw9YiYmKGI9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKytdLGN8PShiJjEyNyk8PDI4LGR8PShiJjEyNyk+PjQpO2lmKDEyODw9Yilmb3IoZT0wOzU+ZSYmMTI4PD1iO2UrKyliPXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXysrXSxkfD0oYiYxMjcpPDw3KmUrMztpZigxMjg+YilyZXR1cm4gYShjPj4+MCxkPj4+MCk7Z29vZy5hc3NlcnRzLmZhaWwoXCJGYWlsZWQgdG8gcmVhZCB2YXJpbnQsIGVuY29kaW5nIGlzIGludmFsaWQuXCIpO3RoaXMuZXJyb3JfPSEwfTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNwbGl0WmlnemFnVmFyaW50NjQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucmVhZFNwbGl0VmFyaW50NjQoZnVuY3Rpb24oYixjKXtyZXR1cm4ganNwYi51dGlscy5mcm9tWmlnemFnNjQoYixjLGEpfSl9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNwbGl0Rml4ZWQ2ND1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmJ5dGVzXyxjPXRoaXMuY3Vyc29yXzt0aGlzLmN1cnNvcl8rPTg7Zm9yKHZhciBkPTAsZT0wLGY9Yys3O2Y+PWM7Zi0tKWQ9ZDw8OHxiW2ZdLGU9ZTw8OHxiW2YrNF07cmV0dXJuIGEoZCxlKX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5za2lwVmFyaW50PWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl9dJjEyODspdGhpcy5jdXJzb3JfKys7dGhpcy5jdXJzb3JfKyt9O1xuanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS51bnNraXBWYXJpbnQ9ZnVuY3Rpb24oYSl7Zm9yKDsxMjg8YTspdGhpcy5jdXJzb3JfLS0sYT4+Pj03O3RoaXMuY3Vyc29yXy0tfTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFVuc2lnbmVkVmFyaW50MzI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmJ5dGVzXzt2YXIgYj1hW3RoaXMuY3Vyc29yXyswXTt2YXIgYz1iJjEyNztpZigxMjg+YilyZXR1cm4gdGhpcy5jdXJzb3JfKz0xLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLGM7Yj1hW3RoaXMuY3Vyc29yXysxXTtjfD0oYiYxMjcpPDw3O2lmKDEyOD5iKXJldHVybiB0aGlzLmN1cnNvcl8rPTIsZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXyksYztiPWFbdGhpcy5jdXJzb3JfKzJdO2N8PShiJjEyNyk8PDE0O2lmKDEyOD5iKXJldHVybiB0aGlzLmN1cnNvcl8rPTMsZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXyksYztiPWFbdGhpcy5jdXJzb3JfKzNdO2N8PShiJjEyNyk8PDIxO2lmKDEyOD5iKXJldHVybiB0aGlzLmN1cnNvcl8rPTQsZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PVxudGhpcy5lbmRfKSxjO2I9YVt0aGlzLmN1cnNvcl8rNF07Y3w9KGImMTUpPDwyODtpZigxMjg+YilyZXR1cm4gdGhpcy5jdXJzb3JfKz01LGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLGM+Pj4wO3RoaXMuY3Vyc29yXys9NTsxMjg8PWFbdGhpcy5jdXJzb3JfKytdJiYxMjg8PWFbdGhpcy5jdXJzb3JfKytdJiYxMjg8PWFbdGhpcy5jdXJzb3JfKytdJiYxMjg8PWFbdGhpcy5jdXJzb3JfKytdJiYxMjg8PWFbdGhpcy5jdXJzb3JfKytdJiZnb29nLmFzc2VydHMuYXNzZXJ0KCExKTtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKTtyZXR1cm4gY307anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkU2lnbmVkVmFyaW50MzI9anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVW5zaWduZWRWYXJpbnQzMjtqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRVbnNpZ25lZFZhcmludDMyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFVuc2lnbmVkVmFyaW50MzIoKS50b1N0cmluZygpfTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDMyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFNpZ25lZFZhcmludDMyKCkudG9TdHJpbmcoKX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkWmlnemFnVmFyaW50MzI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnJlYWRVbnNpZ25lZFZhcmludDMyKCk7cmV0dXJuIGE+Pj4xXi0oYSYxKX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVW5zaWduZWRWYXJpbnQ2ND1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTcGxpdFZhcmludDY0KGpzcGIudXRpbHMuam9pblVpbnQ2NCl9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFVuc2lnbmVkVmFyaW50NjRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkU3BsaXRWYXJpbnQ2NChqc3BiLnV0aWxzLmpvaW5VbnNpZ25lZERlY2ltYWxTdHJpbmcpfTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFNwbGl0VmFyaW50NjQoanNwYi51dGlscy5qb2luSW50NjQpfTtqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRTaWduZWRWYXJpbnQ2NFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTcGxpdFZhcmludDY0KGpzcGIudXRpbHMuam9pblNpZ25lZERlY2ltYWxTdHJpbmcpfTtqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRaaWd6YWdWYXJpbnQ2ND1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTcGxpdFZhcmludDY0KGpzcGIudXRpbHMuam9pblppZ3phZzY0KX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkWmlnemFnVmFyaW50SGFzaDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFNwbGl0WmlnemFnVmFyaW50NjQoanNwYi51dGlscy5qb2luSGFzaDY0KX07XG5qc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRaaWd6YWdWYXJpbnQ2NFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTcGxpdFppZ3phZ1ZhcmludDY0KGpzcGIudXRpbHMuam9pblNpZ25lZERlY2ltYWxTdHJpbmcpfTtqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRVaW50OD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXyswXTt0aGlzLmN1cnNvcl8rPTE7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXyk7cmV0dXJuIGF9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFVpbnQxNj1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXyswXSxiPXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXysxXTt0aGlzLmN1cnNvcl8rPTI7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXyk7cmV0dXJuIGE8PDB8Yjw8OH07XG5qc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRVaW50MzI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMF0sYj10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMV0sYz10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMl0sZD10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rM107dGhpcy5jdXJzb3JfKz00O2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pO3JldHVybihhPDwwfGI8PDh8Yzw8MTZ8ZDw8MjQpPj4+MH07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVWludDY0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5yZWFkVWludDMyKCksYj10aGlzLnJlYWRVaW50MzIoKTtyZXR1cm4ganNwYi51dGlscy5qb2luVWludDY0KGEsYil9O1xuanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVWludDY0U3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5yZWFkVWludDMyKCksYj10aGlzLnJlYWRVaW50MzIoKTtyZXR1cm4ganNwYi51dGlscy5qb2luVW5zaWduZWREZWNpbWFsU3RyaW5nKGEsYil9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEludDg9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMF07dGhpcy5jdXJzb3JfKz0xO2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pO3JldHVybiBhPDwyND4+MjR9O1xuanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkSW50MTY9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMF0sYj10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMV07dGhpcy5jdXJzb3JfKz0yO2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pO3JldHVybihhPDwwfGI8PDgpPDwxNj4+MTZ9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEludDMyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzBdLGI9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzFdLGM9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzJdLGQ9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzNdO3RoaXMuY3Vyc29yXys9NDtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKTtyZXR1cm4gYTw8MHxiPDw4fGM8PDE2fGQ8PDI0fTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEludDY0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5yZWFkVWludDMyKCksYj10aGlzLnJlYWRVaW50MzIoKTtyZXR1cm4ganNwYi51dGlscy5qb2luSW50NjQoYSxiKX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkSW50NjRTdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnJlYWRVaW50MzIoKSxiPXRoaXMucmVhZFVpbnQzMigpO3JldHVybiBqc3BiLnV0aWxzLmpvaW5TaWduZWREZWNpbWFsU3RyaW5nKGEsYil9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEZsb2F0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5yZWFkVWludDMyKCk7cmV0dXJuIGpzcGIudXRpbHMuam9pbkZsb2F0MzIoYSwwKX07XG5qc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWREb3VibGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnJlYWRVaW50MzIoKSxiPXRoaXMucmVhZFVpbnQzMigpO3JldHVybiBqc3BiLnV0aWxzLmpvaW5GbG9hdDY0KGEsYil9O2pzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEJvb2w9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXysrXX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkRW51bT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTaWduZWRWYXJpbnQzMigpfTtcbmpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFN0cmluZz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmJ5dGVzXyxjPXRoaXMuY3Vyc29yXzthPWMrYTtmb3IodmFyIGQ9W10sZT1cIlwiO2M8YTspe3ZhciBmPWJbYysrXTtpZigxMjg+ZilkLnB1c2goZik7ZWxzZSBpZigxOTI+Ziljb250aW51ZTtlbHNlIGlmKDIyND5mKXt2YXIgZz1iW2MrK107ZC5wdXNoKChmJjMxKTw8NnxnJjYzKX1lbHNlIGlmKDI0MD5mKXtnPWJbYysrXTt2YXIgaD1iW2MrK107ZC5wdXNoKChmJjE1KTw8MTJ8KGcmNjMpPDw2fGgmNjMpfWVsc2UgaWYoMjQ4PmYpe2c9YltjKytdO2g9YltjKytdO3ZhciBrPWJbYysrXTtmPShmJjcpPDwxOHwoZyY2Myk8PDEyfChoJjYzKTw8NnxrJjYzO2YtPTY1NTM2O2QucHVzaCgoZj4+MTAmMTAyMykrNTUyOTYsKGYmMTAyMykrNTYzMjApfTgxOTI8PWQubGVuZ3RoJiYoZSs9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGQpLGQubGVuZ3RoPTApfWUrPWdvb2cuY3J5cHQuYnl0ZUFycmF5VG9TdHJpbmcoZCk7XG50aGlzLmN1cnNvcl89YztyZXR1cm4gZX07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nV2l0aExlbmd0aD1mdW5jdGlvbigpe3ZhciBhPXRoaXMucmVhZFVuc2lnbmVkVmFyaW50MzIoKTtyZXR1cm4gdGhpcy5yZWFkU3RyaW5nKGEpfTtqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRCeXRlcz1mdW5jdGlvbihhKXtpZigwPmF8fHRoaXMuY3Vyc29yXythPnRoaXMuYnl0ZXNfLmxlbmd0aClyZXR1cm4gdGhpcy5lcnJvcl89ITAsZ29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIGJ5dGUgbGVuZ3RoIVwiKSxuZXcgVWludDhBcnJheSgwKTt2YXIgYj10aGlzLmJ5dGVzXy5zdWJhcnJheSh0aGlzLmN1cnNvcl8sdGhpcy5jdXJzb3JfK2EpO3RoaXMuY3Vyc29yXys9YTtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKTtyZXR1cm4gYn07anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVmFyaW50SGFzaDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFNwbGl0VmFyaW50NjQoanNwYi51dGlscy5qb2luSGFzaDY0KX07XG5qc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRGaXhlZEhhc2g2ND1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYnl0ZXNfLGI9dGhpcy5jdXJzb3JfLGM9YVtiKzBdLGQ9YVtiKzFdLGU9YVtiKzJdLGY9YVtiKzNdLGc9YVtiKzRdLGg9YVtiKzVdLGs9YVtiKzZdO2E9YVtiKzddO3RoaXMuY3Vyc29yXys9ODtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjLGQsZSxmLGcsaCxrLGEpfTtqc3BiLkJpbmFyeVJlYWRlcj1mdW5jdGlvbihhLGIsYyl7dGhpcy5kZWNvZGVyXz1qc3BiLkJpbmFyeURlY29kZXIuYWxsb2MoYSxiLGMpO3RoaXMuZmllbGRDdXJzb3JfPXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCk7dGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSO3RoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElEO3RoaXMuZXJyb3JfPSExO3RoaXMucmVhZENhbGxiYWNrc189bnVsbH07anNwYi5CaW5hcnlSZWFkZXIuaW5zdGFuY2VDYWNoZV89W107XG5qc3BiLkJpbmFyeVJlYWRlci5hbGxvYz1mdW5jdGlvbihhLGIsYyl7aWYoanNwYi5CaW5hcnlSZWFkZXIuaW5zdGFuY2VDYWNoZV8ubGVuZ3RoKXt2YXIgZD1qc3BiLkJpbmFyeVJlYWRlci5pbnN0YW5jZUNhY2hlXy5wb3AoKTthJiZkLmRlY29kZXJfLnNldEJsb2NrKGEsYixjKTtyZXR1cm4gZH1yZXR1cm4gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGEsYixjKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmFsbG9jPWpzcGIuQmluYXJ5UmVhZGVyLmFsbG9jO1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmZyZWU9ZnVuY3Rpb24oKXt0aGlzLmRlY29kZXJfLmNsZWFyKCk7dGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSO3RoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElEO3RoaXMuZXJyb3JfPSExO3RoaXMucmVhZENhbGxiYWNrc189bnVsbDsxMDA+anNwYi5CaW5hcnlSZWFkZXIuaW5zdGFuY2VDYWNoZV8ubGVuZ3RoJiZqc3BiLkJpbmFyeVJlYWRlci5pbnN0YW5jZUNhY2hlXy5wdXNoKHRoaXMpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuZ2V0RmllbGRDdXJzb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5maWVsZEN1cnNvcl99O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5nZXRDdXJzb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZWNvZGVyXy5nZXRDdXJzb3IoKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGVjb2Rlcl8uZ2V0QnVmZmVyKCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5nZXRGaWVsZE51bWJlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5leHRGaWVsZF99O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5nZXRXaXJlVHlwZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5leHRXaXJlVHlwZV99O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5pc0RlbGltaXRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRH07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmlzRW5kR3JvdXA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5FTkRfR1JPVVB9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmdldEVycm9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXJyb3JffHx0aGlzLmRlY29kZXJfLmdldEVycm9yKCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5zZXRCbG9jaz1mdW5jdGlvbihhLGIsYyl7dGhpcy5kZWNvZGVyXy5zZXRCbG9jayhhLGIsYyk7dGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSO3RoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElEfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmRlY29kZXJfLnJlc2V0KCk7dGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSO3RoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElEfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5hZHZhbmNlPWZ1bmN0aW9uKGEpe3RoaXMuZGVjb2Rlcl8uYWR2YW5jZShhKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUubmV4dEZpZWxkPWZ1bmN0aW9uKCl7aWYodGhpcy5kZWNvZGVyXy5hdEVuZCgpKXJldHVybiExO2lmKHRoaXMuZ2V0RXJyb3IoKSlyZXR1cm4gZ29vZy5hc3NlcnRzLmZhaWwoXCJEZWNvZGVyIGhpdCBhbiBlcnJvclwiKSwhMTt0aGlzLmZpZWxkQ3Vyc29yXz10aGlzLmRlY29kZXJfLmdldEN1cnNvcigpO3ZhciBhPXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKSxiPWE+Pj4zO2EmPTc7aWYoYSE9anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UJiZhIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDMyJiZhIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0JiZhIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQmJmEhPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlNUQVJUX0dST1VQJiZhIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5FTkRfR1JPVVApcmV0dXJuIGdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCB3aXJlIHR5cGU6ICVzIChhdCBwb3NpdGlvbiAlcylcIixcbmEsdGhpcy5maWVsZEN1cnNvcl8pLHRoaXMuZXJyb3JfPSEwLCExO3RoaXMubmV4dEZpZWxkXz1iO3RoaXMubmV4dFdpcmVUeXBlXz1hO3JldHVybiEwfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUudW5za2lwSGVhZGVyPWZ1bmN0aW9uKCl7dGhpcy5kZWNvZGVyXy51bnNraXBWYXJpbnQodGhpcy5uZXh0RmllbGRfPDwzfHRoaXMubmV4dFdpcmVUeXBlXyl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5za2lwTWF0Y2hpbmdGaWVsZHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5leHRGaWVsZF87Zm9yKHRoaXMudW5za2lwSGVhZGVyKCk7dGhpcy5uZXh0RmllbGQoKSYmdGhpcy5nZXRGaWVsZE51bWJlcigpPT1hOyl0aGlzLnNraXBGaWVsZCgpO3RoaXMuZGVjb2Rlcl8uYXRFbmQoKXx8dGhpcy51bnNraXBIZWFkZXIoKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuc2tpcFZhcmludEZpZWxkPWZ1bmN0aW9uKCl7dGhpcy5uZXh0V2lyZVR5cGVfIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQ/KGdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCB3aXJlIHR5cGUgZm9yIHNraXBWYXJpbnRGaWVsZFwiKSx0aGlzLnNraXBGaWVsZCgpKTp0aGlzLmRlY29kZXJfLnNraXBWYXJpbnQoKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnNraXBEZWxpbWl0ZWRGaWVsZD1mdW5jdGlvbigpe2lmKHRoaXMubmV4dFdpcmVUeXBlXyE9anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKWdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCB3aXJlIHR5cGUgZm9yIHNraXBEZWxpbWl0ZWRGaWVsZFwiKSx0aGlzLnNraXBGaWVsZCgpO2Vsc2V7dmFyIGE9dGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMigpO3RoaXMuZGVjb2Rlcl8uYWR2YW5jZShhKX19O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnNraXBGaXhlZDMyRmllbGQ9ZnVuY3Rpb24oKXt0aGlzLm5leHRXaXJlVHlwZV8hPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVEMzI/KGdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCB3aXJlIHR5cGUgZm9yIHNraXBGaXhlZDMyRmllbGRcIiksdGhpcy5za2lwRmllbGQoKSk6dGhpcy5kZWNvZGVyXy5hZHZhbmNlKDQpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuc2tpcEZpeGVkNjRGaWVsZD1mdW5jdGlvbigpe3RoaXMubmV4dFdpcmVUeXBlXyE9anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2ND8oZ29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIHdpcmUgdHlwZSBmb3Igc2tpcEZpeGVkNjRGaWVsZFwiKSx0aGlzLnNraXBGaWVsZCgpKTp0aGlzLmRlY29kZXJfLmFkdmFuY2UoOCl9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnNraXBHcm91cD1mdW5jdGlvbigpe3ZhciBhPXRoaXMubmV4dEZpZWxkXztkb3tpZighdGhpcy5uZXh0RmllbGQoKSl7Z29vZy5hc3NlcnRzLmZhaWwoXCJVbm1hdGNoZWQgc3RhcnQtZ3JvdXAgdGFnOiBzdHJlYW0gRU9GXCIpO3RoaXMuZXJyb3JfPSEwO2JyZWFrfWlmKHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRU5EX0dST1VQKXt0aGlzLm5leHRGaWVsZF8hPWEmJihnb29nLmFzc2VydHMuZmFpbChcIlVubWF0Y2hlZCBlbmQtZ3JvdXAgdGFnXCIpLHRoaXMuZXJyb3JfPSEwKTticmVha310aGlzLnNraXBGaWVsZCgpfXdoaWxlKDEpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5za2lwRmllbGQ9ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5uZXh0V2lyZVR5cGVfKXtjYXNlIGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVDp0aGlzLnNraXBWYXJpbnRGaWVsZCgpO2JyZWFrO2Nhc2UganNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NDp0aGlzLnNraXBGaXhlZDY0RmllbGQoKTticmVhaztjYXNlIGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRDp0aGlzLnNraXBEZWxpbWl0ZWRGaWVsZCgpO2JyZWFrO2Nhc2UganNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMjp0aGlzLnNraXBGaXhlZDMyRmllbGQoKTticmVhaztjYXNlIGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlNUQVJUX0dST1VQOnRoaXMuc2tpcEdyb3VwKCk7YnJlYWs7ZGVmYXVsdDpnb29nLmFzc2VydHMuZmFpbChcIkludmFsaWQgd2lyZSBlbmNvZGluZyBmb3IgZmllbGQuXCIpfX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVnaXN0ZXJSZWFkQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtudWxsPT09dGhpcy5yZWFkQ2FsbGJhY2tzXyYmKHRoaXMucmVhZENhbGxiYWNrc189e30pO2dvb2cuYXNzZXJ0cy5hc3NlcnQoIXRoaXMucmVhZENhbGxiYWNrc19bYV0pO3RoaXMucmVhZENhbGxiYWNrc19bYV09Yn07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJ1blJlYWRDYWxsYmFjaz1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPT10aGlzLnJlYWRDYWxsYmFja3NfKTthPXRoaXMucmVhZENhbGxiYWNrc19bYV07Z29vZy5hc3NlcnRzLmFzc2VydChhKTtyZXR1cm4gYSh0aGlzKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEFueT1mdW5jdGlvbihhKXt0aGlzLm5leHRXaXJlVHlwZV89anNwYi5CaW5hcnlDb25zdGFudHMuRmllbGRUeXBlVG9XaXJlVHlwZShhKTt2YXIgYj1qc3BiLkJpbmFyeUNvbnN0YW50cy5GaWVsZFR5cGU7c3dpdGNoKGEpe2Nhc2UgYi5ET1VCTEU6cmV0dXJuIHRoaXMucmVhZERvdWJsZSgpO2Nhc2UgYi5GTE9BVDpyZXR1cm4gdGhpcy5yZWFkRmxvYXQoKTtjYXNlIGIuSU5UNjQ6cmV0dXJuIHRoaXMucmVhZEludDY0KCk7Y2FzZSBiLlVJTlQ2NDpyZXR1cm4gdGhpcy5yZWFkVWludDY0KCk7Y2FzZSBiLklOVDMyOnJldHVybiB0aGlzLnJlYWRJbnQzMigpO2Nhc2UgYi5GSVhFRDY0OnJldHVybiB0aGlzLnJlYWRGaXhlZDY0KCk7Y2FzZSBiLkZJWEVEMzI6cmV0dXJuIHRoaXMucmVhZEZpeGVkMzIoKTtjYXNlIGIuQk9PTDpyZXR1cm4gdGhpcy5yZWFkQm9vbCgpO2Nhc2UgYi5TVFJJTkc6cmV0dXJuIHRoaXMucmVhZFN0cmluZygpO1xuY2FzZSBiLkdST1VQOmdvb2cuYXNzZXJ0cy5mYWlsKFwiR3JvdXAgZmllbGQgdHlwZSBub3Qgc3VwcG9ydGVkIGluIHJlYWRBbnkoKVwiKTtjYXNlIGIuTUVTU0FHRTpnb29nLmFzc2VydHMuZmFpbChcIk1lc3NhZ2UgZmllbGQgdHlwZSBub3Qgc3VwcG9ydGVkIGluIHJlYWRBbnkoKVwiKTtjYXNlIGIuQllURVM6cmV0dXJuIHRoaXMucmVhZEJ5dGVzKCk7Y2FzZSBiLlVJTlQzMjpyZXR1cm4gdGhpcy5yZWFkVWludDMyKCk7Y2FzZSBiLkVOVU06cmV0dXJuIHRoaXMucmVhZEVudW0oKTtjYXNlIGIuU0ZJWEVEMzI6cmV0dXJuIHRoaXMucmVhZFNmaXhlZDMyKCk7Y2FzZSBiLlNGSVhFRDY0OnJldHVybiB0aGlzLnJlYWRTZml4ZWQ2NCgpO2Nhc2UgYi5TSU5UMzI6cmV0dXJuIHRoaXMucmVhZFNpbnQzMigpO2Nhc2UgYi5TSU5UNjQ6cmV0dXJuIHRoaXMucmVhZFNpbnQ2NCgpO2Nhc2UgYi5GSEFTSDY0OnJldHVybiB0aGlzLnJlYWRGaXhlZEhhc2g2NCgpO2Nhc2UgYi5WSEFTSDY0OnJldHVybiB0aGlzLnJlYWRWYXJpbnRIYXNoNjQoKTtcbmRlZmF1bHQ6Z29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIGZpZWxkIHR5cGUgaW4gcmVhZEFueSgpXCIpfXJldHVybiAwfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2U9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKTt2YXIgYz10aGlzLmRlY29kZXJfLmdldEVuZCgpLGQ9dGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMigpO2Q9dGhpcy5kZWNvZGVyXy5nZXRDdXJzb3IoKStkO3RoaXMuZGVjb2Rlcl8uc2V0RW5kKGQpO2IoYSx0aGlzKTt0aGlzLmRlY29kZXJfLnNldEN1cnNvcihkKTt0aGlzLmRlY29kZXJfLnNldEVuZChjKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEdyb3VwPWZ1bmN0aW9uKGEsYixjKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuU1RBUlRfR1JPVVApO2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0RmllbGRfPT1hKTtjKGIsdGhpcyk7dGhpcy5lcnJvcl98fHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRU5EX0dST1VQfHwoZ29vZy5hc3NlcnRzLmZhaWwoXCJHcm91cCBzdWJtZXNzYWdlIGRpZCBub3QgZW5kIHdpdGggYW4gRU5EX0dST1VQIHRhZ1wiKSx0aGlzLmVycm9yXz0hMCl9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmdldEZpZWxkRGVjb2Rlcj1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpO3ZhciBhPXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKSxiPXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCksYz1iK2E7YT1qc3BiLkJpbmFyeURlY29kZXIuYWxsb2ModGhpcy5kZWNvZGVyXy5nZXRCdWZmZXIoKSxiLGEpO3RoaXMuZGVjb2Rlcl8uc2V0Q3Vyc29yKGMpO3JldHVybiBhfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEludDMyPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDMyKCl9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRJbnQzMlN0cmluZz1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRTaWduZWRWYXJpbnQzMlN0cmluZygpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEludDY0PWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDY0KCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkSW50NjRTdHJpbmc9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkU2lnbmVkVmFyaW50NjRTdHJpbmcoKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFVpbnQzMj1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyKCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkVWludDMyU3RyaW5nPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzJTdHJpbmcoKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRVaW50NjQ9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQ2NCgpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkVWludDY0U3RyaW5nPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50NjRTdHJpbmcoKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTaW50MzI9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkWmlnemFnVmFyaW50MzIoKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTaW50NjQ9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkWmlnemFnVmFyaW50NjQoKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNpbnQ2NFN0cmluZz1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQ2NFN0cmluZygpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEZpeGVkMzI9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMik7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFVpbnQzMigpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEZpeGVkNjQ9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFVpbnQ2NCgpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkRml4ZWQ2NFN0cmluZz1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkVWludDY0U3RyaW5nKCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU2ZpeGVkMzI9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMik7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZEludDMyKCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU2ZpeGVkMzJTdHJpbmc9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMik7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZEludDMyKCkudG9TdHJpbmcoKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNmaXhlZDY0PWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRJbnQ2NCgpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNmaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRJbnQ2NFN0cmluZygpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEZsb2F0PWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVEMzIpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRGbG9hdCgpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkRG91YmxlPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWREb3VibGUoKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRCb29sPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuISF0aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyKCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkRW51bT1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRTaWduZWRWYXJpbnQ2NCgpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCk7dmFyIGE9dGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMigpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRTdHJpbmcoYSl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkQnl0ZXM9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKTt2YXIgYT10aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyKCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZEJ5dGVzKGEpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkVmFyaW50SGFzaDY0PWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFZhcmludEhhc2g2NCgpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNpbnRIYXNoNjQ9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkWmlnemFnVmFyaW50SGFzaDY0KCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3BsaXRWYXJpbnQ2ND1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTtyZXR1cm4gdGhpcy5kZWNvZGVyXy5yZWFkU3BsaXRWYXJpbnQ2NChhKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNwbGl0WmlnemFnVmFyaW50NjQ9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZFNwbGl0VmFyaW50NjQoZnVuY3Rpb24oYixjKXtyZXR1cm4ganNwYi51dGlscy5mcm9tWmlnemFnNjQoYixjLGEpfSl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkRml4ZWRIYXNoNjQ9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZEZpeGVkSGFzaDY0KCl9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTcGxpdEZpeGVkNjQ9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRTcGxpdEZpeGVkNjQoYSl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRmllbGRfPWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpO3ZhciBiPXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKTtiPXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCkrYjtmb3IodmFyIGM9W107dGhpcy5kZWNvZGVyXy5nZXRDdXJzb3IoKTxiOyljLnB1c2goYS5jYWxsKHRoaXMuZGVjb2Rlcl8pKTtyZXR1cm4gY307XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRTaWduZWRWYXJpbnQzMil9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkSW50MzJTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDMyU3RyaW5nKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRJbnQ2ND1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkU2lnbmVkVmFyaW50NjQpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEludDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRTaWduZWRWYXJpbnQ2NFN0cmluZyl9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRVaW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZFVpbnQzMlN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMlN0cmluZyl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkVWludDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDY0KX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRVaW50NjRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50NjRTdHJpbmcpfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQzMil9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQ2NCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQ2NFN0cmluZyl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRml4ZWQzMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkVWludDMyKX07XG5qc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEZpeGVkNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFVpbnQ2NCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRml4ZWQ2NFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkVWludDY0U3RyaW5nKX07anNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRTZml4ZWQzMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkSW50MzIpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZFNmaXhlZDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRJbnQ2NCl9O1xuanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRTZml4ZWQ2NFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkSW50NjRTdHJpbmcpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEZsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRGbG9hdCl9O2pzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRG91YmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWREb3VibGUpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEJvb2w9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZEJvb2wpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEVudW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZEVudW0pfTtcbmpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkVmFyaW50SGFzaDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRWYXJpbnRIYXNoNjQpfTtqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEZpeGVkSGFzaDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRGaXhlZEhhc2g2NCl9O2pzcGIuQmluYXJ5RW5jb2Rlcj1mdW5jdGlvbigpe3RoaXMuYnVmZmVyXz1bXX07anNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS5sZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5idWZmZXJfLmxlbmd0aH07anNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmJ1ZmZlcl87dGhpcy5idWZmZXJfPVtdO3JldHVybiBhfTtcbmpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVTcGxpdFZhcmludDY0PWZ1bmN0aW9uKGEsYil7Z29vZy5hc3NlcnRzLmFzc2VydChhPT1NYXRoLmZsb29yKGEpKTtnb29nLmFzc2VydHMuYXNzZXJ0KGI9PU1hdGguZmxvb3IoYikpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9YSYmYTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpO2Zvcihnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWImJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMyKTswPGJ8fDEyNzxhOyl0aGlzLmJ1ZmZlcl8ucHVzaChhJjEyN3wxMjgpLGE9KGE+Pj43fGI8PDI1KT4+PjAsYj4+Pj03O3RoaXMuYnVmZmVyXy5wdXNoKGEpfTtcbmpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVTcGxpdEZpeGVkNjQ9ZnVuY3Rpb24oYSxiKXtnb29nLmFzc2VydHMuYXNzZXJ0KGE9PU1hdGguZmxvb3IoYSkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoYj09TWF0aC5mbG9vcihiKSk7Z29vZy5hc3NlcnRzLmFzc2VydCgwPD1hJiZhPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMik7Z29vZy5hc3NlcnRzLmFzc2VydCgwPD1iJiZiPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMik7dGhpcy53cml0ZVVpbnQzMihhKTt0aGlzLndyaXRlVWludDMyKGIpfTtcbmpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVVbnNpZ25lZFZhcmludDMyPWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT09TWF0aC5mbG9vcihhKSk7Zm9yKGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9YSYmYTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpOzEyNzxhOyl0aGlzLmJ1ZmZlcl8ucHVzaChhJjEyN3wxMjgpLGE+Pj49Nzt0aGlzLmJ1ZmZlcl8ucHVzaChhKX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlU2lnbmVkVmFyaW50MzI9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydChhPT1NYXRoLmZsb29yKGEpKTtnb29nLmFzc2VydHMuYXNzZXJ0KGE+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJmE8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKTtpZigwPD1hKXRoaXMud3JpdGVVbnNpZ25lZFZhcmludDMyKGEpO2Vsc2V7Zm9yKHZhciBiPTA7OT5iO2IrKyl0aGlzLmJ1ZmZlcl8ucHVzaChhJjEyN3wxMjgpLGE+Pj03O3RoaXMuYnVmZmVyXy5wdXNoKDEpfX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVW5zaWduZWRWYXJpbnQ2ND1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KGE9PU1hdGguZmxvb3IoYSkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9YSYmYTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjQpO2pzcGIudXRpbHMuc3BsaXRJbnQ2NChhKTt0aGlzLndyaXRlU3BsaXRWYXJpbnQ2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCl9O1xuanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZVNpZ25lZFZhcmludDY0PWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT09TWF0aC5mbG9vcihhKSk7Z29vZy5hc3NlcnRzLmFzc2VydChhPj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzJiZhPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182Myk7anNwYi51dGlscy5zcGxpdEludDY0KGEpO3RoaXMud3JpdGVTcGxpdFZhcmludDY0KGpzcGIudXRpbHMuc3BsaXQ2NExvdyxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50MzI9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydChhPT1NYXRoLmZsb29yKGEpKTtnb29nLmFzc2VydHMuYXNzZXJ0KGE+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJmE8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKTt0aGlzLndyaXRlVW5zaWduZWRWYXJpbnQzMigoYTw8MV5hPj4zMSk+Pj4wKX07anNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZVppZ3phZ1ZhcmludDY0PWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT09TWF0aC5mbG9vcihhKSk7Z29vZy5hc3NlcnRzLmFzc2VydChhPj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzJiZhPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182Myk7anNwYi51dGlscy5zcGxpdFppZ3phZzY0KGEpO3RoaXMud3JpdGVTcGxpdFZhcmludDY0KGpzcGIudXRpbHMuc3BsaXQ2NExvdyxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmc9ZnVuY3Rpb24oYSl7dGhpcy53cml0ZVppZ3phZ1ZhcmludEhhc2g2NChqc3BiLnV0aWxzLmRlY2ltYWxTdHJpbmdUb0hhc2g2NChhKSl9O2pzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVaaWd6YWdWYXJpbnRIYXNoNjQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGEpO2pzcGIudXRpbHMudG9aaWd6YWc2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCxmdW5jdGlvbihhLGQpe2Iud3JpdGVTcGxpdFZhcmludDY0KGE+Pj4wLGQ+Pj4wKX0pfTtcbmpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVVaW50OD1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KGE9PU1hdGguZmxvb3IoYSkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9YSYmMjU2PmEpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4wJjI1NSl9O2pzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVVaW50MTY9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydChhPT1NYXRoLmZsb29yKGEpKTtnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWEmJjY1NTM2PmEpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4wJjI1NSk7dGhpcy5idWZmZXJfLnB1c2goYT4+PjgmMjU1KX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVWludDMyPWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT09TWF0aC5mbG9vcihhKSk7Z29vZy5hc3NlcnRzLmFzc2VydCgwPD1hJiZhPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMik7dGhpcy5idWZmZXJfLnB1c2goYT4+PjAmMjU1KTt0aGlzLmJ1ZmZlcl8ucHVzaChhPj4+OCYyNTUpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4xNiYyNTUpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4yNCYyNTUpfTtqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVWludDY0PWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT09TWF0aC5mbG9vcihhKSk7Z29vZy5hc3NlcnRzLmFzc2VydCgwPD1hJiZhPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182NCk7anNwYi51dGlscy5zcGxpdFVpbnQ2NChhKTt0aGlzLndyaXRlVWludDMyKGpzcGIudXRpbHMuc3BsaXQ2NExvdyk7dGhpcy53cml0ZVVpbnQzMihqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KGE9PU1hdGguZmxvb3IoYSkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoLTEyODw9YSYmMTI4PmEpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4wJjI1NSl9O2pzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVJbnQxNj1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KGE9PU1hdGguZmxvb3IoYSkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoLTMyNzY4PD1hJiYzMjc2OD5hKTt0aGlzLmJ1ZmZlcl8ucHVzaChhPj4+MCYyNTUpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj44JjI1NSl9O1xuanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUludDMyPWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT09TWF0aC5mbG9vcihhKSk7Z29vZy5hc3NlcnRzLmFzc2VydChhPj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxJiZhPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSk7dGhpcy5idWZmZXJfLnB1c2goYT4+PjAmMjU1KTt0aGlzLmJ1ZmZlcl8ucHVzaChhPj4+OCYyNTUpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4xNiYyNTUpO3RoaXMuYnVmZmVyXy5wdXNoKGE+Pj4yNCYyNTUpfTtcbmpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVJbnQ2ND1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KGE9PU1hdGguZmxvb3IoYSkpO2dvb2cuYXNzZXJ0cy5hc3NlcnQoYT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyYmYTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMpO2pzcGIudXRpbHMuc3BsaXRJbnQ2NChhKTt0aGlzLndyaXRlU3BsaXRGaXhlZDY0KGpzcGIudXRpbHMuc3BsaXQ2NExvdyxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlSW50NjRTdHJpbmc9ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydChhPT1NYXRoLmZsb29yKGEpKTtnb29nLmFzc2VydHMuYXNzZXJ0KCthPj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzJiYrYTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMpO2pzcGIudXRpbHMuc3BsaXRIYXNoNjQoanNwYi51dGlscy5kZWNpbWFsU3RyaW5nVG9IYXNoNjQoYSkpO3RoaXMud3JpdGVTcGxpdEZpeGVkNjQoanNwYi51dGlscy5zcGxpdDY0TG93LGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2gpfTtcbmpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVGbG9hdD1mdW5jdGlvbihhKXtnb29nLmFzc2VydHMuYXNzZXJ0KEluZmluaXR5PT09YXx8LUluZmluaXR5PT09YXx8aXNOYU4oYSl8fGE+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX01BWCYmYTw9anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQzMl9NQVgpO2pzcGIudXRpbHMuc3BsaXRGbG9hdDMyKGEpO3RoaXMud3JpdGVVaW50MzIoanNwYi51dGlscy5zcGxpdDY0TG93KX07XG5qc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlRG91YmxlPWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoSW5maW5pdHk9PT1hfHwtSW5maW5pdHk9PT1hfHxpc05hTihhKXx8YT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUNjRfTUFYJiZhPD1qc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDY0X01BWCk7anNwYi51dGlscy5zcGxpdEZsb2F0NjQoYSk7dGhpcy53cml0ZVVpbnQzMihqc3BiLnV0aWxzLnNwbGl0NjRMb3cpO3RoaXMud3JpdGVVaW50MzIoanNwYi51dGlscy5zcGxpdDY0SGlnaCl9O2pzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVCb29sPWZ1bmN0aW9uKGEpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoXCJib29sZWFuXCI9PT10eXBlb2YgYXx8XCJudW1iZXJcIj09PXR5cGVvZiBhKTt0aGlzLmJ1ZmZlcl8ucHVzaChhPzE6MCl9O1xuanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUVudW09ZnVuY3Rpb24oYSl7Z29vZy5hc3NlcnRzLmFzc2VydChhPT1NYXRoLmZsb29yKGEpKTtnb29nLmFzc2VydHMuYXNzZXJ0KGE+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJmE8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKTt0aGlzLndyaXRlU2lnbmVkVmFyaW50MzIoYSl9O2pzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVCeXRlcz1mdW5jdGlvbihhKXt0aGlzLmJ1ZmZlcl8ucHVzaC5hcHBseSh0aGlzLmJ1ZmZlcl8sYSl9O2pzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVWYXJpbnRIYXNoNjQ9ZnVuY3Rpb24oYSl7anNwYi51dGlscy5zcGxpdEhhc2g2NChhKTt0aGlzLndyaXRlU3BsaXRWYXJpbnQ2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCl9O1xuanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUZpeGVkSGFzaDY0PWZ1bmN0aW9uKGEpe2pzcGIudXRpbHMuc3BsaXRIYXNoNjQoYSk7dGhpcy53cml0ZVVpbnQzMihqc3BiLnV0aWxzLnNwbGl0NjRMb3cpO3RoaXMud3JpdGVVaW50MzIoanNwYi51dGlscy5zcGxpdDY0SGlnaCl9O1xuanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZVN0cmluZz1mdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5idWZmZXJfLmxlbmd0aCxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWEuY2hhckNvZGVBdChjKTtpZigxMjg+ZCl0aGlzLmJ1ZmZlcl8ucHVzaChkKTtlbHNlIGlmKDIwNDg+ZCl0aGlzLmJ1ZmZlcl8ucHVzaChkPj42fDE5MiksdGhpcy5idWZmZXJfLnB1c2goZCY2M3wxMjgpO2Vsc2UgaWYoNjU1MzY+ZClpZig1NTI5Njw9ZCYmNTYzMTk+PWQmJmMrMTxhLmxlbmd0aCl7dmFyIGU9YS5jaGFyQ29kZUF0KGMrMSk7NTYzMjA8PWUmJjU3MzQzPj1lJiYoZD0xMDI0KihkLTU1Mjk2KStlLTU2MzIwKzY1NTM2LHRoaXMuYnVmZmVyXy5wdXNoKGQ+PjE4fDI0MCksdGhpcy5idWZmZXJfLnB1c2goZD4+MTImNjN8MTI4KSx0aGlzLmJ1ZmZlcl8ucHVzaChkPj42JjYzfDEyOCksdGhpcy5idWZmZXJfLnB1c2goZCY2M3wxMjgpLGMrKyl9ZWxzZSB0aGlzLmJ1ZmZlcl8ucHVzaChkPj5cbjEyfDIyNCksdGhpcy5idWZmZXJfLnB1c2goZD4+NiY2M3wxMjgpLHRoaXMuYnVmZmVyXy5wdXNoKGQmNjN8MTI4KX1yZXR1cm4gdGhpcy5idWZmZXJfLmxlbmd0aC1ifTtqc3BiLmFyaXRoPXt9O2pzcGIuYXJpdGguVUludDY0PWZ1bmN0aW9uKGEsYil7dGhpcy5sbz1hO3RoaXMuaGk9Yn07anNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmNtcD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5oaTxhLmhpfHx0aGlzLmhpPT1hLmhpJiZ0aGlzLmxvPGEubG8/LTE6dGhpcy5oaT09YS5oaSYmdGhpcy5sbz09YS5sbz8wOjF9O2pzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5yaWdodFNoaWZ0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgodGhpcy5sbz4+PjF8KHRoaXMuaGkmMSk8PDMxKT4+PjAsdGhpcy5oaT4+PjE+Pj4wKX07anNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmxlZnRTaGlmdD1mdW5jdGlvbigpe3JldHVybiBuZXcganNwYi5hcml0aC5VSW50NjQodGhpcy5sbzw8MT4+PjAsKHRoaXMuaGk8PDF8dGhpcy5sbz4+PjMxKT4+PjApfTtcbmpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5tc2I9ZnVuY3Rpb24oKXtyZXR1cm4hISh0aGlzLmhpJjIxNDc0ODM2NDgpfTtqc3BiLmFyaXRoLlVJbnQ2NC5wcm90b3R5cGUubHNiPWZ1bmN0aW9uKCl7cmV0dXJuISEodGhpcy5sbyYxKX07anNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLnplcm89ZnVuY3Rpb24oKXtyZXR1cm4gMD09dGhpcy5sbyYmMD09dGhpcy5oaX07anNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IGpzcGIuYXJpdGguVUludDY0KCh0aGlzLmxvK2EubG8mNDI5NDk2NzI5NSk+Pj4wPj4+MCwoKHRoaXMuaGkrYS5oaSY0Mjk0OTY3Mjk1KT4+PjApKyg0Mjk0OTY3Mjk2PD10aGlzLmxvK2EubG8/MTowKT4+PjApfTtcbmpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5zdWI9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgodGhpcy5sby1hLmxvJjQyOTQ5NjcyOTUpPj4+MD4+PjAsKCh0aGlzLmhpLWEuaGkmNDI5NDk2NzI5NSk+Pj4wKS0oMD50aGlzLmxvLWEubG8/MTowKT4+PjApfTtqc3BiLmFyaXRoLlVJbnQ2NC5tdWwzMngzMj1mdW5jdGlvbihhLGIpe3ZhciBjPWEmNjU1MzU7YT4+Pj0xNjt2YXIgZD1iJjY1NTM1LGU9Yj4+PjE2O2I9YypkKzY1NTM2KihjKmUmNjU1MzUpKzY1NTM2KihhKmQmNjU1MzUpO2ZvcihjPWEqZSsoYyplPj4+MTYpKyhhKmQ+Pj4xNik7NDI5NDk2NzI5Njw9YjspYi09NDI5NDk2NzI5NixjKz0xO3JldHVybiBuZXcganNwYi5hcml0aC5VSW50NjQoYj4+PjAsYz4+PjApfTtcbmpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24oYSl7dmFyIGI9anNwYi5hcml0aC5VSW50NjQubXVsMzJ4MzIodGhpcy5sbyxhKTthPWpzcGIuYXJpdGguVUludDY0Lm11bDMyeDMyKHRoaXMuaGksYSk7YS5oaT1hLmxvO2EubG89MDtyZXR1cm4gYi5hZGQoYSl9O1xuanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmRpdj1mdW5jdGlvbihhKXtpZigwPT1hKXJldHVybltdO3ZhciBiPW5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgwLDApLGM9bmV3IGpzcGIuYXJpdGguVUludDY0KHRoaXMubG8sdGhpcy5oaSk7YT1uZXcganNwYi5hcml0aC5VSW50NjQoYSwwKTtmb3IodmFyIGQ9bmV3IGpzcGIuYXJpdGguVUludDY0KDEsMCk7IWEubXNiKCk7KWE9YS5sZWZ0U2hpZnQoKSxkPWQubGVmdFNoaWZ0KCk7Zm9yKDshZC56ZXJvKCk7KTA+PWEuY21wKGMpJiYoYj1iLmFkZChkKSxjPWMuc3ViKGEpKSxhPWEucmlnaHRTaGlmdCgpLGQ9ZC5yaWdodFNoaWZ0KCk7cmV0dXJuW2IsY119O2pzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe2Zvcih2YXIgYT1cIlwiLGI9dGhpczshYi56ZXJvKCk7KXtiPWIuZGl2KDEwKTt2YXIgYz1iWzBdO2E9YlsxXS5sbythO2I9Y31cIlwiPT1hJiYoYT1cIjBcIik7cmV0dXJuIGF9O1xuanNwYi5hcml0aC5VSW50NjQuZnJvbVN0cmluZz1mdW5jdGlvbihhKXtmb3IodmFyIGI9bmV3IGpzcGIuYXJpdGguVUludDY0KDAsMCksYz1uZXcganNwYi5hcml0aC5VSW50NjQoMCwwKSxkPTA7ZDxhLmxlbmd0aDtkKyspe2lmKFwiMFwiPmFbZF18fFwiOVwiPGFbZF0pcmV0dXJuIG51bGw7dmFyIGU9cGFyc2VJbnQoYVtkXSwxMCk7Yy5sbz1lO2I9Yi5tdWwoMTApLmFkZChjKX1yZXR1cm4gYn07anNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NCh0aGlzLmxvLHRoaXMuaGkpfTtqc3BiLmFyaXRoLkludDY0PWZ1bmN0aW9uKGEsYil7dGhpcy5sbz1hO3RoaXMuaGk9Yn07XG5qc3BiLmFyaXRoLkludDY0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLkludDY0KCh0aGlzLmxvK2EubG8mNDI5NDk2NzI5NSk+Pj4wPj4+MCwoKHRoaXMuaGkrYS5oaSY0Mjk0OTY3Mjk1KT4+PjApKyg0Mjk0OTY3Mjk2PD10aGlzLmxvK2EubG8/MTowKT4+PjApfTtqc3BiLmFyaXRoLkludDY0LnByb3RvdHlwZS5zdWI9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLkludDY0KCh0aGlzLmxvLWEubG8mNDI5NDk2NzI5NSk+Pj4wPj4+MCwoKHRoaXMuaGktYS5oaSY0Mjk0OTY3Mjk1KT4+PjApLSgwPnRoaXMubG8tYS5sbz8xOjApPj4+MCl9O2pzcGIuYXJpdGguSW50NjQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLkludDY0KHRoaXMubG8sdGhpcy5oaSl9O1xuanNwYi5hcml0aC5JbnQ2NC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT0wIT0odGhpcy5oaSYyMTQ3NDgzNjQ4KSxiPW5ldyBqc3BiLmFyaXRoLlVJbnQ2NCh0aGlzLmxvLHRoaXMuaGkpO2EmJihiPShuZXcganNwYi5hcml0aC5VSW50NjQoMCwwKSkuc3ViKGIpKTtyZXR1cm4oYT9cIi1cIjpcIlwiKStiLnRvU3RyaW5nKCl9O2pzcGIuYXJpdGguSW50NjQuZnJvbVN0cmluZz1mdW5jdGlvbihhKXt2YXIgYj0wPGEubGVuZ3RoJiZcIi1cIj09YVswXTtiJiYoYT1hLnN1YnN0cmluZygxKSk7YT1qc3BiLmFyaXRoLlVJbnQ2NC5mcm9tU3RyaW5nKGEpO2lmKG51bGw9PT1hKXJldHVybiBudWxsO2ImJihhPShuZXcganNwYi5hcml0aC5VSW50NjQoMCwwKSkuc3ViKGEpKTtyZXR1cm4gbmV3IGpzcGIuYXJpdGguSW50NjQoYS5sbyxhLmhpKX07anNwYi5CaW5hcnlXcml0ZXI9ZnVuY3Rpb24oKXt0aGlzLmJsb2Nrc189W107dGhpcy50b3RhbExlbmd0aF89MDt0aGlzLmVuY29kZXJfPW5ldyBqc3BiLkJpbmFyeUVuY29kZXI7dGhpcy5ib29rbWFya3NfPVtdfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUuYXBwZW5kVWludDhBcnJheV89ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbmNvZGVyXy5lbmQoKTt0aGlzLmJsb2Nrc18ucHVzaChiKTt0aGlzLmJsb2Nrc18ucHVzaChhKTt0aGlzLnRvdGFsTGVuZ3RoXys9Yi5sZW5ndGgrYS5sZW5ndGh9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLmJlZ2luRGVsaW1pdGVkXz1mdW5jdGlvbihhKXt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKTthPXRoaXMuZW5jb2Rlcl8uZW5kKCk7dGhpcy5ibG9ja3NfLnB1c2goYSk7dGhpcy50b3RhbExlbmd0aF8rPWEubGVuZ3RoO2EucHVzaCh0aGlzLnRvdGFsTGVuZ3RoXyk7cmV0dXJuIGF9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5lbmREZWxpbWl0ZWRfPWZ1bmN0aW9uKGEpe3ZhciBiPWEucG9wKCk7Yj10aGlzLnRvdGFsTGVuZ3RoXyt0aGlzLmVuY29kZXJfLmxlbmd0aCgpLWI7Zm9yKGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9Yik7MTI3PGI7KWEucHVzaChiJjEyN3wxMjgpLGI+Pj49Nyx0aGlzLnRvdGFsTGVuZ3RoXysrO2EucHVzaChiKTt0aGlzLnRvdGFsTGVuZ3RoXysrfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVNlcmlhbGl6ZWRNZXNzYWdlPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmFwcGVuZFVpbnQ4QXJyYXlfKGEuc3ViYXJyYXkoYixjKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5tYXliZVdyaXRlU2VyaWFsaXplZE1lc3NhZ2U9ZnVuY3Rpb24oYSxiLGMpe251bGwhPWEmJm51bGwhPWImJm51bGwhPWMmJnRoaXMud3JpdGVTZXJpYWxpemVkTWVzc2FnZShhLGIsYyl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuYmxvY2tzXz1bXTt0aGlzLmVuY29kZXJfLmVuZCgpO3RoaXMudG90YWxMZW5ndGhfPTA7dGhpcy5ib29rbWFya3NfPVtdfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5nZXRSZXN1bHRCdWZmZXI9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KDA9PXRoaXMuYm9va21hcmtzXy5sZW5ndGgpO2Zvcih2YXIgYT1uZXcgVWludDhBcnJheSh0aGlzLnRvdGFsTGVuZ3RoXyt0aGlzLmVuY29kZXJfLmxlbmd0aCgpKSxiPXRoaXMuYmxvY2tzXyxjPWIubGVuZ3RoLGQ9MCxlPTA7ZTxjO2UrKyl7dmFyIGY9YltlXTthLnNldChmLGQpO2QrPWYubGVuZ3RofWI9dGhpcy5lbmNvZGVyXy5lbmQoKTthLnNldChiLGQpO2QrPWIubGVuZ3RoO2dvb2cuYXNzZXJ0cy5hc3NlcnQoZD09YS5sZW5ndGgpO3RoaXMuYmxvY2tzXz1bYV07cmV0dXJuIGF9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5nZXRSZXN1bHRCYXNlNjRTdHJpbmc9ZnVuY3Rpb24oYSl7cmV0dXJuIGdvb2cuY3J5cHQuYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh0aGlzLmdldFJlc3VsdEJ1ZmZlcigpLGEpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5iZWdpblN1Yk1lc3NhZ2U9ZnVuY3Rpb24oYSl7dGhpcy5ib29rbWFya3NfLnB1c2godGhpcy5iZWdpbkRlbGltaXRlZF8oYSkpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUuZW5kU3ViTWVzc2FnZT1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dGhpcy5ib29rbWFya3NfLmxlbmd0aCk7dGhpcy5lbmREZWxpbWl0ZWRfKHRoaXMuYm9va21hcmtzXy5wb3AoKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUZpZWxkSGVhZGVyXz1mdW5jdGlvbihhLGIpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMTw9YSYmYT09TWF0aC5mbG9vcihhKSk7dGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCphK2IpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUFueT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9anNwYi5CaW5hcnlDb25zdGFudHMuRmllbGRUeXBlO3N3aXRjaChhKXtjYXNlIGQuRE9VQkxFOnRoaXMud3JpdGVEb3VibGUoYixjKTticmVhaztjYXNlIGQuRkxPQVQ6dGhpcy53cml0ZUZsb2F0KGIsYyk7YnJlYWs7Y2FzZSBkLklOVDY0OnRoaXMud3JpdGVJbnQ2NChiLGMpO2JyZWFrO2Nhc2UgZC5VSU5UNjQ6dGhpcy53cml0ZVVpbnQ2NChiLGMpO2JyZWFrO2Nhc2UgZC5JTlQzMjp0aGlzLndyaXRlSW50MzIoYixjKTticmVhaztjYXNlIGQuRklYRUQ2NDp0aGlzLndyaXRlRml4ZWQ2NChiLGMpO2JyZWFrO2Nhc2UgZC5GSVhFRDMyOnRoaXMud3JpdGVGaXhlZDMyKGIsYyk7YnJlYWs7Y2FzZSBkLkJPT0w6dGhpcy53cml0ZUJvb2woYixjKTticmVhaztjYXNlIGQuU1RSSU5HOnRoaXMud3JpdGVTdHJpbmcoYixjKTticmVhaztjYXNlIGQuR1JPVVA6Z29vZy5hc3NlcnRzLmZhaWwoXCJHcm91cCBmaWVsZCB0eXBlIG5vdCBzdXBwb3J0ZWQgaW4gd3JpdGVBbnkoKVwiKTtcbmJyZWFrO2Nhc2UgZC5NRVNTQUdFOmdvb2cuYXNzZXJ0cy5mYWlsKFwiTWVzc2FnZSBmaWVsZCB0eXBlIG5vdCBzdXBwb3J0ZWQgaW4gd3JpdGVBbnkoKVwiKTticmVhaztjYXNlIGQuQllURVM6dGhpcy53cml0ZUJ5dGVzKGIsYyk7YnJlYWs7Y2FzZSBkLlVJTlQzMjp0aGlzLndyaXRlVWludDMyKGIsYyk7YnJlYWs7Y2FzZSBkLkVOVU06dGhpcy53cml0ZUVudW0oYixjKTticmVhaztjYXNlIGQuU0ZJWEVEMzI6dGhpcy53cml0ZVNmaXhlZDMyKGIsYyk7YnJlYWs7Y2FzZSBkLlNGSVhFRDY0OnRoaXMud3JpdGVTZml4ZWQ2NChiLGMpO2JyZWFrO2Nhc2UgZC5TSU5UMzI6dGhpcy53cml0ZVNpbnQzMihiLGMpO2JyZWFrO2Nhc2UgZC5TSU5UNjQ6dGhpcy53cml0ZVNpbnQ2NChiLGMpO2JyZWFrO2Nhc2UgZC5GSEFTSDY0OnRoaXMud3JpdGVGaXhlZEhhc2g2NChiLGMpO2JyZWFrO2Nhc2UgZC5WSEFTSDY0OnRoaXMud3JpdGVWYXJpbnRIYXNoNjQoYixjKTticmVhaztkZWZhdWx0Omdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCBmaWVsZCB0eXBlIGluIHdyaXRlQW55KClcIil9fTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVuc2lnbmVkVmFyaW50MzJfPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKGIpKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2lnbmVkVmFyaW50MzJfPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMihiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVuc2lnbmVkVmFyaW50NjRfPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDY0KGIpKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTaWduZWRWYXJpbnQ2NF89ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5lbmNvZGVyXy53cml0ZVNpZ25lZFZhcmludDY0KGIpKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50MzJfPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVaaWd6YWdWYXJpbnQzMihiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVppZ3phZ1ZhcmludDY0Xz1mdW5jdGlvbihhLGIpe251bGwhPWImJih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlWmlnemFnVmFyaW50NjQoYikpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVppZ3phZ1ZhcmludDY0U3RyaW5nXz1mdW5jdGlvbihhLGIpe251bGwhPWImJih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmcoYikpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVaaWd6YWdWYXJpbnRIYXNoNjRfPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVaaWd6YWdWYXJpbnRIYXNoNjQoYikpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUludDMyPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQoYj49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmYjxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLHRoaXMud3JpdGVTaWduZWRWYXJpbnQzMl8oYSxiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUludDMyU3RyaW5nPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGI9cGFyc2VJbnQoYiwxMCksZ29vZy5hc3NlcnRzLmFzc2VydChiPj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxJiZiPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSksdGhpcy53cml0ZVNpZ25lZFZhcmludDMyXyhhLGIpKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVJbnQ2ND1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KGI+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMmJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzKSx0aGlzLndyaXRlU2lnbmVkVmFyaW50NjRfKGEsYikpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVJbnQ2NFN0cmluZz1mdW5jdGlvbihhLGIpe251bGwhPWImJihiPWpzcGIuYXJpdGguSW50NjQuZnJvbVN0cmluZyhiKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRWYXJpbnQ2NChiLmxvLGIuaGkpKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVVaW50MzI9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYoZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1iJiZiPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMiksdGhpcy53cml0ZVVuc2lnbmVkVmFyaW50MzJfKGEsYikpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVVaW50MzJTdHJpbmc9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYoYj1wYXJzZUludChiLDEwKSxnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWImJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMyKSx0aGlzLndyaXRlVW5zaWduZWRWYXJpbnQzMl8oYSxiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVpbnQ2ND1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWImJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzY0KSx0aGlzLndyaXRlVW5zaWduZWRWYXJpbnQ2NF8oYSxiKSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlVWludDY0U3RyaW5nPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGI9anNwYi5hcml0aC5VSW50NjQuZnJvbVN0cmluZyhiKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRWYXJpbnQ2NChiLmxvLGIuaGkpKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2ludDMyPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQoYj49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmYjxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLHRoaXMud3JpdGVaaWd6YWdWYXJpbnQzMl8oYSxiKSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2ludDY0PWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQoYj49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyYmYjxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMpLHRoaXMud3JpdGVaaWd6YWdWYXJpbnQ2NF8oYSxiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVNpbnRIYXNoNjQ9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiZ0aGlzLndyaXRlWmlnemFnVmFyaW50SGFzaDY0XyhhLGIpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTaW50NjRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiZ0aGlzLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmdfKGEsYil9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlRml4ZWQzMj1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWImJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMyKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiksdGhpcy5lbmNvZGVyXy53cml0ZVVpbnQzMihiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUZpeGVkNjQ9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYoZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1iJiZiPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182NCksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVaW50NjQoYikpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYoYj1qc3BiLmFyaXRoLlVJbnQ2NC5mcm9tU3RyaW5nKGIpLHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRGaXhlZDY0KGIubG8sYi5oaSkpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTZml4ZWQzMj1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KGI+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiksdGhpcy5lbmNvZGVyXy53cml0ZUludDMyKGIpKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTZml4ZWQ2ND1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KGI+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMmJmI8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCksdGhpcy5lbmNvZGVyXy53cml0ZUludDY0KGIpKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2ZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYoYj1qc3BiLmFyaXRoLkludDY0LmZyb21TdHJpbmcoYiksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdEZpeGVkNjQoYi5sbyxiLmhpKSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlRmxvYXQ9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVEMzIpLHRoaXMuZW5jb2Rlcl8ud3JpdGVGbG9hdChiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZURvdWJsZT1mdW5jdGlvbihhLGIpe251bGwhPWImJih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCksdGhpcy5lbmNvZGVyXy53cml0ZURvdWJsZShiKSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlQm9vbD1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYiksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5lbmNvZGVyXy53cml0ZUJvb2woYikpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVFbnVtPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQoYj49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmYjxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMihiKSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nPWZ1bmN0aW9uKGEsYil7bnVsbCE9YiYmKGE9dGhpcy5iZWdpbkRlbGltaXRlZF8oYSksdGhpcy5lbmNvZGVyXy53cml0ZVN0cmluZyhiKSx0aGlzLmVuZERlbGltaXRlZF8oYSkpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVCeXRlcz1mdW5jdGlvbihhLGIpe251bGwhPWImJihiPWpzcGIudXRpbHMuYnl0ZVNvdXJjZVRvVWludDhBcnJheShiKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMihiLmxlbmd0aCksdGhpcy5hcHBlbmRVaW50OEFycmF5XyhiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2U9ZnVuY3Rpb24oYSxiLGMpe251bGwhPWImJihhPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpLGMoYix0aGlzKSx0aGlzLmVuZERlbGltaXRlZF8oYSkpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2VTZXQ9ZnVuY3Rpb24oYSxiLGMpe251bGwhPWImJih0aGlzLndyaXRlRmllbGRIZWFkZXJfKDEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuU1RBUlRfR1JPVVApLHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oMixqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMihhKSxhPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKDMpLGMoYix0aGlzKSx0aGlzLmVuZERlbGltaXRlZF8oYSksdGhpcy53cml0ZUZpZWxkSGVhZGVyXygxLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkVORF9HUk9VUCkpfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUdyb3VwPWZ1bmN0aW9uKGEsYixjKXtudWxsIT1iJiYodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlNUQVJUX0dST1VQKSxjKGIsdGhpcyksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkVORF9HUk9VUCkpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVGaXhlZEhhc2g2ND1mdW5jdGlvbihhLGIpe251bGwhPWImJihnb29nLmFzc2VydHMuYXNzZXJ0KDg9PWIubGVuZ3RoKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCksdGhpcy5lbmNvZGVyXy53cml0ZUZpeGVkSGFzaDY0KGIpKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVWYXJpbnRIYXNoNjQ9ZnVuY3Rpb24oYSxiKXtudWxsIT1iJiYoZ29vZy5hc3NlcnRzLmFzc2VydCg4PT1iLmxlbmd0aCksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5lbmNvZGVyXy53cml0ZVZhcmludEhhc2g2NChiKSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVNwbGl0Rml4ZWQ2ND1mdW5jdGlvbihhLGIsYyl7dGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpO3RoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdEZpeGVkNjQoYixjKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTcGxpdFZhcmludDY0PWZ1bmN0aW9uKGEsYixjKXt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTt0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRWYXJpbnQ2NChiLGMpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTcGxpdFppZ3phZ1ZhcmludDY0PWZ1bmN0aW9uKGEsYixjKXt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKTt2YXIgZD10aGlzLmVuY29kZXJfO2pzcGIudXRpbHMudG9aaWd6YWc2NChiLGMsZnVuY3Rpb24oYSxiKXtkLndyaXRlU3BsaXRWYXJpbnQ2NChhPj4+MCxiPj4+MCl9KX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEludDMyPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlU2lnbmVkVmFyaW50MzJfKGEsYltjXSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkSW50MzJTdHJpbmc9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVJbnQzMlN0cmluZyhhLGJbY10pfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEludDY0PWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlU2lnbmVkVmFyaW50NjRfKGEsYltjXSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTcGxpdEZpeGVkNjQ9ZnVuY3Rpb24oYSxiLGMsZCl7aWYobnVsbCE9Yilmb3IodmFyIGU9MDtlPGIubGVuZ3RoO2UrKyl0aGlzLndyaXRlU3BsaXRGaXhlZDY0KGEsYyhiW2VdKSxkKGJbZV0pKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTcGxpdFZhcmludDY0PWZ1bmN0aW9uKGEsYixjLGQpe2lmKG51bGwhPWIpZm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspdGhpcy53cml0ZVNwbGl0VmFyaW50NjQoYSxjKGJbZV0pLGQoYltlXSkpfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFNwbGl0WmlnemFnVmFyaW50NjQ9ZnVuY3Rpb24oYSxiLGMsZCl7aWYobnVsbCE9Yilmb3IodmFyIGU9MDtlPGIubGVuZ3RoO2UrKyl0aGlzLndyaXRlU3BsaXRaaWd6YWdWYXJpbnQ2NChhLGMoYltlXSksZChiW2VdKSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRJbnQ2NFN0cmluZz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy53cml0ZUludDY0U3RyaW5nKGEsYltjXSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkVWludDMyPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlVW5zaWduZWRWYXJpbnQzMl8oYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRVaW50MzJTdHJpbmc9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVVaW50MzJTdHJpbmcoYSxiW2NdKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFVpbnQ2ND1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy53cml0ZVVuc2lnbmVkVmFyaW50NjRfKGEsYltjXSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkVWludDY0U3RyaW5nPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlVWludDY0U3RyaW5nKGEsYltjXSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDMyPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlWmlnemFnVmFyaW50MzJfKGEsYltjXSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTaW50NjQ9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVaaWd6YWdWYXJpbnQ2NF8oYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTaW50NjRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVaaWd6YWdWYXJpbnQ2NFN0cmluZ18oYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTaW50SGFzaDY0PWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlWmlnemFnVmFyaW50SGFzaDY0XyhhLGJbY10pfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkRml4ZWQzMj1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy53cml0ZUZpeGVkMzIoYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRGaXhlZDY0PWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlRml4ZWQ2NChhLGJbY10pfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVGaXhlZDY0U3RyaW5nKGEsYltjXSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTZml4ZWQzMj1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy53cml0ZVNmaXhlZDMyKGEsYltjXSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ZpeGVkNjQ9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVTZml4ZWQ2NChhLGJbY10pfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFNmaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlU2ZpeGVkNjRTdHJpbmcoYSxiW2NdKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEZsb2F0PWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlRmxvYXQoYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWREb3VibGU9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVEb3VibGUoYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRCb29sPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9Yilmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLndyaXRlQm9vbChhLGJbY10pfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEVudW09ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVFbnVtKGEsYltjXSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVTdHJpbmcoYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRCeXRlcz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy53cml0ZUJ5dGVzKGEsYltjXSl9O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkTWVzc2FnZT1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9Yilmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9dGhpcy5iZWdpbkRlbGltaXRlZF8oYSk7YyhiW2RdLHRoaXMpO3RoaXMuZW5kRGVsaW1pdGVkXyhlKX19O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRHcm91cD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9Yilmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuU1RBUlRfR1JPVVApLGMoYltkXSx0aGlzKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRU5EX0dST1VQKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRGaXhlZEhhc2g2ND1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy53cml0ZUZpeGVkSGFzaDY0KGEsYltjXSl9O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRWYXJpbnRIYXNoNjQ9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMud3JpdGVWYXJpbnRIYXNoNjQoYSxiW2NdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkSW50MzI9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aCl7YT10aGlzLmJlZ2luRGVsaW1pdGVkXyhhKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLmVuY29kZXJfLndyaXRlU2lnbmVkVmFyaW50MzIoYltjXSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRJbnQzMlN0cmluZz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMihwYXJzZUludChiW2NdLDEwKSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkSW50NjQ9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aCl7YT10aGlzLmJlZ2luRGVsaW1pdGVkXyhhKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLmVuY29kZXJfLndyaXRlU2lnbmVkVmFyaW50NjQoYltjXSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRTcGxpdEZpeGVkNjQ9ZnVuY3Rpb24oYSxiLGMsZCl7aWYobnVsbCE9Yil7YT10aGlzLmJlZ2luRGVsaW1pdGVkXyhhKTtmb3IodmFyIGU9MDtlPGIubGVuZ3RoO2UrKyl0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRGaXhlZDY0KGMoYltlXSksZChiW2VdKSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU3BsaXRWYXJpbnQ2ND1mdW5jdGlvbihhLGIsYyxkKXtpZihudWxsIT1iKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKXRoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdFZhcmludDY0KGMoYltlXSksZChiW2VdKSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRTcGxpdFppZ3phZ1ZhcmludDY0PWZ1bmN0aW9uKGEsYixjLGQpe2lmKG51bGwhPWIpe2E9dGhpcy5iZWdpbkRlbGltaXRlZF8oYSk7Zm9yKHZhciBlPXRoaXMuZW5jb2Rlcl8sZj0wO2Y8Yi5sZW5ndGg7ZisrKWpzcGIudXRpbHMudG9aaWd6YWc2NChjKGJbZl0pLGQoYltmXSksZnVuY3Rpb24oYSxiKXtlLndyaXRlU3BsaXRWYXJpbnQ2NChhPj4+MCxiPj4+MCl9KTt0aGlzLmVuZERlbGltaXRlZF8oYSl9fTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRJbnQ2NFN0cmluZz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1qc3BiLmFyaXRoLkludDY0LmZyb21TdHJpbmcoYltjXSk7dGhpcy5lbmNvZGVyXy53cml0ZVNwbGl0VmFyaW50NjQoZC5sbyxkLmhpKX10aGlzLmVuZERlbGltaXRlZF8oYSl9fTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQzMj1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKGJbY10pO3RoaXMuZW5kRGVsaW1pdGVkXyhhKX19O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQzMlN0cmluZz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKHBhcnNlSW50KGJbY10sMTApKTt0aGlzLmVuZERlbGltaXRlZF8oYSl9fTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQ2ND1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDY0KGJbY10pO3RoaXMuZW5kRGVsaW1pdGVkXyhhKX19O2pzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQ2NFN0cmluZz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1qc3BiLmFyaXRoLlVJbnQ2NC5mcm9tU3RyaW5nKGJbY10pO3RoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdFZhcmludDY0KGQubG8sZC5oaSl9dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRTaW50MzI9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aCl7YT10aGlzLmJlZ2luRGVsaW1pdGVkXyhhKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLmVuY29kZXJfLndyaXRlWmlnemFnVmFyaW50MzIoYltjXSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU2ludDY0PWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YiYmYi5sZW5ndGgpe2E9dGhpcy5iZWdpbkRlbGltaXRlZF8oYSk7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy5lbmNvZGVyXy53cml0ZVppZ3phZ1ZhcmludDY0KGJbY10pO3RoaXMuZW5kRGVsaW1pdGVkXyhhKX19O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU2ludDY0U3RyaW5nPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YiYmYi5sZW5ndGgpe2E9dGhpcy5iZWdpbkRlbGltaXRlZF8oYSk7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy5lbmNvZGVyXy53cml0ZVppZ3phZ1ZhcmludEhhc2g2NChqc3BiLnV0aWxzLmRlY2ltYWxTdHJpbmdUb0hhc2g2NChiW2NdKSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU2ludEhhc2g2ND1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVaaWd6YWdWYXJpbnRIYXNoNjQoYltjXSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRGaXhlZDMyPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YiYmYi5sZW5ndGgpZm9yKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKDQqYi5sZW5ndGgpLGE9MDthPGIubGVuZ3RoO2ErKyl0aGlzLmVuY29kZXJfLndyaXRlVWludDMyKGJbYV0pfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRGaXhlZDY0PWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YiYmYi5sZW5ndGgpZm9yKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oYSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKDgqYi5sZW5ndGgpLGE9MDthPGIubGVuZ3RoO2ErKyl0aGlzLmVuY29kZXJfLndyaXRlVWludDY0KGJbYV0pfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZEZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aClmb3IodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCpiLmxlbmd0aCksYT0wO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1qc3BiLmFyaXRoLlVJbnQ2NC5mcm9tU3RyaW5nKGJbYV0pO3RoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdEZpeGVkNjQoYy5sbyxjLmhpKX19O1xuanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU2ZpeGVkMzI9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aClmb3IodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoNCpiLmxlbmd0aCksYT0wO2E8Yi5sZW5ndGg7YSsrKXRoaXMuZW5jb2Rlcl8ud3JpdGVJbnQzMihiW2FdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU2ZpeGVkNjQ9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aClmb3IodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhhLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCpiLmxlbmd0aCksYT0wO2E8Yi5sZW5ndGg7YSsrKXRoaXMuZW5jb2Rlcl8ud3JpdGVJbnQ2NChiW2FdKX07XG5qc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRTZml4ZWQ2NFN0cmluZz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKWZvcih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMig4KmIubGVuZ3RoKSxhPTA7YTxiLmxlbmd0aDthKyspdGhpcy5lbmNvZGVyXy53cml0ZUludDY0U3RyaW5nKGJbYV0pfTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRGbG9hdD1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKWZvcih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMig0KmIubGVuZ3RoKSxhPTA7YTxiLmxlbmd0aDthKyspdGhpcy5lbmNvZGVyXy53cml0ZUZsb2F0KGJbYV0pfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZERvdWJsZT1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKWZvcih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMig4KmIubGVuZ3RoKSxhPTA7YTxiLmxlbmd0aDthKyspdGhpcy5lbmNvZGVyXy53cml0ZURvdWJsZShiW2FdKX07anNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkQm9vbD1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKWZvcih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMihiLmxlbmd0aCksYT0wO2E8Yi5sZW5ndGg7YSsrKXRoaXMuZW5jb2Rlcl8ud3JpdGVCb29sKGJbYV0pfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZEVudW09ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLmxlbmd0aCl7YT10aGlzLmJlZ2luRGVsaW1pdGVkXyhhKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0aGlzLmVuY29kZXJfLndyaXRlRW51bShiW2NdKTt0aGlzLmVuZERlbGltaXRlZF8oYSl9fTtqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRGaXhlZEhhc2g2ND1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKWZvcih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGEsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMig4KmIubGVuZ3RoKSxhPTA7YTxiLmxlbmd0aDthKyspdGhpcy5lbmNvZGVyXy53cml0ZUZpeGVkSGFzaDY0KGJbYV0pfTtcbmpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFZhcmludEhhc2g2ND1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWImJmIubGVuZ3RoKXthPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGEpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVWYXJpbnRIYXNoNjQoYltjXSk7dGhpcy5lbmREZWxpbWl0ZWRfKGEpfX07anNwYi5NYXA9ZnVuY3Rpb24oYSxiKXt0aGlzLmFycl89YTt0aGlzLnZhbHVlQ3Rvcl89Yjt0aGlzLm1hcF89e307dGhpcy5hcnJDbGVhbj0hMDswPHRoaXMuYXJyXy5sZW5ndGgmJnRoaXMubG9hZEZyb21BcnJheV8oKX07anNwYi5NYXAucHJvdG90eXBlLmxvYWRGcm9tQXJyYXlfPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTx0aGlzLmFycl8ubGVuZ3RoO2ErKyl7dmFyIGI9dGhpcy5hcnJfW2FdLGM9YlswXTt0aGlzLm1hcF9bYy50b1N0cmluZygpXT1uZXcganNwYi5NYXAuRW50cnlfKGMsYlsxXSl9dGhpcy5hcnJDbGVhbj0hMH07XG5qc3BiLk1hcC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe2lmKHRoaXMuYXJyQ2xlYW4pe2lmKHRoaXMudmFsdWVDdG9yXyl7dmFyIGE9dGhpcy5tYXBfLGI7Zm9yKGIgaW4gYSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxiKSl7dmFyIGM9YVtiXS52YWx1ZVdyYXBwZXI7YyYmYy50b0FycmF5KCl9fX1lbHNle3RoaXMuYXJyXy5sZW5ndGg9MDthPXRoaXMuc3RyaW5nS2V5c18oKTthLnNvcnQoKTtmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD10aGlzLm1hcF9bYVtiXV07KGM9ZC52YWx1ZVdyYXBwZXIpJiZjLnRvQXJyYXkoKTt0aGlzLmFycl8ucHVzaChbZC5rZXksZC52YWx1ZV0pfXRoaXMuYXJyQ2xlYW49ITB9cmV0dXJuIHRoaXMuYXJyX307XG5qc3BiLk1hcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy50b0FycmF5KCksZD1bXSxlPTA7ZTxjLmxlbmd0aDtlKyspe3ZhciBmPXRoaXMubWFwX1tjW2VdWzBdLnRvU3RyaW5nKCldO3RoaXMud3JhcEVudHJ5XyhmKTt2YXIgZz1mLnZhbHVlV3JhcHBlcjtnPyhnb29nLmFzc2VydHMuYXNzZXJ0KGIpLGQucHVzaChbZi5rZXksYihhLGcpXSkpOmQucHVzaChbZi5rZXksZi52YWx1ZV0pfXJldHVybiBkfTtqc3BiLk1hcC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGEsYixjKXtiPW5ldyBqc3BiLk1hcChbXSxiKTtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGU9YVtkXVswXSxmPWMoYVtkXVsxXSk7Yi5zZXQoZSxmKX1yZXR1cm4gYn07anNwYi5NYXAuQXJyYXlJdGVyYXRvckl0ZXJhYmxlXz1mdW5jdGlvbihhKXt0aGlzLmlkeF89MDt0aGlzLmFycl89YX07XG5qc3BiLk1hcC5BcnJheUl0ZXJhdG9ySXRlcmFibGVfLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaWR4Xzx0aGlzLmFycl8ubGVuZ3RoP3tkb25lOiExLHZhbHVlOnRoaXMuYXJyX1t0aGlzLmlkeF8rK119Ontkb25lOiEwLHZhbHVlOnZvaWQgMH19O1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJihqc3BiLk1hcC5BcnJheUl0ZXJhdG9ySXRlcmFibGVfLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KTtqc3BiLk1hcC5wcm90b3R5cGUuZ2V0TGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RyaW5nS2V5c18oKS5sZW5ndGh9O2pzcGIuTWFwLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMubWFwXz17fTt0aGlzLmFyckNsZWFuPSExfTtcbmpzcGIuTWFwLnByb3RvdHlwZS5kZWw9ZnVuY3Rpb24oYSl7YT1hLnRvU3RyaW5nKCk7dmFyIGI9dGhpcy5tYXBfLmhhc093blByb3BlcnR5KGEpO2RlbGV0ZSB0aGlzLm1hcF9bYV07dGhpcy5hcnJDbGVhbj0hMTtyZXR1cm4gYn07anNwYi5NYXAucHJvdG90eXBlLmdldEVudHJ5TGlzdD1mdW5jdGlvbigpe3ZhciBhPVtdLGI9dGhpcy5zdHJpbmdLZXlzXygpO2Iuc29ydCgpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD10aGlzLm1hcF9bYltjXV07YS5wdXNoKFtkLmtleSxkLnZhbHVlXSl9cmV0dXJuIGF9O2pzcGIuTWFwLnByb3RvdHlwZS5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLnN0cmluZ0tleXNfKCk7Yi5zb3J0KCk7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBkPXRoaXMubWFwX1tiW2NdXTthLnB1c2goW2Qua2V5LHRoaXMud3JhcEVudHJ5XyhkKV0pfXJldHVybiBuZXcganNwYi5NYXAuQXJyYXlJdGVyYXRvckl0ZXJhYmxlXyhhKX07XG5qc3BiLk1hcC5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3ZhciBhPVtdLGI9dGhpcy5zdHJpbmdLZXlzXygpO2Iuc29ydCgpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKWEucHVzaCh0aGlzLm1hcF9bYltjXV0ua2V5KTtyZXR1cm4gbmV3IGpzcGIuTWFwLkFycmF5SXRlcmF0b3JJdGVyYWJsZV8oYSl9O2pzcGIuTWFwLnByb3RvdHlwZS52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMuc3RyaW5nS2V5c18oKTtiLnNvcnQoKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKylhLnB1c2godGhpcy53cmFwRW50cnlfKHRoaXMubWFwX1tiW2NdXSkpO3JldHVybiBuZXcganNwYi5NYXAuQXJyYXlJdGVyYXRvckl0ZXJhYmxlXyhhKX07XG5qc3BiLk1hcC5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuc3RyaW5nS2V5c18oKTtjLnNvcnQoKTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9dGhpcy5tYXBfW2NbZF1dO2EuY2FsbChiLHRoaXMud3JhcEVudHJ5XyhlKSxlLmtleSx0aGlzKX19O2pzcGIuTWFwLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcganNwYi5NYXAuRW50cnlfKGEpO3RoaXMudmFsdWVDdG9yXz8oYy52YWx1ZVdyYXBwZXI9YixjLnZhbHVlPWIudG9BcnJheSgpKTpjLnZhbHVlPWI7dGhpcy5tYXBfW2EudG9TdHJpbmcoKV09Yzt0aGlzLmFyckNsZWFuPSExO3JldHVybiB0aGlzfTtqc3BiLk1hcC5wcm90b3R5cGUud3JhcEVudHJ5Xz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy52YWx1ZUN0b3JfPyhhLnZhbHVlV3JhcHBlcnx8KGEudmFsdWVXcmFwcGVyPW5ldyB0aGlzLnZhbHVlQ3Rvcl8oYS52YWx1ZSkpLGEudmFsdWVXcmFwcGVyKTphLnZhbHVlfTtcbmpzcGIuTWFwLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYSl7aWYoYT10aGlzLm1hcF9bYS50b1N0cmluZygpXSlyZXR1cm4gdGhpcy53cmFwRW50cnlfKGEpfTtqc3BiLk1hcC5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGEpe3JldHVybiBhLnRvU3RyaW5nKClpbiB0aGlzLm1hcF99O2pzcGIuTWFwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj10aGlzLnN0cmluZ0tleXNfKCk7Zi5zb3J0KCk7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPXRoaXMubWFwX1tmW2ddXTtiLmJlZ2luU3ViTWVzc2FnZShhKTtjLmNhbGwoYiwxLGgua2V5KTt0aGlzLnZhbHVlQ3Rvcl8/ZC5jYWxsKGIsMix0aGlzLndyYXBFbnRyeV8oaCksZSk6ZC5jYWxsKGIsMixoLnZhbHVlKTtiLmVuZFN1Yk1lc3NhZ2UoKX19O1xuanNwYi5NYXAuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7Zm9yKDtiLm5leHRGaWVsZCgpJiYhYi5pc0VuZEdyb3VwKCk7KXt2YXIgaD1iLmdldEZpZWxkTnVtYmVyKCk7MT09aD9mPWMuY2FsbChiKToyPT1oJiYoYS52YWx1ZUN0b3JfPyhnb29nLmFzc2VydHMuYXNzZXJ0KGUpLGd8fChnPW5ldyBhLnZhbHVlQ3Rvcl8pLGQuY2FsbChiLGcsZSkpOmc9ZC5jYWxsKGIpKX1nb29nLmFzc2VydHMuYXNzZXJ0KHZvaWQgMCE9Zik7Z29vZy5hc3NlcnRzLmFzc2VydCh2b2lkIDAhPWcpO2Euc2V0KGYsZyl9O2pzcGIuTWFwLnByb3RvdHlwZS5zdHJpbmdLZXlzXz1mdW5jdGlvbigpe3ZhciBhPXRoaXMubWFwXyxiPVtdLGM7Zm9yKGMgaW4gYSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxjKSYmYi5wdXNoKGMpO3JldHVybiBifTtcbmpzcGIuTWFwLkVudHJ5Xz1mdW5jdGlvbihhLGIpe3RoaXMua2V5PWE7dGhpcy52YWx1ZT1iO3RoaXMudmFsdWVXcmFwcGVyPXZvaWQgMH07anNwYi5FeHRlbnNpb25GaWVsZEluZm89ZnVuY3Rpb24oYSxiLGMsZCxlKXt0aGlzLmZpZWxkSW5kZXg9YTt0aGlzLmZpZWxkTmFtZT1iO3RoaXMuY3Rvcj1jO3RoaXMudG9PYmplY3RGbj1kO3RoaXMuaXNSZXBlYXRlZD1lfTtqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbz1mdW5jdGlvbihhLGIsYyxkLGUsZil7dGhpcy5maWVsZEluZm89YTt0aGlzLmJpbmFyeVJlYWRlckZuPWI7dGhpcy5iaW5hcnlXcml0ZXJGbj1jO3RoaXMuYmluYXJ5TWVzc2FnZVNlcmlhbGl6ZUZuPWQ7dGhpcy5iaW5hcnlNZXNzYWdlRGVzZXJpYWxpemVGbj1lO3RoaXMuaXNQYWNrZWQ9Zn07anNwYi5FeHRlbnNpb25GaWVsZEluZm8ucHJvdG90eXBlLmlzTWVzc2FnZVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuY3Rvcn07anNwYi5NZXNzYWdlPWZ1bmN0aW9uKCl7fTtqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUPSEwO2pzcGIuTWVzc2FnZS5HRU5FUkFURV9GUk9NX09CSkVDVD0hZ29vZy5ESVNBTExPV19URVNUX09OTFlfQ09ERTtcbmpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19TVFJJTkc9ITA7anNwYi5NZXNzYWdlLkFTU1VNRV9MT0NBTF9BUlJBWVM9ITE7anNwYi5NZXNzYWdlLlNFUklBTElaRV9FTVBUWV9UUkFJTElOR19GSUVMRFM9ITA7anNwYi5NZXNzYWdlLlNVUFBPUlRTX1VJTlQ4QVJSQVlfPVwiZnVuY3Rpb25cIj09dHlwZW9mIFVpbnQ4QXJyYXk7anNwYi5NZXNzYWdlLnByb3RvdHlwZS5nZXRKc1BiTWVzc2FnZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVzc2FnZUlkX307anNwYi5NZXNzYWdlLmdldEluZGV4Xz1mdW5jdGlvbihhLGIpe3JldHVybiBiK2EuYXJyYXlJbmRleE9mZnNldF99O2pzcGIuTWVzc2FnZS5oaWRkZW5FUzZQcm9wZXJ0eV89ZnVuY3Rpb24oKXt9O2pzcGIuTWVzc2FnZS5nZXRGaWVsZE51bWJlcl89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi1hLmFycmF5SW5kZXhPZmZzZXRffTtcbmpzcGIuTWVzc2FnZS5pbml0aWFsaXplPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXthLndyYXBwZXJzXz1udWxsO2J8fChiPWM/W2NdOltdKTthLm1lc3NhZ2VJZF89Yz9TdHJpbmcoYyk6dm9pZCAwO2EuYXJyYXlJbmRleE9mZnNldF89MD09PWM/LTE6MDthLmFycmF5PWI7anNwYi5NZXNzYWdlLmluaXRQaXZvdEFuZEV4dGVuc2lvbk9iamVjdF8oYSxkKTthLmNvbnZlcnRlZFByaW1pdGl2ZUZpZWxkc189e307anNwYi5NZXNzYWdlLlNFUklBTElaRV9FTVBUWV9UUkFJTElOR19GSUVMRFN8fChhLnJlcGVhdGVkRmllbGRzPWUpO2lmKGUpZm9yKGI9MDtiPGUubGVuZ3RoO2IrKyljPWVbYl0sYzxhLnBpdm90Xz8oYz1qc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGEsYyksYS5hcnJheVtjXT1hLmFycmF5W2NdfHxqc3BiLk1lc3NhZ2UuRU1QVFlfTElTVF9TRU5USU5FTF8pOihqc3BiLk1lc3NhZ2UubWF5YmVJbml0RW1wdHlFeHRlbnNpb25PYmplY3RfKGEpLGEuZXh0ZW5zaW9uT2JqZWN0X1tjXT1cbmEuZXh0ZW5zaW9uT2JqZWN0X1tjXXx8anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfKTtpZihmJiZmLmxlbmd0aClmb3IoYj0wO2I8Zi5sZW5ndGg7YisrKWpzcGIuTWVzc2FnZS5jb21wdXRlT25lb2ZDYXNlKGEsZltiXSl9O2pzcGIuTWVzc2FnZS5FTVBUWV9MSVNUX1NFTlRJTkVMXz1nb29nLkRFQlVHJiZPYmplY3QuZnJlZXplP09iamVjdC5mcmVlemUoW10pOltdO2pzcGIuTWVzc2FnZS5pc0FycmF5Xz1mdW5jdGlvbihhKXtyZXR1cm4ganNwYi5NZXNzYWdlLkFTU1VNRV9MT0NBTF9BUlJBWVM/YSBpbnN0YW5jZW9mIEFycmF5OkFycmF5LmlzQXJyYXkoYSl9O2pzcGIuTWVzc2FnZS5pc0V4dGVuc2lvbk9iamVjdF89ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPT1hJiZcIm9iamVjdFwiPT10eXBlb2YgYSYmIWpzcGIuTWVzc2FnZS5pc0FycmF5XyhhKSYmIShqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV8mJmEgaW5zdGFuY2VvZiBVaW50OEFycmF5KX07XG5qc3BiLk1lc3NhZ2UuaW5pdFBpdm90QW5kRXh0ZW5zaW9uT2JqZWN0Xz1mdW5jdGlvbihhLGIpe3ZhciBjPWEuYXJyYXkubGVuZ3RoLGQ9LTE7aWYoYyYmKGQ9Yy0xLGM9YS5hcnJheVtkXSxqc3BiLk1lc3NhZ2UuaXNFeHRlbnNpb25PYmplY3RfKGMpKSl7YS5waXZvdF89anNwYi5NZXNzYWdlLmdldEZpZWxkTnVtYmVyXyhhLGQpO2EuZXh0ZW5zaW9uT2JqZWN0Xz1jO3JldHVybn0tMTxiPyhhLnBpdm90Xz1NYXRoLm1heChiLGpzcGIuTWVzc2FnZS5nZXRGaWVsZE51bWJlcl8oYSxkKzEpKSxhLmV4dGVuc2lvbk9iamVjdF89bnVsbCk6YS5waXZvdF89TnVtYmVyLk1BWF9WQUxVRX07anNwYi5NZXNzYWdlLm1heWJlSW5pdEVtcHR5RXh0ZW5zaW9uT2JqZWN0Xz1mdW5jdGlvbihhKXt2YXIgYj1qc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGEsYS5waXZvdF8pO2EuYXJyYXlbYl18fChhLmV4dGVuc2lvbk9iamVjdF89YS5hcnJheVtiXT17fSl9O1xuanNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdD1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPVtdLGU9MDtlPGEubGVuZ3RoO2UrKylkW2VdPWIuY2FsbChhW2VdLGMsYVtlXSk7cmV0dXJuIGR9O2pzcGIuTWVzc2FnZS50b09iamVjdEV4dGVuc2lvbj1mdW5jdGlvbihhLGIsYyxkLGUpe2Zvcih2YXIgZiBpbiBjKXt2YXIgZz1jW2ZdLGg9ZC5jYWxsKGEsZyk7aWYobnVsbCE9aCl7Zm9yKHZhciBrIGluIGcuZmllbGROYW1lKWlmKGcuZmllbGROYW1lLmhhc093blByb3BlcnR5KGspKWJyZWFrO2Jba109Zy50b09iamVjdEZuP2cuaXNSZXBlYXRlZD9qc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KGgsZy50b09iamVjdEZuLGUpOmcudG9PYmplY3RGbihlLGgpOmh9fX07XG5qc3BiLk1lc3NhZ2Uuc2VyaWFsaXplQmluYXJ5RXh0ZW5zaW9ucz1mdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGUgaW4gYyl7dmFyIGY9Y1tlXSxnPWYuZmllbGRJbmZvO2lmKCFmLmJpbmFyeVdyaXRlckZuKXRocm93IEVycm9yKFwiTWVzc2FnZSBleHRlbnNpb24gcHJlc2VudCB0aGF0IHdhcyBnZW5lcmF0ZWQgd2l0aG91dCBiaW5hcnkgc2VyaWFsaXphdGlvbiBzdXBwb3J0XCIpO3ZhciBoPWQuY2FsbChhLGcpO2lmKG51bGwhPWgpaWYoZy5pc01lc3NhZ2VUeXBlKCkpaWYoZi5iaW5hcnlNZXNzYWdlU2VyaWFsaXplRm4pZi5iaW5hcnlXcml0ZXJGbi5jYWxsKGIsZy5maWVsZEluZGV4LGgsZi5iaW5hcnlNZXNzYWdlU2VyaWFsaXplRm4pO2Vsc2UgdGhyb3cgRXJyb3IoXCJNZXNzYWdlIGV4dGVuc2lvbiBwcmVzZW50IGhvbGRpbmcgc3VibWVzc2FnZSB3aXRob3V0IGJpbmFyeSBzdXBwb3J0IGVuYWJsZWQsIGFuZCBtZXNzYWdlIGlzIGJlaW5nIHNlcmlhbGl6ZWQgdG8gYmluYXJ5IGZvcm1hdFwiKTtcbmVsc2UgZi5iaW5hcnlXcml0ZXJGbi5jYWxsKGIsZy5maWVsZEluZGV4LGgpfX07anNwYi5NZXNzYWdlLnJlYWRCaW5hcnlFeHRlbnNpb249ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1jW2IuZ2V0RmllbGROdW1iZXIoKV07aWYoZil7Yz1mLmZpZWxkSW5mbztpZighZi5iaW5hcnlSZWFkZXJGbil0aHJvdyBFcnJvcihcIkRlc2VyaWFsaXppbmcgZXh0ZW5zaW9uIHdob3NlIGdlbmVyYXRlZCBjb2RlIGRvZXMgbm90IHN1cHBvcnQgYmluYXJ5IGZvcm1hdFwiKTtpZihjLmlzTWVzc2FnZVR5cGUoKSl7dmFyIGc9bmV3IGMuY3RvcjtmLmJpbmFyeVJlYWRlckZuLmNhbGwoYixnLGYuYmluYXJ5TWVzc2FnZURlc2VyaWFsaXplRm4pfWVsc2UgZz1mLmJpbmFyeVJlYWRlckZuLmNhbGwoYik7Yy5pc1JlcGVhdGVkJiYhZi5pc1BhY2tlZD8oYj1kLmNhbGwoYSxjKSk/Yi5wdXNoKGcpOmUuY2FsbChhLGMsW2ddKTplLmNhbGwoYSxjLGcpfWVsc2UgYi5za2lwRmllbGQoKX07XG5qc3BiLk1lc3NhZ2UuZ2V0RmllbGQ9ZnVuY3Rpb24oYSxiKXtpZihiPGEucGl2b3RfKXtiPWpzcGIuTWVzc2FnZS5nZXRJbmRleF8oYSxiKTt2YXIgYz1hLmFycmF5W2JdO3JldHVybiBjPT09anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfP2EuYXJyYXlbYl09W106Y31pZihhLmV4dGVuc2lvbk9iamVjdF8pcmV0dXJuIGM9YS5leHRlbnNpb25PYmplY3RfW2JdLGM9PT1qc3BiLk1lc3NhZ2UuRU1QVFlfTElTVF9TRU5USU5FTF8/YS5leHRlbnNpb25PYmplY3RfW2JdPVtdOmN9O2pzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZChhLGIpfTtqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQ9ZnVuY3Rpb24oYSxiKXthPWpzcGIuTWVzc2FnZS5nZXRGaWVsZChhLGIpO3JldHVybiBudWxsPT1hP2E6K2F9O1xuanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZD1mdW5jdGlvbihhLGIpe2E9anNwYi5NZXNzYWdlLmdldEZpZWxkKGEsYik7cmV0dXJuIG51bGw9PWE/YTohIWF9O2pzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZsb2F0aW5nUG9pbnRGaWVsZD1mdW5jdGlvbihhLGIpe3ZhciBjPWpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKGEsYik7YS5jb252ZXJ0ZWRQcmltaXRpdmVGaWVsZHNffHwoYS5jb252ZXJ0ZWRQcmltaXRpdmVGaWVsZHNfPXt9KTtpZighYS5jb252ZXJ0ZWRQcmltaXRpdmVGaWVsZHNfW2JdKXtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyljW2RdPStjW2RdO2EuY29udmVydGVkUHJpbWl0aXZlRmllbGRzX1tiXT0hMH1yZXR1cm4gY307XG5qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRCb29sZWFuRmllbGQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChhLGIpO2EuY29udmVydGVkUHJpbWl0aXZlRmllbGRzX3x8KGEuY29udmVydGVkUHJpbWl0aXZlRmllbGRzXz17fSk7aWYoIWEuY29udmVydGVkUHJpbWl0aXZlRmllbGRzX1tiXSl7Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspY1tkXT0hIWNbZF07YS5jb252ZXJ0ZWRQcmltaXRpdmVGaWVsZHNfW2JdPSEwfXJldHVybiBjfTtcbmpzcGIuTWVzc2FnZS5ieXRlc0FzQjY0PWZ1bmN0aW9uKGEpe2lmKG51bGw9PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtpZihqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV8mJmEgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBnb29nLmNyeXB0LmJhc2U2NC5lbmNvZGVCeXRlQXJyYXkoYSk7Z29vZy5hc3NlcnRzLmZhaWwoXCJDYW5ub3QgY29lcmNlIHRvIGI2NCBzdHJpbmc6IFwiK2dvb2cudHlwZU9mKGEpKTtyZXR1cm4gbnVsbH07anNwYi5NZXNzYWdlLmJ5dGVzQXNVOD1mdW5jdGlvbihhKXtpZihudWxsPT1hfHxhIGluc3RhbmNlb2YgVWludDhBcnJheSlyZXR1cm4gYTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGdvb2cuY3J5cHQuYmFzZTY0LmRlY29kZVN0cmluZ1RvVWludDhBcnJheShhKTtnb29nLmFzc2VydHMuZmFpbChcIkNhbm5vdCBjb2VyY2UgdG8gVWludDhBcnJheTogXCIrZ29vZy50eXBlT2YoYSkpO3JldHVybiBudWxsfTtcbmpzcGIuTWVzc2FnZS5ieXRlc0xpc3RBc0I2ND1mdW5jdGlvbihhKXtqc3BiLk1lc3NhZ2UuYXNzZXJ0Q29uc2lzdGVudFR5cGVzXyhhKTtyZXR1cm4gYS5sZW5ndGgmJlwic3RyaW5nXCIhPT10eXBlb2YgYVswXT9nb29nLmFycmF5Lm1hcChhLGpzcGIuTWVzc2FnZS5ieXRlc0FzQjY0KTphfTtqc3BiLk1lc3NhZ2UuYnl0ZXNMaXN0QXNVOD1mdW5jdGlvbihhKXtqc3BiLk1lc3NhZ2UuYXNzZXJ0Q29uc2lzdGVudFR5cGVzXyhhKTtyZXR1cm4hYS5sZW5ndGh8fGFbMF1pbnN0YW5jZW9mIFVpbnQ4QXJyYXk/YTpnb29nLmFycmF5Lm1hcChhLGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgpfTtcbmpzcGIuTWVzc2FnZS5hc3NlcnRDb25zaXN0ZW50VHlwZXNfPWZ1bmN0aW9uKGEpe2lmKGdvb2cuREVCVUcmJmEmJjE8YS5sZW5ndGgpe3ZhciBiPWdvb2cudHlwZU9mKGFbMF0pO2dvb2cuYXJyYXkuZm9yRWFjaChhLGZ1bmN0aW9uKGEpe2dvb2cudHlwZU9mKGEpIT1iJiZnb29nLmFzc2VydHMuZmFpbChcIkluY29uc2lzdGVudCB0eXBlIGluIEpTUEIgcmVwZWF0ZWQgZmllbGQgYXJyYXkuIEdvdCBcIitnb29nLnR5cGVPZihhKStcIiBleHBlY3RlZCBcIitiKX0pfX07anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQ9ZnVuY3Rpb24oYSxiLGMpe2E9anNwYi5NZXNzYWdlLmdldEZpZWxkKGEsYik7cmV0dXJuIG51bGw9PWE/YzphfTtqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQ9ZnVuY3Rpb24oYSxiLGMpe2E9anNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZChhLGIpO3JldHVybiBudWxsPT1hP2M6YX07XG5qc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQ9ZnVuY3Rpb24oYSxiLGMpe2E9anNwYi5NZXNzYWdlLmdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkKGEsYik7cmV0dXJuIG51bGw9PWE/YzphfTtqc3BiLk1lc3NhZ2UuZ2V0RmllbGRQcm90bzM9anNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQ7anNwYi5NZXNzYWdlLmdldE1hcEZpZWxkPWZ1bmN0aW9uKGEsYixjLGQpe2Eud3JhcHBlcnNffHwoYS53cmFwcGVyc189e30pO2lmKGIgaW4gYS53cmFwcGVyc18pcmV0dXJuIGEud3JhcHBlcnNfW2JdO3ZhciBlPWpzcGIuTWVzc2FnZS5nZXRGaWVsZChhLGIpO2lmKCFlKXtpZihjKXJldHVybjtlPVtdO2pzcGIuTWVzc2FnZS5zZXRGaWVsZChhLGIsZSl9cmV0dXJuIGEud3JhcHBlcnNfW2JdPW5ldyBqc3BiLk1hcChlLGQpfTtcbmpzcGIuTWVzc2FnZS5zZXRGaWVsZD1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydEluc3RhbmNlb2YoYSxqc3BiLk1lc3NhZ2UpO2I8YS5waXZvdF8/YS5hcnJheVtqc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGEsYildPWM6KGpzcGIuTWVzc2FnZS5tYXliZUluaXRFbXB0eUV4dGVuc2lvbk9iamVjdF8oYSksYS5leHRlbnNpb25PYmplY3RfW2JdPWMpO3JldHVybiBhfTtqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfKGEsYixjLDApfTtqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRmxvYXRGaWVsZD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZElnbm9yaW5nRGVmYXVsdF8oYSxiLGMsMCl9O1xuanNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZElnbm9yaW5nRGVmYXVsdF8oYSxiLGMsITEpfTtqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfKGEsYixjLFwiXCIpfTtqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZElnbm9yaW5nRGVmYXVsdF8oYSxiLGMsXCJcIil9O2pzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfKGEsYixjLDApfTtcbmpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZElnbm9yaW5nRGVmYXVsdF8oYSxiLGMsXCIwXCIpfTtqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfPWZ1bmN0aW9uKGEsYixjLGQpe2dvb2cuYXNzZXJ0cy5hc3NlcnRJbnN0YW5jZW9mKGEsanNwYi5NZXNzYWdlKTtjIT09ZD9qc3BiLk1lc3NhZ2Uuc2V0RmllbGQoYSxiLGMpOmI8YS5waXZvdF8/YS5hcnJheVtqc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGEsYildPW51bGw6KGpzcGIuTWVzc2FnZS5tYXliZUluaXRFbXB0eUV4dGVuc2lvbk9iamVjdF8oYSksZGVsZXRlIGEuZXh0ZW5zaW9uT2JqZWN0X1tiXSk7cmV0dXJuIGF9O1xuanNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZD1mdW5jdGlvbihhLGIsYyxkKXtnb29nLmFzc2VydHMuYXNzZXJ0SW5zdGFuY2VvZihhLGpzcGIuTWVzc2FnZSk7Yj1qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChhLGIpO3ZvaWQgMCE9ZD9iLnNwbGljZShkLDAsYyk6Yi5wdXNoKGMpO3JldHVybiBhfTtqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZGaWVsZD1mdW5jdGlvbihhLGIsYyxkKXtnb29nLmFzc2VydHMuYXNzZXJ0SW5zdGFuY2VvZihhLGpzcGIuTWVzc2FnZSk7KGM9anNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2UoYSxjKSkmJmMhPT1iJiZ2b2lkIDAhPT1kJiYoYS53cmFwcGVyc18mJmMgaW4gYS53cmFwcGVyc18mJihhLndyYXBwZXJzX1tjXT12b2lkIDApLGpzcGIuTWVzc2FnZS5zZXRGaWVsZChhLGMsdm9pZCAwKSk7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZChhLGIsZCl9O1xuanNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2U9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMsZCxlPTA7ZTxiLmxlbmd0aDtlKyspe3ZhciBmPWJbZV0sZz1qc3BiLk1lc3NhZ2UuZ2V0RmllbGQoYSxmKTtudWxsIT1nJiYoYz1mLGQ9Zyxqc3BiLk1lc3NhZ2Uuc2V0RmllbGQoYSxmLHZvaWQgMCkpfXJldHVybiBjPyhqc3BiLk1lc3NhZ2Uuc2V0RmllbGQoYSxjLGQpLGMpOjB9O2pzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oYSxiLGMsZCl7YS53cmFwcGVyc198fChhLndyYXBwZXJzXz17fSk7aWYoIWEud3JhcHBlcnNfW2NdKXt2YXIgZT1qc3BiLk1lc3NhZ2UuZ2V0RmllbGQoYSxjKTtpZihkfHxlKWEud3JhcHBlcnNfW2NdPW5ldyBiKGUpfXJldHVybiBhLndyYXBwZXJzX1tjXX07XG5qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oYSxiLGMpe2pzcGIuTWVzc2FnZS53cmFwUmVwZWF0ZWRGaWVsZF8oYSxiLGMpO2I9YS53cmFwcGVyc19bY107Yj09anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfJiYoYj1hLndyYXBwZXJzX1tjXT1bXSk7cmV0dXJuIGJ9O2pzcGIuTWVzc2FnZS53cmFwUmVwZWF0ZWRGaWVsZF89ZnVuY3Rpb24oYSxiLGMpe2Eud3JhcHBlcnNffHwoYS53cmFwcGVyc189e30pO2lmKCFhLndyYXBwZXJzX1tjXSl7Zm9yKHZhciBkPWpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKGEsYyksZT1bXSxmPTA7ZjxkLmxlbmd0aDtmKyspZVtmXT1uZXcgYihkW2ZdKTthLndyYXBwZXJzX1tjXT1lfX07XG5qc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkPWZ1bmN0aW9uKGEsYixjKXtnb29nLmFzc2VydHMuYXNzZXJ0SW5zdGFuY2VvZihhLGpzcGIuTWVzc2FnZSk7YS53cmFwcGVyc198fChhLndyYXBwZXJzXz17fSk7dmFyIGQ9Yz9jLnRvQXJyYXkoKTpjO2Eud3JhcHBlcnNfW2JdPWM7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZChhLGIsZCl9O2pzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZD1mdW5jdGlvbihhLGIsYyxkKXtnb29nLmFzc2VydHMuYXNzZXJ0SW5zdGFuY2VvZihhLGpzcGIuTWVzc2FnZSk7YS53cmFwcGVyc198fChhLndyYXBwZXJzXz17fSk7dmFyIGU9ZD9kLnRvQXJyYXkoKTpkO2Eud3JhcHBlcnNfW2JdPWQ7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZkZpZWxkKGEsYixjLGUpfTtcbmpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZD1mdW5jdGlvbihhLGIsYyl7Z29vZy5hc3NlcnRzLmFzc2VydEluc3RhbmNlb2YoYSxqc3BiLk1lc3NhZ2UpO2Eud3JhcHBlcnNffHwoYS53cmFwcGVyc189e30pO2M9Y3x8W107Zm9yKHZhciBkPVtdLGU9MDtlPGMubGVuZ3RoO2UrKylkW2VdPWNbZV0udG9BcnJheSgpO2Eud3JhcHBlcnNfW2JdPWM7cmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZChhLGIsZCl9O1xuanNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXtqc3BiLk1lc3NhZ2Uud3JhcFJlcGVhdGVkRmllbGRfKGEsZCxiKTt2YXIgZj1hLndyYXBwZXJzX1tiXTtmfHwoZj1hLndyYXBwZXJzX1tiXT1bXSk7Yz1jP2M6bmV3IGQ7YT1qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChhLGIpO3ZvaWQgMCE9ZT8oZi5zcGxpY2UoZSwwLGMpLGEuc3BsaWNlKGUsMCxjLnRvQXJyYXkoKSkpOihmLnB1c2goYyksYS5wdXNoKGMudG9BcnJheSgpKSk7cmV0dXJuIGN9O2pzcGIuTWVzc2FnZS50b01hcD1mdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGU9e30sZj0wO2Y8YS5sZW5ndGg7ZisrKWVbYi5jYWxsKGFbZl0pXT1jP2MuY2FsbChhW2ZdLGQsYVtmXSk6YVtmXTtyZXR1cm4gZX07XG5qc3BiLk1lc3NhZ2UucHJvdG90eXBlLnN5bmNNYXBGaWVsZHNfPWZ1bmN0aW9uKCl7aWYodGhpcy53cmFwcGVyc18pZm9yKHZhciBhIGluIHRoaXMud3JhcHBlcnNfKXt2YXIgYj10aGlzLndyYXBwZXJzX1thXTtpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKWJbY10mJmJbY10udG9BcnJheSgpO2Vsc2UgYiYmYi50b0FycmF5KCl9fTtqc3BiLk1lc3NhZ2UucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXt0aGlzLnN5bmNNYXBGaWVsZHNfKCk7cmV0dXJuIHRoaXMuYXJyYXl9O2pzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19TVFJJTkcmJihqc3BiLk1lc3NhZ2UucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dGhpcy5zeW5jTWFwRmllbGRzXygpO3JldHVybiB0aGlzLmFycmF5LnRvU3RyaW5nKCl9KTtcbmpzcGIuTWVzc2FnZS5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uPWZ1bmN0aW9uKGEpe2lmKHRoaXMuZXh0ZW5zaW9uT2JqZWN0Xyl7dGhpcy53cmFwcGVyc198fCh0aGlzLndyYXBwZXJzXz17fSk7dmFyIGI9YS5maWVsZEluZGV4O2lmKGEuaXNSZXBlYXRlZCl7aWYoYS5pc01lc3NhZ2VUeXBlKCkpcmV0dXJuIHRoaXMud3JhcHBlcnNfW2JdfHwodGhpcy53cmFwcGVyc19bYl09Z29vZy5hcnJheS5tYXAodGhpcy5leHRlbnNpb25PYmplY3RfW2JdfHxbXSxmdW5jdGlvbihiKXtyZXR1cm4gbmV3IGEuY3RvcihiKX0pKSx0aGlzLndyYXBwZXJzX1tiXX1lbHNlIGlmKGEuaXNNZXNzYWdlVHlwZSgpKXJldHVybiF0aGlzLndyYXBwZXJzX1tiXSYmdGhpcy5leHRlbnNpb25PYmplY3RfW2JdJiYodGhpcy53cmFwcGVyc19bYl09bmV3IGEuY3Rvcih0aGlzLmV4dGVuc2lvbk9iamVjdF9bYl0pKSx0aGlzLndyYXBwZXJzX1tiXTtyZXR1cm4gdGhpcy5leHRlbnNpb25PYmplY3RfW2JdfX07XG5qc3BiLk1lc3NhZ2UucHJvdG90eXBlLnNldEV4dGVuc2lvbj1mdW5jdGlvbihhLGIpe3RoaXMud3JhcHBlcnNffHwodGhpcy53cmFwcGVyc189e30pO2pzcGIuTWVzc2FnZS5tYXliZUluaXRFbXB0eUV4dGVuc2lvbk9iamVjdF8odGhpcyk7dmFyIGM9YS5maWVsZEluZGV4O2EuaXNSZXBlYXRlZD8oYj1ifHxbXSxhLmlzTWVzc2FnZVR5cGUoKT8odGhpcy53cmFwcGVyc19bY109Yix0aGlzLmV4dGVuc2lvbk9iamVjdF9bY109Z29vZy5hcnJheS5tYXAoYixmdW5jdGlvbihhKXtyZXR1cm4gYS50b0FycmF5KCl9KSk6dGhpcy5leHRlbnNpb25PYmplY3RfW2NdPWIpOmEuaXNNZXNzYWdlVHlwZSgpPyh0aGlzLndyYXBwZXJzX1tjXT1iLHRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tjXT1iP2IudG9BcnJheSgpOmIpOnRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tjXT1iO3JldHVybiB0aGlzfTtcbmpzcGIuTWVzc2FnZS5kaWZmZXJlbmNlPWZ1bmN0aW9uKGEsYil7aWYoIShhIGluc3RhbmNlb2YgYi5jb25zdHJ1Y3RvcikpdGhyb3cgRXJyb3IoXCJNZXNzYWdlcyBoYXZlIGRpZmZlcmVudCB0eXBlcy5cIik7dmFyIGM9YS50b0FycmF5KCk7Yj1iLnRvQXJyYXkoKTt2YXIgZD1bXSxlPTAsZj1jLmxlbmd0aD5iLmxlbmd0aD9jLmxlbmd0aDpiLmxlbmd0aDthLmdldEpzUGJNZXNzYWdlSWQoKSYmKGRbMF09YS5nZXRKc1BiTWVzc2FnZUlkKCksZT0xKTtmb3IoO2U8ZjtlKyspanNwYi5NZXNzYWdlLmNvbXBhcmVGaWVsZHMoY1tlXSxiW2VdKXx8KGRbZV09YltlXSk7cmV0dXJuIG5ldyBhLmNvbnN0cnVjdG9yKGQpfTtqc3BiLk1lc3NhZ2UuZXF1YWxzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PWJ8fCEoIWF8fCFiKSYmYSBpbnN0YW5jZW9mIGIuY29uc3RydWN0b3ImJmpzcGIuTWVzc2FnZS5jb21wYXJlRmllbGRzKGEudG9BcnJheSgpLGIudG9BcnJheSgpKX07XG5qc3BiLk1lc3NhZ2UuY29tcGFyZUV4dGVuc2lvbnM9ZnVuY3Rpb24oYSxiKXthPWF8fHt9O2I9Ynx8e307dmFyIGM9e30sZDtmb3IoZCBpbiBhKWNbZF09MDtmb3IoZCBpbiBiKWNbZF09MDtmb3IoZCBpbiBjKWlmKCFqc3BiLk1lc3NhZ2UuY29tcGFyZUZpZWxkcyhhW2RdLGJbZF0pKXJldHVybiExO3JldHVybiEwfTtcbmpzcGIuTWVzc2FnZS5jb21wYXJlRmllbGRzPWZ1bmN0aW9uKGEsYil7aWYoYT09YilyZXR1cm4hMDtpZighZ29vZy5pc09iamVjdChhKXx8IWdvb2cuaXNPYmplY3QoYikpcmV0dXJuXCJudW1iZXJcIj09PXR5cGVvZiBhJiZpc05hTihhKXx8XCJudW1iZXJcIj09PXR5cGVvZiBiJiZpc05hTihiKT9TdHJpbmcoYSk9PVN0cmluZyhiKTohMTtpZihhLmNvbnN0cnVjdG9yIT1iLmNvbnN0cnVjdG9yKXJldHVybiExO2lmKGpzcGIuTWVzc2FnZS5TVVBQT1JUU19VSU5UOEFSUkFZXyYmYS5jb25zdHJ1Y3Rvcj09PVVpbnQ4QXJyYXkpe2lmKGEubGVuZ3RoIT1iLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylpZihhW2NdIT1iW2NdKXJldHVybiExO3JldHVybiEwfWlmKGEuY29uc3RydWN0b3I9PT1BcnJheSl7dmFyIGQ9dm9pZCAwLGU9dm9pZCAwLGY9TWF0aC5tYXgoYS5sZW5ndGgsYi5sZW5ndGgpO2ZvcihjPTA7YzxmO2MrKyl7dmFyIGc9YVtjXSxoPWJbY107ZyYmXG5nLmNvbnN0cnVjdG9yPT1PYmplY3QmJihnb29nLmFzc2VydHMuYXNzZXJ0KHZvaWQgMD09PWQpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoYz09PWEubGVuZ3RoLTEpLGQ9ZyxnPXZvaWQgMCk7aCYmaC5jb25zdHJ1Y3Rvcj09T2JqZWN0JiYoZ29vZy5hc3NlcnRzLmFzc2VydCh2b2lkIDA9PT1lKSxnb29nLmFzc2VydHMuYXNzZXJ0KGM9PT1iLmxlbmd0aC0xKSxlPWgsaD12b2lkIDApO2lmKCFqc3BiLk1lc3NhZ2UuY29tcGFyZUZpZWxkcyhnLGgpKXJldHVybiExfXJldHVybiBkfHxlPyhkPWR8fHt9LGU9ZXx8e30sanNwYi5NZXNzYWdlLmNvbXBhcmVFeHRlbnNpb25zKGQsZSkpOiEwfWlmKGEuY29uc3RydWN0b3I9PT1PYmplY3QpcmV0dXJuIGpzcGIuTWVzc2FnZS5jb21wYXJlRXh0ZW5zaW9ucyhhLGIpO3Rocm93IEVycm9yKFwiSW52YWxpZCB0eXBlIGluIEpTUEIgYXJyYXlcIik7fTtqc3BiLk1lc3NhZ2UucHJvdG90eXBlLmNsb25lTWVzc2FnZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuY2xvbmVNZXNzYWdlKHRoaXMpfTtcbmpzcGIuTWVzc2FnZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4ganNwYi5NZXNzYWdlLmNsb25lTWVzc2FnZSh0aGlzKX07anNwYi5NZXNzYWdlLmNsb25lPWZ1bmN0aW9uKGEpe3JldHVybiBqc3BiLk1lc3NhZ2UuY2xvbmVNZXNzYWdlKGEpfTtqc3BiLk1lc3NhZ2UuY2xvbmVNZXNzYWdlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgYS5jb25zdHJ1Y3Rvcihqc3BiLk1lc3NhZ2UuY2xvbmVfKGEudG9BcnJheSgpKSl9O1xuanNwYi5NZXNzYWdlLmNvcHlJbnRvPWZ1bmN0aW9uKGEsYil7Z29vZy5hc3NlcnRzLmFzc2VydEluc3RhbmNlb2YoYSxqc3BiLk1lc3NhZ2UpO2dvb2cuYXNzZXJ0cy5hc3NlcnRJbnN0YW5jZW9mKGIsanNwYi5NZXNzYWdlKTtnb29nLmFzc2VydHMuYXNzZXJ0KGEuY29uc3RydWN0b3I9PWIuY29uc3RydWN0b3IsXCJDb3B5IHNvdXJjZSBhbmQgdGFyZ2V0IG1lc3NhZ2Ugc2hvdWxkIGhhdmUgdGhlIHNhbWUgdHlwZS5cIik7YT1qc3BiLk1lc3NhZ2UuY2xvbmUoYSk7Zm9yKHZhciBjPWIudG9BcnJheSgpLGQ9YS50b0FycmF5KCksZT1jLmxlbmd0aD0wO2U8ZC5sZW5ndGg7ZSsrKWNbZV09ZFtlXTtiLndyYXBwZXJzXz1hLndyYXBwZXJzXztiLmV4dGVuc2lvbk9iamVjdF89YS5leHRlbnNpb25PYmplY3RffTtcbmpzcGIuTWVzc2FnZS5jbG9uZV89ZnVuY3Rpb24oYSl7aWYoQXJyYXkuaXNBcnJheShhKSl7Zm9yKHZhciBiPUFycmF5KGEubGVuZ3RoKSxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY107bnVsbCE9ZCYmKGJbY109XCJvYmplY3RcIj09dHlwZW9mIGQ/anNwYi5NZXNzYWdlLmNsb25lXyhnb29nLmFzc2VydHMuYXNzZXJ0KGQpKTpkKX1yZXR1cm4gYn1pZihqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV8mJmEgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBuZXcgVWludDhBcnJheShhKTtiPXt9O2ZvcihjIGluIGEpZD1hW2NdLG51bGwhPWQmJihiW2NdPVwib2JqZWN0XCI9PXR5cGVvZiBkP2pzcGIuTWVzc2FnZS5jbG9uZV8oZ29vZy5hc3NlcnRzLmFzc2VydChkKSk6ZCk7cmV0dXJuIGJ9O2pzcGIuTWVzc2FnZS5yZWdpc3Rlck1lc3NhZ2VUeXBlPWZ1bmN0aW9uKGEsYil7Yi5tZXNzYWdlSWQ9YX07anNwYi5NZXNzYWdlLm1lc3NhZ2VTZXRFeHRlbnNpb25zPXt9O1xuanNwYi5NZXNzYWdlLm1lc3NhZ2VTZXRFeHRlbnNpb25zQmluYXJ5PXt9O2pzcGIuRXhwb3J0PXt9O1wib2JqZWN0XCI9PT10eXBlb2YgZXhwb3J0cyYmKGV4cG9ydHMuTWFwPWpzcGIuTWFwLGV4cG9ydHMuTWVzc2FnZT1qc3BiLk1lc3NhZ2UsZXhwb3J0cy5CaW5hcnlSZWFkZXI9anNwYi5CaW5hcnlSZWFkZXIsZXhwb3J0cy5CaW5hcnlXcml0ZXI9anNwYi5CaW5hcnlXcml0ZXIsZXhwb3J0cy5FeHRlbnNpb25GaWVsZEluZm89anNwYi5FeHRlbnNpb25GaWVsZEluZm8sZXhwb3J0cy5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm89anNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8sZXhwb3J0cy5leHBvcnRTeW1ib2w9Z29vZy5leHBvcnRTeW1ib2wsZXhwb3J0cy5pbmhlcml0cz1nb29nLmluaGVyaXRzLGV4cG9ydHMub2JqZWN0PXtleHRlbmQ6Z29vZy5vYmplY3QuZXh0ZW5kfSxleHBvcnRzLnR5cGVPZj1nb29nLnR5cGVPZik7XG4iLCIvLyBzb3VyY2U6IGdvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPSAoZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzKSB7IHJldHVybiB0aGlzOyB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZ2xvYmFsOyB9XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHNlbGY7IH1cbiAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59LmNhbGwobnVsbCkpO1xuXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCcsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5kaXNwbGF5TmFtZSA9ICdwcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgc2Vjb25kczoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCAwKSxcbiAgICBuYW5vczoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCAwKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH1cbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXA7XG4gIHJldHVybiBwcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH1cbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldFNlY29uZHModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldE5hbm9zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0U2Vjb25kcygpO1xuICBpZiAoZiAhPT0gMCkge1xuICAgIHdyaXRlci53cml0ZUludDY0KFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE5hbm9zKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCBzZWNvbmRzID0gMTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5wcm90b3R5cGUuZ2V0U2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAucHJvdG90eXBlLnNldFNlY29uZHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBuYW5vcyA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAucHJvdG90eXBlLmdldE5hbm9zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5wcm90b3R5cGUuc2V0TmFub3MgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLmdvb2dsZS5wcm90b2J1Zik7XG4vKiBUaGlzIGNvZGUgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIGdlbmVyYXRlZCBjb2RlIGZvclxuICogZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90by4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgSmF2YVNjcmlwdCAnRGF0ZScgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBUaW1lc3RhbXAuXG4gKiBAcmV0dXJuIHshRGF0ZX1cbiAqL1xucHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5wcm90b3R5cGUudG9EYXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWNvbmRzID0gdGhpcy5nZXRTZWNvbmRzKCk7XG4gIHZhciBuYW5vcyA9IHRoaXMuZ2V0TmFub3MoKTtcblxuICByZXR1cm4gbmV3IERhdGUoKHNlY29uZHMgKiAxMDAwKSArIChuYW5vcyAvIDEwMDAwMDApKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGlzIFRpbWVzdGFtcCBvYmplY3QgdG8gYmUgdGhlIGdpdmVuIERhdGUuXG4gKiBAcGFyYW0geyFEYXRlfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICovXG5wcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnByb3RvdHlwZS5mcm9tRGF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHRoaXMuc2V0U2Vjb25kcyhNYXRoLmZsb29yKHZhbHVlLmdldFRpbWUoKSAvIDEwMDApKTtcbiAgdGhpcy5zZXROYW5vcyh2YWx1ZS5nZXRNaWxsaXNlY29uZHMoKSAqIDEwMDAwMDApO1xufTtcblxuXG4vKipcbiAqIEZhY3RvcnkgbWV0aG9kIHRoYXQgcmV0dXJucyBhIFRpbWVzdGFtcCBvYmplY3Qgd2l0aCB2YWx1ZSBlcXVhbCB0b1xuICogdGhlIGdpdmVuIERhdGUuXG4gKiBAcGFyYW0geyFEYXRlfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybiB7IXByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9XG4gKi9cbnByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAuZnJvbURhdGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgdGltZXN0YW1wID0gbmV3IHByb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAoKTtcbiAgdGltZXN0YW1wLmZyb21EYXRlKHZhbHVlKTtcbiAgcmV0dXJuIHRpbWVzdGFtcDtcbn07XG4iLCIvKlxuXG4gQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbnZhciBuO2Z1bmN0aW9uIGFhKGEpe3ZhciBiPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGI8YS5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6YVtiKytdfTp7ZG9uZTohMH19fXZhciBiYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydGllcz9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oYSxiLGMpe2EhPUFycmF5LnByb3RvdHlwZSYmYSE9T2JqZWN0LnByb3RvdHlwZSYmKGFbYl09Yy52YWx1ZSl9O2Z1bmN0aW9uIGNhKGEpe2E9W1wib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyxcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZixcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwsYV07Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDsrK2Ipe3ZhciBjPWFbYl07aWYoYyYmYy5NYXRoPT1NYXRoKXJldHVybiBjfXRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgZ2xvYmFsIG9iamVjdFwiKTt9dmFyIHI9Y2EodGhpcyk7XG5mdW5jdGlvbiB0KCl7dD1mdW5jdGlvbigpe307ci5TeW1ib2x8fChyLlN5bWJvbD1kYSl9ZnVuY3Rpb24gZWEoYSxiKXt0aGlzLmE9YTtiYSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmJ9KX1lYS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTt2YXIgZGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGMpe2lmKHRoaXMgaW5zdGFuY2VvZiBhKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3JcIik7cmV0dXJuIG5ldyBlYShcImpzY29tcF9zeW1ib2xfXCIrKGN8fFwiXCIpK1wiX1wiK2IrKyxjKX12YXIgYj0wO3JldHVybiBhfSgpO1xuZnVuY3Rpb24gdSgpe3QoKTt2YXIgYT1yLlN5bWJvbC5pdGVyYXRvcjthfHwoYT1yLlN5bWJvbC5pdGVyYXRvcj1yLlN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSk7XCJmdW5jdGlvblwiIT10eXBlb2YgQXJyYXkucHJvdG90eXBlW2FdJiZiYShBcnJheS5wcm90b3R5cGUsYSx7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGZhKGFhKHRoaXMpKX19KTt1PWZ1bmN0aW9uKCl7fX1mdW5jdGlvbiBmYShhKXt1KCk7YT17bmV4dDphfTthW3IuU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtyZXR1cm4gYX1mdW5jdGlvbiBoYShhKXt2YXIgYj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmFbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYj9iLmNhbGwoYSk6e25leHQ6YWEoYSl9fVxudmFyIGlhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5jcmVhdGU/T2JqZWN0LmNyZWF0ZTpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWIucHJvdG90eXBlPWE7cmV0dXJuIG5ldyBifSxqYTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YpamE9T2JqZWN0LnNldFByb3RvdHlwZU9mO2Vsc2V7dmFyIGthO2E6e3ZhciBsYT17VjohMH0sbWE9e307dHJ5e21hLl9fcHJvdG9fXz1sYTtrYT1tYS5WO2JyZWFrIGF9Y2F0Y2goYSl7fWthPSExfWphPWthP2Z1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189YjtpZihhLl9fcHJvdG9fXyE9PWIpdGhyb3cgbmV3IFR5cGVFcnJvcihhK1wiIGlzIG5vdCBleHRlbnNpYmxlXCIpO3JldHVybiBhfTpudWxsfXZhciBuYT1qYTtcbmZ1bmN0aW9uIG9hKGEsYil7YS5wcm90b3R5cGU9aWEoYi5wcm90b3R5cGUpO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7aWYobmEpbmEoYSxiKTtlbHNlIGZvcih2YXIgYyBpbiBiKWlmKFwicHJvdG90eXBlXCIhPWMpaWYoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMpe3ZhciBkPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYixjKTtkJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxjLGQpfWVsc2UgYVtjXT1iW2NdO2EuTz1iLnByb3RvdHlwZX1cbmZ1bmN0aW9uIHBhKGEsYil7dSgpO2EgaW5zdGFuY2VvZiBTdHJpbmcmJihhKz1cIlwiKTt2YXIgYz0wLGQ9e25leHQ6ZnVuY3Rpb24oKXtpZihjPGEubGVuZ3RoKXt2YXIgZj1jKys7cmV0dXJue3ZhbHVlOmIoZixhW2ZdKSxkb25lOiExfX1kLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fTtyZXR1cm4gZC5uZXh0KCl9fTtkW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gZH07cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIpe2lmKGIpe3ZhciBjPXI7YT1hLnNwbGl0KFwiLlwiKTtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoLTE7ZCsrKXt2YXIgZj1hW2RdO2YgaW4gY3x8KGNbZl09e30pO2M9Y1tmXX1hPWFbYS5sZW5ndGgtMV07ZD1jW2FdO2I9YihkKTtiIT1kJiZudWxsIT1iJiZiYShjLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpifSl9fVxudihcIkFycmF5LnByb3RvdHlwZS5rZXlzXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbigpe3JldHVybiBwYSh0aGlzLGZ1bmN0aW9uKGIpe3JldHVybiBifSl9fSk7dihcIkFycmF5LnByb3RvdHlwZS5maW5kXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbihiLGMpe2E6e3ZhciBkPXRoaXM7ZCBpbnN0YW5jZW9mIFN0cmluZyYmKGQ9U3RyaW5nKGQpKTtmb3IodmFyIGY9ZC5sZW5ndGgsZz0wO2c8ZjtnKyspe3ZhciBlPWRbZ107aWYoYi5jYWxsKGMsZSxnLGQpKXtiPWU7YnJlYWsgYX19Yj12b2lkIDB9cmV0dXJuIGJ9fSk7dihcIk9iamVjdC5pc1wiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYixjKXtyZXR1cm4gYj09PWM/MCE9PWJ8fDEvYj09PTEvYzpiIT09YiYmYyE9PWN9fSk7XG52KFwiQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbihiLGMpe3ZhciBkPXRoaXM7ZCBpbnN0YW5jZW9mIFN0cmluZyYmKGQ9U3RyaW5nKGQpKTt2YXIgZj1kLmxlbmd0aDtjPWN8fDA7Zm9yKDA+YyYmKGM9TWF0aC5tYXgoYytmLDApKTtjPGY7YysrKXt2YXIgZz1kW2NdO2lmKGc9PT1ifHxPYmplY3QuaXMoZyxiKSlyZXR1cm4hMH1yZXR1cm4hMX19KTtcbnYoXCJQcm9taXNlXCIsZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihlKXt0aGlzLmI9MDt0aGlzLmM9dm9pZCAwO3RoaXMuYT1bXTt2YXIgaD10aGlzLmYoKTt0cnl7ZShoLnJlc29sdmUsaC5yZWplY3QpfWNhdGNoKGspe2gucmVqZWN0KGspfX1mdW5jdGlvbiBjKCl7dGhpcy5hPW51bGx9ZnVuY3Rpb24gZChlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGI/ZTpuZXcgYihmdW5jdGlvbihoKXtoKGUpfSl9aWYoYSlyZXR1cm4gYTtjLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGUpe2lmKG51bGw9PXRoaXMuYSl7dGhpcy5hPVtdO3ZhciBoPXRoaXM7dGhpcy5jKGZ1bmN0aW9uKCl7aC5nKCl9KX10aGlzLmEucHVzaChlKX07dmFyIGY9ci5zZXRUaW1lb3V0O2MucHJvdG90eXBlLmM9ZnVuY3Rpb24oZSl7ZihlLDApfTtjLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmEmJnRoaXMuYS5sZW5ndGg7KXt2YXIgZT10aGlzLmE7dGhpcy5hPVtdO2Zvcih2YXIgaD0wO2g8ZS5sZW5ndGg7KytoKXt2YXIgaz1cbmVbaF07ZVtoXT1udWxsO3RyeXtrKCl9Y2F0Y2gobCl7dGhpcy5mKGwpfX19dGhpcy5hPW51bGx9O2MucHJvdG90eXBlLmY9ZnVuY3Rpb24oZSl7dGhpcy5jKGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX07Yi5wcm90b3R5cGUuZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobCl7cmV0dXJuIGZ1bmN0aW9uKG0pe2t8fChrPSEwLGwuY2FsbChoLG0pKX19dmFyIGg9dGhpcyxrPSExO3JldHVybntyZXNvbHZlOmUodGhpcy5zKSxyZWplY3Q6ZSh0aGlzLmcpfX07Yi5wcm90b3R5cGUucz1mdW5jdGlvbihlKXtpZihlPT09dGhpcyl0aGlzLmcobmV3IFR5cGVFcnJvcihcIkEgUHJvbWlzZSBjYW5ub3QgcmVzb2x2ZSB0byBpdHNlbGZcIikpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIGIpdGhpcy52KGUpO2Vsc2V7YTpzd2l0Y2godHlwZW9mIGUpe2Nhc2UgXCJvYmplY3RcIjp2YXIgaD1udWxsIT1lO2JyZWFrIGE7Y2FzZSBcImZ1bmN0aW9uXCI6aD0hMDticmVhayBhO2RlZmF1bHQ6aD0hMX1oP3RoaXMubShlKTp0aGlzLmgoZSl9fTtcbmIucHJvdG90eXBlLm09ZnVuY3Rpb24oZSl7dmFyIGg9dm9pZCAwO3RyeXtoPWUudGhlbn1jYXRjaChrKXt0aGlzLmcoayk7cmV0dXJufVwiZnVuY3Rpb25cIj09dHlwZW9mIGg/dGhpcy53KGgsZSk6dGhpcy5oKGUpfTtiLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGUpe3RoaXMuaSgyLGUpfTtiLnByb3RvdHlwZS5oPWZ1bmN0aW9uKGUpe3RoaXMuaSgxLGUpfTtiLnByb3RvdHlwZS5pPWZ1bmN0aW9uKGUsaCl7aWYoMCE9dGhpcy5iKXRocm93IEVycm9yKFwiQ2Fubm90IHNldHRsZShcIitlK1wiLCBcIitoK1wiKTogUHJvbWlzZSBhbHJlYWR5IHNldHRsZWQgaW4gc3RhdGVcIit0aGlzLmIpO3RoaXMuYj1lO3RoaXMuYz1oO3RoaXMubCgpfTtiLnByb3RvdHlwZS5sPWZ1bmN0aW9uKCl7aWYobnVsbCE9dGhpcy5hKXtmb3IodmFyIGU9MDtlPHRoaXMuYS5sZW5ndGg7KytlKWcuYih0aGlzLmFbZV0pO3RoaXMuYT1udWxsfX07dmFyIGc9bmV3IGM7Yi5wcm90b3R5cGUudj1mdW5jdGlvbihlKXt2YXIgaD10aGlzLmYoKTtcbmUuRihoLnJlc29sdmUsaC5yZWplY3QpfTtiLnByb3RvdHlwZS53PWZ1bmN0aW9uKGUsaCl7dmFyIGs9dGhpcy5mKCk7dHJ5e2UuY2FsbChoLGsucmVzb2x2ZSxrLnJlamVjdCl9Y2F0Y2gobCl7ay5yZWplY3QobCl9fTtiLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGUsaCl7ZnVuY3Rpb24gayhxLHgpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHE/ZnVuY3Rpb24oeil7dHJ5e2wocSh6KSl9Y2F0Y2goTil7bShOKX19Onh9dmFyIGwsbSxwPW5ldyBiKGZ1bmN0aW9uKHEseCl7bD1xO209eH0pO3RoaXMuRihrKGUsbCksayhoLG0pKTtyZXR1cm4gcH07Yi5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsZSl9O2IucHJvdG90eXBlLkY9ZnVuY3Rpb24oZSxoKXtmdW5jdGlvbiBrKCl7c3dpdGNoKGwuYil7Y2FzZSAxOmUobC5jKTticmVhaztjYXNlIDI6aChsLmMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmV4cGVjdGVkIHN0YXRlOiBcIitcbmwuYik7fX12YXIgbD10aGlzO251bGw9PXRoaXMuYT9nLmIoayk6dGhpcy5hLnB1c2goayl9O2IucmVzb2x2ZT1kO2IucmVqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYihmdW5jdGlvbihoLGspe2soZSl9KX07Yi5yYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYihmdW5jdGlvbihoLGspe2Zvcih2YXIgbD1oYShlKSxtPWwubmV4dCgpOyFtLmRvbmU7bT1sLm5leHQoKSlkKG0udmFsdWUpLkYoaCxrKX0pfTtiLmFsbD1mdW5jdGlvbihlKXt2YXIgaD1oYShlKSxrPWgubmV4dCgpO3JldHVybiBrLmRvbmU/ZChbXSk6bmV3IGIoZnVuY3Rpb24obCxtKXtmdW5jdGlvbiBwKHope3JldHVybiBmdW5jdGlvbihOKXtxW3pdPU47eC0tOzA9PXgmJmwocSl9fXZhciBxPVtdLHg9MDtkbyBxLnB1c2godm9pZCAwKSx4KyssZChrLnZhbHVlKS5GKHAocS5sZW5ndGgtMSksbSksaz1oLm5leHQoKTt3aGlsZSghay5kb25lKX0pfTtyZXR1cm4gYn0pO3ZhciBxYT1xYXx8e30sdz10aGlzfHxzZWxmO1xuZnVuY3Rpb24geShhLGIpe2E9YS5zcGxpdChcIi5cIik7Yj1ifHx3O2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWlmKGI9YlthW2NdXSxudWxsPT1iKXJldHVybiBudWxsO3JldHVybiBifWZ1bmN0aW9uIHJhKCl7fWZ1bmN0aW9uIHNhKGEpe3ZhciBiPXR5cGVvZiBhO3JldHVyblwib2JqZWN0XCI9PWImJm51bGwhPWF8fFwiZnVuY3Rpb25cIj09Yn12YXIgdGE9XCJjbG9zdXJlX3VpZF9cIisoMUU5Kk1hdGgucmFuZG9tKCk+Pj4wKSx1YT0wO2Z1bmN0aW9uIHZhKGEsYixjKXtyZXR1cm4gYS5jYWxsLmFwcGx5KGEuYmluZCxhcmd1bWVudHMpfVxuZnVuY3Rpb24gd2EoYSxiLGMpe2lmKCFhKXRocm93IEVycm9yKCk7aWYoMjxhcmd1bWVudHMubGVuZ3RoKXt2YXIgZD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShmLGQpO3JldHVybiBhLmFwcGx5KGIsZil9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGIsYXJndW1lbnRzKX19ZnVuY3Rpb24gQShhLGIsYyl7RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQmJi0xIT1GdW5jdGlvbi5wcm90b3R5cGUuYmluZC50b1N0cmluZygpLmluZGV4T2YoXCJuYXRpdmUgY29kZVwiKT9BPXZhOkE9d2E7cmV0dXJuIEEuYXBwbHkobnVsbCxhcmd1bWVudHMpfVxuZnVuY3Rpb24gQihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9Yi5wcm90b3R5cGU7YS5PPWIucHJvdG90eXBlO2EucHJvdG90eXBlPW5ldyBjO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWF9O2Z1bmN0aW9uIHhhKGEpe3RoaXMuYT1hfHx7fX14YS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFbYV19O3hhLnByb3RvdHlwZS5HPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYSl9O2Z1bmN0aW9uIEMoYSxiLGMsZCl7dGhpcy5mPWE7dGhpcy5jPWI7dGhpcy5iPWM7dGhpcy5hPWR9Qy5wcm90b3R5cGUuZ2V0UmVxdWVzdE1lc3NhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mfTtDLnByb3RvdHlwZS5nZXRNZXRob2REZXNjcmlwdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY307Qy5wcm90b3R5cGUuZ2V0TWV0YWRhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ifTtDLnByb3RvdHlwZS5nZXRDYWxsT3B0aW9ucz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O2Z1bmN0aW9uIEQoYSxiLGMsZCl7Yz12b2lkIDA9PT1jP3t9OmM7dGhpcy5jPWE7dGhpcy5hPWM7dGhpcy5iPWI7dGhpcy5mPXZvaWQgMD09PWQ/bnVsbDpkfUQucHJvdG90eXBlLmdldFJlc3BvbnNlTWVzc2FnZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN9O0QucHJvdG90eXBlLmdldE1ldGFkYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07RC5wcm90b3R5cGUuZ2V0TWV0aG9kRGVzY3JpcHRvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmJ9O0QucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZ9O2Z1bmN0aW9uIEUoYSxiLGMsZCxmLGcpe3RoaXMubmFtZT1hO3RoaXMuYT1iO3RoaXMuZj1jO3RoaXMuYj1kO3RoaXMuYz1mO3RoaXMuZz1nfWZ1bmN0aW9uIHlhKGEsYixjKXtjPXZvaWQgMD09PWM/e306Yzt2YXIgZD12b2lkIDA9PT1kP25ldyB4YTpkO3JldHVybiBuZXcgQyhiLGEsYyxkKX1uPUUucHJvdG90eXBlO24uZ2V0TmFtZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9O24uZ2V0TWV0aG9kVHlwZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O24uZ2V0UmVzcG9uc2VNZXNzYWdlQ3Rvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmJ9O24uZ2V0UmVxdWVzdE1lc3NhZ2VDdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZn07bi5nZXRSZXNwb25zZURlc2VyaWFsaXplRm49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nfTtuLmdldFJlcXVlc3RTZXJpYWxpemVGbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN9O0UucHJvdG90eXBlLmdldFJlcXVlc3RTZXJpYWxpemVGbj1FLnByb3RvdHlwZS5nZXRSZXF1ZXN0U2VyaWFsaXplRm47XG5FLnByb3RvdHlwZS5nZXRSZXNwb25zZURlc2VyaWFsaXplRm49RS5wcm90b3R5cGUuZ2V0UmVzcG9uc2VEZXNlcmlhbGl6ZUZuO0UucHJvdG90eXBlLmdldFJlcXVlc3RNZXNzYWdlQ3Rvcj1FLnByb3RvdHlwZS5nZXRSZXF1ZXN0TWVzc2FnZUN0b3I7RS5wcm90b3R5cGUuZ2V0UmVzcG9uc2VNZXNzYWdlQ3Rvcj1FLnByb3RvdHlwZS5nZXRSZXNwb25zZU1lc3NhZ2VDdG9yO0UucHJvdG90eXBlLmdldE1ldGhvZFR5cGU9RS5wcm90b3R5cGUuZ2V0TWV0aG9kVHlwZTtFLnByb3RvdHlwZS5nZXROYW1lPUUucHJvdG90eXBlLmdldE5hbWU7ZnVuY3Rpb24gemEoYSl7c3dpdGNoKGEpe2Nhc2UgMjAwOnJldHVybiAwO2Nhc2UgNDAwOnJldHVybiAzO2Nhc2UgNDAxOnJldHVybiAxNjtjYXNlIDQwMzpyZXR1cm4gNztjYXNlIDQwNDpyZXR1cm4gNTtjYXNlIDQwOTpyZXR1cm4gMTA7Y2FzZSA0MTI6cmV0dXJuIDk7Y2FzZSA0Mjk6cmV0dXJuIDg7Y2FzZSA0OTk6cmV0dXJuIDE7Y2FzZSA1MDA6cmV0dXJuIDI7Y2FzZSA1MDE6cmV0dXJuIDEyO2Nhc2UgNTAzOnJldHVybiAxNDtjYXNlIDUwNDpyZXR1cm4gNDtkZWZhdWx0OnJldHVybiAyfX07ZnVuY3Rpb24gRihhLGIsYyl7Yz12b2lkIDA9PT1jP3t9OmM7Yj1FcnJvci5jYWxsKHRoaXMsYik7dGhpcy5tZXNzYWdlPWIubWVzc2FnZTtcInN0YWNrXCJpbiBiJiYodGhpcy5zdGFjaz1iLnN0YWNrKTt0aGlzLmNvZGU9YTt0aGlzLm1ldGFkYXRhPWN9b2EoRixFcnJvcik7Ri5wcm90b3R5cGUubmFtZT1cIlJwY0Vycm9yXCI7ZnVuY3Rpb24gQWEoYSl7dGhpcy5hPWF9QWEucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGEsYil7cmV0dXJuXCJkYXRhXCI9PWF8fFwiZXJyb3JcIj09YT90aGlzOnRoaXMuYS5vbihhLGIpfTtBYS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5hLnJlbW92ZUxpc3RlbmVyKGEsYil9O0FhLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLmEuY2FuY2VsKCl9O2Z1bmN0aW9uIEJhKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuXCJObyBFcnJvclwiO2Nhc2UgMTpyZXR1cm5cIkFjY2VzcyBkZW5pZWQgdG8gY29udGVudCBkb2N1bWVudFwiO2Nhc2UgMjpyZXR1cm5cIkZpbGUgbm90IGZvdW5kXCI7Y2FzZSAzOnJldHVyblwiRmlyZWZveCBzaWxlbnRseSBlcnJvcmVkXCI7Y2FzZSA0OnJldHVyblwiQXBwbGljYXRpb24gY3VzdG9tIGVycm9yXCI7Y2FzZSA1OnJldHVyblwiQW4gZXhjZXB0aW9uIG9jY3VycmVkXCI7Y2FzZSA2OnJldHVyblwiSHR0cCByZXNwb25zZSBhdCA0MDAgb3IgNTAwIGxldmVsXCI7Y2FzZSA3OnJldHVyblwiUmVxdWVzdCB3YXMgYWJvcnRlZFwiO2Nhc2UgODpyZXR1cm5cIlJlcXVlc3QgdGltZWQgb3V0XCI7Y2FzZSA5OnJldHVyblwiVGhlIHJlc291cmNlIGlzIG5vdCBhdmFpbGFibGUgb2ZmbGluZVwiO2RlZmF1bHQ6cmV0dXJuXCJVbnJlY29nbml6ZWQgZXJyb3IgY29kZVwifX07ZnVuY3Rpb24gRyhhKXtpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLEcpO2Vsc2V7dmFyIGI9RXJyb3IoKS5zdGFjaztiJiYodGhpcy5zdGFjaz1iKX1hJiYodGhpcy5tZXNzYWdlPVN0cmluZyhhKSl9QihHLEVycm9yKTtHLnByb3RvdHlwZS5uYW1lPVwiQ3VzdG9tRXJyb3JcIjtmdW5jdGlvbiBDYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxmPTA7ZjxkO2YrKyljKz1hW2ZdKyhmPGIubGVuZ3RoP2JbZl06XCIlc1wiKTtHLmNhbGwodGhpcyxjK2FbZF0pfUIoQ2EsRyk7Q2EucHJvdG90eXBlLm5hbWU9XCJBc3NlcnRpb25FcnJvclwiO2Z1bmN0aW9uIERhKGEsYil7dGhyb3cgbmV3IENhKFwiRmFpbHVyZVwiKyhhP1wiOiBcIithOlwiXCIpLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7fTtmdW5jdGlvbiBFYSgpe3RoaXMubD1udWxsO3RoaXMuaT1bXTt0aGlzLm09MDt0aGlzLmI9RmE7dGhpcy5mPXRoaXMuYT10aGlzLmg9MDt0aGlzLmM9bnVsbDt0aGlzLmc9MH1cbmZ1bmN0aW9uIEdhKGEsYil7ZnVuY3Rpb24gYyhsKXtsPT1IYT9lLmg9bDpsPT1IP2UuaD1sOklhKGUsaCxrLFwiaW52YWxpZCBmcmFtZSBieXRlXCIpO2UuYj1KYTtlLmE9MDtlLmY9MH1mdW5jdGlvbiBkKGwpe2UuZisrO2UuYT0oZS5hPDw4KStsOzQ9PWUuZiYmKGUuYj1LYSxlLmc9MCxcInVuZGVmaW5lZFwiIT09dHlwZW9mIFVpbnQ4QXJyYXk/ZS5jPW5ldyBVaW50OEFycmF5KGUuYSk6ZS5jPUFycmF5KGUuYSksMD09ZS5hJiZnKCkpfWZ1bmN0aW9uIGYobCl7ZS5jW2UuZysrXT1sO2UuZz09ZS5hJiZnKCl9ZnVuY3Rpb24gZygpe3ZhciBsPXt9O2xbZS5oXT1lLmM7ZS5pLnB1c2gobCk7ZS5iPUZhfXZhciBlPWEsaCxrPTA7Zm9yKGIgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxiIGluc3RhbmNlb2YgQXJyYXk/aD1iOmg9bmV3IFVpbnQ4QXJyYXkoYik7azxoLmxlbmd0aDspe3N3aXRjaChlLmIpe2Nhc2UgTGE6SWEoZSxoLGssXCJzdHJlYW0gYWxyZWFkeSBicm9rZW5cIik7YnJlYWs7Y2FzZSBGYTpjKGhba10pO1xuYnJlYWs7Y2FzZSBKYTpkKGhba10pO2JyZWFrO2Nhc2UgS2E6ZihoW2tdKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwidW5leHBlY3RlZCBwYXJzZXIgc3RhdGU6IFwiK2UuYik7fWUubSsrO2srK31hPWUuaTtlLmk9W107cmV0dXJuIDA8YS5sZW5ndGg/YTpudWxsfXZhciBGYT0wLEphPTEsS2E9MixMYT0zLEhhPTAsSD0xMjg7ZnVuY3Rpb24gSWEoYSxiLGMsZCl7YS5iPUxhO2EubD1cIlRoZSBzdHJlYW0gaXMgYnJva2VuIEBcIithLm0rXCIvXCIrYytcIi4gRXJyb3I6IFwiK2QrXCIuIFdpdGggaW5wdXQ6XFxuXCIrYjt0aHJvdyBFcnJvcihhLmwpO307dmFyIE1hPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVyblwic3RyaW5nXCIhPT10eXBlb2YgYnx8MSE9Yi5sZW5ndGg/LTE6YS5pbmRleE9mKGIsMCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX07dmFyIE5hPVN0cmluZy5wcm90b3R5cGUudHJpbT9mdW5jdGlvbihhKXtyZXR1cm4gYS50cmltKCl9OmZ1bmN0aW9uKGEpe3JldHVybi9eW1xcc1xceGEwXSooW1xcc1xcU10qPylbXFxzXFx4YTBdKiQvLmV4ZWMoYSlbMV19O2Z1bmN0aW9uIEkoYSxiKXtyZXR1cm4tMSE9YS5pbmRleE9mKGIpfWZ1bmN0aW9uIE9hKGEsYil7cmV0dXJuIGE8Yj8tMTphPmI/MTowfTt2YXIgSjthOnt2YXIgUGE9dy5uYXZpZ2F0b3I7aWYoUGEpe3ZhciBRYT1QYS51c2VyQWdlbnQ7aWYoUWEpe0o9UWE7YnJlYWsgYX19Sj1cIlwifTtmdW5jdGlvbiBSYShhLGIpe2Zvcih2YXIgYyBpbiBhKWIuY2FsbCh2b2lkIDAsYVtjXSxjLGEpfWZ1bmN0aW9uIFNhKGEsYil7dmFyIGM9e30sZDtmb3IoZCBpbiBhKWNbZF09Yi5jYWxsKHZvaWQgMCxhW2RdLGQsYSk7cmV0dXJuIGN9dmFyIFRhPVwiY29uc3RydWN0b3IgaGFzT3duUHJvcGVydHkgaXNQcm90b3R5cGVPZiBwcm9wZXJ0eUlzRW51bWVyYWJsZSB0b0xvY2FsZVN0cmluZyB0b1N0cmluZyB2YWx1ZU9mXCIuc3BsaXQoXCIgXCIpO2Z1bmN0aW9uIFVhKGEsYil7Zm9yKHZhciBjLGQsZj0xO2Y8YXJndW1lbnRzLmxlbmd0aDtmKyspe2Q9YXJndW1lbnRzW2ZdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2Zvcih2YXIgZz0wO2c8VGEubGVuZ3RoO2crKyljPVRhW2ddLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGMpJiYoYVtjXT1kW2NdKX19O2Z1bmN0aW9uIFZhKGEpe3ZhciBiPTE7YT1hLnNwbGl0KFwiOlwiKTtmb3IodmFyIGM9W107MDxiJiZhLmxlbmd0aDspYy5wdXNoKGEuc2hpZnQoKSksYi0tO2EubGVuZ3RoJiZjLnB1c2goYS5qb2luKFwiOlwiKSk7cmV0dXJuIGN9O2Z1bmN0aW9uIFdhKGEpe1dhW1wiIFwiXShhKTtyZXR1cm4gYX1XYVtcIiBcIl09cmE7ZnVuY3Rpb24gWGEoYSl7dmFyIGI9WWE7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLDkpP2JbOV06Yls5XT1hKDkpfTt2YXIgWmE9SShKLFwiT3BlcmFcIiksJGE9SShKLFwiVHJpZGVudFwiKXx8SShKLFwiTVNJRVwiKSxhYj1JKEosXCJFZGdlXCIpLGJiPUkoSixcIkdlY2tvXCIpJiYhKEkoSi50b0xvd2VyQ2FzZSgpLFwid2Via2l0XCIpJiYhSShKLFwiRWRnZVwiKSkmJiEoSShKLFwiVHJpZGVudFwiKXx8SShKLFwiTVNJRVwiKSkmJiFJKEosXCJFZGdlXCIpLGNiPUkoSi50b0xvd2VyQ2FzZSgpLFwid2Via2l0XCIpJiYhSShKLFwiRWRnZVwiKSxkYjtcbmE6e3ZhciBlYj1cIlwiLGZiPWZ1bmN0aW9uKCl7dmFyIGE9SjtpZihiYilyZXR1cm4vcnY6KFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoYWIpcmV0dXJuL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZigkYSlyZXR1cm4vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoY2IpcmV0dXJuL1dlYktpdFxcLyhcXFMrKS8uZXhlYyhhKTtpZihaYSlyZXR1cm4vKD86VmVyc2lvbilbIFxcL10/KFxcUyspLy5leGVjKGEpfSgpO2ZiJiYoZWI9ZmI/ZmJbMV06XCJcIik7aWYoJGEpe3ZhciBnYixoYj13LmRvY3VtZW50O2diPWhiP2hiLmRvY3VtZW50TW9kZTp2b2lkIDA7aWYobnVsbCE9Z2ImJmdiPnBhcnNlRmxvYXQoZWIpKXtkYj1TdHJpbmcoZ2IpO2JyZWFrIGF9fWRiPWVifXZhciBZYT17fTtcbmZ1bmN0aW9uIGliKCl7cmV0dXJuIFhhKGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj1OYShTdHJpbmcoZGIpKS5zcGxpdChcIi5cIiksYz1OYShcIjlcIikuc3BsaXQoXCIuXCIpLGQ9TWF0aC5tYXgoYi5sZW5ndGgsYy5sZW5ndGgpLGY9MDswPT1hJiZmPGQ7ZisrKXt2YXIgZz1iW2ZdfHxcIlwiLGU9Y1tmXXx8XCJcIjtkb3tnPS8oXFxkKikoXFxEKikoLiopLy5leGVjKGcpfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07ZT0vKFxcZCopKFxcRCopKC4qKS8uZXhlYyhlKXx8W1wiXCIsXCJcIixcIlwiLFwiXCJdO2lmKDA9PWdbMF0ubGVuZ3RoJiYwPT1lWzBdLmxlbmd0aClicmVhazthPU9hKDA9PWdbMV0ubGVuZ3RoPzA6cGFyc2VJbnQoZ1sxXSwxMCksMD09ZVsxXS5sZW5ndGg/MDpwYXJzZUludChlWzFdLDEwKSl8fE9hKDA9PWdbMl0ubGVuZ3RoLDA9PWVbMl0ubGVuZ3RoKXx8T2EoZ1syXSxlWzJdKTtnPWdbM107ZT1lWzNdfXdoaWxlKDA9PWEpfXJldHVybiAwPD1hfSl9O2Z1bmN0aW9uIGpiKCl7MCE9a2ImJihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcyx0YSkmJnRoaXNbdGFdfHwodGhpc1t0YV09Kyt1YSkpO3RoaXMuSz10aGlzLkt9dmFyIGtiPTA7amIucHJvdG90eXBlLks9ITE7dmFyIGxiPU9iamVjdC5mcmVlemV8fGZ1bmN0aW9uKGEpe3JldHVybiBhfTtmdW5jdGlvbiBLKGEsYil7dGhpcy50eXBlPWE7dGhpcy5hPXRoaXMudGFyZ2V0PWI7dGhpcy5kZWZhdWx0UHJldmVudGVkPSExfUsucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9O3ZhciBtYj1mdW5jdGlvbigpe2lmKCF3LmFkZEV2ZW50TGlzdGVuZXJ8fCFPYmplY3QuZGVmaW5lUHJvcGVydHkpcmV0dXJuITE7dmFyIGE9ITEsYj1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe2E9ITB9fSk7dHJ5e3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixyYSxiKSx3LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIscmEsYil9Y2F0Y2goYyl7fXJldHVybiBhfSgpO2Z1bmN0aW9uIEwoYSxiKXtLLmNhbGwodGhpcyxhP2EudHlwZTpcIlwiKTt0aGlzLnJlbGF0ZWRUYXJnZXQ9dGhpcy5hPXRoaXMudGFyZ2V0PW51bGw7dGhpcy5idXR0b249dGhpcy5zY3JlZW5ZPXRoaXMuc2NyZWVuWD10aGlzLmNsaWVudFk9dGhpcy5jbGllbnRYPTA7dGhpcy5rZXk9XCJcIjt0aGlzLm1ldGFLZXk9dGhpcy5zaGlmdEtleT10aGlzLmFsdEtleT10aGlzLmN0cmxLZXk9ITE7dGhpcy5wb2ludGVySWQ9MDt0aGlzLnBvaW50ZXJUeXBlPVwiXCI7dGhpcy5jPW51bGw7aWYoYSl7dmFyIGM9dGhpcy50eXBlPWEudHlwZSxkPWEuY2hhbmdlZFRvdWNoZXMmJmEuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2EuY2hhbmdlZFRvdWNoZXNbMF06bnVsbDt0aGlzLnRhcmdldD1hLnRhcmdldHx8YS5zcmNFbGVtZW50O3RoaXMuYT1iO2lmKGI9YS5yZWxhdGVkVGFyZ2V0KXtpZihiYil7YTp7dHJ5e1dhKGIubm9kZU5hbWUpO3ZhciBmPSEwO2JyZWFrIGF9Y2F0Y2goZyl7fWY9ITF9Znx8KGI9bnVsbCl9fWVsc2VcIm1vdXNlb3ZlclwiPT1cbmM/Yj1hLmZyb21FbGVtZW50OlwibW91c2VvdXRcIj09YyYmKGI9YS50b0VsZW1lbnQpO3RoaXMucmVsYXRlZFRhcmdldD1iO2Q/KHRoaXMuY2xpZW50WD12b2lkIDAhPT1kLmNsaWVudFg/ZC5jbGllbnRYOmQucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PWQuY2xpZW50WT9kLmNsaWVudFk6ZC5wYWdlWSx0aGlzLnNjcmVlblg9ZC5zY3JlZW5YfHwwLHRoaXMuc2NyZWVuWT1kLnNjcmVlbll8fDApOih0aGlzLmNsaWVudFg9dm9pZCAwIT09YS5jbGllbnRYP2EuY2xpZW50WDphLnBhZ2VYLHRoaXMuY2xpZW50WT12b2lkIDAhPT1hLmNsaWVudFk/YS5jbGllbnRZOmEucGFnZVksdGhpcy5zY3JlZW5YPWEuc2NyZWVuWHx8MCx0aGlzLnNjcmVlblk9YS5zY3JlZW5ZfHwwKTt0aGlzLmJ1dHRvbj1hLmJ1dHRvbjt0aGlzLmtleT1hLmtleXx8XCJcIjt0aGlzLmN0cmxLZXk9YS5jdHJsS2V5O3RoaXMuYWx0S2V5PWEuYWx0S2V5O3RoaXMuc2hpZnRLZXk9YS5zaGlmdEtleTt0aGlzLm1ldGFLZXk9XG5hLm1ldGFLZXk7dGhpcy5wb2ludGVySWQ9YS5wb2ludGVySWR8fDA7dGhpcy5wb2ludGVyVHlwZT1cInN0cmluZ1wiPT09dHlwZW9mIGEucG9pbnRlclR5cGU/YS5wb2ludGVyVHlwZTpuYlthLnBvaW50ZXJUeXBlXXx8XCJcIjt0aGlzLmM9YTthLmRlZmF1bHRQcmV2ZW50ZWQmJkwuTy5iLmNhbGwodGhpcyl9fUIoTCxLKTt2YXIgbmI9bGIoezI6XCJ0b3VjaFwiLDM6XCJwZW5cIiw0OlwibW91c2VcIn0pO0wucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtMLk8uYi5jYWxsKHRoaXMpO3ZhciBhPXRoaXMuYzthLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTphLnJldHVyblZhbHVlPSExfTt2YXIgb2I9XCJjbG9zdXJlX2xpc3RlbmFibGVfXCIrKDFFNipNYXRoLnJhbmRvbSgpfDApO3ZhciBwYj0wO2Z1bmN0aW9uIHFiKGEsYixjLGQsZil7dGhpcy5saXN0ZW5lcj1hO3RoaXMucHJveHk9bnVsbDt0aGlzLnNyYz1iO3RoaXMudHlwZT1jO3RoaXMuY2FwdHVyZT0hIWQ7dGhpcy5IPWY7dGhpcy5rZXk9KytwYjt0aGlzLkE9dGhpcy5EPSExfWZ1bmN0aW9uIHJiKGEpe2EuQT0hMDthLmxpc3RlbmVyPW51bGw7YS5wcm94eT1udWxsO2Euc3JjPW51bGw7YS5IPW51bGx9O2Z1bmN0aW9uIHNiKGEpe3RoaXMuc3JjPWE7dGhpcy5hPXt9O3RoaXMuYj0wfXNiLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxmKXt2YXIgZz1hLnRvU3RyaW5nKCk7YT10aGlzLmFbZ107YXx8KGE9dGhpcy5hW2ddPVtdLHRoaXMuYisrKTt2YXIgZT10YihhLGIsZCxmKTstMTxlPyhiPWFbZV0sY3x8KGIuRD0hMSkpOihiPW5ldyBxYihiLHRoaXMuc3JjLGcsISFkLGYpLGIuRD1jLGEucHVzaChiKSk7cmV0dXJuIGJ9O3NiLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oYSxiLGMsZCl7YT1hLnRvU3RyaW5nKCk7aWYoIShhIGluIHRoaXMuYSkpcmV0dXJuITE7dmFyIGY9dGhpcy5hW2FdO2I9dGIoZixiLGMsZCk7cmV0dXJuLTE8Yj8ocmIoZltiXSksQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGYsYiwxKSwwPT1mLmxlbmd0aCYmKGRlbGV0ZSB0aGlzLmFbYV0sdGhpcy5iLS0pLCEwKTohMX07XG5mdW5jdGlvbiB1YihhLGIpe3ZhciBjPWIudHlwZTtpZihjIGluIGEuYSl7dmFyIGQ9YS5hW2NdLGY9TWEoZCxiKSxnOyhnPTA8PWYpJiZBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoZCxmLDEpO2cmJihyYihiKSwwPT1hLmFbY10ubGVuZ3RoJiYoZGVsZXRlIGEuYVtjXSxhLmItLSkpfX1mdW5jdGlvbiB0YihhLGIsYyxkKXtmb3IodmFyIGY9MDtmPGEubGVuZ3RoOysrZil7dmFyIGc9YVtmXTtpZighZy5BJiZnLmxpc3RlbmVyPT1iJiZnLmNhcHR1cmU9PSEhYyYmZy5IPT1kKXJldHVybiBmfXJldHVybi0xfTt2YXIgdmI9XCJjbG9zdXJlX2xtX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKSx3Yj17fSx4Yj0wO2Z1bmN0aW9uIHliKGEsYixjLGQsZil7aWYoZCYmZC5vbmNlKXpiKGEsYixjLGQsZik7ZWxzZSBpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZz0wO2c8Yi5sZW5ndGg7ZysrKXliKGEsYltnXSxjLGQsZik7ZWxzZSBjPUFiKGMpLGEmJmFbb2JdP2EuZi5hZGQoU3RyaW5nKGIpLGMsITEsc2EoZCk/ISFkLmNhcHR1cmU6ISFkLGYpOkJiKGEsYixjLCExLGQsZil9XG5mdW5jdGlvbiBCYihhLGIsYyxkLGYsZyl7aWYoIWIpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHR5cGVcIik7dmFyIGU9c2EoZik/ISFmLmNhcHR1cmU6ISFmLGg9Q2IoYSk7aHx8KGFbdmJdPWg9bmV3IHNiKGEpKTtjPWguYWRkKGIsYyxkLGUsZyk7aWYoIWMucHJveHkpe2Q9RGIoKTtjLnByb3h5PWQ7ZC5zcmM9YTtkLmxpc3RlbmVyPWM7aWYoYS5hZGRFdmVudExpc3RlbmVyKW1ifHwoZj1lKSx2b2lkIDA9PT1mJiYoZj0hMSksYS5hZGRFdmVudExpc3RlbmVyKGIudG9TdHJpbmcoKSxkLGYpO2Vsc2UgaWYoYS5hdHRhY2hFdmVudClhLmF0dGFjaEV2ZW50KEViKGIudG9TdHJpbmcoKSksZCk7ZWxzZSBpZihhLmFkZExpc3RlbmVyJiZhLnJlbW92ZUxpc3RlbmVyKWEuYWRkTGlzdGVuZXIoZCk7ZWxzZSB0aHJvdyBFcnJvcihcImFkZEV2ZW50TGlzdGVuZXIgYW5kIGF0dGFjaEV2ZW50IGFyZSB1bmF2YWlsYWJsZS5cIik7eGIrK319XG5mdW5jdGlvbiBEYigpe2Z1bmN0aW9uIGEoYyl7cmV0dXJuIGIuY2FsbChhLnNyYyxhLmxpc3RlbmVyLGMpfXZhciBiPUZiO3JldHVybiBhfWZ1bmN0aW9uIHpiKGEsYixjLGQsZil7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGc9MDtnPGIubGVuZ3RoO2crKyl6YihhLGJbZ10sYyxkLGYpO2Vsc2UgYz1BYihjKSxhJiZhW29iXT9hLmYuYWRkKFN0cmluZyhiKSxjLCEwLHNhKGQpPyEhZC5jYXB0dXJlOiEhZCxmKTpCYihhLGIsYywhMCxkLGYpfVxuZnVuY3Rpb24gR2IoYSxiLGMsZCxmKXtpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZz0wO2c8Yi5sZW5ndGg7ZysrKUdiKGEsYltnXSxjLGQsZik7ZWxzZShkPXNhKGQpPyEhZC5jYXB0dXJlOiEhZCxjPUFiKGMpLGEmJmFbb2JdKT9hLmYucmVtb3ZlKFN0cmluZyhiKSxjLGQsZik6YSYmKGE9Q2IoYSkpJiYoYj1hLmFbYi50b1N0cmluZygpXSxhPS0xLGImJihhPXRiKGIsYyxkLGYpKSwoYz0tMTxhP2JbYV06bnVsbCkmJkhiKGMpKX1cbmZ1bmN0aW9uIEhiKGEpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYSYmYSYmIWEuQSl7dmFyIGI9YS5zcmM7aWYoYiYmYltvYl0pdWIoYi5mLGEpO2Vsc2V7dmFyIGM9YS50eXBlLGQ9YS5wcm94eTtiLnJlbW92ZUV2ZW50TGlzdGVuZXI/Yi5yZW1vdmVFdmVudExpc3RlbmVyKGMsZCxhLmNhcHR1cmUpOmIuZGV0YWNoRXZlbnQ/Yi5kZXRhY2hFdmVudChFYihjKSxkKTpiLmFkZExpc3RlbmVyJiZiLnJlbW92ZUxpc3RlbmVyJiZiLnJlbW92ZUxpc3RlbmVyKGQpO3hiLS07KGM9Q2IoYikpPyh1YihjLGEpLDA9PWMuYiYmKGMuc3JjPW51bGwsYlt2Yl09bnVsbCkpOnJiKGEpfX19ZnVuY3Rpb24gRWIoYSl7cmV0dXJuIGEgaW4gd2I/d2JbYV06d2JbYV09XCJvblwiK2F9ZnVuY3Rpb24gRmIoYSxiKXtpZihhLkEpYT0hMDtlbHNle2I9bmV3IEwoYix0aGlzKTt2YXIgYz1hLmxpc3RlbmVyLGQ9YS5IfHxhLnNyYzthLkQmJkhiKGEpO2E9Yy5jYWxsKGQsYil9cmV0dXJuIGF9XG5mdW5jdGlvbiBDYihhKXthPWFbdmJdO3JldHVybiBhIGluc3RhbmNlb2Ygc2I/YTpudWxsfXZhciBJYj1cIl9fY2xvc3VyZV9ldmVudHNfZm5fXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCk7ZnVuY3Rpb24gQWIoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGE7YVtJYl18fChhW0liXT1mdW5jdGlvbihiKXtyZXR1cm4gYS5oYW5kbGVFdmVudChiKX0pO3JldHVybiBhW0liXX07ZnVuY3Rpb24gTSgpe2piLmNhbGwodGhpcyk7dGhpcy5mPW5ldyBzYih0aGlzKTt0aGlzLlU9dGhpc31CKE0samIpO00ucHJvdG90eXBlW29iXT0hMDtNLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe3liKHRoaXMsYSxiLGMsZCl9O00ucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMsZCl7R2IodGhpcyxhLGIsYyxkKX07ZnVuY3Rpb24gTyhhLGIpe2E9YS5VO3ZhciBjPWIudHlwZXx8YjtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpYj1uZXcgSyhiLGEpO2Vsc2UgaWYoYiBpbnN0YW5jZW9mIEspYi50YXJnZXQ9Yi50YXJnZXR8fGE7ZWxzZXt2YXIgZD1iO2I9bmV3IEsoYyxhKTtVYShiLGQpfWE9Yi5hPWE7SmIoYSxjLCEwLGIpO0piKGEsYywhMSxiKX1cbmZ1bmN0aW9uIEpiKGEsYixjLGQpe2lmKGI9YS5mLmFbU3RyaW5nKGIpXSl7Yj1iLmNvbmNhdCgpO2Zvcih2YXIgZj0hMCxnPTA7ZzxiLmxlbmd0aDsrK2cpe3ZhciBlPWJbZ107aWYoZSYmIWUuQSYmZS5jYXB0dXJlPT1jKXt2YXIgaD1lLmxpc3RlbmVyLGs9ZS5IfHxlLnNyYztlLkQmJnViKGEuZixlKTtmPSExIT09aC5jYWxsKGssZCkmJmZ9fX19O3ZhciBLYj13O2Z1bmN0aW9uIExiKGEsYixjKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSljJiYoYT1BKGEsYykpO2Vsc2UgaWYoYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5oYW5kbGVFdmVudClhPUEoYS5oYW5kbGVFdmVudCxhKTtlbHNlIHRocm93IEVycm9yKFwiSW52YWxpZCBsaXN0ZW5lciBhcmd1bWVudFwiKTtyZXR1cm4gMjE0NzQ4MzY0NzxOdW1iZXIoYik/LTE6S2Iuc2V0VGltZW91dChhLGJ8fDApfTtmdW5jdGlvbiBNYihhLGIpe3RoaXMubmFtZT1hO3RoaXMudmFsdWU9Yn1NYi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYW1lfTt2YXIgTmI9bmV3IE1iKFwiT0ZGXCIsSW5maW5pdHkpLE9iPW5ldyBNYihcIlNFVkVSRVwiLDFFMyksUGI9bmV3IE1iKFwiQ09ORklHXCIsNzAwKSxRYj1uZXcgTWIoXCJGSU5FXCIsNTAwKTtmdW5jdGlvbiBSYigpe3RoaXMuY2xlYXIoKX12YXIgU2I7UmIucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBVYihhLGIsYyl7dGhpcy5yZXNldChhfHxOYixiLGMsdm9pZCAwLHZvaWQgMCl9VWIucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBWYihhLGIpe3RoaXMuYT1udWxsO3RoaXMuZj1bXTt0aGlzLmI9KHZvaWQgMD09PWI/bnVsbDpiKXx8bnVsbDt0aGlzLmM9W107dGhpcy5nPXtnZXROYW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGF9fX1cbmZ1bmN0aW9uIFdiKGEpe2lmKGEuYSlyZXR1cm4gYS5hO2lmKGEuYilyZXR1cm4gV2IoYS5iKTtEYShcIlJvb3QgbG9nZ2VyIGhhcyBubyBsZXZlbCBzZXQuXCIpO3JldHVybiBOYn1mdW5jdGlvbiBYYihhLGIpe2Zvcig7YTspYS5mLmZvckVhY2goZnVuY3Rpb24oYyl7YyhiKX0pLGE9YS5ifWZ1bmN0aW9uIFliKCl7dGhpcy5lbnRyaWVzPXt9O3ZhciBhPW5ldyBWYihcIlwiKTthLmE9UGI7dGhpcy5lbnRyaWVzW1wiXCJdPWF9dmFyIFpiO2Z1bmN0aW9uICRiKGEsYixjKXt2YXIgZD1hLmVudHJpZXNbYl07aWYoZClyZXR1cm4gdm9pZCAwIT09YyYmKGQuYT1jKSxkO2Q9JGIoYSxiLnN1YnN0cigwLGIubGFzdEluZGV4T2YoXCIuXCIpKSk7dmFyIGY9bmV3IFZiKGIsZCk7YS5lbnRyaWVzW2JdPWY7ZC5jLnB1c2goZik7dm9pZCAwIT09YyYmKGYuYT1jKTtyZXR1cm4gZn1mdW5jdGlvbiBhYygpe1pifHwoWmI9bmV3IFliKTtyZXR1cm4gWmJ9XG5mdW5jdGlvbiBiYyhhLGIsYyl7dmFyIGQ7aWYoZD1hKWlmKGQ9YSYmYil7ZD1iLnZhbHVlO3ZhciBmPWE/V2IoJGIoYWMoKSxhLmdldE5hbWUoKSkpOk5iO2Q9ZD49Zi52YWx1ZX1kJiYoYj1ifHxOYixkPSRiKGFjKCksYS5nZXROYW1lKCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjJiYoYz1jKCkpLFNifHwoU2I9bmV3IFJiKSxhPWEuZ2V0TmFtZSgpLGE9bmV3IFViKGIsYyxhKSxYYihkLGEpKX1mdW5jdGlvbiBQKGEsYil7YSYmYmMoYSxRYixiKX07ZnVuY3Rpb24gY2MoKXt9Y2MucHJvdG90eXBlLmE9bnVsbDtmdW5jdGlvbiBkYyhhKXt2YXIgYjsoYj1hLmEpfHwoYj17fSxlYyhhKSYmKGJbMF09ITAsYlsxXT0hMCksYj1hLmE9Yik7cmV0dXJuIGJ9O3ZhciBmYztmdW5jdGlvbiBnYygpe31CKGdjLGNjKTtmdW5jdGlvbiBoYyhhKXtyZXR1cm4oYT1lYyhhKSk/bmV3IEFjdGl2ZVhPYmplY3QoYSk6bmV3IFhNTEh0dHBSZXF1ZXN0fWZ1bmN0aW9uIGVjKGEpe2lmKCFhLmImJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBYTUxIdHRwUmVxdWVzdCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFjdGl2ZVhPYmplY3Qpe2Zvcih2YXIgYj1bXCJNU1hNTDIuWE1MSFRUUC42LjBcIixcIk1TWE1MMi5YTUxIVFRQLjMuMFwiLFwiTVNYTUwyLlhNTEhUVFBcIixcIk1pY3Jvc29mdC5YTUxIVFRQXCJdLGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YltjXTt0cnl7cmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KGQpLGEuYj1kfWNhdGNoKGYpe319dGhyb3cgRXJyb3IoXCJDb3VsZCBub3QgY3JlYXRlIEFjdGl2ZVhPYmplY3QuIEFjdGl2ZVggbWlnaHQgYmUgZGlzYWJsZWQsIG9yIE1TWE1MIG1pZ2h0IG5vdCBiZSBpbnN0YWxsZWRcIik7fXJldHVybiBhLmJ9ZmM9bmV3IGdjO3QoKTt1KCk7ZnVuY3Rpb24gaWMoYSxiKXt0aGlzLmI9YVt3LlN5bWJvbC5pdGVyYXRvcl0oKTt0aGlzLmM9Yjt0aGlzLmY9MH1pYy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtpYy5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYi5uZXh0KCk7cmV0dXJue3ZhbHVlOmEuZG9uZT92b2lkIDA6dGhpcy5jLmNhbGwodm9pZCAwLGEudmFsdWUsdGhpcy5mKyspLGRvbmU6YS5kb25lfX07ZnVuY3Rpb24gamMoYSxiKXtyZXR1cm4gbmV3IGljKGEsYil9dCgpO3UoKTt0KCk7dSgpO3ZhciBrYz1cIlN0b3BJdGVyYXRpb25cImluIHc/dy5TdG9wSXRlcmF0aW9uOnttZXNzYWdlOlwiU3RvcEl0ZXJhdGlvblwiLHN0YWNrOlwiXCJ9O2Z1bmN0aW9uIFEoKXt9US5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3JldHVybiBRLnByb3RvdHlwZS5hLmNhbGwodGhpcyl9O1EucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXt0aHJvdyBrYzt9O1EucHJvdG90eXBlLnU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307ZnVuY3Rpb24gbGMoYSl7aWYoYSBpbnN0YW5jZW9mIFJ8fGEgaW5zdGFuY2VvZiBTfHxhIGluc3RhbmNlb2YgVClyZXR1cm4gYTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLm5leHQpcmV0dXJuIG5ldyBSKGZ1bmN0aW9uKCl7cmV0dXJuIG1jKGEpfSk7dCgpO3UoKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhW1N5bWJvbC5pdGVyYXRvcl0pcmV0dXJuIHQoKSx1KCksbmV3IFIoZnVuY3Rpb24oKXtyZXR1cm4gYVtTeW1ib2wuaXRlcmF0b3JdKCl9KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLnUpcmV0dXJuIG5ldyBSKGZ1bmN0aW9uKCl7cmV0dXJuIG1jKGEudSgpKX0pO3Rocm93IEVycm9yKFwiTm90IGFuIGl0ZXJhdG9yIG9yIGl0ZXJhYmxlLlwiKTt9XG5mdW5jdGlvbiBtYyhhKXtpZighKGEgaW5zdGFuY2VvZiBRKSlyZXR1cm4gYTt2YXIgYj0hMTtyZXR1cm57bmV4dDpmdW5jdGlvbigpe2Zvcih2YXIgYzshYjspdHJ5e2M9YS5hKCk7YnJlYWt9Y2F0Y2goZCl7aWYoZCE9PWtjKXRocm93IGQ7Yj0hMH1yZXR1cm57dmFsdWU6Yyxkb25lOmJ9fX19dCgpO3UoKTtmdW5jdGlvbiBSKGEpe3RoaXMuYj1hfVIucHJvdG90eXBlLnU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFModGhpcy5iKCkpfTtSLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUKHRoaXMuYigpKX07Ui5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3JldHVybiBuZXcgVCh0aGlzLmIoKSl9O3QoKTt1KCk7ZnVuY3Rpb24gUyhhKXt0aGlzLmI9YX1vYShTLFEpO1MucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmIubmV4dCgpO2lmKGEuZG9uZSl0aHJvdyBrYztyZXR1cm4gYS52YWx1ZX07Uy5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3JldHVybiBTLnByb3RvdHlwZS5hLmNhbGwodGhpcyl9O1xuUy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiBuZXcgVCh0aGlzLmIpfTtTLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBUKHRoaXMuYil9O2Z1bmN0aW9uIFQoYSl7Ui5jYWxsKHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gYX0pO3RoaXMuZj1hfW9hKFQsUik7VC5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmYubmV4dCgpfTtmdW5jdGlvbiBuYyhhLGIpe3RoaXMubz17fTt0aGlzLmo9W107dGhpcy5CPXRoaXMuc2l6ZT0wO3ZhciBjPWFyZ3VtZW50cy5sZW5ndGg7aWYoMTxjKXtpZihjJTIpdGhyb3cgRXJyb3IoXCJVbmV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50c1wiKTtmb3IodmFyIGQ9MDtkPGM7ZCs9Mil0aGlzLnNldChhcmd1bWVudHNbZF0sYXJndW1lbnRzW2QrMV0pfWVsc2UgYSYmdGhpcy5hZGRBbGwoYSl9bj1uYy5wcm90b3R5cGU7bi5HPWZ1bmN0aW9uKCl7b2ModGhpcyk7cmV0dXJuIHRoaXMuai5jb25jYXQoKX07bi5oYXM9ZnVuY3Rpb24oYSl7cmV0dXJuIFUodGhpcy5vLGEpfTtuLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5vPXt9O3RoaXMuQj10aGlzLnNpemU9dGhpcy5qLmxlbmd0aD0wfTtuLnJlbW92ZT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kZWxldGUoYSl9O1xubi5kZWxldGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUodGhpcy5vLGEpPyhkZWxldGUgdGhpcy5vW2FdLC0tdGhpcy5zaXplLHRoaXMuQisrLHRoaXMuai5sZW5ndGg+Mip0aGlzLnNpemUmJm9jKHRoaXMpLCEwKTohMX07ZnVuY3Rpb24gb2MoYSl7aWYoYS5zaXplIT1hLmoubGVuZ3RoKXtmb3IodmFyIGI9MCxjPTA7YjxhLmoubGVuZ3RoOyl7dmFyIGQ9YS5qW2JdO1UoYS5vLGQpJiYoYS5qW2MrK109ZCk7YisrfWEuai5sZW5ndGg9Y31pZihhLnNpemUhPWEuai5sZW5ndGgpe3ZhciBmPXt9O2ZvcihjPWI9MDtiPGEuai5sZW5ndGg7KWQ9YS5qW2JdLFUoZixkKXx8KGEualtjKytdPWQsZltkXT0xKSxiKys7YS5qLmxlbmd0aD1jfX1uLmdldD1mdW5jdGlvbihhLGIpe3JldHVybiBVKHRoaXMubyxhKT90aGlzLm9bYV06Yn07bi5zZXQ9ZnVuY3Rpb24oYSxiKXtVKHRoaXMubyxhKXx8KHRoaXMuc2l6ZSs9MSx0aGlzLmoucHVzaChhKSx0aGlzLkIrKyk7dGhpcy5vW2FdPWJ9O1xubi5hZGRBbGw9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIG5jKWZvcih2YXIgYj1hLkcoKSxjPTA7YzxiLmxlbmd0aDtjKyspdGhpcy5zZXQoYltjXSxhLmdldChiW2NdKSk7ZWxzZSBmb3IoYiBpbiBhKXRoaXMuc2V0KGIsYVtiXSl9O24uZm9yRWFjaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLkcoKSxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBmPWNbZF0sZz10aGlzLmdldChmKTthLmNhbGwoYixnLGYsdGhpcyl9fTtuLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuYyh0aGlzKX07bi5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIGxjKHRoaXMudSghMCkpLmMoKX07bi52YWx1ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbGModGhpcy51KCExKSkuYygpfTtuLmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBqYyh0aGlzLmtleXMoKSxmdW5jdGlvbihiKXtyZXR1cm5bYixhLmdldChiKV19KX07XG5uLnU9ZnVuY3Rpb24oYSl7b2ModGhpcyk7dmFyIGI9MCxjPXRoaXMuQixkPXRoaXMsZj1uZXcgUTtmLmE9ZnVuY3Rpb24oKXtpZihjIT1kLkIpdGhyb3cgRXJyb3IoXCJUaGUgbWFwIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBpdGVyYXRvciB3YXMgY3JlYXRlZFwiKTtpZihiPj1kLmoubGVuZ3RoKXRocm93IGtjO3ZhciBnPWQualtiKytdO3JldHVybiBhP2c6ZC5vW2ddfTtmLm5leHQ9Zi5hLmJpbmQoZik7cmV0dXJuIGZ9O2Z1bmN0aW9uIFUoYSxiKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsYil9O3ZhciBwYz0vXig/OihbXjovPyMuXSspOik/KD86XFwvXFwvKD86KFteXFxcXC8/I10qKUApPyhbXlxcXFwvPyNdKj8pKD86OihbMC05XSspKT8oPz1bXFxcXC8/I118JCkpPyhbXj8jXSspPyg/OlxcPyhbXiNdKikpPyg/OiMoW1xcc1xcU10qKSk/JC87ZnVuY3Rpb24gcWMoYSl7TS5jYWxsKHRoaXMpO3RoaXMuaGVhZGVycz1uZXcgbmM7dGhpcy5DPWF8fG51bGw7dGhpcy5jPSExO3RoaXMuSj10aGlzLmE9bnVsbDt0aGlzLlA9dGhpcy52PVwiXCI7dGhpcy5nPTA7dGhpcy5sPVwiXCI7dGhpcy5pPXRoaXMuTj10aGlzLnM9dGhpcy5MPSExO3RoaXMuaD0wO3RoaXMudz1udWxsO3RoaXMubT1yYzt0aGlzLkk9dGhpcy5NPSExfUIocWMsTSk7dmFyIHJjPVwiXCI7cWMucHJvdG90eXBlLmI9JGIoYWMoKSxcImdvb2cubmV0LlhocklvXCIsdm9pZCAwKS5nO3ZhciBzYz0vXmh0dHBzPyQvaSx0Yz1bXCJQT1NUXCIsXCJQVVRcIl07XG5mdW5jdGlvbiB1YyhhLGIsYyl7aWYoYS5hKXRocm93IEVycm9yKFwiW2dvb2cubmV0LlhocklvXSBPYmplY3QgaXMgYWN0aXZlIHdpdGggYW5vdGhlciByZXF1ZXN0PVwiK2EuditcIjsgbmV3VXJpPVwiK2IpO2Eudj1iO2EubD1cIlwiO2EuZz0wO2EuUD1cIlBPU1RcIjthLkw9ITE7YS5jPSEwO2EuYT1hLkM/aGMoYS5DKTpoYyhmYyk7YS5KPWEuQz9kYyhhLkMpOmRjKGZjKTthLmEub25yZWFkeXN0YXRlY2hhbmdlPUEoYS5SLGEpO3RyeXtQKGEuYixWKGEsXCJPcGVuaW5nIFhoclwiKSksYS5OPSEwLGEuYS5vcGVuKFwiUE9TVFwiLFN0cmluZyhiKSwhMCksYS5OPSExfWNhdGNoKGcpe1AoYS5iLFYoYSxcIkVycm9yIG9wZW5pbmcgWGhyOiBcIitnLm1lc3NhZ2UpKTt2YyhhLGcpO3JldHVybn1iPWN8fFwiXCI7Yz1hLmhlYWRlcnMuY2xvbmUoKTt2YXIgZD1jLkcoKS5maW5kKGZ1bmN0aW9uKGcpe3JldHVyblwiY29udGVudC10eXBlXCI9PWcudG9Mb3dlckNhc2UoKX0pLGY9dy5Gb3JtRGF0YSYmYiBpbnN0YW5jZW9mXG53LkZvcm1EYXRhOyEoMDw9TWEodGMsXCJQT1NUXCIpKXx8ZHx8Znx8Yy5zZXQoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04XCIpO2MuZm9yRWFjaChmdW5jdGlvbihnLGUpe3RoaXMuYS5zZXRSZXF1ZXN0SGVhZGVyKGUsZyl9LGEpO2EubSYmKGEuYS5yZXNwb25zZVR5cGU9YS5tKTtcIndpdGhDcmVkZW50aWFsc1wiaW4gYS5hJiZhLmEud2l0aENyZWRlbnRpYWxzIT09YS5NJiYoYS5hLndpdGhDcmVkZW50aWFscz1hLk0pO3RyeXt3YyhhKSwwPGEuaCYmKGEuST14YyhhLmEpLFAoYS5iLFYoYSxcIldpbGwgYWJvcnQgYWZ0ZXIgXCIrYS5oK1wibXMgaWYgaW5jb21wbGV0ZSwgeGhyMiBcIithLkkpKSxhLkk/KGEuYS50aW1lb3V0PWEuaCxhLmEub250aW1lb3V0PUEoYS5ULGEpKTphLnc9TGIoYS5ULGEuaCxhKSksUChhLmIsVihhLFwiU2VuZGluZyByZXF1ZXN0XCIpKSxhLnM9ITAsYS5hLnNlbmQoYiksYS5zPSExfWNhdGNoKGcpe1AoYS5iLFxuVihhLFwiU2VuZCBlcnJvcjogXCIrZy5tZXNzYWdlKSksdmMoYSxnKX19ZnVuY3Rpb24geGMoYSl7cmV0dXJuICRhJiZpYigpJiZcIm51bWJlclwiPT09dHlwZW9mIGEudGltZW91dCYmdm9pZCAwIT09YS5vbnRpbWVvdXR9bj1xYy5wcm90b3R5cGU7bi5UPWZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHFhJiZ0aGlzLmEmJih0aGlzLmw9XCJUaW1lZCBvdXQgYWZ0ZXIgXCIrdGhpcy5oK1wibXMsIGFib3J0aW5nXCIsdGhpcy5nPTgsUCh0aGlzLmIsVih0aGlzLHRoaXMubCkpLE8odGhpcyxcInRpbWVvdXRcIiksdGhpcy5hYm9ydCg4KSl9O2Z1bmN0aW9uIHZjKGEsYil7YS5jPSExO2EuYSYmKGEuaT0hMCxhLmEuYWJvcnQoKSxhLmk9ITEpO2EubD1iO2EuZz01O3ljKGEpO3pjKGEpfWZ1bmN0aW9uIHljKGEpe2EuTHx8KGEuTD0hMCxPKGEsXCJjb21wbGV0ZVwiKSxPKGEsXCJlcnJvclwiKSl9XG5uLmFib3J0PWZ1bmN0aW9uKGEpe3RoaXMuYSYmdGhpcy5jJiYoUCh0aGlzLmIsVih0aGlzLFwiQWJvcnRpbmdcIikpLHRoaXMuYz0hMSx0aGlzLmk9ITAsdGhpcy5hLmFib3J0KCksdGhpcy5pPSExLHRoaXMuZz1hfHw3LE8odGhpcyxcImNvbXBsZXRlXCIpLE8odGhpcyxcImFib3J0XCIpLHpjKHRoaXMpKX07bi5SPWZ1bmN0aW9uKCl7dGhpcy5LfHwodGhpcy5OfHx0aGlzLnN8fHRoaXMuaT9BYyh0aGlzKTp0aGlzLlcoKSl9O24uVz1mdW5jdGlvbigpe0FjKHRoaXMpfTtcbmZ1bmN0aW9uIEFjKGEpe2lmKGEuYyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHFhKWlmKGEuSlsxXSYmND09VyhhKSYmMj09YS5nZXRTdGF0dXMoKSlQKGEuYixWKGEsXCJMb2NhbCByZXF1ZXN0IGVycm9yIGRldGVjdGVkIGFuZCBpZ25vcmVkXCIpKTtlbHNlIGlmKGEucyYmND09VyhhKSlMYihhLlIsMCxhKTtlbHNlIGlmKE8oYSxcInJlYWR5c3RhdGVjaGFuZ2VcIiksND09VyhhKSl7UChhLmIsVihhLFwiUmVxdWVzdCBjb21wbGV0ZVwiKSk7YS5jPSExO3RyeXt2YXIgYj1hLmdldFN0YXR1cygpO2E6c3dpdGNoKGIpe2Nhc2UgMjAwOmNhc2UgMjAxOmNhc2UgMjAyOmNhc2UgMjA0OmNhc2UgMjA2OmNhc2UgMzA0OmNhc2UgMTIyMzp2YXIgYz0hMDticmVhayBhO2RlZmF1bHQ6Yz0hMX12YXIgZDtpZighKGQ9Yykpe3ZhciBmO2lmKGY9MD09PWIpe3ZhciBnPVN0cmluZyhhLnYpLm1hdGNoKHBjKVsxXXx8bnVsbDtpZighZyYmdy5zZWxmJiZ3LnNlbGYubG9jYXRpb24pe3ZhciBlPXcuc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbmc9ZS5zdWJzdHIoMCxlLmxlbmd0aC0xKX1mPSFzYy50ZXN0KGc/Zy50b0xvd2VyQ2FzZSgpOlwiXCIpfWQ9Zn1pZihkKU8oYSxcImNvbXBsZXRlXCIpLE8oYSxcInN1Y2Nlc3NcIik7ZWxzZXthLmc9Njt0cnl7dmFyIGg9MjxXKGEpP2EuYS5zdGF0dXNUZXh0OlwiXCJ9Y2F0Y2goayl7UChhLmIsXCJDYW4gbm90IGdldCBzdGF0dXM6IFwiK2subWVzc2FnZSksaD1cIlwifWEubD1oK1wiIFtcIithLmdldFN0YXR1cygpK1wiXVwiO3ljKGEpfX1maW5hbGx5e3pjKGEpfX19ZnVuY3Rpb24gemMoYSl7aWYoYS5hKXt3YyhhKTt2YXIgYj1hLmEsYz1hLkpbMF0/cmE6bnVsbDthLmE9bnVsbDthLko9bnVsbDtPKGEsXCJyZWFkeVwiKTt0cnl7Yi5vbnJlYWR5c3RhdGVjaGFuZ2U9Y31jYXRjaChkKXsoYT1hLmIpJiZiYyhhLE9iLFwiUHJvYmxlbSBlbmNvdW50ZXJlZCByZXNldHRpbmcgb25yZWFkeXN0YXRlY2hhbmdlOiBcIitkLm1lc3NhZ2UpfX19XG5mdW5jdGlvbiB3YyhhKXthLmEmJmEuSSYmKGEuYS5vbnRpbWVvdXQ9bnVsbCk7YS53JiYoS2IuY2xlYXJUaW1lb3V0KGEudyksYS53PW51bGwpfWZ1bmN0aW9uIFcoYSl7cmV0dXJuIGEuYT9hLmEucmVhZHlTdGF0ZTowfW4uZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiAyPFcodGhpcyk/dGhpcy5hLnN0YXR1czotMX1jYXRjaChhKXtyZXR1cm4tMX19O1xuZnVuY3Rpb24gQmMoYSl7dHJ5e2lmKCFhLmEpcmV0dXJuIG51bGw7aWYoXCJyZXNwb25zZVwiaW4gYS5hKXJldHVybiBhLmEucmVzcG9uc2U7c3dpdGNoKGEubSl7Y2FzZSByYzpjYXNlIFwidGV4dFwiOnJldHVybiBhLmEucmVzcG9uc2VUZXh0O2Nhc2UgXCJhcnJheWJ1ZmZlclwiOmlmKFwibW96UmVzcG9uc2VBcnJheUJ1ZmZlclwiaW4gYS5hKXJldHVybiBhLmEubW96UmVzcG9uc2VBcnJheUJ1ZmZlcn12YXIgYj1hLmI7YiYmYmMoYixPYixcIlJlc3BvbnNlIHR5cGUgXCIrYS5tK1wiIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyXCIpO3JldHVybiBudWxsfWNhdGNoKGMpe3JldHVybiBQKGEuYixcIkNhbiBub3QgZ2V0IHJlc3BvbnNlOiBcIitjLm1lc3NhZ2UpLG51bGx9fWZ1bmN0aW9uIENjKGEsYil7aWYoYS5hJiY0PT1XKGEpKXJldHVybiBhPWEuYS5nZXRSZXNwb25zZUhlYWRlcihiKSxudWxsPT09YT92b2lkIDA6YX1cbmZ1bmN0aW9uIERjKGEpe3ZhciBiPXt9O2E9KGEuYSYmND09VyhhKT9hLmEuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCl8fFwiXCI6XCJcIikuc3BsaXQoXCJcXHJcXG5cIik7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoIS9eW1xcc1xceGEwXSokLy50ZXN0KGFbY10pKXt2YXIgZD1WYShhW2NdKSxmPWRbMF07ZD1kWzFdO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCl7ZD1kLnRyaW0oKTt2YXIgZz1iW2ZdfHxbXTtiW2ZdPWc7Zy5wdXNoKGQpfX1yZXR1cm4gU2EoYixmdW5jdGlvbihlKXtyZXR1cm4gZS5qb2luKFwiLCBcIil9KX1mdW5jdGlvbiBWKGEsYil7cmV0dXJuIGIrXCIgW1wiK2EuUCtcIiBcIithLnYrXCIgXCIrYS5nZXRTdGF0dXMoKStcIl1cIn07dmFyIEVjPXt9LEZjPW51bGw7ZnVuY3Rpb24gR2MoYSl7dmFyIGI9YS5sZW5ndGgsYz0zKmIvNDtjJTM/Yz1NYXRoLmZsb29yKGMpOkkoXCI9LlwiLGFbYi0xXSkmJihjPUkoXCI9LlwiLGFbYi0yXSk/Yy0yOmMtMSk7dmFyIGQ9bmV3IFVpbnQ4QXJyYXkoYyksZj0wO0hjKGEsZnVuY3Rpb24oZyl7ZFtmKytdPWd9KTtyZXR1cm4gZC5zdWJhcnJheSgwLGYpfVxuZnVuY3Rpb24gSGMoYSxiKXtmdW5jdGlvbiBjKGspe2Zvcig7ZDxhLmxlbmd0aDspe3ZhciBsPWEuY2hhckF0KGQrKyksbT1GY1tsXTtpZihudWxsIT1tKXJldHVybiBtO2lmKCEvXltcXHNcXHhhMF0qJC8udGVzdChsKSl0aHJvdyBFcnJvcihcIlVua25vd24gYmFzZTY0IGVuY29kaW5nIGF0IGNoYXI6IFwiK2wpO31yZXR1cm4ga31JYygpO2Zvcih2YXIgZD0wOzspe3ZhciBmPWMoLTEpLGc9YygwKSxlPWMoNjQpLGg9Yyg2NCk7aWYoNjQ9PT1oJiYtMT09PWYpYnJlYWs7YihmPDwyfGc+PjQpOzY0IT1lJiYoYihnPDw0JjI0MHxlPj4yKSw2NCE9aCYmYihlPDw2JjE5MnxoKSl9fVxuZnVuY3Rpb24gSWMoKXtpZighRmMpe0ZjPXt9O2Zvcih2YXIgYT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCIuc3BsaXQoXCJcIiksYj1bXCIrLz1cIixcIisvXCIsXCItXz1cIixcIi1fLlwiLFwiLV9cIl0sYz0wOzU+YztjKyspe3ZhciBkPWEuY29uY2F0KGJbY10uc3BsaXQoXCJcIikpO0VjW2NdPWQ7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciBnPWRbZl07dm9pZCAwPT09RmNbZ10mJihGY1tnXT1mKX19fX07dmFyIEpjPVtcImNvbnRlbnQtdHlwZVwiLFwiZ3JwYy1zdGF0dXNcIixcImdycGMtbWVzc2FnZVwiXTtcbmZ1bmN0aW9uIFgoYSl7dGhpcy5hPWEuWjt0aGlzLm09bnVsbDt0aGlzLmI9W107dGhpcy5oPVtdO3RoaXMuZz1bXTt0aGlzLmY9W107dGhpcy5jPVtdO3RoaXMubD0hMTt0aGlzLmk9MDt0aGlzLnM9bmV3IEVhO3ZhciBiPXRoaXM7eWIodGhpcy5hLFwicmVhZHlzdGF0ZWNoYW5nZVwiLGZ1bmN0aW9uKCl7dmFyIGM9Yi5hO2lmKGM9Yy5hP2MuYS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTpudWxsKXtjPWMudG9Mb3dlckNhc2UoKTtpZigwPT1jLmxhc3RJbmRleE9mKFwiYXBwbGljYXRpb24vZ3JwYy13ZWItdGV4dFwiLDApKXtjPWIuYTt0cnl7dmFyIGQ9Yy5hP2MuYS5yZXNwb25zZVRleHQ6XCJcIn1jYXRjaChrKXtQKGMuYixcIkNhbiBub3QgZ2V0IHJlc3BvbnNlVGV4dDogXCIray5tZXNzYWdlKSxkPVwiXCJ9Yz1kfHxcIlwiO2Q9Yy5sZW5ndGgtYy5sZW5ndGglNDtjPWMuc3Vic3RyKGIuaSxkLWIuaSk7aWYoMD09Yy5sZW5ndGgpcmV0dXJuO2IuaT1kO2M9R2MoYyl9ZWxzZSBpZigwPT1cbmMubGFzdEluZGV4T2YoXCJhcHBsaWNhdGlvbi9ncnBjXCIsMCkpYz1uZXcgVWludDhBcnJheShCYyhiLmEpKTtlbHNle1koYixuZXcgRigyLFwiVW5rbm93biBDb250ZW50LXR5cGUgcmVjZWl2ZWQuXCIpKTtyZXR1cm59ZD1udWxsO3RyeXtkPUdhKGIucyxjKX1jYXRjaChrKXtZKGIsbmV3IEYoMixcIkVycm9yIGluIHBhcnNpbmcgcmVzcG9uc2UgYm9keVwiKSl9aWYoZClmb3IoYz0wO2M8ZC5sZW5ndGg7YysrKXtpZihIYSBpbiBkW2NdKXt2YXIgZj1kW2NdW0hhXTtpZihmKXt2YXIgZz12b2lkIDA7dHJ5e2c9Yi5tKGYpfWNhdGNoKGspe1koYixuZXcgRigxMyxcIkVycm9yIHdoZW4gZGVzZXJpYWxpemluZyByZXNwb25zZSBkYXRhOyBlcnJvcjogXCIraysoXCIsIHJlc3BvbnNlOiBcIitnKSkpfWlmKGcpe2Y9Yjtmb3IodmFyIGU9MDtlPGYuYi5sZW5ndGg7ZSsrKWYuYltlXShnKX19fWlmKEggaW4gZFtjXSYmMDxkW2NdW0hdLmxlbmd0aCl7Zj1cIlwiO2ZvcihnPTA7ZzxkW2NdW0hdLmxlbmd0aDtnKyspZis9XG5TdHJpbmcuZnJvbUNoYXJDb2RlKGRbY11bSF1bZ10pO2Y9Zi50cmltKCkuc3BsaXQoXCJcXHJcXG5cIik7Zz17fTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSsrKXt2YXIgaD1mW2VdLmluZGV4T2YoXCI6XCIpO2dbZltlXS5zdWJzdHJpbmcoMCxoKS50cmltKCldPWZbZV0uc3Vic3RyaW5nKGgrMSkudHJpbSgpfWY9ZztnPTA7ZT1cIlwiO1wiZ3JwYy1zdGF0dXNcImluIGYmJihnPU51bWJlcihmW1wiZ3JwYy1zdGF0dXNcIl0pLGRlbGV0ZSBmW1wiZ3JwYy1zdGF0dXNcIl0pO1wiZ3JwYy1tZXNzYWdlXCJpbiBmJiYoZT1mW1wiZ3JwYy1tZXNzYWdlXCJdLGRlbGV0ZSBmW1wiZ3JwYy1tZXNzYWdlXCJdKTtZKGIsbmV3IEYoZyxlLGYpKX19fX0pO3liKHRoaXMuYSxcImNvbXBsZXRlXCIsZnVuY3Rpb24oKXt2YXIgYz1iLmEuZyxkPTIsZj1cIlwiLGc9e30sZT1EYyhiLmEpO09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24oaCl7SmMuaW5jbHVkZXMoaCl8fChnW2hdPWVbaF0pfSk7S2MoYixnKTtpZigwIT1jKXtzd2l0Y2goYyl7Y2FzZSA3OmQ9XG4xMDticmVhaztjYXNlIDg6ZD00O2JyZWFrO2Nhc2UgNjpkPXphKGIuYS5nZXRTdGF0dXMoKSk7YnJlYWs7ZGVmYXVsdDpkPTE0fTEwPT1kJiZiLmx8fFkoYixuZXcgRihkLEJhKGMpKSl9ZWxzZSBjPSExLFwiZ3JwYy1zdGF0dXNcImluIGUmJihkPU51bWJlcihDYyhiLmEsXCJncnBjLXN0YXR1c1wiKSksXCJncnBjLW1lc3NhZ2VcImluIGUmJihmPUNjKGIuYSxcImdycGMtbWVzc2FnZVwiKSksMCE9ZCYmKFkoYixuZXcgRihkLGZ8fFwiXCIsZSkpLGM9ITApKSxjfHxMYyhiKX0pfVgucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGEsYil7XCJkYXRhXCI9PWE/dGhpcy5iLnB1c2goYik6XCJzdGF0dXNcIj09YT90aGlzLmgucHVzaChiKTpcIm1ldGFkYXRhXCI9PWE/dGhpcy5nLnB1c2goYik6XCJlbmRcIj09YT90aGlzLmMucHVzaChiKTpcImVycm9yXCI9PWEmJnRoaXMuZi5wdXNoKGIpO3JldHVybiB0aGlzfTtmdW5jdGlvbiBNYyhhLGIpe2I9YS5pbmRleE9mKGIpOy0xPGImJmEuc3BsaWNlKGIsMSl9XG5YLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihhLGIpe1wiZGF0YVwiPT1hP01jKHRoaXMuYixiKTpcInN0YXR1c1wiPT1hP01jKHRoaXMuaCxiKTpcIm1ldGFkYXRhXCI9PWE/TWModGhpcy5nLGIpOlwiZW5kXCI9PWE/TWModGhpcy5jLGIpOlwiZXJyb3JcIj09YSYmTWModGhpcy5mLGIpO3JldHVybiB0aGlzfTtYLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLmw9ITA7dGhpcy5hLmFib3J0KCl9O2Z1bmN0aW9uIFkoYSxiKXtpZigwIT1iLmNvZGUpZm9yKHZhciBjPW5ldyBGKGIuY29kZSxkZWNvZGVVUklDb21wb25lbnQoYi5tZXNzYWdlfHxcIlwiKSxiLm1ldGFkYXRhKSxkPTA7ZDxhLmYubGVuZ3RoO2QrKylhLmZbZF0oYyk7Yj17Y29kZTpiLmNvZGUsZGV0YWlsczpkZWNvZGVVUklDb21wb25lbnQoYi5tZXNzYWdlfHxcIlwiKSxtZXRhZGF0YTpiLm1ldGFkYXRhfTtmb3IoYz0wO2M8YS5oLmxlbmd0aDtjKyspYS5oW2NdKGIpfVxuZnVuY3Rpb24gS2MoYSxiKXtmb3IodmFyIGM9MDtjPGEuZy5sZW5ndGg7YysrKWEuZ1tjXShiKX1mdW5jdGlvbiBMYyhhKXtmb3IodmFyIGI9MDtiPGEuYy5sZW5ndGg7YisrKWEuY1tiXSgpfVgucHJvdG90eXBlLmNhbmNlbD1YLnByb3RvdHlwZS5jYW5jZWw7WC5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9WC5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7WC5wcm90b3R5cGUub249WC5wcm90b3R5cGUub247ZnVuY3Rpb24gTmMoYSl7dmFyIGI9XCJcIjtSYShhLGZ1bmN0aW9uKGMsZCl7Yis9ZDtiKz1cIjpcIjtiKz1jO2IrPVwiXFxyXFxuXCJ9KTtyZXR1cm4gYn07ZnVuY3Rpb24gWihhLGIpe2E9dm9pZCAwPT09YT97fTphO3RoaXMuYT1hLmZvcm1hdHx8eShcImZvcm1hdFwiLGEpfHxcInRleHRcIjt0aGlzLmc9YS5hYXx8eShcInN1cHByZXNzQ29yc1ByZWZsaWdodFwiLGEpfHwhMTt0aGlzLmY9YS53aXRoQ3JlZGVudGlhbHN8fHkoXCJ3aXRoQ3JlZGVudGlhbHNcIixhKXx8ITE7dGhpcy5iPWEuJHx8eShcInN0cmVhbUludGVyY2VwdG9yc1wiLGEpfHxbXTt0aGlzLmg9YS5iYXx8eShcInVuYXJ5SW50ZXJjZXB0b3JzXCIsYSl8fFtdO3RoaXMuYz1ifHxudWxsfVoucHJvdG90eXBlLlg9ZnVuY3Rpb24oYSxiLGMsZCxmKXt2YXIgZz10aGlzLGU9YS5zdWJzdHIoMCxhLmxlbmd0aC1kLm5hbWUubGVuZ3RoKTthPU9jKGZ1bmN0aW9uKGgpe3JldHVybiBQYyhnLGgsZSl9LHRoaXMuYikuY2FsbCh0aGlzLHlhKGQsYixjKSk7UWMoYSxmLCExKTtyZXR1cm4gbmV3IEFhKGEpfTtcbloucHJvdG90eXBlLlM9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGY9dGhpcyxnPWEuc3Vic3RyKDAsYS5sZW5ndGgtZC5uYW1lLmxlbmd0aCk7cmV0dXJuIE9jKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihoLGspe3ZhciBsPVBjKGYsZSxnKSxtLHAscTtRYyhsLGZ1bmN0aW9uKHgseixOLFRiKXt4P2soeCk6ej9xPXo6Tj9wPU46VGI/bT1UYjooeD1lLmdldE1ldGhvZERlc2NyaXB0b3IoKSx6PW0sej12b2lkIDA9PT16P3t9OnosaChuZXcgRChxLHgseix2b2lkIDA9PT1wP251bGw6cCkpKX0sITApfSl9LHRoaXMuaCkuY2FsbCh0aGlzLHlhKGQsYixjKSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRSZXNwb25zZU1lc3NhZ2UoKX0pfTtaLnByb3RvdHlwZS51bmFyeUNhbGw9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuUyhhLGIsYyxkKX07XG5aLnByb3RvdHlwZS5ZPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBmPXRoaXMsZz1hLnN1YnN0cigwLGEubGVuZ3RoLWQubmFtZS5sZW5ndGgpO3JldHVybiBPYyhmdW5jdGlvbihlKXtyZXR1cm4gUGMoZixlLGcpfSx0aGlzLmIpLmNhbGwodGhpcyx5YShkLGIsYykpfTtcbmZ1bmN0aW9uIFBjKGEsYixjKXt2YXIgZD1iLmdldE1ldGhvZERlc2NyaXB0b3IoKSxmPWMrZC5nZXROYW1lKCk7Yz1hLmM/YS5jOm5ldyBxYztjLk09YS5mO3ZhciBnPW5ldyBYKHtaOmN9KSxlPWQuZ2V0UmVzcG9uc2VEZXNlcmlhbGl6ZUZuKCk7Zy5tPWU7ZT1iLmdldE1ldGFkYXRhKCk7Zm9yKHZhciBoIGluIGUpYy5oZWFkZXJzLnNldChoLGVbaF0pO1widGV4dFwiPT1hLmE/KGMuaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL2dycGMtd2ViLXRleHRcIiksYy5oZWFkZXJzLnNldChcIkFjY2VwdFwiLFwiYXBwbGljYXRpb24vZ3JwYy13ZWItdGV4dFwiKSk6Yy5oZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLFwiYXBwbGljYXRpb24vZ3JwYy13ZWIrcHJvdG9cIik7Yy5oZWFkZXJzLnNldChcIlgtVXNlci1BZ2VudFwiLFwiZ3JwYy13ZWItamF2YXNjcmlwdC8wLjFcIik7Yy5oZWFkZXJzLnNldChcIlgtR3JwYy1XZWJcIixcIjFcIik7Yy5oZWFkZXJzLmhhcyhcImRlYWRsaW5lXCIpJiYoaD1cbk51bWJlcihjLmhlYWRlcnMuZ2V0KFwiZGVhZGxpbmVcIikpLGg9TWF0aC5jZWlsKGgtKG5ldyBEYXRlKS5nZXRUaW1lKCkpLGMuaGVhZGVycy5kZWxldGUoXCJkZWFkbGluZVwiKSxJbmZpbml0eT09PWgmJihoPTApLDA8aCYmKGMuaGVhZGVycy5zZXQoXCJncnBjLXRpbWVvdXRcIixoK1wibVwiKSxjLmg9TWF0aC5tYXgoMCxNYXRoLm1heCgxRTMsTWF0aC5jZWlsKDEuMSpoKSkpKSk7aWYoYS5nKXtlPWMuaGVhZGVycztoPXt9O2Zvcih2YXIgaz1oYShlLmtleXMoKSksbD1rLm5leHQoKTshbC5kb25lO2w9ay5uZXh0KCkpbD1sLnZhbHVlLGhbbF09ZS5nZXQobCk7Yy5oZWFkZXJzLmNsZWFyKCk7Yjp7Zm9yKG0gaW4gaCl7dmFyIG09ITE7YnJlYWsgYn1tPSEwfWlmKCFtKWlmKGg9TmMoaCksXCJzdHJpbmdcIj09PXR5cGVvZiBmKXtpZihtPWVuY29kZVVSSUNvbXBvbmVudChcIiRodHRwSGVhZGVyc1wiKSxoPW51bGwhPWg/XCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhoKSk6XCJcIixtKz1oKWg9Zi5pbmRleE9mKFwiI1wiKSxcbjA+aCYmKGg9Zi5sZW5ndGgpLGU9Zi5pbmRleE9mKFwiP1wiKSwwPmV8fGU+aD8oZT1oLGs9XCJcIik6az1mLnN1YnN0cmluZyhlKzEsaCksZj1bZi5zdWJzdHIoMCxlKSxrLGYuc3Vic3RyKGgpXSxoPWZbMV0sZlsxXT1tP2g/aCtcIiZcIittOm06aCxmPWZbMF0rKGZbMV0/XCI/XCIrZlsxXTpcIlwiKStmWzJdfWVsc2UgZi5hKFwiJGh0dHBIZWFkZXJzXCIsaCl9Yj1kLmdldFJlcXVlc3RTZXJpYWxpemVGbigpKGIuZ2V0UmVxdWVzdE1lc3NhZ2UoKSk7ZD1iLmxlbmd0aDttPVswLDAsMCwwXTtoPW5ldyBVaW50OEFycmF5KDUrZCk7Zm9yKGU9MzswPD1lO2UtLSltW2VdPWQlMjU2LGQ+Pj49ODtoLnNldChuZXcgVWludDhBcnJheShtKSwxKTtoLnNldChiLDUpO2I9aDtpZihcInRleHRcIj09YS5hKXthPWI7dmFyIHA7dm9pZCAwPT09cCYmKHA9MCk7SWMoKTtwPUVjW3BdO2I9QXJyYXkoTWF0aC5mbG9vcihhLmxlbmd0aC8zKSk7ZD1wWzY0XXx8XCJcIjtmb3IobT1oPTA7aDxhLmxlbmd0aC0yO2grPTMpe2w9YVtoXTtcbnZhciBxPWFbaCsxXTtrPWFbaCsyXTtlPXBbbD4+Ml07bD1wWyhsJjMpPDw0fHE+PjRdO3E9cFsocSYxNSk8PDJ8az4+Nl07az1wW2smNjNdO2JbbSsrXT1lK2wrcStrfWU9MDtrPWQ7c3dpdGNoKGEubGVuZ3RoLWgpe2Nhc2UgMjplPWFbaCsxXSxrPXBbKGUmMTUpPDwyXXx8ZDtjYXNlIDE6YT1hW2hdLGJbbV09cFthPj4yXStwWyhhJjMpPDw0fGU+PjRdK2srZH1iPWIuam9pbihcIlwiKX1lbHNlXCJiaW5hcnlcIj09YS5hJiYoYy5tPVwiYXJyYXlidWZmZXJcIik7dWMoYyxmLGIpO3JldHVybiBnfVxuZnVuY3Rpb24gUWMoYSxiLGMpe3ZhciBkPSExLGY9bnVsbCxnPSExO2Eub24oXCJkYXRhXCIsZnVuY3Rpb24oZSl7ZD0hMDtmPWV9KTthLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXswPT1lLmNvZGV8fGd8fChnPSEwLGIoZSxudWxsKSl9KTthLm9uKFwic3RhdHVzXCIsZnVuY3Rpb24oZSl7MD09ZS5jb2RlfHxnP2MmJmIobnVsbCxudWxsLGUpOihnPSEwLGIoe2NvZGU6ZS5jb2RlLG1lc3NhZ2U6ZS5kZXRhaWxzLG1ldGFkYXRhOmUubWV0YWRhdGF9LG51bGwpKX0pO2lmKGMpYS5vbihcIm1ldGFkYXRhXCIsZnVuY3Rpb24oZSl7YihudWxsLG51bGwsbnVsbCxlKX0pO2Eub24oXCJlbmRcIixmdW5jdGlvbigpe2d8fChkP2IobnVsbCxmKTpiKHtjb2RlOjIsbWVzc2FnZTpcIkluY29tcGxldGUgcmVzcG9uc2VcIn0pKTtjJiZiKG51bGwsbnVsbCl9KX1cbmZ1bmN0aW9uIE9jKGEsYil7dmFyIGM9YTtiLmZvckVhY2goZnVuY3Rpb24oZCl7dmFyIGY9YztjPWZ1bmN0aW9uKGcpe3JldHVybiBkLmludGVyY2VwdChnLGYpfX0pO3JldHVybiBjfVoucHJvdG90eXBlLnNlcnZlclN0cmVhbWluZz1aLnByb3RvdHlwZS5ZO1oucHJvdG90eXBlLnVuYXJ5Q2FsbD1aLnByb3RvdHlwZS51bmFyeUNhbGw7Wi5wcm90b3R5cGUudGhlbmFibGVDYWxsPVoucHJvdG90eXBlLlM7Wi5wcm90b3R5cGUucnBjQ2FsbD1aLnByb3RvdHlwZS5YO21vZHVsZS5leHBvcnRzLkNhbGxPcHRpb25zPXhhO21vZHVsZS5leHBvcnRzLk1ldGhvZERlc2NyaXB0b3I9RTttb2R1bGUuZXhwb3J0cy5HcnBjV2ViQ2xpZW50QmFzZT1aO21vZHVsZS5leHBvcnRzLlJwY0Vycm9yPUY7bW9kdWxlLmV4cG9ydHMuU3RhdHVzQ29kZT17T0s6MCxDQU5DRUxMRUQ6MSxVTktOT1dOOjIsSU5WQUxJRF9BUkdVTUVOVDozLERFQURMSU5FX0VYQ0VFREVEOjQsTk9UX0ZPVU5EOjUsQUxSRUFEWV9FWElTVFM6NixQRVJNSVNTSU9OX0RFTklFRDo3LFVOQVVUSEVOVElDQVRFRDoxNixSRVNPVVJDRV9FWEhBVVNURUQ6OCxGQUlMRURfUFJFQ09ORElUSU9OOjksQUJPUlRFRDoxMCxPVVRfT0ZfUkFOR0U6MTEsVU5JTVBMRU1FTlRFRDoxMixJTlRFUk5BTDoxMyxVTkFWQUlMQUJMRToxNCxEQVRBX0xPU1M6MTV9O21vZHVsZS5leHBvcnRzLk1ldGhvZFR5cGU9e1VOQVJZOlwidW5hcnlcIixTRVJWRVJfU1RSRUFNSU5HOlwic2VydmVyX3N0cmVhbWluZ1wiLEJJRElfU1RSRUFNSU5HOlwiYmlkaV9zdHJlYW1pbmdcIn07XG5LYj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIGdsb2JhbFRoaXMmJmdsb2JhbFRoaXN8fHNlbGY7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1RvU3RyaW5nVGFnU2hhbXMoKSB7XG5cdHJldHVybiBoYXNTeW1ib2xzKCkgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xuXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gJHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG52YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaXNTdGFuZGFyZEFyZ3VtZW50cyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdCR0b1N0cmluZyh2YWx1ZSkgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbn0oKSk7XG5cbmlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50czsgLy8gZm9yIHRlc3RzXG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRm5SZWdleCA9IC9eXFxzKig/OmZ1bmN0aW9uKT9cXCovO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBnZXRHZW5lcmF0b3JGdW5jID0gZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiooKSB7fScpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0fVxufTtcbnZhciBHZW5lcmF0b3JGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcblx0XHRyZXR1cm4gc3RyID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXHR9XG5cdGlmICghZ2V0UHJvdG8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBHZW5lcmF0b3JGdW5jdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcblx0XHRHZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmMgPyBnZXRQcm90byhnZW5lcmF0b3JGdW5jKSA6IGZhbHNlO1xuXHR9XG5cdHJldHVybiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBOdW1iZXIpO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKE51bWJlci5pc05hTiAmJiBOdW1iZXIuaXNOYU4oTmFOKSAmJiAhTnVtYmVyLmlzTmFOKCdhJykpIHtcblx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOO1xuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU51bWJlcklzTmFOKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoTnVtYmVyLCB7IGlzTmFOOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXNOYU46IGZ1bmN0aW9uIHRlc3RJc05hTigpIHtcblx0XHRcdHJldHVybiBOdW1iZXIuaXNOYU4gIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yZWFjaCcpO1xudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzID0gcmVxdWlyZSgnYXZhaWxhYmxlLXR5cGVkLWFycmF5cycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuaW5kZXhPZicsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHR9XG5cdFx0XHR0b1N0clRhZ3NbdHlwZWRBcnJheV0gPSBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgYW55VHJ1ZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghYW55VHJ1ZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YW55VHJ1ZSA9IGdldHRlci5jYWxsKHZhbHVlKSA9PT0gdHlwZWRBcnJheTtcblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGFueVRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpKSB7XG5cdFx0dmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG5cdFx0cmV0dXJuICRpbmRleE9mKHR5cGVkQXJyYXlzLCB0YWcpID4gLTE7XG5cdH1cblx0aWYgKCFnT1BEKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG51bWJlcklzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzKGEsIGIpIHtcblx0aWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuXHRcdHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG5cdH1cblx0aWYgKGEgPT09IGIpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAobnVtYmVySXNOYU4oYSkgJiYgbnVtYmVySXNOYU4oYikpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBwb2x5ZmlsbCA9IGNhbGxCaW5kKGdldFBvbHlmaWxsKCksIE9iamVjdCk7XG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuaXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuaXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1PYmplY3RJcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBpczogcG9seWZpbGwgfSwge1xuXHRcdGlzOiBmdW5jdGlvbiB0ZXN0T2JqZWN0SXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmlzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoT2JqZWN0LmtleXMpIHtcblx0XHR2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTYWZhcmkgNS4wIGJ1Z1xuXHRcdFx0dmFyIGFyZ3MgPSBPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIGFyZ3MgJiYgYXJncy5sZW5ndGggPT09IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0fSgxLCAyKSk7XG5cdFx0aWYgKCFrZXlzV29ya3NXaXRoQXJndW1lbnRzKSB7XG5cdFx0XHRPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG5cdFx0XHRcdGlmIChpc0FyZ3Mob2JqZWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMoc2xpY2UuY2FsbChvYmplY3QpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmdzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3MpIHtcblx0XHRpc0FyZ3MgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmdzO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCBMb25nIGZyb20gJ2xvbmcnO1xyXG5pbXBvcnQgeyBDb2RlLCBZb3JraWVFcnJvciB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL2Vycm9yJztcclxuaW1wb3J0IHsgUHJlc2VuY2VJbmZvIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2NvcmUvY2xpZW50JztcclxuaW1wb3J0IHtcclxuICBJbml0aWFsVGltZVRpY2tldCxcclxuICBUaW1lVGlja2V0LFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgU2V0T3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9zZXRfb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgQWRkT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9hZGRfb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgTW92ZU9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vbW92ZV9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBSZW1vdmVPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL3JlbW92ZV9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBFZGl0T3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9lZGl0X29wZXJhdGlvbic7XHJcbmltcG9ydCB7IFJpY2hFZGl0T3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9yaWNoX2VkaXRfb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgU2VsZWN0T3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9zZWxlY3Rfb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgU3R5bGVPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL3N0eWxlX29wZXJhdGlvbic7XHJcbmltcG9ydCB7IENoYW5nZUlEIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jaGFuZ2VfaWQnO1xyXG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NoYW5nZSc7XHJcbmltcG9ydCB7IENoYW5nZVBhY2sgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NoYW5nZV9wYWNrJztcclxuaW1wb3J0IHsgQ2hlY2twb2ludCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9jaGFuZ2UvY2hlY2twb2ludCc7XHJcbmltcG9ydCB7IFJIVFBRTWFwIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcmh0X3BxX21hcCc7XHJcbmltcG9ydCB7IFJHQVRyZWVMaXN0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcmdhX3RyZWVfbGlzdCc7XHJcbmltcG9ydCB7IEpTT05FbGVtZW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vZWxlbWVudCc7XHJcbmltcG9ydCB7IE9iamVjdEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vb2JqZWN0JztcclxuaW1wb3J0IHsgQXJyYXlJbnRlcm5hbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2FycmF5JztcclxuaW1wb3J0IHtcclxuICBSR0FUcmVlU3BsaXQsXHJcbiAgUkdBVHJlZVNwbGl0Tm9kZSxcclxuICBSR0FUcmVlU3BsaXROb2RlSUQsXHJcbiAgUkdBVHJlZVNwbGl0Tm9kZVBvcyxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yZ2FfdHJlZV9zcGxpdCc7XHJcbmltcG9ydCB7IFBsYWluVGV4dEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcGxhaW5fdGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgUmljaFRleHRJbnRlcm5hbCxcclxuICBSaWNoVGV4dFZhbHVlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JpY2hfdGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgSlNPTlByaW1pdGl2ZSxcclxuICBQcmltaXRpdmVUeXBlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3ByaW1pdGl2ZSc7XHJcbmltcG9ydCB7XHJcbiAgQ2hhbmdlIGFzIFBiQ2hhbmdlLFxyXG4gIENoYW5nZUlEIGFzIFBiQ2hhbmdlSUQsXHJcbiAgQ2hhbmdlUGFjayBhcyBQYkNoYW5nZVBhY2ssXHJcbiAgQ2hlY2twb2ludCBhcyBQYkNoZWNrcG9pbnQsXHJcbiAgQ2xpZW50IGFzIFBiQ2xpZW50LFxyXG4gIFByZXNlbmNlIGFzIFBiUHJlc2VuY2UsXHJcbiAgSlNPTkVsZW1lbnQgYXMgUGJKU09ORWxlbWVudCxcclxuICBKU09ORWxlbWVudFNpbXBsZSBhcyBQYkpTT05FbGVtZW50U2ltcGxlLFxyXG4gIE9wZXJhdGlvbiBhcyBQYk9wZXJhdGlvbixcclxuICBSR0FOb2RlIGFzIFBiUkdBTm9kZSxcclxuICBSSFROb2RlIGFzIFBiUkhUTm9kZSxcclxuICBSaWNoVGV4dE5vZGUgYXMgUGJSaWNoVGV4dE5vZGUsXHJcbiAgVGV4dE5vZGUgYXMgUGJUZXh0Tm9kZSxcclxuICBUZXh0Tm9kZUlEIGFzIFBiVGV4dE5vZGVJRCxcclxuICBUZXh0Tm9kZVBvcyBhcyBQYlRleHROb2RlUG9zLFxyXG4gIFRpbWVUaWNrZXQgYXMgUGJUaW1lVGlja2V0LFxyXG4gIFZhbHVlVHlwZSBhcyBQYlZhbHVlVHlwZSxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvYXBpL3Jlc291cmNlc19wYic7XHJcbmltcG9ydCB7IEluY3JlYXNlT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9pbmNyZWFzZV9vcGVyYXRpb24nO1xyXG5pbXBvcnQge1xyXG4gIENvdW50ZXJUeXBlLFxyXG4gIENvdW50ZXJJbnRlcm5hbCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9jb3VudGVyJztcclxuXHJcbi8qKlxyXG4gKiBgZnJvbVByZXNlbmNlYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21QcmVzZW5jZTxNPihwYlByZXNlbmNlOiBQYlByZXNlbmNlKTogUHJlc2VuY2VJbmZvPE0+IHtcclxuICBjb25zdCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XHJcbiAgcGJQcmVzZW5jZS5nZXREYXRhTWFwKCkuZm9yRWFjaCgodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcclxuICAgIGRhdGFba2V5XSA9IHZhbHVlO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2xvY2s6IHBiUHJlc2VuY2UuZ2V0Q2xvY2soKSxcclxuICAgIGRhdGE6IGRhdGEgYXMgYW55LFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9DbGllbnRgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0NsaWVudDxNPihpZDogc3RyaW5nLCBwcmVzZW5jZTogUHJlc2VuY2VJbmZvPE0+KTogUGJDbGllbnQge1xyXG4gIGNvbnN0IHBiUHJlc2VuY2UgPSBuZXcgUGJQcmVzZW5jZSgpO1xyXG4gIHBiUHJlc2VuY2Uuc2V0Q2xvY2socHJlc2VuY2UuY2xvY2spO1xyXG4gIGNvbnN0IHBiRGF0YU1hcCA9IHBiUHJlc2VuY2UuZ2V0RGF0YU1hcCgpO1xyXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByZXNlbmNlLmRhdGEpKSB7XHJcbiAgICBwYkRhdGFNYXAuc2V0KGtleSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGJDbGllbnQgPSBuZXcgUGJDbGllbnQoKTtcclxuICBwYkNsaWVudC5zZXRJZCh0b1VpbnQ4QXJyYXkoaWQpKTtcclxuICBwYkNsaWVudC5zZXRQcmVzZW5jZShwYlByZXNlbmNlKTtcclxuICByZXR1cm4gcGJDbGllbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9DaGVja3BvaW50YCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9DaGVja3BvaW50KGNoZWNrcG9pbnQ6IENoZWNrcG9pbnQpOiBQYkNoZWNrcG9pbnQge1xyXG4gIGNvbnN0IHBiQ2hlY2twb2ludCA9IG5ldyBQYkNoZWNrcG9pbnQoKTtcclxuICBwYkNoZWNrcG9pbnQuc2V0U2VydmVyU2VxKGNoZWNrcG9pbnQuZ2V0U2VydmVyU2VxQXNTdHJpbmcoKSk7XHJcbiAgcGJDaGVja3BvaW50LnNldENsaWVudFNlcShjaGVja3BvaW50LmdldENsaWVudFNlcSgpKTtcclxuICByZXR1cm4gcGJDaGVja3BvaW50O1xyXG59XHJcblxyXG4vKipcclxuICogYHRvQ2hhbmdlSURgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0NoYW5nZUlEKGNoYW5nZUlEOiBDaGFuZ2VJRCk6IFBiQ2hhbmdlSUQge1xyXG4gIGNvbnN0IHBiQ2hhbmdlSUQgPSBuZXcgUGJDaGFuZ2VJRCgpO1xyXG4gIHBiQ2hhbmdlSUQuc2V0Q2xpZW50U2VxKGNoYW5nZUlELmdldENsaWVudFNlcSgpKTtcclxuICBwYkNoYW5nZUlELnNldExhbXBvcnQoY2hhbmdlSUQuZ2V0TGFtcG9ydEFzU3RyaW5nKCkpO1xyXG4gIHBiQ2hhbmdlSUQuc2V0QWN0b3JJZCh0b1VpbnQ4QXJyYXkoY2hhbmdlSUQuZ2V0QWN0b3JJRCgpISkpO1xyXG4gIHJldHVybiBwYkNoYW5nZUlEO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvVGltZVRpY2tldGAgY29udmVydHMgdGhlIGdpdmVuIG1vZGVsIHRvIFByb3RvYnVmIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIHRvVGltZVRpY2tldCh0aWNrZXQ/OiBUaW1lVGlja2V0KTogUGJUaW1lVGlja2V0IHwgdW5kZWZpbmVkIHtcclxuICBpZiAoIXRpY2tldCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGJUaW1lVGlja2V0ID0gbmV3IFBiVGltZVRpY2tldCgpO1xyXG4gIHBiVGltZVRpY2tldC5zZXRMYW1wb3J0KHRpY2tldC5nZXRMYW1wb3J0QXNTdHJpbmcoKSk7XHJcbiAgcGJUaW1lVGlja2V0LnNldERlbGltaXRlcih0aWNrZXQuZ2V0RGVsaW1pdGVyKCkpO1xyXG4gIHBiVGltZVRpY2tldC5zZXRBY3RvcklkKHRvVWludDhBcnJheSh0aWNrZXQuZ2V0QWN0b3JJRCgpISkpO1xyXG4gIHJldHVybiBwYlRpbWVUaWNrZXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9WYWx1ZVR5cGVgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b1ZhbHVlVHlwZSh2YWx1ZVR5cGU6IFByaW1pdGl2ZVR5cGUpOiBQYlZhbHVlVHlwZSB7XHJcbiAgc3dpdGNoICh2YWx1ZVR5cGUpIHtcclxuICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5OdWxsOlxyXG4gICAgICByZXR1cm4gUGJWYWx1ZVR5cGUuTlVMTDtcclxuICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5Cb29sZWFuOlxyXG4gICAgICByZXR1cm4gUGJWYWx1ZVR5cGUuQk9PTEVBTjtcclxuICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5JbnRlZ2VyOlxyXG4gICAgICByZXR1cm4gUGJWYWx1ZVR5cGUuSU5URUdFUjtcclxuICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5Mb25nOlxyXG4gICAgICByZXR1cm4gUGJWYWx1ZVR5cGUuTE9ORztcclxuICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5Eb3VibGU6XHJcbiAgICAgIHJldHVybiBQYlZhbHVlVHlwZS5ET1VCTEU7XHJcbiAgICBjYXNlIFByaW1pdGl2ZVR5cGUuU3RyaW5nOlxyXG4gICAgICByZXR1cm4gUGJWYWx1ZVR5cGUuU1RSSU5HO1xyXG4gICAgY2FzZSBQcmltaXRpdmVUeXBlLkJ5dGVzOlxyXG4gICAgICByZXR1cm4gUGJWYWx1ZVR5cGUuQllURVM7XHJcbiAgICBjYXNlIFByaW1pdGl2ZVR5cGUuRGF0ZTpcclxuICAgICAgcmV0dXJuIFBiVmFsdWVUeXBlLkRBVEU7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoQ29kZS5VbnN1cHBvcnRlZCwgYHVuc3VwcG9ydGVkIHR5cGU6ICR7dmFsdWVUeXBlfWApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGB0b0NvdW50ZXJUeXBlYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9Db3VudGVyVHlwZSh2YWx1ZVR5cGU6IENvdW50ZXJUeXBlKTogUGJWYWx1ZVR5cGUge1xyXG4gIHN3aXRjaCAodmFsdWVUeXBlKSB7XHJcbiAgICBjYXNlIENvdW50ZXJUeXBlLkludGVnZXJDbnQ6XHJcbiAgICAgIHJldHVybiBQYlZhbHVlVHlwZS5JTlRFR0VSX0NOVDtcclxuICAgIGNhc2UgQ291bnRlclR5cGUuTG9uZ0NudDpcclxuICAgICAgcmV0dXJuIFBiVmFsdWVUeXBlLkxPTkdfQ05UO1xyXG4gICAgY2FzZSBDb3VudGVyVHlwZS5Eb3VibGVDbnQ6XHJcbiAgICAgIHJldHVybiBQYlZhbHVlVHlwZS5ET1VCTEVfQ05UO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IFlvcmtpZUVycm9yKENvZGUuVW5zdXBwb3J0ZWQsIGB1bnN1cHBvcnRlZCB0eXBlOiAke3ZhbHVlVHlwZX1gKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9KU09ORWxlbWVudFNpbXBsZWAgY29udmVydHMgdGhlIGdpdmVuIG1vZGVsIHRvIFByb3RvYnVmIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIHRvSlNPTkVsZW1lbnRTaW1wbGUoanNvbkVsZW1lbnQ6IEpTT05FbGVtZW50KTogUGJKU09ORWxlbWVudFNpbXBsZSB7XHJcbiAgY29uc3QgcGJKU09ORWxlbWVudCA9IG5ldyBQYkpTT05FbGVtZW50U2ltcGxlKCk7XHJcbiAgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0SW50ZXJuYWwpIHtcclxuICAgIHBiSlNPTkVsZW1lbnQuc2V0VHlwZShQYlZhbHVlVHlwZS5KU09OX09CSkVDVCk7XHJcbiAgICBwYkpTT05FbGVtZW50LnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoanNvbkVsZW1lbnQuZ2V0Q3JlYXRlZEF0KCkpKTtcclxuICB9IGVsc2UgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgQXJyYXlJbnRlcm5hbCkge1xyXG4gICAgcGJKU09ORWxlbWVudC5zZXRUeXBlKFBiVmFsdWVUeXBlLkpTT05fQVJSQVkpO1xyXG4gICAgcGJKU09ORWxlbWVudC5zZXRDcmVhdGVkQXQodG9UaW1lVGlja2V0KGpzb25FbGVtZW50LmdldENyZWF0ZWRBdCgpKSk7XHJcbiAgfSBlbHNlIGlmIChqc29uRWxlbWVudCBpbnN0YW5jZW9mIFBsYWluVGV4dEludGVybmFsKSB7XHJcbiAgICBwYkpTT05FbGVtZW50LnNldFR5cGUoUGJWYWx1ZVR5cGUuVEVYVCk7XHJcbiAgICBwYkpTT05FbGVtZW50LnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoanNvbkVsZW1lbnQuZ2V0Q3JlYXRlZEF0KCkpKTtcclxuICB9IGVsc2UgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgUmljaFRleHRJbnRlcm5hbCkge1xyXG4gICAgcGJKU09ORWxlbWVudC5zZXRUeXBlKFBiVmFsdWVUeXBlLlJJQ0hfVEVYVCk7XHJcbiAgICBwYkpTT05FbGVtZW50LnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoanNvbkVsZW1lbnQuZ2V0Q3JlYXRlZEF0KCkpKTtcclxuICB9IGVsc2UgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgSlNPTlByaW1pdGl2ZSkge1xyXG4gICAgY29uc3QgcHJpbWl0aXZlID0ganNvbkVsZW1lbnQgYXMgSlNPTlByaW1pdGl2ZTtcclxuICAgIHBiSlNPTkVsZW1lbnQuc2V0VHlwZSh0b1ZhbHVlVHlwZShwcmltaXRpdmUuZ2V0VHlwZSgpKSk7XHJcbiAgICBwYkpTT05FbGVtZW50LnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoanNvbkVsZW1lbnQuZ2V0Q3JlYXRlZEF0KCkpKTtcclxuICAgIHBiSlNPTkVsZW1lbnQuc2V0VmFsdWUoanNvbkVsZW1lbnQudG9CeXRlcygpKTtcclxuICB9IGVsc2UgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgQ291bnRlckludGVybmFsKSB7XHJcbiAgICBjb25zdCBjb3VudGVyID0ganNvbkVsZW1lbnQgYXMgQ291bnRlckludGVybmFsO1xyXG4gICAgcGJKU09ORWxlbWVudC5zZXRUeXBlKHRvQ291bnRlclR5cGUoY291bnRlci5nZXRUeXBlKCkpKTtcclxuICAgIHBiSlNPTkVsZW1lbnQuc2V0Q3JlYXRlZEF0KHRvVGltZVRpY2tldChqc29uRWxlbWVudC5nZXRDcmVhdGVkQXQoKSkpO1xyXG4gICAgcGJKU09ORWxlbWVudC5zZXRWYWx1ZShqc29uRWxlbWVudC50b0J5dGVzKCkpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoXHJcbiAgICAgIENvZGUuVW5pbXBsZW1lbnRlZCxcclxuICAgICAgYHVuaW1wbGVtZW50ZWQgZWxlbWVudDogJHtqc29uRWxlbWVudH1gLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwYkpTT05FbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogYHRvVGV4dE5vZGVJRGAgY29udmVydHMgdGhlIGdpdmVuIG1vZGVsIHRvIFByb3RvYnVmIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIHRvVGV4dE5vZGVJRChpZDogUkdBVHJlZVNwbGl0Tm9kZUlEKTogUGJUZXh0Tm9kZUlEIHtcclxuICBjb25zdCBwYlRleHROb2RlSUQgPSBuZXcgUGJUZXh0Tm9kZUlEKCk7XHJcbiAgcGJUZXh0Tm9kZUlELnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoaWQuZ2V0Q3JlYXRlZEF0KCkpKTtcclxuICBwYlRleHROb2RlSUQuc2V0T2Zmc2V0KGlkLmdldE9mZnNldCgpKTtcclxuICByZXR1cm4gcGJUZXh0Tm9kZUlEO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvVGV4dE5vZGVQb3NgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b1RleHROb2RlUG9zKHBvczogUkdBVHJlZVNwbGl0Tm9kZVBvcyk6IFBiVGV4dE5vZGVQb3Mge1xyXG4gIGNvbnN0IHBiVGV4dE5vZGVQb3MgPSBuZXcgUGJUZXh0Tm9kZVBvcygpO1xyXG4gIHBiVGV4dE5vZGVQb3Muc2V0Q3JlYXRlZEF0KHRvVGltZVRpY2tldChwb3MuZ2V0SUQoKS5nZXRDcmVhdGVkQXQoKSkpO1xyXG4gIHBiVGV4dE5vZGVQb3Muc2V0T2Zmc2V0KHBvcy5nZXRJRCgpLmdldE9mZnNldCgpKTtcclxuICBwYlRleHROb2RlUG9zLnNldFJlbGF0aXZlT2Zmc2V0KHBvcy5nZXRSZWxhdGl2ZU9mZnNldCgpKTtcclxuICByZXR1cm4gcGJUZXh0Tm9kZVBvcztcclxufVxyXG5cclxuLyoqXHJcbiAqIGB0b09wZXJhdGlvbmAgY29udmVydHMgdGhlIGdpdmVuIG1vZGVsIHRvIFByb3RvYnVmIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIHRvT3BlcmF0aW9uKG9wZXJhdGlvbjogT3BlcmF0aW9uKTogUGJPcGVyYXRpb24ge1xyXG4gIGNvbnN0IHBiT3BlcmF0aW9uID0gbmV3IFBiT3BlcmF0aW9uKCk7XHJcblxyXG4gIGlmIChvcGVyYXRpb24gaW5zdGFuY2VvZiBTZXRPcGVyYXRpb24pIHtcclxuICAgIGNvbnN0IHNldE9wZXJhdGlvbiA9IG9wZXJhdGlvbiBhcyBTZXRPcGVyYXRpb247XHJcbiAgICBjb25zdCBwYlNldE9wZXJhdGlvbiA9IG5ldyBQYk9wZXJhdGlvbi5TZXQoKTtcclxuICAgIHBiU2V0T3BlcmF0aW9uLnNldFBhcmVudENyZWF0ZWRBdChcclxuICAgICAgdG9UaW1lVGlja2V0KHNldE9wZXJhdGlvbi5nZXRQYXJlbnRDcmVhdGVkQXQoKSksXHJcbiAgICApO1xyXG4gICAgcGJTZXRPcGVyYXRpb24uc2V0S2V5KHNldE9wZXJhdGlvbi5nZXRLZXkoKSk7XHJcbiAgICBwYlNldE9wZXJhdGlvbi5zZXRWYWx1ZSh0b0pTT05FbGVtZW50U2ltcGxlKHNldE9wZXJhdGlvbi5nZXRWYWx1ZSgpKSk7XHJcbiAgICBwYlNldE9wZXJhdGlvbi5zZXRFeGVjdXRlZEF0KHRvVGltZVRpY2tldChzZXRPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRTZXQocGJTZXRPcGVyYXRpb24pO1xyXG4gIH0gZWxzZSBpZiAob3BlcmF0aW9uIGluc3RhbmNlb2YgQWRkT3BlcmF0aW9uKSB7XHJcbiAgICBjb25zdCBhZGRPcGVyYXRpb24gPSBvcGVyYXRpb24gYXMgQWRkT3BlcmF0aW9uO1xyXG4gICAgY29uc3QgcGJBZGRPcGVyYXRpb24gPSBuZXcgUGJPcGVyYXRpb24uQWRkKCk7XHJcbiAgICBwYkFkZE9wZXJhdGlvbi5zZXRQYXJlbnRDcmVhdGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChhZGRPcGVyYXRpb24uZ2V0UGFyZW50Q3JlYXRlZEF0KCkpLFxyXG4gICAgKTtcclxuICAgIHBiQWRkT3BlcmF0aW9uLnNldFByZXZDcmVhdGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChhZGRPcGVyYXRpb24uZ2V0UHJldkNyZWF0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYkFkZE9wZXJhdGlvbi5zZXRWYWx1ZSh0b0pTT05FbGVtZW50U2ltcGxlKGFkZE9wZXJhdGlvbi5nZXRWYWx1ZSgpKSk7XHJcbiAgICBwYkFkZE9wZXJhdGlvbi5zZXRFeGVjdXRlZEF0KHRvVGltZVRpY2tldChhZGRPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRBZGQocGJBZGRPcGVyYXRpb24pO1xyXG4gIH0gZWxzZSBpZiAob3BlcmF0aW9uIGluc3RhbmNlb2YgTW92ZU9wZXJhdGlvbikge1xyXG4gICAgY29uc3QgbW92ZU9wZXJhdGlvbiA9IG9wZXJhdGlvbiBhcyBNb3ZlT3BlcmF0aW9uO1xyXG4gICAgY29uc3QgcGJNb3ZlT3BlcmF0aW9uID0gbmV3IFBiT3BlcmF0aW9uLk1vdmUoKTtcclxuICAgIHBiTW92ZU9wZXJhdGlvbi5zZXRQYXJlbnRDcmVhdGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChtb3ZlT3BlcmF0aW9uLmdldFBhcmVudENyZWF0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYk1vdmVPcGVyYXRpb24uc2V0UHJldkNyZWF0ZWRBdChcclxuICAgICAgdG9UaW1lVGlja2V0KG1vdmVPcGVyYXRpb24uZ2V0UHJldkNyZWF0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYk1vdmVPcGVyYXRpb24uc2V0Q3JlYXRlZEF0KHRvVGltZVRpY2tldChtb3ZlT3BlcmF0aW9uLmdldENyZWF0ZWRBdCgpKSk7XHJcbiAgICBwYk1vdmVPcGVyYXRpb24uc2V0RXhlY3V0ZWRBdCh0b1RpbWVUaWNrZXQobW92ZU9wZXJhdGlvbi5nZXRFeGVjdXRlZEF0KCkpKTtcclxuICAgIHBiT3BlcmF0aW9uLnNldE1vdmUocGJNb3ZlT3BlcmF0aW9uKTtcclxuICB9IGVsc2UgaWYgKG9wZXJhdGlvbiBpbnN0YW5jZW9mIFJlbW92ZU9wZXJhdGlvbikge1xyXG4gICAgY29uc3QgcmVtb3ZlT3BlcmF0aW9uID0gb3BlcmF0aW9uIGFzIFJlbW92ZU9wZXJhdGlvbjtcclxuICAgIGNvbnN0IHBiUmVtb3ZlT3BlcmF0aW9uID0gbmV3IFBiT3BlcmF0aW9uLlJlbW92ZSgpO1xyXG4gICAgcGJSZW1vdmVPcGVyYXRpb24uc2V0UGFyZW50Q3JlYXRlZEF0KFxyXG4gICAgICB0b1RpbWVUaWNrZXQocmVtb3ZlT3BlcmF0aW9uLmdldFBhcmVudENyZWF0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYlJlbW92ZU9wZXJhdGlvbi5zZXRDcmVhdGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChyZW1vdmVPcGVyYXRpb24uZ2V0Q3JlYXRlZEF0KCkpLFxyXG4gICAgKTtcclxuICAgIHBiUmVtb3ZlT3BlcmF0aW9uLnNldEV4ZWN1dGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChyZW1vdmVPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRSZW1vdmUocGJSZW1vdmVPcGVyYXRpb24pO1xyXG4gIH0gZWxzZSBpZiAob3BlcmF0aW9uIGluc3RhbmNlb2YgRWRpdE9wZXJhdGlvbikge1xyXG4gICAgY29uc3QgZWRpdE9wZXJhdGlvbiA9IG9wZXJhdGlvbiBhcyBFZGl0T3BlcmF0aW9uO1xyXG4gICAgY29uc3QgcGJFZGl0T3BlcmF0aW9uID0gbmV3IFBiT3BlcmF0aW9uLkVkaXQoKTtcclxuICAgIHBiRWRpdE9wZXJhdGlvbi5zZXRQYXJlbnRDcmVhdGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChlZGl0T3BlcmF0aW9uLmdldFBhcmVudENyZWF0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYkVkaXRPcGVyYXRpb24uc2V0RnJvbSh0b1RleHROb2RlUG9zKGVkaXRPcGVyYXRpb24uZ2V0RnJvbVBvcygpKSk7XHJcbiAgICBwYkVkaXRPcGVyYXRpb24uc2V0VG8odG9UZXh0Tm9kZVBvcyhlZGl0T3BlcmF0aW9uLmdldFRvUG9zKCkpKTtcclxuICAgIGNvbnN0IHBiQ3JlYXRlZEF0TWFwQnlBY3RvciA9IHBiRWRpdE9wZXJhdGlvbi5nZXRDcmVhdGVkQXRNYXBCeUFjdG9yTWFwKCk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlZGl0T3BlcmF0aW9uLmdldE1heENyZWF0ZWRBdE1hcEJ5QWN0b3IoKSkge1xyXG4gICAgICBwYkNyZWF0ZWRBdE1hcEJ5QWN0b3Iuc2V0KGtleSwgdG9UaW1lVGlja2V0KHZhbHVlKSEpO1xyXG4gICAgfVxyXG4gICAgcGJFZGl0T3BlcmF0aW9uLnNldENvbnRlbnQoZWRpdE9wZXJhdGlvbi5nZXRDb250ZW50KCkpO1xyXG4gICAgcGJFZGl0T3BlcmF0aW9uLnNldEV4ZWN1dGVkQXQodG9UaW1lVGlja2V0KGVkaXRPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRFZGl0KHBiRWRpdE9wZXJhdGlvbik7XHJcbiAgfSBlbHNlIGlmIChvcGVyYXRpb24gaW5zdGFuY2VvZiBTZWxlY3RPcGVyYXRpb24pIHtcclxuICAgIGNvbnN0IHNlbGVjdE9wZXJhdGlvbiA9IG9wZXJhdGlvbiBhcyBTZWxlY3RPcGVyYXRpb247XHJcbiAgICBjb25zdCBwYlNlbGVjdE9wZXJhdGlvbiA9IG5ldyBQYk9wZXJhdGlvbi5TZWxlY3QoKTtcclxuICAgIHBiU2VsZWN0T3BlcmF0aW9uLnNldFBhcmVudENyZWF0ZWRBdChcclxuICAgICAgdG9UaW1lVGlja2V0KHNlbGVjdE9wZXJhdGlvbi5nZXRQYXJlbnRDcmVhdGVkQXQoKSksXHJcbiAgICApO1xyXG4gICAgcGJTZWxlY3RPcGVyYXRpb24uc2V0RnJvbSh0b1RleHROb2RlUG9zKHNlbGVjdE9wZXJhdGlvbi5nZXRGcm9tUG9zKCkpKTtcclxuICAgIHBiU2VsZWN0T3BlcmF0aW9uLnNldFRvKHRvVGV4dE5vZGVQb3Moc2VsZWN0T3BlcmF0aW9uLmdldFRvUG9zKCkpKTtcclxuICAgIHBiU2VsZWN0T3BlcmF0aW9uLnNldEV4ZWN1dGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChzZWxlY3RPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRTZWxlY3QocGJTZWxlY3RPcGVyYXRpb24pO1xyXG4gIH0gZWxzZSBpZiAob3BlcmF0aW9uIGluc3RhbmNlb2YgUmljaEVkaXRPcGVyYXRpb24pIHtcclxuICAgIGNvbnN0IHJpY2hFZGl0T3BlcmF0aW9uID0gb3BlcmF0aW9uIGFzIFJpY2hFZGl0T3BlcmF0aW9uO1xyXG4gICAgY29uc3QgcGJSaWNoRWRpdE9wZXJhdGlvbiA9IG5ldyBQYk9wZXJhdGlvbi5SaWNoRWRpdCgpO1xyXG4gICAgcGJSaWNoRWRpdE9wZXJhdGlvbi5zZXRQYXJlbnRDcmVhdGVkQXQoXHJcbiAgICAgIHRvVGltZVRpY2tldChyaWNoRWRpdE9wZXJhdGlvbi5nZXRQYXJlbnRDcmVhdGVkQXQoKSksXHJcbiAgICApO1xyXG4gICAgcGJSaWNoRWRpdE9wZXJhdGlvbi5zZXRGcm9tKHRvVGV4dE5vZGVQb3MocmljaEVkaXRPcGVyYXRpb24uZ2V0RnJvbVBvcygpKSk7XHJcbiAgICBwYlJpY2hFZGl0T3BlcmF0aW9uLnNldFRvKHRvVGV4dE5vZGVQb3MocmljaEVkaXRPcGVyYXRpb24uZ2V0VG9Qb3MoKSkpO1xyXG4gICAgY29uc3QgcGJDcmVhdGVkQXRNYXBCeUFjdG9yID1cclxuICAgICAgcGJSaWNoRWRpdE9wZXJhdGlvbi5nZXRDcmVhdGVkQXRNYXBCeUFjdG9yTWFwKCk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByaWNoRWRpdE9wZXJhdGlvbi5nZXRNYXhDcmVhdGVkQXRNYXBCeUFjdG9yKCkpIHtcclxuICAgICAgcGJDcmVhdGVkQXRNYXBCeUFjdG9yLnNldChrZXksIHRvVGltZVRpY2tldCh2YWx1ZSkhKTtcclxuICAgIH1cclxuICAgIHBiUmljaEVkaXRPcGVyYXRpb24uc2V0Q29udGVudChyaWNoRWRpdE9wZXJhdGlvbi5nZXRDb250ZW50KCkpO1xyXG4gICAgY29uc3QgcGJBdHRyaWJ1dGVzID0gcGJSaWNoRWRpdE9wZXJhdGlvbi5nZXRBdHRyaWJ1dGVzTWFwKCk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByaWNoRWRpdE9wZXJhdGlvbi5nZXRBdHRyaWJ1dGVzKCkpIHtcclxuICAgICAgcGJBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHBiUmljaEVkaXRPcGVyYXRpb24uc2V0RXhlY3V0ZWRBdChcclxuICAgICAgdG9UaW1lVGlja2V0KHJpY2hFZGl0T3BlcmF0aW9uLmdldEV4ZWN1dGVkQXQoKSksXHJcbiAgICApO1xyXG4gICAgcGJPcGVyYXRpb24uc2V0UmljaEVkaXQocGJSaWNoRWRpdE9wZXJhdGlvbik7XHJcbiAgfSBlbHNlIGlmIChvcGVyYXRpb24gaW5zdGFuY2VvZiBTdHlsZU9wZXJhdGlvbikge1xyXG4gICAgY29uc3Qgc3R5bGVPcGVyYXRpb24gPSBvcGVyYXRpb24gYXMgU3R5bGVPcGVyYXRpb247XHJcbiAgICBjb25zdCBwYlN0eWxlT3BlcmF0aW9uID0gbmV3IFBiT3BlcmF0aW9uLlN0eWxlKCk7XHJcbiAgICBwYlN0eWxlT3BlcmF0aW9uLnNldFBhcmVudENyZWF0ZWRBdChcclxuICAgICAgdG9UaW1lVGlja2V0KHN0eWxlT3BlcmF0aW9uLmdldFBhcmVudENyZWF0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYlN0eWxlT3BlcmF0aW9uLnNldEZyb20odG9UZXh0Tm9kZVBvcyhzdHlsZU9wZXJhdGlvbi5nZXRGcm9tUG9zKCkpKTtcclxuICAgIHBiU3R5bGVPcGVyYXRpb24uc2V0VG8odG9UZXh0Tm9kZVBvcyhzdHlsZU9wZXJhdGlvbi5nZXRUb1BvcygpKSk7XHJcbiAgICBjb25zdCBwYkF0dHJpYnV0ZXMgPSBwYlN0eWxlT3BlcmF0aW9uLmdldEF0dHJpYnV0ZXNNYXAoKTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHN0eWxlT3BlcmF0aW9uLmdldEF0dHJpYnV0ZXMoKSkge1xyXG4gICAgICBwYkF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcGJTdHlsZU9wZXJhdGlvbi5zZXRFeGVjdXRlZEF0KFxyXG4gICAgICB0b1RpbWVUaWNrZXQoc3R5bGVPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRTdHlsZShwYlN0eWxlT3BlcmF0aW9uKTtcclxuICB9IGVsc2UgaWYgKG9wZXJhdGlvbiBpbnN0YW5jZW9mIEluY3JlYXNlT3BlcmF0aW9uKSB7XHJcbiAgICBjb25zdCBpbmNyZWFzZU9wZXJhdGlvbiA9IG9wZXJhdGlvbiBhcyBJbmNyZWFzZU9wZXJhdGlvbjtcclxuICAgIGNvbnN0IHBiSW5jcmVhc2VPcGVyYXRpb24gPSBuZXcgUGJPcGVyYXRpb24uSW5jcmVhc2UoKTtcclxuICAgIHBiSW5jcmVhc2VPcGVyYXRpb24uc2V0UGFyZW50Q3JlYXRlZEF0KFxyXG4gICAgICB0b1RpbWVUaWNrZXQoaW5jcmVhc2VPcGVyYXRpb24uZ2V0UGFyZW50Q3JlYXRlZEF0KCkpLFxyXG4gICAgKTtcclxuICAgIHBiSW5jcmVhc2VPcGVyYXRpb24uc2V0VmFsdWUoXHJcbiAgICAgIHRvSlNPTkVsZW1lbnRTaW1wbGUoaW5jcmVhc2VPcGVyYXRpb24uZ2V0VmFsdWUoKSksXHJcbiAgICApO1xyXG4gICAgcGJJbmNyZWFzZU9wZXJhdGlvbi5zZXRFeGVjdXRlZEF0KFxyXG4gICAgICB0b1RpbWVUaWNrZXQoaW5jcmVhc2VPcGVyYXRpb24uZ2V0RXhlY3V0ZWRBdCgpKSxcclxuICAgICk7XHJcbiAgICBwYk9wZXJhdGlvbi5zZXRJbmNyZWFzZShwYkluY3JlYXNlT3BlcmF0aW9uKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IFlvcmtpZUVycm9yKENvZGUuVW5pbXBsZW1lbnRlZCwgJ3VuaW1wbGVtZW50ZWQgb3BlcmF0aW9uJyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGJPcGVyYXRpb247XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9PcGVyYXRpb25zYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9PcGVyYXRpb25zKG9wZXJhdGlvbnM6IEFycmF5PE9wZXJhdGlvbj4pOiBBcnJheTxQYk9wZXJhdGlvbj4ge1xyXG4gIGNvbnN0IHBiT3BlcmF0aW9ucyA9IFtdO1xyXG4gIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIG9wZXJhdGlvbnMpIHtcclxuICAgIHBiT3BlcmF0aW9ucy5wdXNoKHRvT3BlcmF0aW9uKG9wZXJhdGlvbikpO1xyXG4gIH1cclxuICByZXR1cm4gcGJPcGVyYXRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvQ2hhbmdlYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9DaGFuZ2UoY2hhbmdlOiBDaGFuZ2UpOiBQYkNoYW5nZSB7XHJcbiAgY29uc3QgcGJDaGFuZ2UgPSBuZXcgUGJDaGFuZ2UoKTtcclxuICBwYkNoYW5nZS5zZXRJZCh0b0NoYW5nZUlEKGNoYW5nZS5nZXRJRCgpKSk7XHJcbiAgcGJDaGFuZ2Uuc2V0TWVzc2FnZShjaGFuZ2UuZ2V0TWVzc2FnZSgpISk7XHJcbiAgcGJDaGFuZ2Uuc2V0T3BlcmF0aW9uc0xpc3QodG9PcGVyYXRpb25zKGNoYW5nZS5nZXRPcGVyYXRpb25zKCkpKTtcclxuICByZXR1cm4gcGJDaGFuZ2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9DaGFuZ2VzYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9DaGFuZ2VzKGNoYW5nZXM6IEFycmF5PENoYW5nZT4pOiBBcnJheTxQYkNoYW5nZT4ge1xyXG4gIGNvbnN0IHBiQ2hhbmdlcyA9IFtdO1xyXG4gIGZvciAoY29uc3QgY2hhbmdlIG9mIGNoYW5nZXMpIHtcclxuICAgIHBiQ2hhbmdlcy5wdXNoKHRvQ2hhbmdlKGNoYW5nZSkpO1xyXG4gIH1cclxuICByZXR1cm4gcGJDaGFuZ2VzO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvUkhUTm9kZXNgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b1JIVE5vZGVzKHJodDogUkhUUFFNYXApOiBBcnJheTxQYlJIVE5vZGU+IHtcclxuICBjb25zdCBwYlJIVE5vZGVzID0gW107XHJcbiAgZm9yIChjb25zdCByaHROb2RlIG9mIHJodCkge1xyXG4gICAgY29uc3QgcGJSSFROb2RlID0gbmV3IFBiUkhUTm9kZSgpO1xyXG4gICAgcGJSSFROb2RlLnNldEtleShyaHROb2RlLmdldFN0cktleSgpKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgcGJSSFROb2RlLnNldEVsZW1lbnQodG9KU09ORWxlbWVudChyaHROb2RlLmdldFZhbHVlKCkpKTtcclxuICAgIHBiUkhUTm9kZXMucHVzaChwYlJIVE5vZGUpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBiUkhUTm9kZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9SR0FOb2Rlc2AgY29udmVydHMgdGhlIGdpdmVuIG1vZGVsIHRvIFByb3RvYnVmIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIHRvUkdBTm9kZXMocmdhVHJlZUxpc3Q6IFJHQVRyZWVMaXN0KTogQXJyYXk8UGJSR0FOb2RlPiB7XHJcbiAgY29uc3QgcGJSR0FOb2RlcyA9IFtdO1xyXG4gIGZvciAoY29uc3QgcmdhVHJlZUxpc3ROb2RlIG9mIHJnYVRyZWVMaXN0KSB7XHJcbiAgICBjb25zdCBwYlJHQU5vZGUgPSBuZXcgUGJSR0FOb2RlKCk7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHBiUkdBTm9kZS5zZXRFbGVtZW50KHRvSlNPTkVsZW1lbnQocmdhVHJlZUxpc3ROb2RlLmdldFZhbHVlKCkpKTtcclxuICAgIHBiUkdBTm9kZXMucHVzaChwYlJHQU5vZGUpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBiUkdBTm9kZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9UZXh0Tm9kZXNgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b1RleHROb2RlcyhyZ2FUcmVlU3BsaXQ6IFJHQVRyZWVTcGxpdDxzdHJpbmc+KTogQXJyYXk8UGJUZXh0Tm9kZT4ge1xyXG4gIGNvbnN0IHBiVGV4dE5vZGVzID0gW107XHJcbiAgZm9yIChjb25zdCB0ZXh0Tm9kZSBvZiByZ2FUcmVlU3BsaXQpIHtcclxuICAgIGNvbnN0IHBiVGV4dE5vZGUgPSBuZXcgUGJUZXh0Tm9kZSgpO1xyXG4gICAgcGJUZXh0Tm9kZS5zZXRJZCh0b1RleHROb2RlSUQodGV4dE5vZGUuZ2V0SUQoKSkpO1xyXG4gICAgcGJUZXh0Tm9kZS5zZXRWYWx1ZSh0ZXh0Tm9kZS5nZXRWYWx1ZSgpKTtcclxuICAgIHBiVGV4dE5vZGUuc2V0UmVtb3ZlZEF0KHRvVGltZVRpY2tldCh0ZXh0Tm9kZS5nZXRSZW1vdmVkQXQoKSkpO1xyXG5cclxuICAgIHBiVGV4dE5vZGVzLnB1c2gocGJUZXh0Tm9kZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGJUZXh0Tm9kZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9KU09OT2JqZWN0YCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9KU09OT2JqZWN0KG9iajogT2JqZWN0SW50ZXJuYWwpOiBQYkpTT05FbGVtZW50IHtcclxuICBjb25zdCBwYkpTT05PYmplY3QgPSBuZXcgUGJKU09ORWxlbWVudC5KU09OT2JqZWN0KCk7XHJcbiAgcGJKU09OT2JqZWN0LnNldE5vZGVzTGlzdCh0b1JIVE5vZGVzKG9iai5nZXRSSFQoKSkpO1xyXG4gIHBiSlNPTk9iamVjdC5zZXRDcmVhdGVkQXQodG9UaW1lVGlja2V0KG9iai5nZXRDcmVhdGVkQXQoKSkpO1xyXG4gIHBiSlNPTk9iamVjdC5zZXRNb3ZlZEF0KHRvVGltZVRpY2tldChvYmouZ2V0TW92ZWRBdCgpKSk7XHJcbiAgcGJKU09OT2JqZWN0LnNldFJlbW92ZWRBdCh0b1RpbWVUaWNrZXQob2JqLmdldFJlbW92ZWRBdCgpKSk7XHJcblxyXG4gIGNvbnN0IHBiSlNPTkVsZW1lbnQgPSBuZXcgUGJKU09ORWxlbWVudCgpO1xyXG4gIHBiSlNPTkVsZW1lbnQuc2V0SnNvbk9iamVjdChwYkpTT05PYmplY3QpO1xyXG4gIHJldHVybiBwYkpTT05FbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogYHRvSlNPTkFycmF5YCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9KU09OQXJyYXkoYXJyOiBBcnJheUludGVybmFsKTogUGJKU09ORWxlbWVudCB7XHJcbiAgY29uc3QgcGJKU09OQXJyYXkgPSBuZXcgUGJKU09ORWxlbWVudC5KU09OQXJyYXkoKTtcclxuICBwYkpTT05BcnJheS5zZXROb2Rlc0xpc3QodG9SR0FOb2RlcyhhcnIuZ2V0RWxlbWVudHMoKSkpO1xyXG4gIHBiSlNPTkFycmF5LnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoYXJyLmdldENyZWF0ZWRBdCgpKSk7XHJcbiAgcGJKU09OQXJyYXkuc2V0TW92ZWRBdCh0b1RpbWVUaWNrZXQoYXJyLmdldE1vdmVkQXQoKSkpO1xyXG4gIHBiSlNPTkFycmF5LnNldFJlbW92ZWRBdCh0b1RpbWVUaWNrZXQoYXJyLmdldFJlbW92ZWRBdCgpKSk7XHJcblxyXG4gIGNvbnN0IHBiSlNPTkVsZW1lbnQgPSBuZXcgUGJKU09ORWxlbWVudCgpO1xyXG4gIHBiSlNPTkVsZW1lbnQuc2V0SnNvbkFycmF5KHBiSlNPTkFycmF5KTtcclxuICByZXR1cm4gcGJKU09ORWxlbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIGB0b0pTT05QcmltaXRpdmVgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0pTT05QcmltaXRpdmUocHJpbWl0aXZlOiBKU09OUHJpbWl0aXZlKTogUGJKU09ORWxlbWVudCB7XHJcbiAgY29uc3QgcGJKU09OUHJpbWl0aXZlID0gbmV3IFBiSlNPTkVsZW1lbnQuUHJpbWl0aXZlKCk7XHJcbiAgcGJKU09OUHJpbWl0aXZlLnNldFR5cGUodG9WYWx1ZVR5cGUocHJpbWl0aXZlLmdldFR5cGUoKSkpO1xyXG4gIHBiSlNPTlByaW1pdGl2ZS5zZXRWYWx1ZShwcmltaXRpdmUudG9CeXRlcygpKTtcclxuICBwYkpTT05QcmltaXRpdmUuc2V0Q3JlYXRlZEF0KHRvVGltZVRpY2tldChwcmltaXRpdmUuZ2V0Q3JlYXRlZEF0KCkpKTtcclxuICBwYkpTT05QcmltaXRpdmUuc2V0TW92ZWRBdCh0b1RpbWVUaWNrZXQocHJpbWl0aXZlLmdldE1vdmVkQXQoKSkpO1xyXG4gIHBiSlNPTlByaW1pdGl2ZS5zZXRSZW1vdmVkQXQodG9UaW1lVGlja2V0KHByaW1pdGl2ZS5nZXRSZW1vdmVkQXQoKSkpO1xyXG5cclxuICBjb25zdCBwYkpTT05FbGVtZW50ID0gbmV3IFBiSlNPTkVsZW1lbnQoKTtcclxuICBwYkpTT05FbGVtZW50LnNldFByaW1pdGl2ZShwYkpTT05QcmltaXRpdmUpO1xyXG4gIHJldHVybiBwYkpTT05FbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogYHRvUGxhaW5UZXh0YCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9QbGFpblRleHQodGV4dDogUGxhaW5UZXh0SW50ZXJuYWwpOiBQYkpTT05FbGVtZW50IHtcclxuICBjb25zdCBwYlRleHQgPSBuZXcgUGJKU09ORWxlbWVudC5UZXh0KCk7XHJcbiAgcGJUZXh0LnNldE5vZGVzTGlzdCh0b1RleHROb2Rlcyh0ZXh0LmdldFJHQVRyZWVTcGxpdCgpKSk7XHJcbiAgcGJUZXh0LnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQodGV4dC5nZXRDcmVhdGVkQXQoKSkpO1xyXG4gIHBiVGV4dC5zZXRNb3ZlZEF0KHRvVGltZVRpY2tldCh0ZXh0LmdldE1vdmVkQXQoKSkpO1xyXG4gIHBiVGV4dC5zZXRSZW1vdmVkQXQodG9UaW1lVGlja2V0KHRleHQuZ2V0UmVtb3ZlZEF0KCkpKTtcclxuXHJcbiAgY29uc3QgcGJKU09ORWxlbWVudCA9IG5ldyBQYkpTT05FbGVtZW50KCk7XHJcbiAgcGJKU09ORWxlbWVudC5zZXRUZXh0KHBiVGV4dCk7XHJcbiAgcmV0dXJuIHBiSlNPTkVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9Db3VudGVyYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gbW9kZWwgdG8gUHJvdG9idWYgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9Db3VudGVyKGNvdW50ZXI6IENvdW50ZXJJbnRlcm5hbCk6IFBiSlNPTkVsZW1lbnQge1xyXG4gIGNvbnN0IHBiSlNPTkNvdW50ZXIgPSBuZXcgUGJKU09ORWxlbWVudC5Db3VudGVyKCk7XHJcbiAgcGJKU09OQ291bnRlci5zZXRUeXBlKHRvQ291bnRlclR5cGUoY291bnRlci5nZXRUeXBlKCkpKTtcclxuICBwYkpTT05Db3VudGVyLnNldFZhbHVlKGNvdW50ZXIudG9CeXRlcygpKTtcclxuICBwYkpTT05Db3VudGVyLnNldENyZWF0ZWRBdCh0b1RpbWVUaWNrZXQoY291bnRlci5nZXRDcmVhdGVkQXQoKSkpO1xyXG4gIHBiSlNPTkNvdW50ZXIuc2V0TW92ZWRBdCh0b1RpbWVUaWNrZXQoY291bnRlci5nZXRNb3ZlZEF0KCkpKTtcclxuICBwYkpTT05Db3VudGVyLnNldFJlbW92ZWRBdCh0b1RpbWVUaWNrZXQoY291bnRlci5nZXRSZW1vdmVkQXQoKSkpO1xyXG5cclxuICBjb25zdCBwYkpTT05FbGVtZW50ID0gbmV3IFBiSlNPTkVsZW1lbnQoKTtcclxuICBwYkpTT05FbGVtZW50LnNldENvdW50ZXIocGJKU09OQ291bnRlcik7XHJcbiAgcmV0dXJuIHBiSlNPTkVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdG9KU09ORWxlbWVudGAgY29udmVydHMgdGhlIGdpdmVuIG1vZGVsIHRvIFByb3RvYnVmIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIHRvSlNPTkVsZW1lbnQoanNvbkVsZW1lbnQ6IEpTT05FbGVtZW50KTogUGJKU09ORWxlbWVudCB7XHJcbiAgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0SW50ZXJuYWwpIHtcclxuICAgIHJldHVybiB0b0pTT05PYmplY3QoanNvbkVsZW1lbnQpO1xyXG4gIH0gZWxzZSBpZiAoanNvbkVsZW1lbnQgaW5zdGFuY2VvZiBBcnJheUludGVybmFsKSB7XHJcbiAgICByZXR1cm4gdG9KU09OQXJyYXkoanNvbkVsZW1lbnQpO1xyXG4gIH0gZWxzZSBpZiAoanNvbkVsZW1lbnQgaW5zdGFuY2VvZiBKU09OUHJpbWl0aXZlKSB7XHJcbiAgICByZXR1cm4gdG9KU09OUHJpbWl0aXZlKGpzb25FbGVtZW50KTtcclxuICB9IGVsc2UgaWYgKGpzb25FbGVtZW50IGluc3RhbmNlb2YgUGxhaW5UZXh0SW50ZXJuYWwpIHtcclxuICAgIHJldHVybiB0b1BsYWluVGV4dChqc29uRWxlbWVudCk7XHJcbiAgfSBlbHNlIGlmIChqc29uRWxlbWVudCBpbnN0YW5jZW9mIENvdW50ZXJJbnRlcm5hbCkge1xyXG4gICAgcmV0dXJuIHRvQ291bnRlcihqc29uRWxlbWVudCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBZb3JraWVFcnJvcihcclxuICAgICAgQ29kZS5VbmltcGxlbWVudGVkLFxyXG4gICAgICBgdW5pbXBsZW1lbnRlZCBlbGVtZW50OiAke2pzb25FbGVtZW50fWAsXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGB0b0NoYW5nZVBhY2tgIGNvbnZlcnRzIHRoZSBnaXZlbiBtb2RlbCB0byBQcm90b2J1ZiBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0NoYW5nZVBhY2socGFjazogQ2hhbmdlUGFjayk6IFBiQ2hhbmdlUGFjayB7XHJcbiAgY29uc3QgcGJDaGFuZ2VQYWNrID0gbmV3IFBiQ2hhbmdlUGFjaygpO1xyXG4gIHBiQ2hhbmdlUGFjay5zZXREb2N1bWVudEtleShwYWNrLmdldERvY3VtZW50S2V5KCkpO1xyXG4gIHBiQ2hhbmdlUGFjay5zZXRDaGVja3BvaW50KHRvQ2hlY2twb2ludChwYWNrLmdldENoZWNrcG9pbnQoKSkpO1xyXG4gIHBiQ2hhbmdlUGFjay5zZXRDaGFuZ2VzTGlzdCh0b0NoYW5nZXMocGFjay5nZXRDaGFuZ2VzKCkpKTtcclxuICBwYkNoYW5nZVBhY2suc2V0U25hcHNob3QocGFjay5nZXRTbmFwc2hvdCgpISk7XHJcbiAgcGJDaGFuZ2VQYWNrLnNldE1pblN5bmNlZFRpY2tldCh0b1RpbWVUaWNrZXQocGFjay5nZXRNaW5TeW5jZWRUaWNrZXQoKSkpO1xyXG4gIHJldHVybiBwYkNoYW5nZVBhY2s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgZnJvbUNoYW5nZUlEYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21DaGFuZ2VJRChwYkNoYW5nZUlEOiBQYkNoYW5nZUlEKTogQ2hhbmdlSUQge1xyXG4gIHJldHVybiBDaGFuZ2VJRC5vZihcclxuICAgIHBiQ2hhbmdlSUQuZ2V0Q2xpZW50U2VxKCksXHJcbiAgICBMb25nLmZyb21TdHJpbmcocGJDaGFuZ2VJRC5nZXRMYW1wb3J0KCksIHRydWUpLFxyXG4gICAgdG9IZXhTdHJpbmcocGJDaGFuZ2VJRC5nZXRBY3RvcklkX2FzVTgoKSksXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBmcm9tVGltZVRpY2tldGAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tVGltZVRpY2tldChwYlRpbWVUaWNrZXQ/OiBQYlRpbWVUaWNrZXQpOiBUaW1lVGlja2V0IHwgdW5kZWZpbmVkIHtcclxuICBpZiAoIXBiVGltZVRpY2tldCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFRpbWVUaWNrZXQub2YoXHJcbiAgICBMb25nLmZyb21TdHJpbmcocGJUaW1lVGlja2V0LmdldExhbXBvcnQoKSwgdHJ1ZSksXHJcbiAgICBwYlRpbWVUaWNrZXQuZ2V0RGVsaW1pdGVyKCksXHJcbiAgICB0b0hleFN0cmluZyhwYlRpbWVUaWNrZXQuZ2V0QWN0b3JJZF9hc1U4KCkpLFxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgZnJvbVZhbHVlVHlwZWAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tVmFsdWVUeXBlKHBiVmFsdWVUeXBlOiBQYlZhbHVlVHlwZSk6IFByaW1pdGl2ZVR5cGUge1xyXG4gIHN3aXRjaCAocGJWYWx1ZVR5cGUpIHtcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuTlVMTDpcclxuICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuTnVsbDtcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuQk9PTEVBTjpcclxuICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuQm9vbGVhbjtcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuSU5URUdFUjpcclxuICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuSW50ZWdlcjtcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuTE9ORzpcclxuICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuTG9uZztcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuRE9VQkxFOlxyXG4gICAgICByZXR1cm4gUHJpbWl0aXZlVHlwZS5Eb3VibGU7XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLlNUUklORzpcclxuICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuU3RyaW5nO1xyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5CWVRFUzpcclxuICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuQnl0ZXM7XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLkRBVEU6XHJcbiAgICAgIHJldHVybiBQcmltaXRpdmVUeXBlLkRhdGU7XHJcbiAgfVxyXG4gIHRocm93IG5ldyBZb3JraWVFcnJvcihcclxuICAgIENvZGUuVW5pbXBsZW1lbnRlZCxcclxuICAgIGB1bmltcGxlbWVudGVkIHZhbHVlIHR5cGU6ICR7cGJWYWx1ZVR5cGV9YCxcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21Db3VudGVyVHlwZWAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tQ291bnRlclR5cGUocGJWYWx1ZVR5cGU6IFBiVmFsdWVUeXBlKTogQ291bnRlclR5cGUge1xyXG4gIHN3aXRjaCAocGJWYWx1ZVR5cGUpIHtcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuSU5URUdFUl9DTlQ6XHJcbiAgICAgIHJldHVybiBDb3VudGVyVHlwZS5JbnRlZ2VyQ250O1xyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5MT05HX0NOVDpcclxuICAgICAgcmV0dXJuIENvdW50ZXJUeXBlLkxvbmdDbnQ7XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLkRPVUJMRV9DTlQ6XHJcbiAgICAgIHJldHVybiBDb3VudGVyVHlwZS5Eb3VibGVDbnQ7XHJcbiAgfVxyXG4gIHRocm93IG5ldyBZb3JraWVFcnJvcihcclxuICAgIENvZGUuVW5pbXBsZW1lbnRlZCxcclxuICAgIGB1bmltcGxlbWVudGVkIHZhbHVlIHR5cGU6ICR7cGJWYWx1ZVR5cGV9YCxcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21KU09ORWxlbWVudFNpbXBsZWAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tSlNPTkVsZW1lbnRTaW1wbGUoXHJcbiAgcGJKU09ORWxlbWVudDogUGJKU09ORWxlbWVudFNpbXBsZSxcclxuKTogSlNPTkVsZW1lbnQge1xyXG4gIHN3aXRjaCAocGJKU09ORWxlbWVudC5nZXRUeXBlKCkpIHtcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuSlNPTl9PQkpFQ1Q6XHJcbiAgICAgIHJldHVybiBPYmplY3RJbnRlcm5hbC5jcmVhdGUoXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJKU09ORWxlbWVudC5nZXRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICApO1xyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5KU09OX0FSUkFZOlxyXG4gICAgICByZXR1cm4gQXJyYXlJbnRlcm5hbC5jcmVhdGUoXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJKU09ORWxlbWVudC5nZXRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICApO1xyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5URVhUOlxyXG4gICAgICByZXR1cm4gUGxhaW5UZXh0SW50ZXJuYWwuY3JlYXRlKFxyXG4gICAgICAgIFJHQVRyZWVTcGxpdC5jcmVhdGUoKSxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkpTT05FbGVtZW50LmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLlJJQ0hfVEVYVDpcclxuICAgICAgcmV0dXJuIFJpY2hUZXh0SW50ZXJuYWwuY3JlYXRlKFxyXG4gICAgICAgIFJHQVRyZWVTcGxpdC5jcmVhdGUoKSxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkpTT05FbGVtZW50LmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLk5VTEw6XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLkJPT0xFQU46XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLklOVEVHRVI6XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLkxPTkc6XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLkRPVUJMRTpcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuU1RSSU5HOlxyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5CWVRFUzpcclxuICAgIGNhc2UgUGJWYWx1ZVR5cGUuREFURTpcclxuICAgICAgcmV0dXJuIEpTT05QcmltaXRpdmUub2YoXHJcbiAgICAgICAgSlNPTlByaW1pdGl2ZS52YWx1ZUZyb21CeXRlcyhcclxuICAgICAgICAgIGZyb21WYWx1ZVR5cGUocGJKU09ORWxlbWVudC5nZXRUeXBlKCkpLFxyXG4gICAgICAgICAgcGJKU09ORWxlbWVudC5nZXRWYWx1ZV9hc1U4KCksXHJcbiAgICAgICAgKSxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkpTT05FbGVtZW50LmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgICBjYXNlIFBiVmFsdWVUeXBlLklOVEVHRVJfQ05UOlxyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5ET1VCTEVfQ05UOlxyXG4gICAgY2FzZSBQYlZhbHVlVHlwZS5MT05HX0NOVDpcclxuICAgICAgcmV0dXJuIENvdW50ZXJJbnRlcm5hbC5vZihcclxuICAgICAgICBDb3VudGVySW50ZXJuYWwudmFsdWVGcm9tQnl0ZXMoXHJcbiAgICAgICAgICBmcm9tQ291bnRlclR5cGUocGJKU09ORWxlbWVudC5nZXRUeXBlKCkpLFxyXG4gICAgICAgICAgcGJKU09ORWxlbWVudC5nZXRWYWx1ZV9hc1U4KCksXHJcbiAgICAgICAgKSxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkpTT05FbGVtZW50LmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoXHJcbiAgICBDb2RlLlVuaW1wbGVtZW50ZWQsXHJcbiAgICBgdW5pbXBsZW1lbnRlZCBlbGVtZW50OiAke3BiSlNPTkVsZW1lbnR9YCxcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21UZXh0Tm9kZVBvc2AgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tVGV4dE5vZGVQb3MocGJUZXh0Tm9kZVBvczogUGJUZXh0Tm9kZVBvcyk6IFJHQVRyZWVTcGxpdE5vZGVQb3Mge1xyXG4gIHJldHVybiBSR0FUcmVlU3BsaXROb2RlUG9zLm9mKFxyXG4gICAgUkdBVHJlZVNwbGl0Tm9kZUlELm9mKFxyXG4gICAgICBmcm9tVGltZVRpY2tldChwYlRleHROb2RlUG9zLmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgICAgIHBiVGV4dE5vZGVQb3MuZ2V0T2Zmc2V0KCksXHJcbiAgICApLFxyXG4gICAgcGJUZXh0Tm9kZVBvcy5nZXRSZWxhdGl2ZU9mZnNldCgpLFxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgZnJvbVRleHROb2RlSURgIGNvbnZlcnRzIHRoZSBnaXZlbiBQcm90b2J1ZiBmb3JtYXQgdG8gbW9kZWwgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbVRleHROb2RlSUQocGJUZXh0Tm9kZUlEOiBQYlRleHROb2RlSUQpOiBSR0FUcmVlU3BsaXROb2RlSUQge1xyXG4gIHJldHVybiBSR0FUcmVlU3BsaXROb2RlSUQub2YoXHJcbiAgICBmcm9tVGltZVRpY2tldChwYlRleHROb2RlSUQuZ2V0Q3JlYXRlZEF0KCkpISxcclxuICAgIHBiVGV4dE5vZGVJRC5nZXRPZmZzZXQoKSxcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21UZXh0Tm9kZWAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tVGV4dE5vZGUocGJUZXh0Tm9kZTogUGJUZXh0Tm9kZSk6IFJHQVRyZWVTcGxpdE5vZGU8c3RyaW5nPiB7XHJcbiAgY29uc3QgdGV4dE5vZGUgPSBSR0FUcmVlU3BsaXROb2RlLmNyZWF0ZShcclxuICAgIGZyb21UZXh0Tm9kZUlEKHBiVGV4dE5vZGUuZ2V0SWQoKSEpLFxyXG4gICAgcGJUZXh0Tm9kZS5nZXRWYWx1ZSgpLFxyXG4gICk7XHJcbiAgdGV4dE5vZGUucmVtb3ZlKGZyb21UaW1lVGlja2V0KHBiVGV4dE5vZGUuZ2V0UmVtb3ZlZEF0KCkpKTtcclxuICByZXR1cm4gdGV4dE5vZGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgZnJvbVJpY2hUZXh0Tm9kZWAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tUmljaFRleHROb2RlKFxyXG4gIHBiVGV4dE5vZGU6IFBiUmljaFRleHROb2RlLFxyXG4pOiBSR0FUcmVlU3BsaXROb2RlPFJpY2hUZXh0VmFsdWU+IHtcclxuICBjb25zdCB0ZXh0Tm9kZSA9IFJHQVRyZWVTcGxpdE5vZGUuY3JlYXRlKFxyXG4gICAgZnJvbVRleHROb2RlSUQocGJUZXh0Tm9kZS5nZXRJZCgpISksXHJcbiAgICBSaWNoVGV4dFZhbHVlLmNyZWF0ZShwYlRleHROb2RlLmdldFZhbHVlKCkpLFxyXG4gICk7XHJcbiAgdGV4dE5vZGUucmVtb3ZlKGZyb21UaW1lVGlja2V0KHBiVGV4dE5vZGUuZ2V0UmVtb3ZlZEF0KCkpKTtcclxuICByZXR1cm4gdGV4dE5vZGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgZnJvbU9wZXJhdGlvbnNgIGNvbnZlcnRzIHRoZSBnaXZlbiBQcm90b2J1ZiBmb3JtYXQgdG8gbW9kZWwgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbU9wZXJhdGlvbnMocGJPcGVyYXRpb25zOiBBcnJheTxQYk9wZXJhdGlvbj4pOiBBcnJheTxPcGVyYXRpb24+IHtcclxuICBjb25zdCBvcGVyYXRpb25zID0gW107XHJcblxyXG4gIGZvciAoY29uc3QgcGJPcGVyYXRpb24gb2YgcGJPcGVyYXRpb25zKSB7XHJcbiAgICBsZXQgb3BlcmF0aW9uOiBPcGVyYXRpb247XHJcbiAgICBpZiAocGJPcGVyYXRpb24uaGFzU2V0KCkpIHtcclxuICAgICAgY29uc3QgcGJTZXRPcGVyYXRpb24gPSBwYk9wZXJhdGlvbi5nZXRTZXQoKTtcclxuICAgICAgb3BlcmF0aW9uID0gU2V0T3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICBwYlNldE9wZXJhdGlvbiEuZ2V0S2V5KCksXHJcbiAgICAgICAgZnJvbUpTT05FbGVtZW50U2ltcGxlKHBiU2V0T3BlcmF0aW9uIS5nZXRWYWx1ZSgpISksXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJTZXRPcGVyYXRpb24hLmdldFBhcmVudENyZWF0ZWRBdCgpKSEsXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJTZXRPcGVyYXRpb24hLmdldEV4ZWN1dGVkQXQoKSkhLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChwYk9wZXJhdGlvbi5oYXNBZGQoKSkge1xyXG4gICAgICBjb25zdCBwYkFkZE9wZXJhdGlvbiA9IHBiT3BlcmF0aW9uLmdldEFkZCgpO1xyXG4gICAgICBvcGVyYXRpb24gPSBBZGRPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiQWRkT3BlcmF0aW9uIS5nZXRQYXJlbnRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiQWRkT3BlcmF0aW9uIS5nZXRQcmV2Q3JlYXRlZEF0KCkpISxcclxuICAgICAgICBmcm9tSlNPTkVsZW1lbnRTaW1wbGUocGJBZGRPcGVyYXRpb24hLmdldFZhbHVlKCkhKSxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkFkZE9wZXJhdGlvbiEuZ2V0RXhlY3V0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKHBiT3BlcmF0aW9uLmhhc01vdmUoKSkge1xyXG4gICAgICBjb25zdCBwYk1vdmVPcGVyYXRpb24gPSBwYk9wZXJhdGlvbi5nZXRNb3ZlKCk7XHJcbiAgICAgIG9wZXJhdGlvbiA9IE1vdmVPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiTW92ZU9wZXJhdGlvbiEuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpISxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYk1vdmVPcGVyYXRpb24hLmdldFByZXZDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiTW92ZU9wZXJhdGlvbiEuZ2V0Q3JlYXRlZEF0KCkpISxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYk1vdmVPcGVyYXRpb24hLmdldEV4ZWN1dGVkQXQoKSkhLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChwYk9wZXJhdGlvbi5oYXNSZW1vdmUoKSkge1xyXG4gICAgICBjb25zdCBwYlJlbW92ZU9wZXJhdGlvbiA9IHBiT3BlcmF0aW9uLmdldFJlbW92ZSgpO1xyXG4gICAgICBvcGVyYXRpb24gPSBSZW1vdmVPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiUmVtb3ZlT3BlcmF0aW9uIS5nZXRQYXJlbnRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiUmVtb3ZlT3BlcmF0aW9uIS5nZXRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiUmVtb3ZlT3BlcmF0aW9uIS5nZXRFeGVjdXRlZEF0KCkpISxcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAocGJPcGVyYXRpb24uaGFzRWRpdCgpKSB7XHJcbiAgICAgIGNvbnN0IHBiRWRpdE9wZXJhdGlvbiA9IHBiT3BlcmF0aW9uLmdldEVkaXQoKTtcclxuICAgICAgY29uc3QgY3JlYXRlZEF0TWFwQnlBY3RvciA9IG5ldyBNYXAoKTtcclxuICAgICAgcGJFZGl0T3BlcmF0aW9uIS5nZXRDcmVhdGVkQXRNYXBCeUFjdG9yTWFwKCkuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgIGNyZWF0ZWRBdE1hcEJ5QWN0b3Iuc2V0KGtleSwgZnJvbVRpbWVUaWNrZXQodmFsdWUpKTtcclxuICAgICAgfSk7XHJcbiAgICAgIG9wZXJhdGlvbiA9IEVkaXRPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiRWRpdE9wZXJhdGlvbiEuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpISxcclxuICAgICAgICBmcm9tVGV4dE5vZGVQb3MocGJFZGl0T3BlcmF0aW9uIS5nZXRGcm9tKCkhKSxcclxuICAgICAgICBmcm9tVGV4dE5vZGVQb3MocGJFZGl0T3BlcmF0aW9uIS5nZXRUbygpISksXHJcbiAgICAgICAgY3JlYXRlZEF0TWFwQnlBY3RvcixcclxuICAgICAgICBwYkVkaXRPcGVyYXRpb24hLmdldENvbnRlbnQoKSxcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkVkaXRPcGVyYXRpb24hLmdldEV4ZWN1dGVkQXQoKSkhLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChwYk9wZXJhdGlvbi5oYXNTZWxlY3QoKSkge1xyXG4gICAgICBjb25zdCBwYlNlbGVjdE9wZXJhdGlvbiA9IHBiT3BlcmF0aW9uLmdldFNlbGVjdCgpO1xyXG4gICAgICBvcGVyYXRpb24gPSBTZWxlY3RPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIGZyb21UaW1lVGlja2V0KHBiU2VsZWN0T3BlcmF0aW9uIS5nZXRQYXJlbnRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UZXh0Tm9kZVBvcyhwYlNlbGVjdE9wZXJhdGlvbiEuZ2V0RnJvbSgpISksXHJcbiAgICAgICAgZnJvbVRleHROb2RlUG9zKHBiU2VsZWN0T3BlcmF0aW9uIS5nZXRUbygpISksXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJTZWxlY3RPcGVyYXRpb24hLmdldEV4ZWN1dGVkQXQoKSkhLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChwYk9wZXJhdGlvbi5oYXNSaWNoRWRpdCgpKSB7XHJcbiAgICAgIGNvbnN0IHBiRWRpdE9wZXJhdGlvbiA9IHBiT3BlcmF0aW9uLmdldFJpY2hFZGl0KCk7XHJcbiAgICAgIGNvbnN0IGNyZWF0ZWRBdE1hcEJ5QWN0b3IgPSBuZXcgTWFwKCk7XHJcbiAgICAgIHBiRWRpdE9wZXJhdGlvbiEuZ2V0Q3JlYXRlZEF0TWFwQnlBY3Rvck1hcCgpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICBjcmVhdGVkQXRNYXBCeUFjdG9yLnNldChrZXksIGZyb21UaW1lVGlja2V0KHZhbHVlKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xyXG4gICAgICBwYkVkaXRPcGVyYXRpb24hLmdldEF0dHJpYnV0ZXNNYXAoKS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgYXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBvcGVyYXRpb24gPSBSaWNoRWRpdE9wZXJhdGlvbi5jcmVhdGUoXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJFZGl0T3BlcmF0aW9uIS5nZXRQYXJlbnRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UZXh0Tm9kZVBvcyhwYkVkaXRPcGVyYXRpb24hLmdldEZyb20oKSEpLFxyXG4gICAgICAgIGZyb21UZXh0Tm9kZVBvcyhwYkVkaXRPcGVyYXRpb24hLmdldFRvKCkhKSxcclxuICAgICAgICBjcmVhdGVkQXRNYXBCeUFjdG9yLFxyXG4gICAgICAgIHBiRWRpdE9wZXJhdGlvbiEuZ2V0Q29udGVudCgpLFxyXG4gICAgICAgIGF0dHJpYnV0ZXMsXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJFZGl0T3BlcmF0aW9uIS5nZXRFeGVjdXRlZEF0KCkpISxcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAocGJPcGVyYXRpb24uaGFzU3R5bGUoKSkge1xyXG4gICAgICBjb25zdCBwYlN0eWxlT3BlcmF0aW9uID0gcGJPcGVyYXRpb24uZ2V0U3R5bGUoKTtcclxuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgcGJTdHlsZU9wZXJhdGlvbiEuZ2V0QXR0cmlidXRlc01hcCgpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICBhdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgfSk7XHJcbiAgICAgIG9wZXJhdGlvbiA9IFN0eWxlT3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYlN0eWxlT3BlcmF0aW9uIS5nZXRQYXJlbnRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21UZXh0Tm9kZVBvcyhwYlN0eWxlT3BlcmF0aW9uIS5nZXRGcm9tKCkhKSxcclxuICAgICAgICBmcm9tVGV4dE5vZGVQb3MocGJTdHlsZU9wZXJhdGlvbiEuZ2V0VG8oKSEpLFxyXG4gICAgICAgIGF0dHJpYnV0ZXMsXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJTdHlsZU9wZXJhdGlvbiEuZ2V0RXhlY3V0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKHBiT3BlcmF0aW9uLmhhc0luY3JlYXNlKCkpIHtcclxuICAgICAgY29uc3QgcGJJbmNyZWFzZU9wZXJhdGlvbiA9IHBiT3BlcmF0aW9uLmdldEluY3JlYXNlKCk7XHJcbiAgICAgIG9wZXJhdGlvbiA9IEluY3JlYXNlT3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICBmcm9tVGltZVRpY2tldChwYkluY3JlYXNlT3BlcmF0aW9uIS5nZXRQYXJlbnRDcmVhdGVkQXQoKSkhLFxyXG4gICAgICAgIGZyb21KU09ORWxlbWVudFNpbXBsZShwYkluY3JlYXNlT3BlcmF0aW9uIS5nZXRWYWx1ZSgpISksXHJcbiAgICAgICAgZnJvbVRpbWVUaWNrZXQocGJJbmNyZWFzZU9wZXJhdGlvbiEuZ2V0RXhlY3V0ZWRBdCgpKSEsXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoQ29kZS5VbmltcGxlbWVudGVkLCBgdW5pbXBsZW1lbnRlZCBvcGVyYXRpb25gKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVyYXRpb25zLnB1c2gob3BlcmF0aW9uKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBvcGVyYXRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21DaGFuZ2VzYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21DaGFuZ2VzKHBiQ2hhbmdlczogQXJyYXk8UGJDaGFuZ2U+KTogQXJyYXk8Q2hhbmdlPiB7XHJcbiAgY29uc3QgY2hhbmdlcyA9IFtdO1xyXG5cclxuICBmb3IgKGNvbnN0IHBiQ2hhbmdlIG9mIHBiQ2hhbmdlcykge1xyXG4gICAgY2hhbmdlcy5wdXNoKFxyXG4gICAgICBDaGFuZ2UuY3JlYXRlKFxyXG4gICAgICAgIGZyb21DaGFuZ2VJRChwYkNoYW5nZS5nZXRJZCgpISksXHJcbiAgICAgICAgZnJvbU9wZXJhdGlvbnMocGJDaGFuZ2UuZ2V0T3BlcmF0aW9uc0xpc3QoKSksXHJcbiAgICAgICAgcGJDaGFuZ2UuZ2V0TWVzc2FnZSgpLFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjaGFuZ2VzO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21DaGVja3BvaW50YCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21DaGVja3BvaW50KHBiQ2hlY2twb2ludDogUGJDaGVja3BvaW50KTogQ2hlY2twb2ludCB7XHJcbiAgcmV0dXJuIENoZWNrcG9pbnQub2YoXHJcbiAgICBMb25nLmZyb21TdHJpbmcocGJDaGVja3BvaW50LmdldFNlcnZlclNlcSgpLCB0cnVlKSxcclxuICAgIHBiQ2hlY2twb2ludC5nZXRDbGllbnRTZXEoKSxcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21DaGFuZ2VQYWNrYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21DaGFuZ2VQYWNrKHBiUGFjazogUGJDaGFuZ2VQYWNrKTogQ2hhbmdlUGFjayB7XHJcbiAgcmV0dXJuIENoYW5nZVBhY2suY3JlYXRlKFxyXG4gICAgcGJQYWNrLmdldERvY3VtZW50S2V5KCkhLFxyXG4gICAgZnJvbUNoZWNrcG9pbnQocGJQYWNrLmdldENoZWNrcG9pbnQoKSEpLFxyXG4gICAgZnJvbUNoYW5nZXMocGJQYWNrLmdldENoYW5nZXNMaXN0KCkpLFxyXG4gICAgcGJQYWNrLmdldFNuYXBzaG90X2FzVTgoKSxcclxuICAgIGZyb21UaW1lVGlja2V0KHBiUGFjay5nZXRNaW5TeW5jZWRUaWNrZXQoKSksXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBmcm9tSlNPTk9iamVjdGAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tSlNPTk9iamVjdChwYk9iamVjdDogUGJKU09ORWxlbWVudC5KU09OT2JqZWN0KTogT2JqZWN0SW50ZXJuYWwge1xyXG4gIGNvbnN0IHJodCA9IG5ldyBSSFRQUU1hcCgpO1xyXG4gIGZvciAoY29uc3QgcGJSSFROb2RlIG9mIHBiT2JqZWN0LmdldE5vZGVzTGlzdCgpKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHJodC5zZXQocGJSSFROb2RlLmdldEtleSgpLCBmcm9tSlNPTkVsZW1lbnQocGJSSFROb2RlLmdldEVsZW1lbnQoKSEpKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG9iaiA9IG5ldyBPYmplY3RJbnRlcm5hbChmcm9tVGltZVRpY2tldChwYk9iamVjdC5nZXRDcmVhdGVkQXQoKSkhLCByaHQpO1xyXG4gIG9iai5zZXRNb3ZlZEF0KGZyb21UaW1lVGlja2V0KHBiT2JqZWN0LmdldE1vdmVkQXQoKSkpO1xyXG4gIG9iai5zZXRSZW1vdmVkQXQoZnJvbVRpbWVUaWNrZXQocGJPYmplY3QuZ2V0UmVtb3ZlZEF0KCkpKTtcclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21KU09OQXJyYXlgIGNvbnZlcnRzIHRoZSBnaXZlbiBQcm90b2J1ZiBmb3JtYXQgdG8gbW9kZWwgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbUpTT05BcnJheShwYkFycmF5OiBQYkpTT05FbGVtZW50LkpTT05BcnJheSk6IEFycmF5SW50ZXJuYWwge1xyXG4gIGNvbnN0IHJnYVRyZWVMaXN0ID0gbmV3IFJHQVRyZWVMaXN0KCk7XHJcbiAgZm9yIChjb25zdCBwYlJHQU5vZGUgb2YgcGJBcnJheS5nZXROb2Rlc0xpc3QoKSkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICByZ2FUcmVlTGlzdC5pbnNlcnQoZnJvbUpTT05FbGVtZW50KHBiUkdBTm9kZS5nZXRFbGVtZW50KCkhKSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBhcnIgPSBuZXcgQXJyYXlJbnRlcm5hbChcclxuICAgIGZyb21UaW1lVGlja2V0KHBiQXJyYXkuZ2V0Q3JlYXRlZEF0KCkpISxcclxuICAgIHJnYVRyZWVMaXN0LFxyXG4gICk7XHJcbiAgYXJyLnNldE1vdmVkQXQoZnJvbVRpbWVUaWNrZXQocGJBcnJheS5nZXRNb3ZlZEF0KCkpKTtcclxuICBhcnIuc2V0UmVtb3ZlZEF0KGZyb21UaW1lVGlja2V0KHBiQXJyYXkuZ2V0UmVtb3ZlZEF0KCkpKTtcclxuICByZXR1cm4gYXJyO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21KU09OUHJpbWl0aXZlYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21KU09OUHJpbWl0aXZlKFxyXG4gIHBiUHJpbWl0aXZlOiBQYkpTT05FbGVtZW50LlByaW1pdGl2ZSxcclxuKTogSlNPTlByaW1pdGl2ZSB7XHJcbiAgY29uc3QgcHJpbWl0aXZlID0gSlNPTlByaW1pdGl2ZS5vZihcclxuICAgIEpTT05QcmltaXRpdmUudmFsdWVGcm9tQnl0ZXMoXHJcbiAgICAgIGZyb21WYWx1ZVR5cGUocGJQcmltaXRpdmUuZ2V0VHlwZSgpKSxcclxuICAgICAgcGJQcmltaXRpdmUuZ2V0VmFsdWVfYXNVOCgpLFxyXG4gICAgKSxcclxuICAgIGZyb21UaW1lVGlja2V0KHBiUHJpbWl0aXZlLmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgKTtcclxuICBwcmltaXRpdmUuc2V0TW92ZWRBdChmcm9tVGltZVRpY2tldChwYlByaW1pdGl2ZS5nZXRNb3ZlZEF0KCkpKTtcclxuICBwcmltaXRpdmUuc2V0UmVtb3ZlZEF0KGZyb21UaW1lVGlja2V0KHBiUHJpbWl0aXZlLmdldFJlbW92ZWRBdCgpKSk7XHJcbiAgcmV0dXJuIHByaW1pdGl2ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBmcm9tSlNPTlRleHRgIGNvbnZlcnRzIHRoZSBnaXZlbiBQcm90b2J1ZiBmb3JtYXQgdG8gbW9kZWwgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbUpTT05UZXh0KHBiVGV4dDogUGJKU09ORWxlbWVudC5UZXh0KTogUGxhaW5UZXh0SW50ZXJuYWwge1xyXG4gIGNvbnN0IHJnYVRyZWVTcGxpdCA9IG5ldyBSR0FUcmVlU3BsaXQ8c3RyaW5nPigpO1xyXG5cclxuICBsZXQgcHJldiA9IHJnYVRyZWVTcGxpdC5nZXRIZWFkKCk7XHJcbiAgZm9yIChjb25zdCBwYk5vZGUgb2YgcGJUZXh0LmdldE5vZGVzTGlzdCgpKSB7XHJcbiAgICBjb25zdCBjdXJyZW50ID0gcmdhVHJlZVNwbGl0Lmluc2VydEFmdGVyKHByZXYsIGZyb21UZXh0Tm9kZShwYk5vZGUpKTtcclxuICAgIGlmIChwYk5vZGUuaGFzSW5zUHJldklkKCkpIHtcclxuICAgICAgY3VycmVudC5zZXRJbnNQcmV2KFxyXG4gICAgICAgIHJnYVRyZWVTcGxpdC5maW5kTm9kZShmcm9tVGV4dE5vZGVJRChwYk5vZGUuZ2V0SW5zUHJldklkKCkhKSksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBwcmV2ID0gY3VycmVudDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHRleHQgPSBQbGFpblRleHRJbnRlcm5hbC5jcmVhdGUoXHJcbiAgICByZ2FUcmVlU3BsaXQsXHJcbiAgICBmcm9tVGltZVRpY2tldChwYlRleHQuZ2V0Q3JlYXRlZEF0KCkpISxcclxuICApO1xyXG4gIHRleHQuc2V0TW92ZWRBdChmcm9tVGltZVRpY2tldChwYlRleHQuZ2V0TW92ZWRBdCgpKSk7XHJcbiAgdGV4dC5zZXRSZW1vdmVkQXQoZnJvbVRpbWVUaWNrZXQocGJUZXh0LmdldFJlbW92ZWRBdCgpKSk7XHJcbiAgcmV0dXJuIHRleHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgZnJvbUpTT05SaWNoVGV4dGAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tSlNPTlJpY2hUZXh0KHBiVGV4dDogUGJKU09ORWxlbWVudC5SaWNoVGV4dCk6IFJpY2hUZXh0SW50ZXJuYWwge1xyXG4gIGNvbnN0IHJnYVRyZWVTcGxpdCA9IG5ldyBSR0FUcmVlU3BsaXQ8UmljaFRleHRWYWx1ZT4oKTtcclxuXHJcbiAgbGV0IHByZXYgPSByZ2FUcmVlU3BsaXQuZ2V0SGVhZCgpO1xyXG4gIGZvciAoY29uc3QgcGJOb2RlIG9mIHBiVGV4dC5nZXROb2Rlc0xpc3QoKSkge1xyXG4gICAgY29uc3QgY3VycmVudCA9IHJnYVRyZWVTcGxpdC5pbnNlcnRBZnRlcihwcmV2LCBmcm9tUmljaFRleHROb2RlKHBiTm9kZSkpO1xyXG4gICAgaWYgKHBiTm9kZS5oYXNJbnNQcmV2SWQoKSkge1xyXG4gICAgICBjdXJyZW50LnNldEluc1ByZXYoXHJcbiAgICAgICAgcmdhVHJlZVNwbGl0LmZpbmROb2RlKGZyb21UZXh0Tm9kZUlEKHBiTm9kZS5nZXRJbnNQcmV2SWQoKSEpKSxcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHByZXYgPSBjdXJyZW50O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdGV4dCA9IFJpY2hUZXh0SW50ZXJuYWwuY3JlYXRlKFxyXG4gICAgcmdhVHJlZVNwbGl0LFxyXG4gICAgZnJvbVRpbWVUaWNrZXQocGJUZXh0LmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgKTtcclxuICB0ZXh0LnNldE1vdmVkQXQoZnJvbVRpbWVUaWNrZXQocGJUZXh0LmdldE1vdmVkQXQoKSkpO1xyXG4gIHRleHQuc2V0UmVtb3ZlZEF0KGZyb21UaW1lVGlja2V0KHBiVGV4dC5nZXRSZW1vdmVkQXQoKSkpO1xyXG4gIHJldHVybiB0ZXh0O1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21Db3VudGVyYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gUHJvdG9idWYgZm9ybWF0IHRvIG1vZGVsIGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21Db3VudGVyKHBiQ291bnRlcjogUGJKU09ORWxlbWVudC5Db3VudGVyKTogQ291bnRlckludGVybmFsIHtcclxuICBjb25zdCBjb3VudGVyID0gQ291bnRlckludGVybmFsLm9mKFxyXG4gICAgQ291bnRlckludGVybmFsLnZhbHVlRnJvbUJ5dGVzKFxyXG4gICAgICBmcm9tQ291bnRlclR5cGUocGJDb3VudGVyLmdldFR5cGUoKSksXHJcbiAgICAgIHBiQ291bnRlci5nZXRWYWx1ZV9hc1U4KCksXHJcbiAgICApLFxyXG4gICAgZnJvbVRpbWVUaWNrZXQocGJDb3VudGVyLmdldENyZWF0ZWRBdCgpKSEsXHJcbiAgKTtcclxuICBjb3VudGVyLnNldE1vdmVkQXQoZnJvbVRpbWVUaWNrZXQocGJDb3VudGVyLmdldE1vdmVkQXQoKSkpO1xyXG4gIGNvdW50ZXIuc2V0UmVtb3ZlZEF0KGZyb21UaW1lVGlja2V0KHBiQ291bnRlci5nZXRSZW1vdmVkQXQoKSkpO1xyXG4gIHJldHVybiBjb3VudGVyO1xyXG59XHJcblxyXG4vKipcclxuICogYGZyb21KU09ORWxlbWVudGAgY29udmVydHMgdGhlIGdpdmVuIFByb3RvYnVmIGZvcm1hdCB0byBtb2RlbCBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tSlNPTkVsZW1lbnQocGJKU09ORWxlbWVudDogUGJKU09ORWxlbWVudCk6IEpTT05FbGVtZW50IHtcclxuICBpZiAocGJKU09ORWxlbWVudC5oYXNKc29uT2JqZWN0KCkpIHtcclxuICAgIHJldHVybiBmcm9tSlNPTk9iamVjdChwYkpTT05FbGVtZW50LmdldEpzb25PYmplY3QoKSEpO1xyXG4gIH0gZWxzZSBpZiAocGJKU09ORWxlbWVudC5oYXNKc29uQXJyYXkoKSkge1xyXG4gICAgcmV0dXJuIGZyb21KU09OQXJyYXkocGJKU09ORWxlbWVudC5nZXRKc29uQXJyYXkoKSEpO1xyXG4gIH0gZWxzZSBpZiAocGJKU09ORWxlbWVudC5oYXNQcmltaXRpdmUoKSkge1xyXG4gICAgcmV0dXJuIGZyb21KU09OUHJpbWl0aXZlKHBiSlNPTkVsZW1lbnQuZ2V0UHJpbWl0aXZlKCkhKTtcclxuICB9IGVsc2UgaWYgKHBiSlNPTkVsZW1lbnQuaGFzVGV4dCgpKSB7XHJcbiAgICByZXR1cm4gZnJvbUpTT05UZXh0KHBiSlNPTkVsZW1lbnQuZ2V0VGV4dCgpISk7XHJcbiAgfSBlbHNlIGlmIChwYkpTT05FbGVtZW50Lmhhc1JpY2hUZXh0KCkpIHtcclxuICAgIHJldHVybiBmcm9tSlNPTlJpY2hUZXh0KHBiSlNPTkVsZW1lbnQuZ2V0UmljaFRleHQoKSEpO1xyXG4gIH0gZWxzZSBpZiAocGJKU09ORWxlbWVudC5oYXNDb3VudGVyKCkpIHtcclxuICAgIHJldHVybiBmcm9tQ291bnRlcihwYkpTT05FbGVtZW50LmdldENvdW50ZXIoKSEpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoXHJcbiAgICAgIENvZGUuVW5pbXBsZW1lbnRlZCxcclxuICAgICAgYHVuaW1wbGVtZW50ZWQgZWxlbWVudDogJHtwYkpTT05FbGVtZW50fWAsXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGBieXRlc1RvT2JqZWN0YCBjcmVhdGVzIGFuIEpTT05PYmplY3QgZnJvbSB0aGUgZ2l2ZW4gYnl0ZSBhcnJheS5cclxuICovXHJcbmZ1bmN0aW9uIGJ5dGVzVG9PYmplY3QoYnl0ZXM/OiBVaW50OEFycmF5KTogT2JqZWN0SW50ZXJuYWwge1xyXG4gIGlmICghYnl0ZXMpIHtcclxuICAgIHJldHVybiBPYmplY3RJbnRlcm5hbC5jcmVhdGUoSW5pdGlhbFRpbWVUaWNrZXQpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGJKU09ORWxlbWVudCA9IFBiSlNPTkVsZW1lbnQuZGVzZXJpYWxpemVCaW5hcnkoYnl0ZXMpO1xyXG4gIHJldHVybiBmcm9tSlNPTk9iamVjdChwYkpTT05FbGVtZW50LmdldEpzb25PYmplY3QoKSEpO1xyXG59XHJcblxyXG4vKipcclxuICogYG9iamVjdFRvQnl0ZXNgIGNvbnZlcnRzIHRoZSBnaXZlbiBKU09OT2JqZWN0IHRvIGJ5dGUgYXJyYXkuXHJcbiAqL1xyXG5mdW5jdGlvbiBvYmplY3RUb0J5dGVzKG9iajogT2JqZWN0SW50ZXJuYWwpOiBVaW50OEFycmF5IHtcclxuICByZXR1cm4gdG9KU09ORWxlbWVudChvYmopLnNlcmlhbGl6ZUJpbmFyeSgpO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvSGV4U3RyaW5nYCBjb252ZXJ0cyB0aGUgZ2l2ZW4gYnl0ZSBhcnJheSB0byBoZXggc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gdG9IZXhTdHJpbmcoYnl0ZXM6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xyXG4gIHJldHVybiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoJ2hleCcpO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvVW5pdDhBcnJheWAgY29udmVydHMgdGhlIGdpdmVuIGhleCBzdHJpbmcgdG8gYnl0ZSBhcnJheS5cclxuICovXHJcbmZ1bmN0aW9uIHRvVWludDhBcnJheShoZXg6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xyXG4gIHJldHVybiBVaW50OEFycmF5LmZyb20oQnVmZmVyLmZyb20oaGV4LCAnaGV4JykpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY29udmVydGVyID0ge1xyXG4gIGZyb21QcmVzZW5jZSxcclxuICB0b0NsaWVudCxcclxuICB0b0NoYW5nZVBhY2ssXHJcbiAgZnJvbUNoYW5nZVBhY2ssXHJcbiAgb2JqZWN0VG9CeXRlcyxcclxuICBieXRlc1RvT2JqZWN0LFxyXG4gIHRvSGV4U3RyaW5nLFxyXG4gIHRvVWludDhBcnJheSxcclxufTtcclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjEgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG4vKipcclxuICogYEF1dGhVbmFyeUludGVyY2VwdG9yYCBpcyBhIHVuYXJ5IGludGVyY2VwdG9yIHRvIGFkZCB0aGUgQXV0aG9yaXphdGlvbiBoZWFkZXIgZm9yIGVhY2hcclxuICogcmVxdWVzdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRoVW5hcnlJbnRlcmNlcHRvciB7XHJcbiAgcHJpdmF0ZSBhcGlLZXk/OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSB0b2tlbj86IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoYXBpS2V5Pzogc3RyaW5nLCB0b2tlbj86IHN0cmluZykge1xyXG4gICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XHJcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW50ZXJjZXB0YCBpbnRlcmNlcHRzIHRoZSByZXF1ZXN0IGFuZCBhZGRzIHRoZSB0b2tlbiB0byB0aGUgbWV0YWRhdGEuXHJcbiAgICovXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcclxuICBwdWJsaWMgaW50ZXJjZXB0KHJlcXVlc3Q6IGFueSwgaW52b2tlcjogYW55KTogYW55IHtcclxuICAgIGNvbnN0IG1ldGFkYXRhID0gcmVxdWVzdC5nZXRNZXRhZGF0YSgpO1xyXG4gICAgaWYgKHRoaXMuYXBpS2V5KSB7XHJcbiAgICAgIG1ldGFkYXRhWyd4LWFwaS1rZXknXSA9IHRoaXMuYXBpS2V5O1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMudG9rZW4pIHtcclxuICAgICAgbWV0YWRhdGFbJ2F1dGhvcml6YXRpb24nXSA9IHRoaXMudG9rZW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW52b2tlcihyZXF1ZXN0KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgQXV0aFN0cmVhbUludGVyY2VwdG9yYCBpcyBhIHN0cmVhbSBpbnRlcmNlcHRvciB0byBhZGQgdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyIGZvciBlYWNoXHJcbiAqIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXV0aFN0cmVhbUludGVyY2VwdG9yIHtcclxuICBwcml2YXRlIGFwaUtleT86IHN0cmluZztcclxuICBwcml2YXRlIHRva2VuPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcGlLZXk/OiBzdHJpbmcsIHRva2VuPzogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcclxuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnRlcmNlcHRgIGludGVyY2VwdHMgdGhlIHJlcXVlc3QgYW5kIGFkZHMgdGhlIHRva2VuIHRvIHRoZSBtZXRhZGF0YS5cclxuICAgKi9cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xyXG4gIHB1YmxpYyBpbnRlcmNlcHQocmVxdWVzdDogYW55LCBpbnZva2VyOiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgbWV0YWRhdGEgPSByZXF1ZXN0LmdldE1ldGFkYXRhKCk7XHJcbiAgICBpZiAodGhpcy5hcGlLZXkpIHtcclxuICAgICAgbWV0YWRhdGFbJ3gtYXBpLWtleSddID0gdGhpcy5hcGlLZXk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50b2tlbikge1xyXG4gICAgICBtZXRhZGF0YVsnYXV0aG9yaXphdGlvbiddID0gdGhpcy50b2tlbjtcclxuICAgIH1cclxuICAgIHJldHVybiBpbnZva2VyKHJlcXVlc3QpO1xyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFjdG9ySUQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS9hY3Rvcl9pZCc7XHJcbmltcG9ydCB7XHJcbiAgT2JzZXJ2ZXIsXHJcbiAgT2JzZXJ2YWJsZSxcclxuICBjcmVhdGVPYnNlcnZhYmxlLFxyXG4gIFVuc3Vic2NyaWJlLFxyXG4gIEVycm9yRm4sXHJcbiAgQ29tcGxldGVGbixcclxuICBOZXh0Rm4sXHJcbn0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7XHJcbiAgQWN0aXZhdGVDbGllbnRSZXF1ZXN0LFxyXG4gIERlYWN0aXZhdGVDbGllbnRSZXF1ZXN0LFxyXG4gIEF0dGFjaERvY3VtZW50UmVxdWVzdCxcclxuICBEZXRhY2hEb2N1bWVudFJlcXVlc3QsXHJcbiAgUHVzaFB1bGxSZXF1ZXN0LFxyXG4gIFdhdGNoRG9jdW1lbnRzUmVxdWVzdCxcclxuICBXYXRjaERvY3VtZW50c1Jlc3BvbnNlLFxyXG4gIFVwZGF0ZVByZXNlbmNlUmVxdWVzdCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvYXBpL3lvcmtpZV9wYic7XHJcbmltcG9ydCB7IERvY0V2ZW50VHlwZSB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9hcGkvcmVzb3VyY2VzX3BiJztcclxuaW1wb3J0IHsgY29udmVydGVyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2FwaS9jb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBZb3JraWVDbGllbnQgYXMgUlBDQ2xpZW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2FwaS95b3JraWVfZ3JwY193ZWJfcGInO1xyXG5pbXBvcnQgeyBDb2RlLCBZb3JraWVFcnJvciB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL2Vycm9yJztcclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgdXVpZCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL3V1aWQnO1xyXG5pbXBvcnQgeyBEb2N1bWVudFJlcGxpY2EgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvZG9jdW1lbnQnO1xyXG5pbXBvcnQge1xyXG4gIEF1dGhVbmFyeUludGVyY2VwdG9yLFxyXG4gIEF1dGhTdHJlYW1JbnRlcmNlcHRvcixcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvY29yZS9hdXRoJztcclxuaW1wb3J0IHR5cGUgeyBJbmRleGFibGUgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvZG9jdW1lbnQnO1xyXG5cclxuLyoqXHJcbiAqIGBDbGllbnRTdGF0dXNgIGlzIGNsaWVudCBzdGF0dXMgdHlwZXNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGVudW0gQ2xpZW50U3RhdHVzIHtcclxuICAvKipcclxuICAgKiBjbGllbnQgZGVhY3RpdmF0ZWQgc3RhdHVzXHJcbiAgICovXHJcbiAgRGVhY3RpdmF0ZWQgPSAnZGVhY3RpdmF0ZWQnLFxyXG4gIC8qKlxyXG4gICAqIGNsaWVudCBhY3RpdmF0ZWQgc3RhdHVzXHJcbiAgICovXHJcbiAgQWN0aXZhdGVkID0gJ2FjdGl2YXRlZCcsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgU3RyZWFtQ29ubmVjdGlvblN0YXR1c2AgaXMgc3RyZWFtIGNvbm5lY3Rpb24gc3RhdHVzIHR5cGVzXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBlbnVtIFN0cmVhbUNvbm5lY3Rpb25TdGF0dXMge1xyXG4gIC8qKlxyXG4gICAqIHN0cmVhbSBjb25uZWN0ZWRcclxuICAgKi9cclxuICBDb25uZWN0ZWQgPSAnY29ubmVjdGVkJyxcclxuICAvKipcclxuICAgKiBzdHJlYW0gZGlzY29ubmVjdGVkXHJcbiAgICovXHJcbiAgRGlzY29ubmVjdGVkID0gJ2Rpc2Nvbm5lY3RlZCcsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgRG9jdW1lbnRTeW5jUmVzdWx0VHlwZWAgaXMgZG9jdW1lbnQgc3luYyByZXN1bHQgdHlwZXNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGVudW0gRG9jdW1lbnRTeW5jUmVzdWx0VHlwZSB7XHJcbiAgLyoqXHJcbiAgICogdHlwZSB3aGVuIERvY3VtZW50IHN5bmNlZC5cclxuICAgKi9cclxuICBTeW5jZWQgPSAnc3luY2VkJyxcclxuICAvKipcclxuICAgKiB0eXBlIHdoZW4gRG9jdW1lbnQgc3luYyBmYWlsZWQuXHJcbiAgICovXHJcbiAgU3luY0ZhaWxlZCA9ICdzeW5jLWZhaWxlZCcsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgQ2xpZW50RXZlbnRUeXBlYCBpcyBjbGllbnQgZXZlbnQgdHlwZXNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGVudW0gQ2xpZW50RXZlbnRUeXBlIHtcclxuICAvKipcclxuICAgKiBjbGllbnQgZXZlbnQgdHlwZSB3aGVuIHN0YXR1cyBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIFN0YXR1c0NoYW5nZWQgPSAnc3RhdHVzLWNoYW5nZWQnLFxyXG4gIC8qKlxyXG4gICAqIGNsaWVudCBldmVudCB0eXBlIHdoZW4gZG9jdW1lbnRzIGNoYW5nZWQuXHJcbiAgICovXHJcbiAgRG9jdW1lbnRzQ2hhbmdlZCA9ICdkb2N1bWVudHMtY2hhbmdlZCcsXHJcbiAgLyoqXHJcbiAgICogY2xpZW50IGV2ZW50IHR5cGUgd2hlbiBwZWVycyBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIFBlZXJzQ2hhbmdlZCA9ICdwZWVycy1jaGFuZ2VkJyxcclxuICAvKipcclxuICAgKiBjbGllbnQgZXZlbnQgdHlwZSB3aGVuIHN0cmVhbSBjb25uZWN0aW9uIGNoYW5nZWQuXHJcbiAgICovXHJcbiAgU3RyZWFtQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQgPSAnc3RyZWFtLWNvbm5lY3Rpb24tc3RhdHVzLWNoYW5nZWQnLFxyXG4gIC8qKlxyXG4gICAqIGNsaWVudCBldmVudCB0eXBlIHdoZW4gZG9jdW1lbnQgc3luY2VkLlxyXG4gICAqL1xyXG4gIERvY3VtZW50U3luY2VkID0gJ2RvY3VtZW50LXN5bmNlZCcsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgQ2xpZW50RXZlbnRgIGlzIGFuIGV2ZW50IHRoYXQgb2NjdXJzIGluIGBDbGllbnRgLiBJdCBjYW4gYmUgZGVsaXZlcmVkIHVzaW5nXHJcbiAqIGBDbGllbnQuc3Vic2NyaWJlKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDbGllbnRFdmVudDxNID0gSW5kZXhhYmxlPiA9XHJcbiAgfCBTdGF0dXNDaGFuZ2VkRXZlbnRcclxuICB8IERvY3VtZW50c0NoYW5nZWRFdmVudFxyXG4gIHwgUGVlcnNDaGFuZ2VkRXZlbnQ8TT5cclxuICB8IFN0cmVhbUNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkRXZlbnRcclxuICB8IERvY3VtZW50U3luY2VkRXZlbnQ7XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VDbGllbnRFdmVudCB7XHJcbiAgdHlwZTogQ2xpZW50RXZlbnRUeXBlO1xyXG59XHJcblxyXG4vKipcclxuICogYFN0YXR1c0NoYW5nZWRFdmVudGAgaXMgYW4gZXZlbnQgdGhhdCBvY2N1cnMgd2hlbiB0aGUgQ2xpZW50J3Mgc3RhdGUgY2hhbmdlcy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdGF0dXNDaGFuZ2VkRXZlbnQgZXh0ZW5kcyBCYXNlQ2xpZW50RXZlbnQge1xyXG4gIC8qKlxyXG4gICAqIGVudW0ge0BsaW5rIENsaWVudEV2ZW50VHlwZX0uU3RhdHVzQ2hhbmdlZFxyXG4gICAqL1xyXG4gIHR5cGU6IENsaWVudEV2ZW50VHlwZS5TdGF0dXNDaGFuZ2VkO1xyXG4gIC8qKlxyXG4gICAqIGBEb2N1bWVudHNDaGFuZ2VkRXZlbnRgIHZhbHVlXHJcbiAgICovXHJcbiAgdmFsdWU6IENsaWVudFN0YXR1cztcclxufVxyXG5cclxuLyoqXHJcbiAqIGBEb2N1bWVudHNDaGFuZ2VkRXZlbnRgIGlzIGFuIGV2ZW50IHRoYXQgb2NjdXJzIHdoZW4gZG9jdW1lbnRzIGF0dGFjaGVkIHRvXHJcbiAqIHRoZSBjbGllbnQgY2hhbmdlcy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudHNDaGFuZ2VkRXZlbnQgZXh0ZW5kcyBCYXNlQ2xpZW50RXZlbnQge1xyXG4gIC8qKlxyXG4gICAqIGVudW0ge0BsaW5rIENsaWVudEV2ZW50VHlwZX0uRG9jdW1lbnRzQ2hhbmdlZEV2ZW50XHJcbiAgICovXHJcbiAgdHlwZTogQ2xpZW50RXZlbnRUeXBlLkRvY3VtZW50c0NoYW5nZWQ7XHJcbiAgLyoqXHJcbiAgICogYERvY3VtZW50c0NoYW5nZWRFdmVudGAgdmFsdWVcclxuICAgKi9cclxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBQZWVyc0NoYW5nZWRFdmVudGAgaXMgYW4gZXZlbnQgdGhhdCBvY2N1cnMgd2hlbiB0aGUgc3RhdGVzIG9mIGFub3RoZXIgcGVlcnNcclxuICogb2YgdGhlIGF0dGFjaGVkIGRvY3VtZW50cyBjaGFuZ2VzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBlZXJzQ2hhbmdlZEV2ZW50PE0+IGV4dGVuZHMgQmFzZUNsaWVudEV2ZW50IHtcclxuICAvKipcclxuICAgKiBlbnVtIHtAbGluayBDbGllbnRFdmVudFR5cGV9LlBlZXJzQ2hhbmdlZEV2ZW50XHJcbiAgICovXHJcbiAgdHlwZTogQ2xpZW50RXZlbnRUeXBlLlBlZXJzQ2hhbmdlZDtcclxuICAvKipcclxuICAgKiBgUGVlcnNDaGFuZ2VkRXZlbnRgIHZhbHVlXHJcbiAgICovXHJcbiAgdmFsdWU6IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIE0+PjtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBTdHJlYW1Db25uZWN0aW9uU3RhdHVzQ2hhbmdlZEV2ZW50YCBpcyBhbiBldmVudCB0aGF0IG9jY3VycyB3aGVuXHJcbiAqIHRoZSBjbGllbnQncyBzdHJlYW0gY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2VzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbUNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkRXZlbnQgZXh0ZW5kcyBCYXNlQ2xpZW50RXZlbnQge1xyXG4gIC8qKlxyXG4gICAqIGBTdHJlYW1Db25uZWN0aW9uU3RhdHVzQ2hhbmdlZEV2ZW50YCB0eXBlXHJcbiAgICogZW51bSB7QGxpbmsgQ2xpZW50RXZlbnRUeXBlfS5TdHJlYW1Db25uZWN0aW9uU3RhdHVzQ2hhbmdlZEV2ZW50XHJcbiAgICovXHJcbiAgdHlwZTogQ2xpZW50RXZlbnRUeXBlLlN0cmVhbUNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkO1xyXG4gIC8qKlxyXG4gICAqIGBTdHJlYW1Db25uZWN0aW9uU3RhdHVzQ2hhbmdlZEV2ZW50YCB2YWx1ZVxyXG4gICAqL1xyXG4gIHZhbHVlOiBTdHJlYW1Db25uZWN0aW9uU3RhdHVzO1xyXG59XHJcblxyXG4vKipcclxuICogYERvY3VtZW50U3luY2VkRXZlbnRgIGlzIGFuIGV2ZW50IHRoYXQgb2NjdXJzIHdoZW4gZG9jdW1lbnRzXHJcbiAqIGF0dGFjaGVkIHRvIHRoZSBjbGllbnQgYXJlIHN5bmNlZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudFN5bmNlZEV2ZW50IGV4dGVuZHMgQmFzZUNsaWVudEV2ZW50IHtcclxuICAvKipcclxuICAgKiBgRG9jdW1lbnRTeW5jZWRFdmVudGAgdHlwZVxyXG4gICAqIGVudW0ge0BsaW5rIENsaWVudEV2ZW50VHlwZX0uRG9jdW1lbnRTeW5jZWRFdmVudFxyXG4gICAqL1xyXG4gIHR5cGU6IENsaWVudEV2ZW50VHlwZS5Eb2N1bWVudFN5bmNlZDtcclxuICAvKipcclxuICAgKiBgRG9jdW1lbnRTeW5jZWRFdmVudGAgdmFsdWVcclxuICAgKi9cclxuICB2YWx1ZTogRG9jdW1lbnRTeW5jUmVzdWx0VHlwZTtcclxufVxyXG5cclxuaW50ZXJmYWNlIEF0dGFjaG1lbnQ8TT4ge1xyXG4gIGRvYzogRG9jdW1lbnRSZXBsaWNhPHVua25vd24+O1xyXG4gIGlzUmVhbHRpbWVTeW5jOiBib29sZWFuO1xyXG4gIHBlZXJQcmVzZW5jZU1hcD86IE1hcDxzdHJpbmcsIFByZXNlbmNlSW5mbzxNPj47XHJcbiAgcmVtb3RlQ2hhbmdlRXZlbnRSZWNlaXZlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgUHJlc2VuY2VJbmZvYCBpcyBwcmVzZW5jZSBpbmZvcm1hdGlvbiBvZiB0aGlzIGNsaWVudC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgUHJlc2VuY2VJbmZvPE0+ID0ge1xyXG4gIGNsb2NrOiBudW1iZXI7XHJcbiAgZGF0YTogTTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBgQ2xpZW50T3B0aW9uc2AgYXJlIHVzZXItc2V0dGFibGUgb3B0aW9ucyB1c2VkIHdoZW4gZGVmaW5pbmcgY2xpZW50cy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbGllbnRPcHRpb25zPE0+IHtcclxuICBrZXk/OiBzdHJpbmc7XHJcbiAgcHJlc2VuY2U/OiBNO1xyXG4gIGFwaUtleT86IHN0cmluZztcclxuICB0b2tlbj86IHN0cmluZztcclxuICBzeW5jTG9vcER1cmF0aW9uPzogbnVtYmVyO1xyXG4gIHJlY29ubmVjdFN0cmVhbURlbGF5PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogYERlZmF1bHRDbGllbnRPcHRpb25zYCBpcyB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciBDbGllbnQuXHJcbiAqL1xyXG5jb25zdCBEZWZhdWx0Q2xpZW50T3B0aW9ucyA9IHtcclxuICBzeW5jTG9vcER1cmF0aW9uOiA1MCxcclxuICByZWNvbm5lY3RTdHJlYW1EZWxheTogMTAwMCxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBgQ2xpZW50YCBpcyBhIG5vcm1hbCBjbGllbnQgdGhhdCBjYW4gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmVyLlxyXG4gKiBJdCBoYXMgZG9jdW1lbnRzIGFuZCBzZW5kcyBjaGFuZ2VzIG9mIHRoZSBkb2N1bWVudHMgaW4gbG9jYWxcclxuICogdG8gdGhlIHNlcnZlciB0byBzeW5jaHJvbml6ZSB3aXRoIG90aGVyIHJlcGxpY2FzIGluIHJlbW90ZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsaWVudDxNID0gSW5kZXhhYmxlPiBpbXBsZW1lbnRzIE9ic2VydmFibGU8Q2xpZW50RXZlbnQ8TT4+IHtcclxuICBwcml2YXRlIGlkPzogQWN0b3JJRDtcclxuICBwcml2YXRlIGtleTogc3RyaW5nO1xyXG4gIHByaXZhdGUgcHJlc2VuY2VJbmZvOiBQcmVzZW5jZUluZm88TT47XHJcbiAgcHJpdmF0ZSBzdGF0dXM6IENsaWVudFN0YXR1cztcclxuICBwcml2YXRlIGF0dGFjaG1lbnRNYXA6IE1hcDxzdHJpbmcsIEF0dGFjaG1lbnQ8TT4+O1xyXG4gIHByaXZhdGUgc3luY0xvb3BEdXJhdGlvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVjb25uZWN0U3RyZWFtRGVsYXk6IG51bWJlcjtcclxuXHJcbiAgcHJpdmF0ZSBycGNDbGllbnQ6IFJQQ0NsaWVudDtcclxuICBwcml2YXRlIHdhdGNoTG9vcFRpbWVySUQ/OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PjtcclxuICBwcml2YXRlIHJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtPzogYW55O1xyXG4gIHByaXZhdGUgZXZlbnRTdHJlYW06IE9ic2VydmFibGU8Q2xpZW50RXZlbnQ8TT4+O1xyXG4gIHByaXZhdGUgZXZlbnRTdHJlYW1PYnNlcnZlciE6IE9ic2VydmVyPENsaWVudEV2ZW50PE0+PjtcclxuXHJcbiAgY29uc3RydWN0b3IocnBjQWRkcjogc3RyaW5nLCBvcHRzPzogQ2xpZW50T3B0aW9uczxNPikge1xyXG4gICAgb3B0cyA9IG9wdHMgfHwgRGVmYXVsdENsaWVudE9wdGlvbnM7XHJcblxyXG4gICAgdGhpcy5rZXkgPSBvcHRzLmtleSA/IG9wdHMua2V5IDogdXVpZCgpO1xyXG4gICAgdGhpcy5wcmVzZW5jZUluZm8gPSB7XHJcbiAgICAgIGNsb2NrOiAwLFxyXG4gICAgICBkYXRhOiBvcHRzLnByZXNlbmNlID8gb3B0cy5wcmVzZW5jZSA6ICh7fSBhcyBNKSxcclxuICAgIH07XHJcbiAgICB0aGlzLnN0YXR1cyA9IENsaWVudFN0YXR1cy5EZWFjdGl2YXRlZDtcclxuICAgIHRoaXMuYXR0YWNobWVudE1hcCA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuc3luY0xvb3BEdXJhdGlvbiA9XHJcbiAgICAgIG9wdHMuc3luY0xvb3BEdXJhdGlvbiB8fCBEZWZhdWx0Q2xpZW50T3B0aW9ucy5zeW5jTG9vcER1cmF0aW9uO1xyXG4gICAgdGhpcy5yZWNvbm5lY3RTdHJlYW1EZWxheSA9XHJcbiAgICAgIG9wdHMucmVjb25uZWN0U3RyZWFtRGVsYXkgfHwgRGVmYXVsdENsaWVudE9wdGlvbnMucmVjb25uZWN0U3RyZWFtRGVsYXk7XHJcblxyXG4gICAgbGV0IHJwY09wdHM7XHJcbiAgICBpZiAob3B0cy5hcGlLZXkgfHwgb3B0cy50b2tlbikge1xyXG4gICAgICBycGNPcHRzID0ge1xyXG4gICAgICAgIHVuYXJ5SW50ZXJjZXB0b3JzOiBbbmV3IEF1dGhVbmFyeUludGVyY2VwdG9yKG9wdHMuYXBpS2V5LCBvcHRzLnRva2VuKV0sXHJcbiAgICAgICAgc3RyZWFtSW50ZXJjZXB0b3JzOiBbXHJcbiAgICAgICAgICBuZXcgQXV0aFN0cmVhbUludGVyY2VwdG9yKG9wdHMuYXBpS2V5LCBvcHRzLnRva2VuKSxcclxuICAgICAgICBdLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucnBjQ2xpZW50ID0gbmV3IFJQQ0NsaWVudChycGNBZGRyLCBudWxsLCBycGNPcHRzKTtcclxuICAgIHRoaXMuZXZlbnRTdHJlYW0gPSBjcmVhdGVPYnNlcnZhYmxlPENsaWVudEV2ZW50PE0+Pigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyID0gb2JzZXJ2ZXI7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBhdGl2YXRlYCBhY3RpdmF0ZXMgdGhpcyBjbGllbnQuIFRoYXQgaXMsIGl0IHJlZ2lzdGVyIGl0c2VsZiB0byB0aGUgc2VydmVyXHJcbiAgICogYW5kIHJlY2VpdmVzIGEgdW5pcXVlIElEIGZyb20gdGhlIHNlcnZlci4gVGhlIGdpdmVuIElEIGlzIHVzZWQgdG9cclxuICAgKiBkaXN0aW5ndWlzaCBkaWZmZXJlbnQgY2xpZW50cy5cclxuICAgKi9cclxuICBwdWJsaWMgYWN0aXZhdGUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXEgPSBuZXcgQWN0aXZhdGVDbGllbnRSZXF1ZXN0KCk7XHJcbiAgICAgIHJlcS5zZXRDbGllbnRLZXkodGhpcy5rZXkpO1xyXG5cclxuICAgICAgdGhpcy5ycGNDbGllbnQuYWN0aXZhdGVDbGllbnQocmVxLCB7fSwgKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKGBbQUNdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgZXJyIDpgLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gY29udmVydGVyLnRvSGV4U3RyaW5nKHJlcy5nZXRDbGllbnRJZF9hc1U4KCkpO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gQ2xpZW50U3RhdHVzLkFjdGl2YXRlZDtcclxuICAgICAgICB0aGlzLnJ1blN5bmNMb29wKCk7XHJcbiAgICAgICAgdGhpcy5ydW5XYXRjaExvb3AoKTtcclxuXHJcbiAgICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyLm5leHQoe1xyXG4gICAgICAgICAgdHlwZTogQ2xpZW50RXZlbnRUeXBlLlN0YXR1c0NoYW5nZWQsXHJcbiAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0dXMsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxvZ2dlci5pbmZvKGBbQUNdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgYWN0aXZhdGVkLCBpZDpcIiR7dGhpcy5pZH1cImApO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBkZWFjdGl2YXRlYCBkZWFjdGl2YXRlcyB0aGlzIGNsaWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZGVhY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gQ2xpZW50U3RhdHVzLkRlYWN0aXZhdGVkKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5yZW1vdGVDaGFuZ2VFdmVudFN0cmVhbSkge1xyXG4gICAgICB0aGlzLnJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtLmNhbmNlbCgpO1xyXG4gICAgICB0aGlzLnJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcSA9IG5ldyBEZWFjdGl2YXRlQ2xpZW50UmVxdWVzdCgpO1xyXG4gICAgICByZXEuc2V0Q2xpZW50SWQoY29udmVydGVyLnRvVWludDhBcnJheSh0aGlzLmlkISkpO1xyXG5cclxuICAgICAgdGhpcy5ycGNDbGllbnQuZGVhY3RpdmF0ZUNsaWVudChyZXEsIHt9LCAoZXJyKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKGBbRENdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgZXJyIDpgLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN0YXR1cyA9IENsaWVudFN0YXR1cy5EZWFjdGl2YXRlZDtcclxuICAgICAgICB0aGlzLmV2ZW50U3RyZWFtT2JzZXJ2ZXIubmV4dCh7XHJcbiAgICAgICAgICB0eXBlOiBDbGllbnRFdmVudFR5cGUuU3RhdHVzQ2hhbmdlZCxcclxuICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXR1cyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbG9nZ2VyLmluZm8oYFtEQ10gY1wiJHt0aGlzLmdldEtleSgpfVwiIGRlYWN0aXZhdGVkYCk7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGF0dGFjaGAgYXR0YWNoZXMgdGhlIGdpdmVuIGRvY3VtZW50IHRvIHRoaXMgY2xpZW50LiBJdCB0ZWxscyB0aGUgc2VydmVyIHRoYXRcclxuICAgKiB0aGlzIGNsaWVudCB3aWxsIHN5bmNocm9uaXplIHRoZSBnaXZlbiBkb2N1bWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgYXR0YWNoKFxyXG4gICAgZG9jOiBEb2N1bWVudFJlcGxpY2E8dW5rbm93bj4sXHJcbiAgICBpc01hbnVhbFN5bmM/OiBib29sZWFuLFxyXG4gICk6IFByb21pc2U8RG9jdW1lbnRSZXBsaWNhPHVua25vd24+PiB7XHJcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoQ29kZS5DbGllbnROb3RBY3RpdmUsIGAke3RoaXMua2V5fSBpcyBub3QgYWN0aXZlYCk7XHJcbiAgICB9XHJcblxyXG4gICAgZG9jLnNldEFjdG9yKHRoaXMuaWQhKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCByZXEgPSBuZXcgQXR0YWNoRG9jdW1lbnRSZXF1ZXN0KCk7XHJcbiAgICAgIHJlcS5zZXRDbGllbnRJZChjb252ZXJ0ZXIudG9VaW50OEFycmF5KHRoaXMuaWQhKSk7XHJcbiAgICAgIHJlcS5zZXRDaGFuZ2VQYWNrKGNvbnZlcnRlci50b0NoYW5nZVBhY2soZG9jLmNyZWF0ZUNoYW5nZVBhY2soKSkpO1xyXG5cclxuICAgICAgdGhpcy5ycGNDbGllbnQuYXR0YWNoRG9jdW1lbnQocmVxLCB7fSwgKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKGBbQURdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgZXJyIDpgLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYWNrID0gY29udmVydGVyLmZyb21DaGFuZ2VQYWNrKHJlcy5nZXRDaGFuZ2VQYWNrKCkhKTtcclxuICAgICAgICBkb2MuYXBwbHlDaGFuZ2VQYWNrKHBhY2spO1xyXG5cclxuICAgICAgICB0aGlzLmF0dGFjaG1lbnRNYXAuc2V0KGRvYy5nZXRLZXkoKSwge1xyXG4gICAgICAgICAgZG9jLFxyXG4gICAgICAgICAgaXNSZWFsdGltZVN5bmM6ICFpc01hbnVhbFN5bmMsXHJcbiAgICAgICAgICBwZWVyUHJlc2VuY2VNYXA6IG5ldyBNYXAoKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJ1bldhdGNoTG9vcCgpO1xyXG5cclxuICAgICAgICBsb2dnZXIuaW5mbyhgW0FEXSBjOlwiJHt0aGlzLmdldEtleSgpfVwiIGF0dGFjaGVzIGQ6XCIke2RvYy5nZXRLZXkoKX1cImApO1xyXG4gICAgICAgIHJlc29sdmUoZG9jKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBkZXRhY2hgIGRldGFjaGVzIHRoZSBnaXZlbiBkb2N1bWVudCBmcm9tIHRoaXMgY2xpZW50LiBJdCB0ZWxscyB0aGVcclxuICAgKiBzZXJ2ZXIgdGhhdCB0aGlzIGNsaWVudCB3aWxsIG5vIGxvbmdlciBzeW5jaHJvbml6ZSB0aGUgZ2l2ZW4gZG9jdW1lbnQuXHJcbiAgICpcclxuICAgKiBUbyBjb2xsZWN0IGdhcmJhZ2UgdGhpbmdzIGxpa2UgQ1JEVCB0b21ic3RvbmVzIGxlZnQgb24gdGhlIGRvY3VtZW50LCBhbGxcclxuICAgKiB0aGUgY2hhbmdlcyBzaG91bGQgYmUgYXBwbGllZCB0byBvdGhlciByZXBsaWNhcyBiZWZvcmUgR0MgdGltZS4gRm9yIHRoaXMsXHJcbiAgICogaWYgdGhlIGRvY3VtZW50IGlzIG5vIGxvbmdlciB1c2VkIGJ5IHRoaXMgY2xpZW50LCBpdCBzaG91bGQgYmUgZGV0YWNoZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGRldGFjaChcclxuICAgIGRvYzogRG9jdW1lbnRSZXBsaWNhPHVua25vd24+LFxyXG4gICk6IFByb21pc2U8RG9jdW1lbnRSZXBsaWNhPHVua25vd24+PiB7XHJcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoQ29kZS5DbGllbnROb3RBY3RpdmUsIGAke3RoaXMua2V5fSBpcyBub3QgYWN0aXZlYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcmVxID0gbmV3IERldGFjaERvY3VtZW50UmVxdWVzdCgpO1xyXG4gICAgICByZXEuc2V0Q2xpZW50SWQoY29udmVydGVyLnRvVWludDhBcnJheSh0aGlzLmlkISkpO1xyXG4gICAgICByZXEuc2V0Q2hhbmdlUGFjayhjb252ZXJ0ZXIudG9DaGFuZ2VQYWNrKGRvYy5jcmVhdGVDaGFuZ2VQYWNrKCkpKTtcclxuXHJcbiAgICAgIHRoaXMucnBjQ2xpZW50LmRldGFjaERvY3VtZW50KHJlcSwge30sIChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgIGxvZ2dlci5lcnJvcihgW0REXSBjOlwiJHt0aGlzLmdldEtleSgpfVwiIGVyciA6YCwgZXJyKTtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcGFjayA9IGNvbnZlcnRlci5mcm9tQ2hhbmdlUGFjayhyZXMuZ2V0Q2hhbmdlUGFjaygpISk7XHJcbiAgICAgICAgZG9jLmFwcGx5Q2hhbmdlUGFjayhwYWNrKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNobWVudE1hcC5oYXMoZG9jLmdldEtleSgpKSkge1xyXG4gICAgICAgICAgdGhpcy5hdHRhY2htZW50TWFwLmRlbGV0ZShkb2MuZ2V0S2V5KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJ1bldhdGNoTG9vcCgpO1xyXG5cclxuICAgICAgICBsb2dnZXIuaW5mbyhgW0REXSBjOlwiJHt0aGlzLmdldEtleSgpfVwiIGRldGFjaGVzIGQ6XCIke2RvYy5nZXRLZXkoKX1cImApO1xyXG4gICAgICAgIHJlc29sdmUoZG9jKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzeW5jYCBwdXNoZXMgbG9jYWwgY2hhbmdlcyBvZiB0aGUgYXR0YWNoZWQgZG9jdW1lbnRzIHRvIHRoZSBzZXJ2ZXIgYW5kXHJcbiAgICogcmVjZWl2ZXMgY2hhbmdlcyBvZiB0aGUgcmVtb3RlIHJlcGxpY2EgZnJvbSB0aGUgc2VydmVyIHRoZW4gYXBwbHkgdGhlbSB0b1xyXG4gICAqIGxvY2FsIGRvY3VtZW50cy5cclxuICAgKi9cclxuICBwdWJsaWMgc3luYygpOiBQcm9taXNlPEFycmF5PERvY3VtZW50UmVwbGljYTx1bmtub3duPj4+IHtcclxuICAgIGNvbnN0IHByb21pc2VzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IFssIGF0dGFjaG1lbnRdIG9mIHRoaXMuYXR0YWNobWVudE1hcCkge1xyXG4gICAgICBwcm9taXNlcy5wdXNoKHRoaXMuc3luY0ludGVybmFsKGF0dGFjaG1lbnQuZG9jKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKVxyXG4gICAgICAudGhlbigoZG9jcykgPT4ge1xyXG4gICAgICAgIHJldHVybiBkb2NzO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIHRoaXMuZXZlbnRTdHJlYW1PYnNlcnZlci5uZXh0KHtcclxuICAgICAgICAgIHR5cGU6IENsaWVudEV2ZW50VHlwZS5Eb2N1bWVudFN5bmNlZCxcclxuICAgICAgICAgIHZhbHVlOiBEb2N1bWVudFN5bmNSZXN1bHRUeXBlLlN5bmNGYWlsZWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB1cGRhdGVQcmVzZW5jZWAgdXBkYXRlcyB0aGUgcHJlc2VuY2Ugb2YgdGhpcyBjbGllbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZVByZXNlbmNlPEsgZXh0ZW5kcyBrZXlvZiBNPihrZXk6IEssIHZhbHVlOiBNW0tdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoQ29kZS5DbGllbnROb3RBY3RpdmUsIGAke3RoaXMua2V5fSBpcyBub3QgYWN0aXZlYCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcmVzZW5jZUluZm8uY2xvY2sgKz0gMTtcclxuICAgICh0aGlzLnByZXNlbmNlSW5mby5kYXRhIGFzIGFueSlba2V5XSA9IHZhbHVlO1xyXG5cclxuICAgIGlmICh0aGlzLmF0dGFjaG1lbnRNYXAuc2l6ZSA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga2V5czogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBbLCBhdHRhY2htZW50XSBvZiB0aGlzLmF0dGFjaG1lbnRNYXApIHtcclxuICAgICAgaWYgKCFhdHRhY2htZW50LmlzUmVhbHRpbWVTeW5jKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGF0dGFjaG1lbnQucGVlclByZXNlbmNlTWFwIS5zZXQodGhpcy5nZXRJRCgpISwgdGhpcy5wcmVzZW5jZUluZm8pO1xyXG4gICAgICBrZXlzLnB1c2goYXR0YWNobWVudC5kb2MuZ2V0S2V5KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcSA9IG5ldyBVcGRhdGVQcmVzZW5jZVJlcXVlc3QoKTtcclxuICAgIHJlcS5zZXRDbGllbnQoY29udmVydGVyLnRvQ2xpZW50KHRoaXMuaWQhLCB0aGlzLnByZXNlbmNlSW5mbykpO1xyXG4gICAgcmVxLnNldERvY3VtZW50S2V5c0xpc3Qoa2V5cyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5ycGNDbGllbnQudXBkYXRlUHJlc2VuY2UocmVxLCB7fSwgKGVycikgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgIGxvZ2dlci5lcnJvcihgW1VNXSBjOlwiJHt0aGlzLmdldEtleSgpfVwiIGVyciA6YCwgZXJyKTtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9nZ2VyLmluZm8oYFtVTV0gY1wiJHt0aGlzLmdldEtleSgpfVwiIHVwZGF0ZWRgKTtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc3Vic2NyaWJlYCBzdWJzY3JpYmVzIHRvIHRoZSBnaXZlbiB0b3BpY3MuXHJcbiAgICovXHJcbiAgcHVibGljIHN1YnNjcmliZShcclxuICAgIG5leHRPck9ic2VydmVyOiBPYnNlcnZlcjxDbGllbnRFdmVudDxNPj4gfCBOZXh0Rm48Q2xpZW50RXZlbnQ8TT4+LFxyXG4gICAgZXJyb3I/OiBFcnJvckZuLFxyXG4gICAgY29tcGxldGU/OiBDb21wbGV0ZUZuLFxyXG4gICk6IFVuc3Vic2NyaWJlIHtcclxuICAgIHJldHVybiB0aGlzLmV2ZW50U3RyZWFtLnN1YnNjcmliZShcclxuICAgICAgbmV4dE9yT2JzZXJ2ZXIgYXMgTmV4dEZuPENsaWVudEV2ZW50PE0+PixcclxuICAgICAgZXJyb3IsXHJcbiAgICAgIGNvbXBsZXRlLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRJRGAgcmV0dXJucyBhIEFjdG9ySUQgb2YgY2xpZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJRCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0S2V5YCByZXR1cm5zIGEga2V5IG9mIGNsaWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0S2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5rZXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaXNBY3RpdmVgIGNoZWNrcyBpZiB0aGUgY2xpZW50IGlzIGFjdGl2ZS5cclxuICAgKi9cclxuICBwdWJsaWMgaXNBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IENsaWVudFN0YXR1cy5BY3RpdmF0ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0U3RhdHVzYCByZXR1cm5zIHRoZSBzdGF0dXMgb2YgdGhpcyBjbGllbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFN0YXR1cygpOiBDbGllbnRTdGF0dXMge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFByZXNlbmNlYCByZXR1cm5zIHRoZSBwcmVzZW5jZSBvZiB0aGlzIGNsaWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJlc2VuY2UoKTogTSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcmVzZW5jZUluZm8uZGF0YTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRQZWVyc2AgcmV0dXJucyB0aGUgcGVlcnMgb2YgdGhlIGdpdmVuIGRvY3VtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQZWVycyhrZXk6IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIE0+IHtcclxuICAgIGNvbnN0IHBlZXJzOiBSZWNvcmQ8c3RyaW5nLCBNPiA9IHt9O1xyXG4gICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMuYXR0YWNobWVudE1hcC5nZXQoa2V5KTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGF0dGFjaG1lbnQhLnBlZXJQcmVzZW5jZU1hcCEpIHtcclxuICAgICAgcGVlcnNba2V5XSA9IHZhbHVlLmRhdGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGVlcnM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJ1blN5bmNMb29wKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZG9Mb29wID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgW1NMXSBjOlwiJHt0aGlzLmdldEtleSgpfVwiIGV4aXQgc3luYyBsb29wYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xyXG4gICAgICBmb3IgKGNvbnN0IFssIGF0dGFjaG1lbnRdIG9mIHRoaXMuYXR0YWNobWVudE1hcCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGF0dGFjaG1lbnQuaXNSZWFsdGltZVN5bmMgJiZcclxuICAgICAgICAgIChhdHRhY2htZW50LmRvYy5oYXNMb2NhbENoYW5nZXMoKSB8fFxyXG4gICAgICAgICAgICBhdHRhY2htZW50LnJlbW90ZUNoYW5nZUV2ZW50UmVjZWl2ZWQpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBhdHRhY2htZW50LnJlbW90ZUNoYW5nZUV2ZW50UmVjZWl2ZWQgPSBmYWxzZTtcclxuICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy5zeW5jSW50ZXJuYWwoYXR0YWNobWVudC5kb2MpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHN5bmNMb29wRHVyYXRpb24gPSB0aGlzLnJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtXHJcbiAgICAgICAgICAgID8gdGhpcy5zeW5jTG9vcER1cmF0aW9uXHJcbiAgICAgICAgICAgIDogdGhpcy5yZWNvbm5lY3RTdHJlYW1EZWxheTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoZG9Mb29wLCBzeW5jTG9vcER1cmF0aW9uKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoYFtTTF0gYzpcIiR7dGhpcy5nZXRLZXkoKX1cIiBzeW5jIGZhaWxlZDpgLCBlcnIpO1xyXG4gICAgICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyLm5leHQoe1xyXG4gICAgICAgICAgICB0eXBlOiBDbGllbnRFdmVudFR5cGUuRG9jdW1lbnRTeW5jZWQsXHJcbiAgICAgICAgICAgIHZhbHVlOiBEb2N1bWVudFN5bmNSZXN1bHRUeXBlLlN5bmNGYWlsZWQsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoZG9Mb29wLCB0aGlzLnJlY29ubmVjdFN0cmVhbURlbGF5KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgbG9nZ2VyLmRlYnVnKGBbU0xdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgcnVuIHN5bmMgbG9vcGApO1xyXG4gICAgZG9Mb29wKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJ1bldhdGNoTG9vcCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IGRvTG9vcCA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgaWYgKHRoaXMucmVtb3RlQ2hhbmdlRXZlbnRTdHJlYW0pIHtcclxuICAgICAgICB0aGlzLnJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtLmNhbmNlbCgpO1xyXG4gICAgICAgIHRoaXMucmVtb3RlQ2hhbmdlRXZlbnRTdHJlYW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLndhdGNoTG9vcFRpbWVySUQpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy53YXRjaExvb3BUaW1lcklEKTtcclxuICAgICAgICB0aGlzLndhdGNoTG9vcFRpbWVySUQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBbV0xdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgZXhpdCB3YXRjaCBsb29wYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByZWFsdGltZVN5bmNEb2NLZXlzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICAgIGZvciAoY29uc3QgWywgYXR0YWNobWVudF0gb2YgdGhpcy5hdHRhY2htZW50TWFwKSB7XHJcbiAgICAgICAgaWYgKGF0dGFjaG1lbnQuaXNSZWFsdGltZVN5bmMpIHtcclxuICAgICAgICAgIHJlYWx0aW1lU3luY0RvY0tleXMucHVzaChhdHRhY2htZW50LmRvYy5nZXRLZXkoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXJlYWx0aW1lU3luY0RvY0tleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBbV0xdIGM6XCIke3RoaXMuZ2V0S2V5KCl9XCIgZXhpdCB3YXRjaCBsb29wYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByZXEgPSBuZXcgV2F0Y2hEb2N1bWVudHNSZXF1ZXN0KCk7XHJcbiAgICAgIHJlcS5zZXRDbGllbnQoY29udmVydGVyLnRvQ2xpZW50KHRoaXMuaWQhLCB0aGlzLnByZXNlbmNlSW5mbykpO1xyXG4gICAgICByZXEuc2V0RG9jdW1lbnRLZXlzTGlzdChyZWFsdGltZVN5bmNEb2NLZXlzKTtcclxuXHJcbiAgICAgIGNvbnN0IG9uU3RyZWFtRGlzY29ubmVjdCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMud2F0Y2hMb29wVGltZXJJRCA9IHNldFRpbWVvdXQoZG9Mb29wLCB0aGlzLnJlY29ubmVjdFN0cmVhbURlbGF5KTtcclxuICAgICAgICB0aGlzLmV2ZW50U3RyZWFtT2JzZXJ2ZXIubmV4dCh7XHJcbiAgICAgICAgICB0eXBlOiBDbGllbnRFdmVudFR5cGUuU3RyZWFtQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQsXHJcbiAgICAgICAgICB2YWx1ZTogU3RyZWFtQ29ubmVjdGlvblN0YXR1cy5EaXNjb25uZWN0ZWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLnJwY0NsaWVudC53YXRjaERvY3VtZW50cyhyZXEsIHt9KTtcclxuICAgICAgc3RyZWFtLm9uKCdkYXRhJywgKHJlc3A6IFdhdGNoRG9jdW1lbnRzUmVzcG9uc2UpID0+IHtcclxuICAgICAgICB0aGlzLmhhbmRsZVdhdGNoRG9jdW1lbnRzUmVzcG9uc2UocmVhbHRpbWVTeW5jRG9jS2V5cywgcmVzcCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBzdHJlYW0ub24oJ2VuZCcsIG9uU3RyZWFtRGlzY29ubmVjdCk7XHJcbiAgICAgIHN0cmVhbS5vbignZXJyb3InLCBvblN0cmVhbURpc2Nvbm5lY3QpO1xyXG4gICAgICB0aGlzLnJlbW90ZUNoYW5nZUV2ZW50U3RyZWFtID0gc3RyZWFtO1xyXG5cclxuICAgICAgbG9nZ2VyLmluZm8oXHJcbiAgICAgICAgYFtXRF0gYzpcIiR7dGhpcy5nZXRLZXkoKX1cIiB3YXRjaGVzIGQ6XCIke3JlYWx0aW1lU3luY0RvY0tleXMubWFwKFxyXG4gICAgICAgICAgKGtleSkgPT4ga2V5LFxyXG4gICAgICAgICl9XCJgLFxyXG4gICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICBsb2dnZXIuZGVidWcoYFtXTF0gYzpcIiR7dGhpcy5nZXRLZXkoKX1cIiBydW4gd2F0Y2ggbG9vcGApO1xyXG5cclxuICAgIGRvTG9vcCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVXYXRjaERvY3VtZW50c1Jlc3BvbnNlKFxyXG4gICAga2V5czogQXJyYXk8c3RyaW5nPixcclxuICAgIHJlc3A6IFdhdGNoRG9jdW1lbnRzUmVzcG9uc2UsXHJcbiAgKSB7XHJcbiAgICBjb25zdCBnZXRQZWVycyA9IChcclxuICAgICAgcGVlcnNNYXA6IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIE0+PixcclxuICAgICAga2V5OiBzdHJpbmcsXHJcbiAgICApID0+IHtcclxuICAgICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMuYXR0YWNobWVudE1hcC5nZXQoa2V5KTtcclxuICAgICAgY29uc3QgcGVlcnM6IFJlY29yZDxzdHJpbmcsIE0+ID0ge307XHJcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGF0dGFjaG1lbnQhLnBlZXJQcmVzZW5jZU1hcCEpIHtcclxuICAgICAgICBwZWVyc1trZXldID0gdmFsdWUuZGF0YTtcclxuICAgICAgfVxyXG4gICAgICBwZWVyc01hcFtrZXldID0gcGVlcnM7XHJcbiAgICAgIHJldHVybiBwZWVyc01hcDtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHJlc3AuaGFzSW5pdGlhbGl6YXRpb24oKSkge1xyXG4gICAgICBjb25zdCBwYlBlZXJzTWFwID0gcmVzcC5nZXRJbml0aWFsaXphdGlvbigpIS5nZXRQZWVyc01hcEJ5RG9jTWFwKCk7XHJcbiAgICAgIHBiUGVlcnNNYXAuZm9yRWFjaCgocGJQZWVycywgZG9jSUQpID0+IHtcclxuICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5hdHRhY2htZW50TWFwLmdldChkb2NJRCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYkNsaWVudCBvZiBwYlBlZXJzLmdldENsaWVudHNMaXN0KCkpIHtcclxuICAgICAgICAgIGF0dGFjaG1lbnQhLnBlZXJQcmVzZW5jZU1hcCEuc2V0KFxyXG4gICAgICAgICAgICBjb252ZXJ0ZXIudG9IZXhTdHJpbmcocGJDbGllbnQuZ2V0SWRfYXNVOCgpKSxcclxuICAgICAgICAgICAgY29udmVydGVyLmZyb21QcmVzZW5jZShwYkNsaWVudC5nZXRQcmVzZW5jZSgpISksXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLmV2ZW50U3RyZWFtT2JzZXJ2ZXIubmV4dCh7XHJcbiAgICAgICAgdHlwZTogQ2xpZW50RXZlbnRUeXBlLlBlZXJzQ2hhbmdlZCxcclxuICAgICAgICB2YWx1ZToga2V5cy5yZWR1Y2UoZ2V0UGVlcnMsIHt9KSxcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYldhdGNoRXZlbnQgPSByZXNwLmdldEV2ZW50KCkhO1xyXG4gICAgY29uc3QgcmVzcEtleXMgPSBwYldhdGNoRXZlbnQuZ2V0RG9jdW1lbnRLZXlzTGlzdCgpO1xyXG4gICAgY29uc3QgcHVibGlzaGVyID0gY29udmVydGVyLnRvSGV4U3RyaW5nKFxyXG4gICAgICBwYldhdGNoRXZlbnQuZ2V0UHVibGlzaGVyKCkhLmdldElkX2FzVTgoKSxcclxuICAgICk7XHJcbiAgICBjb25zdCBwcmVzZW5jZSA9IGNvbnZlcnRlci5mcm9tUHJlc2VuY2U8TT4oXHJcbiAgICAgIHBiV2F0Y2hFdmVudC5nZXRQdWJsaXNoZXIoKSEuZ2V0UHJlc2VuY2UoKSEsXHJcbiAgICApO1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgcmVzcEtleXMpIHtcclxuICAgICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMuYXR0YWNobWVudE1hcC5nZXQoa2V5KSE7XHJcbiAgICAgIGNvbnN0IHBlZXJQcmVzZW5jZU1hcCA9IGF0dGFjaG1lbnQucGVlclByZXNlbmNlTWFwITtcclxuICAgICAgc3dpdGNoIChwYldhdGNoRXZlbnQuZ2V0VHlwZSgpKSB7XHJcbiAgICAgICAgY2FzZSBEb2NFdmVudFR5cGUuRE9DVU1FTlRTX1dBVENIRUQ6XHJcbiAgICAgICAgICBwZWVyUHJlc2VuY2VNYXAhLnNldChwdWJsaXNoZXIsIHByZXNlbmNlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRG9jRXZlbnRUeXBlLkRPQ1VNRU5UU19VTldBVENIRUQ6XHJcbiAgICAgICAgICBwZWVyUHJlc2VuY2VNYXAhLmRlbGV0ZShwdWJsaXNoZXIpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBEb2NFdmVudFR5cGUuRE9DVU1FTlRTX0NIQU5HRUQ6XHJcbiAgICAgICAgICBhdHRhY2htZW50LnJlbW90ZUNoYW5nZUV2ZW50UmVjZWl2ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBEb2NFdmVudFR5cGUuUFJFU0VOQ0VfQ0hBTkdFRDpcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgcGVlclByZXNlbmNlTWFwIS5oYXMocHVibGlzaGVyKSAmJlxyXG4gICAgICAgICAgICBwZWVyUHJlc2VuY2VNYXAhLmdldChwdWJsaXNoZXIpIS5jbG9jayA+IHByZXNlbmNlLmNsb2NrXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBwZWVyUHJlc2VuY2VNYXAhLnNldChwdWJsaXNoZXIsIHByZXNlbmNlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBiV2F0Y2hFdmVudCEuZ2V0VHlwZSgpID09PSBEb2NFdmVudFR5cGUuRE9DVU1FTlRTX0NIQU5HRUQpIHtcclxuICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyLm5leHQoe1xyXG4gICAgICAgIHR5cGU6IENsaWVudEV2ZW50VHlwZS5Eb2N1bWVudHNDaGFuZ2VkLFxyXG4gICAgICAgIHZhbHVlOiByZXNwS2V5cyxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBwYldhdGNoRXZlbnQhLmdldFR5cGUoKSA9PT0gRG9jRXZlbnRUeXBlLkRPQ1VNRU5UU19XQVRDSEVEIHx8XHJcbiAgICAgIHBiV2F0Y2hFdmVudCEuZ2V0VHlwZSgpID09PSBEb2NFdmVudFR5cGUuRE9DVU1FTlRTX1VOV0FUQ0hFRCB8fFxyXG4gICAgICBwYldhdGNoRXZlbnQhLmdldFR5cGUoKSA9PT0gRG9jRXZlbnRUeXBlLlBSRVNFTkNFX0NIQU5HRURcclxuICAgICkge1xyXG4gICAgICB0aGlzLmV2ZW50U3RyZWFtT2JzZXJ2ZXIubmV4dCh7XHJcbiAgICAgICAgdHlwZTogQ2xpZW50RXZlbnRUeXBlLlBlZXJzQ2hhbmdlZCxcclxuICAgICAgICB2YWx1ZTogcmVzcEtleXMucmVkdWNlKGdldFBlZXJzLCB7fSksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzeW5jSW50ZXJuYWwoXHJcbiAgICBkb2M6IERvY3VtZW50UmVwbGljYTx1bmtub3duPixcclxuICApOiBQcm9taXNlPERvY3VtZW50UmVwbGljYTx1bmtub3duPj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgcmVxID0gbmV3IFB1c2hQdWxsUmVxdWVzdCgpO1xyXG4gICAgICByZXEuc2V0Q2xpZW50SWQoY29udmVydGVyLnRvVWludDhBcnJheSh0aGlzLmlkISkpO1xyXG4gICAgICBjb25zdCByZXFQYWNrID0gZG9jLmNyZWF0ZUNoYW5nZVBhY2soKTtcclxuICAgICAgY29uc3QgbG9jYWxTaXplID0gcmVxUGFjay5nZXRDaGFuZ2VTaXplKCk7XHJcbiAgICAgIHJlcS5zZXRDaGFuZ2VQYWNrKGNvbnZlcnRlci50b0NoYW5nZVBhY2socmVxUGFjaykpO1xyXG5cclxuICAgICAgbGV0IGlzUmVqZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy5ycGNDbGllbnRcclxuICAgICAgICAucHVzaFB1bGwocmVxLCB7fSwgKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgW1BQXSBjOlwiJHt0aGlzLmdldEtleSgpfVwiIGVyciA6YCwgZXJyKTtcclxuXHJcbiAgICAgICAgICAgIGlzUmVqZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHJlc3BQYWNrID0gY29udmVydGVyLmZyb21DaGFuZ2VQYWNrKHJlcy5nZXRDaGFuZ2VQYWNrKCkhKTtcclxuICAgICAgICAgIGRvYy5hcHBseUNoYW5nZVBhY2socmVzcFBhY2spO1xyXG4gICAgICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyLm5leHQoe1xyXG4gICAgICAgICAgICB0eXBlOiBDbGllbnRFdmVudFR5cGUuRG9jdW1lbnRTeW5jZWQsXHJcbiAgICAgICAgICAgIHZhbHVlOiBEb2N1bWVudFN5bmNSZXN1bHRUeXBlLlN5bmNlZCxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGRvY0tleSA9IGRvYy5nZXRLZXkoKTtcclxuICAgICAgICAgIGNvbnN0IHJlbW90ZVNpemUgPSByZXNwUGFjay5nZXRDaGFuZ2VTaXplKCk7XHJcbiAgICAgICAgICBsb2dnZXIuaW5mbyhcclxuICAgICAgICAgICAgYFtQUF0gYzpcIiR7dGhpcy5nZXRLZXkoKX1cIiBzeW5jIGQ6XCIke2RvY0tleX1cIiwgcHVzaDoke2xvY2FsU2l6ZX0gcHVsbDoke3JlbW90ZVNpemV9IGNwOiR7cmVzcFBhY2tcclxuICAgICAgICAgICAgICAuZ2V0Q2hlY2twb2ludCgpXHJcbiAgICAgICAgICAgICAgLmdldEFubm90YXRlZFN0cmluZygpfWAsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoaXNSZWplY3RlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlKGRvYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBBY3RvcklEIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvYWN0b3JfaWQnO1xyXG5pbXBvcnQgeyBPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL29wZXJhdGlvbic7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IENoYW5nZUlEIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jaGFuZ2VfaWQnO1xyXG5cclxuLyoqXHJcbiAqIGBDaGFuZ2VgIHJlcHJlc2VudHMgYSB1bml0IG9mIG1vZGlmaWNhdGlvbiBpbiB0aGUgZG9jdW1lbnQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hhbmdlIHtcclxuICBwcml2YXRlIGlkOiBDaGFuZ2VJRDtcclxuXHJcbiAgLy8gYG9wZXJhdGlvbnNgIHJlcHJlc2VudCBhIHNlcmllcyBvZiB1c2VyIGVkaXRzLlxyXG4gIHByaXZhdGUgb3BlcmF0aW9uczogQXJyYXk8T3BlcmF0aW9uPjtcclxuXHJcbiAgLy8gYG1lc3NhZ2VgIGlzIHVzZWQgdG8gc2F2ZSBhIGRlc2NyaXB0aW9uIG9mIHRoZSBjaGFuZ2UuXHJcbiAgcHJpdmF0ZSBtZXNzYWdlPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDogQ2hhbmdlSUQsIG9wZXJhdGlvbnM6IEFycmF5PE9wZXJhdGlvbj4sIG1lc3NhZ2U/OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMub3BlcmF0aW9ucyA9IG9wZXJhdGlvbnM7XHJcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBDaGFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBpZDogQ2hhbmdlSUQsXHJcbiAgICBvcGVyYXRpb25zOiBBcnJheTxPcGVyYXRpb24+LFxyXG4gICAgbWVzc2FnZT86IHN0cmluZyxcclxuICApOiBDaGFuZ2Uge1xyXG4gICAgcmV0dXJuIG5ldyBDaGFuZ2UoaWQsIG9wZXJhdGlvbnMsIG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldElEYCByZXR1cm5zIHRoZSBJRCBvZiB0aGlzIGNoYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SUQoKTogQ2hhbmdlSUQge1xyXG4gICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0TWVzc2FnZWAgcmV0dXJucyB0aGUgbWVzc2FnZSBvZiB0aGlzIGNoYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWVzc2FnZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRPcGVyYXRpb25zYCByZXR1cm5zIHRoZSBvcGVyYXRpb25zIG9mIHRoaXMgY2hhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPcGVyYXRpb25zKCk6IEFycmF5PE9wZXJhdGlvbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRBY3RvcmAgc2V0cyB0aGUgZ2l2ZW4gYWN0b3IuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEFjdG9yKGFjdG9ySUQ6IEFjdG9ySUQpOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIHRoaXMub3BlcmF0aW9ucykge1xyXG4gICAgICBvcGVyYXRpb24uc2V0QWN0b3IoYWN0b3JJRCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pZCA9IHRoaXMuaWQuc2V0QWN0b3IoYWN0b3JJRCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZXhlY3V0ZWAgZXhlY3V0ZXMgdGhlIG9wZXJhdGlvbnMgb2YgdGhpcyBjaGFuZ2UgdG8gdGhlIGdpdmVuIHJvb3QuXHJcbiAgICovXHJcbiAgcHVibGljIGV4ZWN1dGUocm9vdDogSlNPTlJvb3QpOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIHRoaXMub3BlcmF0aW9ucykge1xyXG4gICAgICBvcGVyYXRpb24uZXhlY3V0ZShyb290KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhIG9mIHRoaXMgY2hhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLm9wZXJhdGlvbnNcclxuICAgICAgLm1hcCgob3BlcmF0aW9uKSA9PiBvcGVyYXRpb24uZ2V0QW5ub3RhdGVkU3RyaW5nKCkpXHJcbiAgICAgIC5qb2luKCcsJyl9YDtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgTG9uZyBmcm9tICdsb25nJztcclxuaW1wb3J0IHtcclxuICBBY3RvcklELFxyXG4gIEluaXRpYWxBY3RvcklELFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL2FjdG9yX2lkJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcblxyXG4vKipcclxuICogYENoYW5nZUlEYCBpcyBmb3IgaWRlbnRpZnlpbmcgdGhlIENoYW5nZS4gVGhpcyBpcyBpbW11dGFibGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hhbmdlSUQge1xyXG4gIHByaXZhdGUgY2xpZW50U2VxOiBudW1iZXI7XHJcblxyXG4gIC8vIGBzZXJ2ZXJTZXFgIGlzIG9wdGlvbmFsIGFuZCBvbmx5IHByZXNlbnQgZm9yIGNoYW5nZXMgc3RvcmVkIG9uIHRoZSBzZXJ2ZXIuXHJcbiAgcHJpdmF0ZSBzZXJ2ZXJTZXE/OiBMb25nO1xyXG5cclxuICBwcml2YXRlIGxhbXBvcnQ6IExvbmc7XHJcbiAgcHJpdmF0ZSBhY3Rvcj86IEFjdG9ySUQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNsaWVudFNlcTogbnVtYmVyLCBsYW1wb3J0OiBMb25nLCBhY3Rvcj86IEFjdG9ySUQpIHtcclxuICAgIHRoaXMuY2xpZW50U2VxID0gY2xpZW50U2VxO1xyXG4gICAgdGhpcy5sYW1wb3J0ID0gbGFtcG9ydDtcclxuICAgIHRoaXMuYWN0b3IgPSBhY3RvcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBvZmAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBDaGFuZ2VJRC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG9mKFxyXG4gICAgY2xpZW50U2VxOiBudW1iZXIsXHJcbiAgICBsYW1wb3J0OiBMb25nLFxyXG4gICAgYWN0b3I/OiBBY3RvcklELFxyXG4gICk6IENoYW5nZUlEIHtcclxuICAgIHJldHVybiBuZXcgQ2hhbmdlSUQoY2xpZW50U2VxLCBsYW1wb3J0LCBhY3Rvcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgbmV4dGAgY3JlYXRlcyBhIG5leHQgSUQgb2YgdGhpcyBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgbmV4dCgpOiBDaGFuZ2VJRCB7XHJcbiAgICByZXR1cm4gbmV3IENoYW5nZUlEKHRoaXMuY2xpZW50U2VxICsgMSwgdGhpcy5sYW1wb3J0LmFkZCgxKSwgdGhpcy5hY3Rvcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc3luY0xhbXBvcnRgIHN5bmNzIGxhbXBvcnQgdGltZXN0YW1wIHdpdGggdGhlIGdpdmVuIElELlxyXG4gICAqXHJcbiAgICoge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhbXBvcnRfdGltZXN0YW1wcyNBbGdvcml0aG19XHJcbiAgICovXHJcbiAgcHVibGljIHN5bmNMYW1wb3J0KG90aGVyTGFtcG9ydDogTG9uZyk6IENoYW5nZUlEIHtcclxuICAgIGlmIChvdGhlckxhbXBvcnQuZ3JlYXRlclRoYW4odGhpcy5sYW1wb3J0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IENoYW5nZUlEKHRoaXMuY2xpZW50U2VxLCBvdGhlckxhbXBvcnQsIHRoaXMuYWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgQ2hhbmdlSUQodGhpcy5jbGllbnRTZXEsIHRoaXMubGFtcG9ydC5hZGQoMSksIHRoaXMuYWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZVRpbWVUaWNrZXRgIGNyZWF0ZXMgYSB0aWNrZXQgb2YgdGhlIGdpdmVuIGRlbGltaXRlci5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlVGltZVRpY2tldChkZWxpbWl0ZXI6IG51bWJlcik6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIFRpbWVUaWNrZXQub2YodGhpcy5sYW1wb3J0LCBkZWxpbWl0ZXIsIHRoaXMuYWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldEFjdG9yYCBzZXRzIHRoZSBnaXZlbiBhY3Rvci5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0QWN0b3IoYWN0b3JJRDogQWN0b3JJRCk6IENoYW5nZUlEIHtcclxuICAgIHJldHVybiBuZXcgQ2hhbmdlSUQodGhpcy5jbGllbnRTZXEsIHRoaXMubGFtcG9ydCwgYWN0b3JJRCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q2xpZW50U2VxYCByZXR1cm5zIHRoZSBjbGllbnQgc2VxdWVuY2Ugb2YgdGhpcyBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2xpZW50U2VxKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jbGllbnRTZXE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0TGFtcG9ydGAgcmV0dXJucyB0aGUgbGFtcG9ydCBjbG9jayBvZiB0aGlzIElELlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRMYW1wb3J0KCk6IExvbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubGFtcG9ydDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRMYW1wb3J0QXNTdHJpbmdgIHJldHVybnMgdGhlIGxhbXBvcnQgY2xvY2sgb2YgdGhpcyBJRCBhcyBhIHN0cmluZy5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TGFtcG9ydEFzU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5sYW1wb3J0LnRvU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QWN0b3JJRGAgcmV0dXJucyB0aGUgYWN0b3Igb2YgdGhpcyBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QWN0b3JJRCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuYWN0b3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YSBvZiB0aGlzIElELlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGlmICghdGhpcy5hY3Rvcikge1xyXG4gICAgICByZXR1cm4gYCR7dGhpcy5sYW1wb3J0LnRvU3RyaW5nKCl9Om5pbDoke3RoaXMuY2xpZW50U2VxfWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7dGhpcy5sYW1wb3J0LnRvU3RyaW5nKCl9OiR7dGhpcy5hY3Rvci5zdWJzdHJpbmcoMjIsIDI0KX06JHtcclxuICAgICAgdGhpcy5jbGllbnRTZXFcclxuICAgIH1gO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGBJbml0aWFsQ2hhbmdlSURgIHJlcHJlc2VudHMgdGhlIGluaXRpYWwgc3RhdGUgSUQuIFVzdWFsbHkgdGhpcyBpcyB1c2VkIHRvXHJcbiAqIHJlcHJlc2VudCBhIHN0YXRlIHdoZXJlIG5vdGhpbmcgaGFzIGJlZW4gZWRpdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEluaXRpYWxDaGFuZ2VJRCA9IG5ldyBDaGFuZ2VJRChcclxuICAwLFxyXG4gIExvbmcuZnJvbUludCgwLCB0cnVlKSxcclxuICBJbml0aWFsQWN0b3JJRCxcclxuKTtcclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDaGVja3BvaW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jaGVja3BvaW50JztcclxuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jaGFuZ2UnO1xyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuXHJcbi8qKlxyXG4gKiBgQ2hhbmdlUGFja2AgaXMgYSB1bml0IGZvciBkZWxpdmVyaW5nIGNoYW5nZXMgaW4gYSBkb2N1bWVudCB0byB0aGUgcmVtb3RlLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDaGFuZ2VQYWNrIHtcclxuICAvKipcclxuICAgKiBgZG9jdW1lbnRLZXlgIGlzIHRoZSBrZXkgb2YgdGhlIGRvY3VtZW50LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZG9jdW1lbnRLZXk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogYENoZWNrcG9pbnRgIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBjbGllbnQgcmVjZWl2ZWQgY2hhbmdlcy5cclxuICAgKi9cclxuICBwcml2YXRlIGNoZWNrcG9pbnQ6IENoZWNrcG9pbnQ7XHJcblxyXG4gIHByaXZhdGUgY2hhbmdlczogQXJyYXk8Q2hhbmdlPjtcclxuXHJcbiAgLyoqXHJcbiAgICogYHNuYXBzaG90YCBpcyBhIGJ5dGUgYXJyYXkgdGhhdCBlbmNvZGUgdGhlIGRvY3VtZW50LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgc25hcHNob3Q/OiBVaW50OEFycmF5O1xyXG5cclxuICAvKipcclxuICAgKiBgbWluU3luY2VkVGlja2V0YCBpcyB0aGUgbWluaW11bSBsb2dpY2FsIHRpbWUgdGFrZW4gYnkgY2xpZW50cyB3aG8gYXR0YWNoXHJcbiAgICogdGhlIGRvY3VtZW50LiBJdCB1c2VkIHRvIGNvbGxlY3QgZ2FyYmFnZSBvbiB0aGUgcmVwbGljYSBvbiB0aGUgY2xpZW50LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgbWluU3luY2VkVGlja2V0PzogVGltZVRpY2tldDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIGNoZWNrcG9pbnQ6IENoZWNrcG9pbnQsXHJcbiAgICBjaGFuZ2VzOiBBcnJheTxDaGFuZ2U+LFxyXG4gICAgc25hcHNob3Q/OiBVaW50OEFycmF5LFxyXG4gICAgbWluU3luY2VkVGlja2V0PzogVGltZVRpY2tldCxcclxuICApIHtcclxuICAgIHRoaXMuZG9jdW1lbnRLZXkgPSBrZXk7XHJcbiAgICB0aGlzLmNoZWNrcG9pbnQgPSBjaGVja3BvaW50O1xyXG4gICAgdGhpcy5jaGFuZ2VzID0gY2hhbmdlcztcclxuICAgIHRoaXMuc25hcHNob3QgPSBzbmFwc2hvdDtcclxuICAgIHRoaXMubWluU3luY2VkVGlja2V0ID0gbWluU3luY2VkVGlja2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBDaGFuZ2VQYWNrLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxyXG4gICAga2V5OiBzdHJpbmcsXHJcbiAgICBjaGVja3BvaW50OiBDaGVja3BvaW50LFxyXG4gICAgY2hhbmdlczogQXJyYXk8Q2hhbmdlPixcclxuICAgIHNuYXBzaG90PzogVWludDhBcnJheSxcclxuICAgIG1pblN5bmNlZFRpY2tldD86IFRpbWVUaWNrZXQsXHJcbiAgKTogQ2hhbmdlUGFjayB7XHJcbiAgICByZXR1cm4gbmV3IENoYW5nZVBhY2soa2V5LCBjaGVja3BvaW50LCBjaGFuZ2VzLCBzbmFwc2hvdCwgbWluU3luY2VkVGlja2V0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRLZXlgIHJldHVybnMgdGhlIGRvY3VtZW50IGtleSBvZiB0aGlzIHBhY2suXHJcbiAgICovXHJcbiAgcHVibGljIGdldERvY3VtZW50S2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudEtleTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRDaGVja3BvaW50YCByZXR1cm5zIHRoZSBjaGVja3BvaW50IG9mIHRoaXMgcGFjay5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2hlY2twb2ludCgpOiBDaGVja3BvaW50IHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrcG9pbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q2hhbmdlc2AgcmV0dXJucyB0aGUgY2hhbmdlcyBvZiB0aGlzIHBhY2suXHJcbiAgICovXHJcbiAgcHVibGljIGdldENoYW5nZXMoKTogQXJyYXk8Q2hhbmdlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGhhc0NoYW5nZXNgIHJldHVybnMgdGhlIHdoZXRoZXIgdGhpcyBwYWNrIGhhcyBjaGFuZ2VzIG9yIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzQ2hhbmdlcygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNoYW5nZXMubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRDaGFuZ2VTaXplYCByZXR1cm5zIHRoZSBzaXplIG9mIGNoYW5nZXMgdGhpcyBwYWNrIGhhcy5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2hhbmdlU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzU25hcHNob3RgIHJldHVybnMgdGhlIHdoZXRoZXIgdGhpcyBwYWNrIGhhcyBhIHNuYXBzaG90IG9yIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzU25hcHNob3QoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISF0aGlzLnNuYXBzaG90ICYmICEhdGhpcy5zbmFwc2hvdC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0U25hcHNob3RgIHJldHVybnMgdGhlIHNuYXBzaG90IG9mIHRoaXMgcGFjay5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U25hcHNob3QoKTogVWludDhBcnJheSB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5zbmFwc2hvdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRNaW5TeW5jZWRUaWNrZXRgIHJldHVybnMgdGhlIG1pbmltdW0gc3luY2VkIHRpY2tldCBvZiB0aGlzIHBhY2suXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1pblN5bmNlZFRpY2tldCgpOiBUaW1lVGlja2V0IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLm1pblN5bmNlZFRpY2tldDtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgTG9uZyBmcm9tICdsb25nJztcclxuXHJcbi8qKlxyXG4gKiBgQ2hlY2twb2ludGAgaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGNoYW5nZXMgc2VudCBhbmQgcmVjZWl2ZWQgYnkgdGhlXHJcbiAqIGNsaWVudC4gVGhpcyBpcyBpbW11dGFibGUuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiovXHJcbmV4cG9ydCBjbGFzcyBDaGVja3BvaW50IHtcclxuICBwcml2YXRlIHNlcnZlclNlcTogTG9uZztcclxuICBwcml2YXRlIGNsaWVudFNlcTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihzZXJ2ZXJTZXE6IExvbmcsIGNsaWVudFNlcTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNlcnZlclNlcSA9IHNlcnZlclNlcTtcclxuICAgIHRoaXMuY2xpZW50U2VxID0gY2xpZW50U2VxO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9mYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIENoZWNrcG9pbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvZihzZXJ2ZXJTZXE6IExvbmcsIGNsaWVudFNlcTogbnVtYmVyKTogQ2hlY2twb2ludCB7XHJcbiAgICByZXR1cm4gbmV3IENoZWNrcG9pbnQoc2VydmVyU2VxLCBjbGllbnRTZXEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGluY3JlYXNlQ2xpZW50U2VxYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIHdpdGggaW5jcmVhc2VkIGNsaWVudCBzZXF1ZW5jZS5cclxuICAgKi9cclxuICBwdWJsaWMgaW5jcmVhc2VDbGllbnRTZXEoaW5jOiBudW1iZXIpOiBDaGVja3BvaW50IHtcclxuICAgIGlmIChpbmMgPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBDaGVja3BvaW50KHRoaXMuc2VydmVyU2VxLCB0aGlzLmNsaWVudFNlcSArIGluYyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZm9yd2FyZGAgdXBkYXRlcyB0aGUgZ2l2ZW4gY2hlY2twb2ludCB3aXRoIHRob3NlIHZhbHVlcyB3aGVuIGl0IGlzIGdyZWF0ZXJcclxuICAgKiB0aGFuIHRoZSB2YWx1ZXMgb2YgaW50ZXJuYWwgcHJvcGVydGllcy5cclxuICAgKi9cclxuICBwdWJsaWMgZm9yd2FyZChvdGhlcjogQ2hlY2twb2ludCk6IENoZWNrcG9pbnQge1xyXG4gICAgaWYgKHRoaXMuZXF1YWxzKG90aGVyKSkge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZXJ2ZXJTZXEgPSB0aGlzLnNlcnZlclNlcS5ncmVhdGVyVGhhbihvdGhlci5zZXJ2ZXJTZXEpXHJcbiAgICAgID8gdGhpcy5zZXJ2ZXJTZXFcclxuICAgICAgOiBvdGhlci5zZXJ2ZXJTZXE7XHJcbiAgICBjb25zdCBjbGllbnRTZXEgPSBNYXRoLm1heCh0aGlzLmNsaWVudFNlcSwgb3RoZXIuY2xpZW50U2VxKTtcclxuICAgIHJldHVybiBDaGVja3BvaW50Lm9mKHNlcnZlclNlcSwgY2xpZW50U2VxKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRTZXJ2ZXJTZXFBc1N0cmluZ2AgcmV0dXJucyB0aGUgc2VydmVyIHNlcSBvZiB0aGlzIGNoZWNrcG9pbnQgYXMgYVxyXG4gICAqIHN0cmluZy5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2VydmVyU2VxQXNTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnNlcnZlclNlcS50b1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldENsaWVudFNlcWAgcmV0dXJucyB0aGUgY2xpZW50IHNlcSBvZiB0aGlzIGNoZWNrcG9pbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENsaWVudFNlcSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50U2VxO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFNlcnZlclNlcWAgcmV0dXJucyB0aGUgc2VydmVyIHNlcSBvZiB0aGlzIGNoZWNrcG9pbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFNlcnZlclNlcSgpOiBMb25nIHtcclxuICAgIHJldHVybiB0aGlzLnNlcnZlclNlcTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBlcXVhbHNgIHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gY2hlY2twb2ludCBpcyBlcXVhbCB0byB0aGlzIGNoZWNrcG9pbnRcclxuICAgKiBvciBub3QuXHJcbiAgICovXHJcbiAgcHVibGljIGVxdWFscyhvdGhlcjogQ2hlY2twb2ludCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdGhpcy5jbGllbnRTZXEgPT09IG90aGVyLmNsaWVudFNlcSAmJlxyXG4gICAgICB0aGlzLnNlcnZlclNlcS5lcXVhbHMob3RoZXIuc2VydmVyU2VxKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhIG9mIHRoaXNcclxuICAgKiBjaGVja3BvaW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgc2VydmVyU2VxPSR7dGhpcy5zZXJ2ZXJTZXF9LCBjbGllbnRTZXE9JHt0aGlzLmNsaWVudFNlcX1gO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGBJbml0aWFsQ2hlY2twb2ludGAgaXMgdGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGNoZWNrcG9pbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW5pdGlhbENoZWNrcG9pbnQgPSBuZXcgQ2hlY2twb2ludChMb25nLmZyb21JbnQoMCwgdHJ1ZSksIDApO1xyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgVGltZVRpY2tldCxcclxuICBJbml0aWFsRGVsaW1pdGVyLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7XHJcbiAgSlNPTkNvbnRhaW5lcixcclxuICBKU09ORWxlbWVudCxcclxuICBUZXh0RWxlbWVudCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuaW1wb3J0IHsgT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBDaGFuZ2VJRCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9jaGFuZ2UvY2hhbmdlX2lkJztcclxuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jaGFuZ2UnO1xyXG5cclxuLyoqXHJcbiAqIGBDaGFuZ2VDb250ZXh0YCBpcyB1c2VkIHRvIHJlY29yZCB0aGUgY29udGV4dCBvZiBtb2RpZmljYXRpb24gd2hlbiBlZGl0aW5nXHJcbiAqIGEgZG9jdW1lbnQuIEVhY2ggdGltZSB3ZSBhZGQgYW4gb3BlcmF0aW9uLCBhIG5ldyB0aW1lIHRpY2tldCBpcyBpc3N1ZWQuXHJcbiAqIEZpbmFsbHkgcmV0dXJucyBhIENoYW5nZSBhZnRlciB0aGUgbW9kaWZpY2F0aW9uIGhhcyBiZWVuIGNvbXBsZXRlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDaGFuZ2VDb250ZXh0IHtcclxuICBwcml2YXRlIGlkOiBDaGFuZ2VJRDtcclxuICBwcml2YXRlIHJvb3Q6IEpTT05Sb290O1xyXG4gIHByaXZhdGUgb3BlcmF0aW9uczogQXJyYXk8T3BlcmF0aW9uPjtcclxuICBwcml2YXRlIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBkZWxpbWl0ZXI6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IENoYW5nZUlELCByb290OiBKU09OUm9vdCwgbWVzc2FnZT86IHN0cmluZykge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5yb290ID0gcm9vdDtcclxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICB0aGlzLm9wZXJhdGlvbnMgPSBbXTtcclxuICAgIHRoaXMuZGVsaW1pdGVyID0gSW5pdGlhbERlbGltaXRlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQ2hhbmdlQ29udGV4dC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcclxuICAgIGlkOiBDaGFuZ2VJRCxcclxuICAgIHJvb3Q6IEpTT05Sb290LFxyXG4gICAgbWVzc2FnZT86IHN0cmluZyxcclxuICApOiBDaGFuZ2VDb250ZXh0IHtcclxuICAgIHJldHVybiBuZXcgQ2hhbmdlQ29udGV4dChpZCwgcm9vdCwgbWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcHVzaGAgcHVzaGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gdG8gdGhpcyBjb250ZXh0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXNoKG9wZXJhdGlvbjogT3BlcmF0aW9uKTogdm9pZCB7XHJcbiAgICB0aGlzLm9wZXJhdGlvbnMucHVzaChvcGVyYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHJlZ2lzdGVyRWxlbWVudGAgcmVnaXN0ZXJzIHRoZSBnaXZlbiBlbGVtZW50IHRvIHRoZSByb290LlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdpc3RlckVsZW1lbnQoZWxlbWVudDogSlNPTkVsZW1lbnQsIHBhcmVudDogSlNPTkNvbnRhaW5lcik6IHZvaWQge1xyXG4gICAgdGhpcy5yb290LnJlZ2lzdGVyRWxlbWVudChlbGVtZW50LCBwYXJlbnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHJlZ2lzdGVyUmVtb3ZlZEVsZW1lbnRgIHJlZ2lzdGVyIHJlbW92ZWQgZWxlbWVudCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdpc3RlclJlbW92ZWRFbGVtZW50KGRlbGV0ZWQ6IEpTT05FbGVtZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLnJvb3QucmVnaXN0ZXJSZW1vdmVkRWxlbWVudChkZWxldGVkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGByZWdpc3RlclJlbW92ZWROb2RlVGV4dEVsZW1lbnRgIHJlZ2lzdGVyIHRleHQgZWxlbWVudCBoYXMgcmVtb3ZlZCBub2RlIGZvclxyXG4gICAqIGdhcmJhZ2UgY29sbGVjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXJSZW1vdmVkTm9kZVRleHRFbGVtZW50KHRleHQ6IFRleHRFbGVtZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLnJvb3QucmVnaXN0ZXJUZXh0V2l0aEdhcmJhZ2UodGV4dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q2hhbmdlYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIENoYW5nZSBpbiB0aGlzIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENoYW5nZSgpOiBDaGFuZ2Uge1xyXG4gICAgcmV0dXJuIENoYW5nZS5jcmVhdGUodGhpcy5pZCwgdGhpcy5vcGVyYXRpb25zLCB0aGlzLm1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGhhc09wZXJhdGlvbnNgIHJldHVybnMgdGhlIHdoZXRoZXIgdGhpcyBjb250ZXh0IGhhcyBvcGVyYXRpb25zIG9yIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzT3BlcmF0aW9ucygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbnMubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpc3N1ZVRpbWVUaWNrZXRgIGNyZWF0ZXMgYSB0aW1lIHRpY2tldCB0byBiZSB1c2VkIHRvIGNyZWF0ZSBhIG5ldyBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGlzc3VlVGltZVRpY2tldCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHRoaXMuZGVsaW1pdGVyICs9IDE7XHJcbiAgICByZXR1cm4gdGhpcy5pZC5jcmVhdGVUaW1lVGlja2V0KHRoaXMuZGVsaW1pdGVyKTtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHtcclxuICBPYnNlcnZlcixcclxuICBPYnNlcnZhYmxlLFxyXG4gIGNyZWF0ZU9ic2VydmFibGUsXHJcbiAgVW5zdWJzY3JpYmUsXHJcbiAgRXJyb3JGbixcclxuICBDb21wbGV0ZUZuLFxyXG4gIE5leHRGbixcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgQWN0b3JJRCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL2FjdG9yX2lkJztcclxuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jaGFuZ2UnO1xyXG5pbXBvcnQge1xyXG4gIENoYW5nZUlELFxyXG4gIEluaXRpYWxDaGFuZ2VJRCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NoYW5nZV9pZCc7XHJcbmltcG9ydCB7IENoYW5nZUNvbnRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NvbnRleHQnO1xyXG5pbXBvcnQgeyBjb252ZXJ0ZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvYXBpL2NvbnZlcnRlcic7XHJcbmltcG9ydCB7IENoYW5nZVBhY2sgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NoYW5nZV9wYWNrJztcclxuaW1wb3J0IHsgSlNPTlJvb3QgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yb290JztcclxuaW1wb3J0IHsgT2JqZWN0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9vYmplY3QnO1xyXG5pbXBvcnQgeyBjcmVhdGVQcm94eSB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9wcm94eSc7XHJcbmltcG9ydCB7XHJcbiAgQ2hlY2twb2ludCxcclxuICBJbml0aWFsQ2hlY2twb2ludCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NoZWNrcG9pbnQnO1xyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHsgSlNPTk9iamVjdCB9IGZyb20gJy4vcHJveHkvb2JqZWN0X3Byb3h5JztcclxuXHJcbi8qKlxyXG4gKiBgRG9jRXZlbnRUeXBlYCBpcyBkb2N1bWVudCBldmVudCB0eXBlc1xyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZW51bSBEb2NFdmVudFR5cGUge1xyXG4gIC8qKlxyXG4gICAqIHNuYXBzaG90IGV2ZW50IHR5cGVcclxuICAgKi9cclxuICBTbmFwc2hvdCA9ICdzbmFwc2hvdCcsXHJcbiAgLyoqXHJcbiAgICogbG9jYWwgZG9jdW1lbnQgY2hhbmdlIGV2ZW50IHR5cGVcclxuICAgKi9cclxuICBMb2NhbENoYW5nZSA9ICdsb2NhbC1jaGFuZ2UnLFxyXG4gIC8qKlxyXG4gICAqIHJlbW90ZSBkb2N1bWVudCBjaGFuZ2UgZXZlbnQgdHlwZVxyXG4gICAqL1xyXG4gIFJlbW90ZUNoYW5nZSA9ICdyZW1vdGUtY2hhbmdlJyxcclxufVxyXG5cclxuLyoqXHJcbiAqIGBEb2NFdmVudGAgaXMgYW4gZXZlbnQgdGhhdCBvY2N1cnMgaW4gYERvY3VtZW50UmVwbGljYWAuIEl0IGNhbiBiZSBkZWxpdmVyZWRcclxuICogdXNpbmcgYERvY3VtZW50UmVwbGljYS5zdWJzY3JpYmUoKWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIERvY0V2ZW50ID0gU25hcHNob3RFdmVudCB8IExvY2FsQ2hhbmdlRXZlbnQgfCBSZW1vdGVDaGFuZ2VFdmVudDtcclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmFzZURvY0V2ZW50IHtcclxuICB0eXBlOiBEb2NFdmVudFR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgU25hcHNob3RFdmVudGAgaXMgYW4gZXZlbnQgdGhhdCBvY2N1cnMgd2hlbiBhIHNuYXBzaG90IGlzIHJlY2VpdmVkIGZyb21cclxuICogdGhlIHNlcnZlci5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTbmFwc2hvdEV2ZW50IGV4dGVuZHMgQmFzZURvY0V2ZW50IHtcclxuICAvKipcclxuICAgKiBlbnVtIHtAbGluayBEb2NFdmVudFR5cGV9LlNuYXBzaG90XHJcbiAgICovXHJcbiAgdHlwZTogRG9jRXZlbnRUeXBlLlNuYXBzaG90O1xyXG4gIC8qKlxyXG4gICAqIFNuYXBzaG90RXZlbnQgdHlwZVxyXG4gICAqL1xyXG4gIHZhbHVlOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKipcclxuICogYENoYW5nZUluZm9gIHJlcHJlc2VudHMgYSBwYWlyIG9mIGBDaGFuZ2VgIGFuZCB0aGUgSnNvblBhdGggb2YgdGhlIGNoYW5nZWRcclxuICogZWxlbWVudC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbmdlSW5mbyB7XHJcbiAgY2hhbmdlOiBDaGFuZ2U7XHJcbiAgcGF0aHM6IEFycmF5PHN0cmluZz47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgTG9jYWxDaGFuZ2VFdmVudGAgaXMgYW4gZXZlbnQgdGhhdCBvY2N1cnMgd2hlbiB0aGUgZG9jdW1lbnQgaXMgY2hhbmdlZFxyXG4gKiBieSBsb2NhbCBjaGFuZ2VzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsQ2hhbmdlRXZlbnQgZXh0ZW5kcyBCYXNlRG9jRXZlbnQge1xyXG4gIC8qKlxyXG4gICAqIGVudW0ge0BsaW5rIERvY0V2ZW50VHlwZX0uTG9jYWxDaGFuZ2VcclxuICAgKi9cclxuICB0eXBlOiBEb2NFdmVudFR5cGUuTG9jYWxDaGFuZ2U7XHJcbiAgLyoqXHJcbiAgICogTG9jYWxDaGFuZ2VFdmVudCB0eXBlXHJcbiAgICovXHJcbiAgdmFsdWU6IEFycmF5PENoYW5nZUluZm8+O1xyXG59XHJcblxyXG4vKipcclxuICogYFJlbW90ZUNoYW5nZUV2ZW50YCBpcyBhbiBldmVudCB0aGF0IG9jY3VycyB3aGVuIHRoZSBkb2N1bWVudCBpcyBjaGFuZ2VkXHJcbiAqIGJ5IHJlbW90ZSBjaGFuZ2VzLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlbW90ZUNoYW5nZUV2ZW50IGV4dGVuZHMgQmFzZURvY0V2ZW50IHtcclxuICAvKipcclxuICAgKiBlbnVtIHtAbGluayBEb2NFdmVudFR5cGV9LlJlbW90ZUNoYW5nZVxyXG4gICAqL1xyXG4gIHR5cGU6IERvY0V2ZW50VHlwZS5SZW1vdGVDaGFuZ2U7XHJcbiAgLyoqXHJcbiAgICogUmVtb3RlQ2hhbmdlRXZlbnQgdHlwZVxyXG4gICAqL1xyXG4gIHZhbHVlOiBBcnJheTxDaGFuZ2VJbmZvPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGV4YWJsZSBrZXksIHZhbHVlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIEluZGV4YWJsZSA9IFJlY29yZDxzdHJpbmcsIGFueT47XHJcblxyXG4vKipcclxuICogYERvY3VtZW50UmVwbGljYWAgaXMgYSBDUkRULWJhc2VkIGRhdGEgdHlwZS4gV2UgY2FuIHJlcHJlc2VudGluZyB0aGUgbW9kZWxcclxuICogb2YgdGhlIGFwcGxpY2F0aW9uLiBBbmQgd2UgY2FuIGVkaXQgaXQgZXZlbiB3aGlsZSBvZmZsaW5lLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRSZXBsaWNhPFQgPSBJbmRleGFibGU+IGltcGxlbWVudHMgT2JzZXJ2YWJsZTxEb2NFdmVudD4ge1xyXG4gIHByaXZhdGUga2V5OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSByb290OiBKU09OUm9vdDtcclxuICBwcml2YXRlIGNsb25lPzogSlNPTlJvb3Q7XHJcbiAgcHJpdmF0ZSBjaGFuZ2VJRDogQ2hhbmdlSUQ7XHJcbiAgcHJpdmF0ZSBjaGVja3BvaW50OiBDaGVja3BvaW50O1xyXG4gIHByaXZhdGUgbG9jYWxDaGFuZ2VzOiBBcnJheTxDaGFuZ2U+O1xyXG4gIHByaXZhdGUgZXZlbnRTdHJlYW06IE9ic2VydmFibGU8RG9jRXZlbnQ+O1xyXG4gIHByaXZhdGUgZXZlbnRTdHJlYW1PYnNlcnZlciE6IE9ic2VydmVyPERvY0V2ZW50PjtcclxuXHJcbiAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgdGhpcy5yb290ID0gSlNPTlJvb3QuY3JlYXRlKCk7XHJcbiAgICB0aGlzLmNoYW5nZUlEID0gSW5pdGlhbENoYW5nZUlEO1xyXG4gICAgdGhpcy5jaGVja3BvaW50ID0gSW5pdGlhbENoZWNrcG9pbnQ7XHJcbiAgICB0aGlzLmxvY2FsQ2hhbmdlcyA9IFtdO1xyXG4gICAgdGhpcy5ldmVudFN0cmVhbSA9IGNyZWF0ZU9ic2VydmFibGU8RG9jRXZlbnQ+KChvYnNlcnZlcikgPT4ge1xyXG4gICAgICB0aGlzLmV2ZW50U3RyZWFtT2JzZXJ2ZXIgPSBvYnNlcnZlcjtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBEb2N1bWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZTxUPihrZXk6IHN0cmluZyk6IERvY3VtZW50UmVwbGljYTxUPiB7XHJcbiAgICByZXR1cm4gbmV3IERvY3VtZW50UmVwbGljYTxUPihrZXkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHVwZGF0ZWAgZXhlY3V0ZXMgdGhlIGdpdmVuIHVwZGF0ZXIgdG8gdXBkYXRlIHRoaXMgZG9jdW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZShcclxuICAgIHVwZGF0ZXI6IChyb290OiBKU09OT2JqZWN0PFQ+KSA9PiB2b2lkLFxyXG4gICAgbWVzc2FnZT86IHN0cmluZyxcclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMuZW5zdXJlQ2xvbmUoKTtcclxuICAgIGNvbnN0IGNvbnRleHQgPSBDaGFuZ2VDb250ZXh0LmNyZWF0ZShcclxuICAgICAgdGhpcy5jaGFuZ2VJRC5uZXh0KCksXHJcbiAgICAgIHRoaXMuY2xvbmUhLFxyXG4gICAgICBtZXNzYWdlLFxyXG4gICAgKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwcm94eSA9IGNyZWF0ZVByb3h5PEpTT05PYmplY3Q8VD4+KFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgdGhpcy5jbG9uZSEuZ2V0T2JqZWN0KCksXHJcbiAgICAgICk7XHJcbiAgICAgIHVwZGF0ZXIocHJveHkpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIC8vIGRyb3AgY2xvbmUgYmVjYXVzZSBpdCBpcyBjb250YW1pbmF0ZWQuXHJcbiAgICAgIHRoaXMuY2xvbmUgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihlcnIpO1xyXG4gICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuaGFzT3BlcmF0aW9ucygpKSB7XHJcbiAgICAgIGlmIChsb2dnZXIuaXNFbmFibGVkKExvZ0xldmVsLlRyaXZpYWwpKSB7XHJcbiAgICAgICAgbG9nZ2VyLnRyaXZpYWwoYHRyeWluZyB0byB1cGRhdGUgYSBsb2NhbCBjaGFuZ2U6ICR7dGhpcy50b0pTT04oKX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgY2hhbmdlID0gY29udGV4dC5nZXRDaGFuZ2UoKTtcclxuICAgICAgY2hhbmdlLmV4ZWN1dGUodGhpcy5yb290KTtcclxuICAgICAgdGhpcy5sb2NhbENoYW5nZXMucHVzaChjaGFuZ2UpO1xyXG4gICAgICB0aGlzLmNoYW5nZUlEID0gY2hhbmdlLmdldElEKCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5ldmVudFN0cmVhbU9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyLm5leHQoe1xyXG4gICAgICAgICAgdHlwZTogRG9jRXZlbnRUeXBlLkxvY2FsQ2hhbmdlLFxyXG4gICAgICAgICAgdmFsdWU6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNoYW5nZSxcclxuICAgICAgICAgICAgICBwYXRoczogdGhpcy5jcmVhdGVQYXRocyhjaGFuZ2UpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxvZ2dlci5pc0VuYWJsZWQoTG9nTGV2ZWwuVHJpdmlhbCkpIHtcclxuICAgICAgICBsb2dnZXIudHJpdmlhbChgYWZ0ZXIgdXBkYXRlIGEgbG9jYWwgY2hhbmdlOiAke3RoaXMudG9KU09OKCl9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzdWJzY3JpYmVgIGFkZHMgdGhlIGdpdmVuIG9ic2VydmVyIHRvIHRoZSBmYW4tb3V0IGxpc3QuXHJcbiAgICovXHJcbiAgcHVibGljIHN1YnNjcmliZShcclxuICAgIG5leHRPck9ic2VydmVyOiBPYnNlcnZlcjxEb2NFdmVudD4gfCBOZXh0Rm48RG9jRXZlbnQ+LFxyXG4gICAgZXJyb3I/OiBFcnJvckZuLFxyXG4gICAgY29tcGxldGU/OiBDb21wbGV0ZUZuLFxyXG4gICk6IFVuc3Vic2NyaWJlIHtcclxuICAgIHJldHVybiB0aGlzLmV2ZW50U3RyZWFtLnN1YnNjcmliZShuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBhcHBseUNoYW5nZVBhY2tgIGFwcGxpZXMgdGhlIGdpdmVuIGNoYW5nZSBwYWNrIGludG8gdGhpcyBkb2N1bWVudC5cclxuICAgKiAxLiBSZW1vdmUgbG9jYWwgY2hhbmdlcyBhcHBsaWVkIHRvIHNlcnZlci5cclxuICAgKiAyLiBVcGRhdGUgdGhlIGNoZWNrcG9pbnQuXHJcbiAgICogMy4gRG8gR2FyYmFnZSBjb2xsZWN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhY2sgLSBjaGFuZ2UgcGFja1xyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBseUNoYW5nZVBhY2socGFjazogQ2hhbmdlUGFjayk6IHZvaWQge1xyXG4gICAgaWYgKHBhY2suaGFzU25hcHNob3QoKSkge1xyXG4gICAgICB0aGlzLmFwcGx5U25hcHNob3QoXHJcbiAgICAgICAgcGFjay5nZXRDaGVja3BvaW50KCkuZ2V0U2VydmVyU2VxKCksXHJcbiAgICAgICAgcGFjay5nZXRTbmFwc2hvdCgpLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChwYWNrLmhhc0NoYW5nZXMoKSkge1xyXG4gICAgICB0aGlzLmFwcGx5Q2hhbmdlcyhwYWNrLmdldENoYW5nZXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMDIuIFJlbW92ZSBsb2NhbCBjaGFuZ2VzIGFwcGxpZWQgdG8gc2VydmVyLlxyXG4gICAgd2hpbGUgKHRoaXMubG9jYWxDaGFuZ2VzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBjaGFuZ2UgPSB0aGlzLmxvY2FsQ2hhbmdlc1swXTtcclxuICAgICAgaWYgKGNoYW5nZS5nZXRJRCgpLmdldENsaWVudFNlcSgpID4gcGFjay5nZXRDaGVja3BvaW50KCkuZ2V0Q2xpZW50U2VxKCkpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxvY2FsQ2hhbmdlcy5zaGlmdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDAzLiBVcGRhdGUgdGhlIGNoZWNrcG9pbnQuXHJcbiAgICB0aGlzLmNoZWNrcG9pbnQgPSB0aGlzLmNoZWNrcG9pbnQuZm9yd2FyZChwYWNrLmdldENoZWNrcG9pbnQoKSk7XHJcblxyXG4gICAgLy8gMDQuIERvIEdhcmJhZ2UgY29sbGVjdGlvbi5cclxuICAgIHRoaXMuZ2FyYmFnZUNvbGxlY3QocGFjay5nZXRNaW5TeW5jZWRUaWNrZXQoKSEpO1xyXG5cclxuICAgIGlmIChsb2dnZXIuaXNFbmFibGVkKExvZ0xldmVsLlRyaXZpYWwpKSB7XHJcbiAgICAgIGxvZ2dlci50cml2aWFsKGAke3RoaXMucm9vdC50b0pTT04oKX1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRDaGVja3BvaW50YCByZXR1cm5zIHRoZSBjaGVja3BvaW50IG9mIHRoaXMgZG9jdW1lbnQuXHJcbiAgICpcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2hlY2twb2ludCgpOiBDaGVja3BvaW50IHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrcG9pbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzTG9jYWxDaGFuZ2VzYCByZXR1cm5zIHdoZXRoZXIgdGhpcyBkb2N1bWVudCBoYXMgbG9jYWwgY2hhbmdlcyBvciBub3QuXHJcbiAgICpcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgaGFzTG9jYWxDaGFuZ2VzKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxDaGFuZ2VzLmxlbmd0aCA+IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZW5zdXJlQ2xvbmVgIG1ha2UgYSBjbG9uZSBvZiByb290LlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGVuc3VyZUNsb25lKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY2xvbmUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2xvbmUgPSB0aGlzLnJvb3QuZGVlcGNvcHkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVDaGFuZ2VQYWNrYCBjcmVhdGUgY2hhbmdlIHBhY2sgb2YgdGhlIGxvY2FsIGNoYW5nZXMgdG8gc2VuZCB0byB0aGVcclxuICAgKiByZW1vdGUgc2VydmVyLlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZUNoYW5nZVBhY2soKTogQ2hhbmdlUGFjayB7XHJcbiAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5sb2NhbENoYW5nZXM7XHJcbiAgICBjb25zdCBjaGVja3BvaW50ID0gdGhpcy5jaGVja3BvaW50LmluY3JlYXNlQ2xpZW50U2VxKGNoYW5nZXMubGVuZ3RoKTtcclxuICAgIHJldHVybiBDaGFuZ2VQYWNrLmNyZWF0ZSh0aGlzLmtleSwgY2hlY2twb2ludCwgY2hhbmdlcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc2V0QWN0b3JgIHNldHMgYWN0b3IgaW50byB0aGlzIGRvY3VtZW50LiBUaGlzIGlzIGFsc28gYXBwbGllZCBpbiB0aGUgbG9jYWxcclxuICAgKiBjaGFuZ2VzIHRoZSBkb2N1bWVudCBoYXMuXHJcbiAgICpcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgc2V0QWN0b3IoYWN0b3JJRDogQWN0b3JJRCk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgdGhpcy5sb2NhbENoYW5nZXMpIHtcclxuICAgICAgY2hhbmdlLnNldEFjdG9yKGFjdG9ySUQpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jaGFuZ2VJRCA9IHRoaXMuY2hhbmdlSUQuc2V0QWN0b3IoYWN0b3JJRCk7XHJcblxyXG4gICAgLy8gVE9ETyBhbHNvIGFwcGx5IGludG8gcm9vdC5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRLZXlgIHJldHVybnMgdGhlIGtleSBvZiB0aGlzIGRvY3VtZW50LlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGdldEtleSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMua2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldENsb25lYCByZXR1cm4gY2xvbmUgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGdldENsb25lKCk6IE9iamVjdEludGVybmFsIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghdGhpcy5jbG9uZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuY2xvbmUuZ2V0T2JqZWN0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Um9vdGAgcmV0dXJucyBhIG5ldyBwcm94eSBvZiBjbG9uZWQgcm9vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Um9vdCgpOiBUIHtcclxuICAgIHRoaXMuZW5zdXJlQ2xvbmUoKTtcclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0gQ2hhbmdlQ29udGV4dC5jcmVhdGUodGhpcy5jaGFuZ2VJRC5uZXh0KCksIHRoaXMuY2xvbmUhKTtcclxuICAgIHJldHVybiBjcmVhdGVQcm94eTxUPihjb250ZXh0LCB0aGlzLmNsb25lIS5nZXRPYmplY3QoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2FyYmFnZUNvbGxlY3RgIHB1cmdlcyBlbGVtZW50cyB0aGF0IHdlcmUgcmVtb3ZlZCBiZWZvcmUgdGhlIGdpdmVuIHRpbWUuXHJcbiAgICpcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgZ2FyYmFnZUNvbGxlY3QodGlja2V0OiBUaW1lVGlja2V0KTogbnVtYmVyIHtcclxuICAgIGlmICh0aGlzLmNsb25lKSB7XHJcbiAgICAgIHRoaXMuY2xvbmUuZ2FyYmFnZUNvbGxlY3QodGlja2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnJvb3QuZ2FyYmFnZUNvbGxlY3QodGlja2V0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRSb290T2JqZWN0YCByZXR1cm5zIHJvb3Qgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJvb3RPYmplY3QoKTogT2JqZWN0SW50ZXJuYWwge1xyXG4gICAgcmV0dXJuIHRoaXMucm9vdC5nZXRPYmplY3QoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRHYXJiYWdlTGVuYCByZXR1cm5zIHRoZSBsZW5ndGggb2YgZWxlbWVudHMgc2hvdWxkIGJlIHB1cmdlZC5cclxuICAgKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRHYXJiYWdlTGVuKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5yb290LmdldEdhcmJhZ2VMZW4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b0pTT05gIHJldHVybnMgdGhlIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyBhcnJheS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9KU09OKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5yb290LnRvSlNPTigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNPTmAgcmV0dXJucyB0aGUgc29ydGVkIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyBhcnJheS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9Tb3J0ZWRKU09OKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5yb290LnRvU29ydGVkSlNPTigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhcHBseVNuYXBzaG90KHNlcnZlclNlcTogTG9uZywgc25hcHNob3Q/OiBVaW50OEFycmF5KTogdm9pZCB7XHJcbiAgICBjb25zdCBvYmogPSBjb252ZXJ0ZXIuYnl0ZXNUb09iamVjdChzbmFwc2hvdCk7XHJcbiAgICB0aGlzLnJvb3QgPSBuZXcgSlNPTlJvb3Qob2JqKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiB0aGlzLmxvY2FsQ2hhbmdlcykge1xyXG4gICAgICBjaGFuZ2UuZXhlY3V0ZSh0aGlzLnJvb3QpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jaGFuZ2VJRCA9IHRoaXMuY2hhbmdlSUQuc3luY0xhbXBvcnQoc2VydmVyU2VxKTtcclxuXHJcbiAgICAvLyBkcm9wIGNsb25lIGJlY2F1c2UgaXQgaXMgY29udGFtaW5hdGVkLlxyXG4gICAgdGhpcy5jbG9uZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAodGhpcy5ldmVudFN0cmVhbU9ic2VydmVyKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRTdHJlYW1PYnNlcnZlci5uZXh0KHtcclxuICAgICAgICB0eXBlOiBEb2NFdmVudFR5cGUuU25hcHNob3QsXHJcbiAgICAgICAgdmFsdWU6IHNuYXBzaG90LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXBwbHlDaGFuZ2VzKGNoYW5nZXM6IEFycmF5PENoYW5nZT4pOiB2b2lkIHtcclxuICAgIGlmIChsb2dnZXIuaXNFbmFibGVkKExvZ0xldmVsLkRlYnVnKSkge1xyXG4gICAgICBsb2dnZXIuZGVidWcoXHJcbiAgICAgICAgYHRyeWluZyB0byBhcHBseSAke2NoYW5nZXMubGVuZ3RofSByZW1vdGUgY2hhbmdlcy5gICtcclxuICAgICAgICAgIGBlbGVtZW50czoke3RoaXMucm9vdC5nZXRFbGVtZW50TWFwU2l6ZSgpfSwgYCArXHJcbiAgICAgICAgICBgcmVtb3ZlZHM6JHt0aGlzLnJvb3QuZ2V0UmVtb3ZlZEVsZW1lbnRTZXRTaXplKCl9YCxcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIGlmIChsb2dnZXIuaXNFbmFibGVkKExvZ0xldmVsLlRyaXZpYWwpKSB7XHJcbiAgICAgIGxvZ2dlci50cml2aWFsKFxyXG4gICAgICAgIGNoYW5nZXNcclxuICAgICAgICAgIC5tYXAoXHJcbiAgICAgICAgICAgIChjaGFuZ2UpID0+XHJcbiAgICAgICAgICAgICAgYCR7Y2hhbmdlXHJcbiAgICAgICAgICAgICAgICAuZ2V0SUQoKVxyXG4gICAgICAgICAgICAgICAgLmdldEFubm90YXRlZFN0cmluZygpfVxcdCR7Y2hhbmdlLmdldEFubm90YXRlZFN0cmluZygpfWAsXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAuam9pbignXFxuJyksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lbnN1cmVDbG9uZSgpO1xyXG4gICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xyXG4gICAgICBjaGFuZ2UuZXhlY3V0ZSh0aGlzLmNsb25lISk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xyXG4gICAgICBjaGFuZ2UuZXhlY3V0ZSh0aGlzLnJvb3QpO1xyXG4gICAgICB0aGlzLmNoYW5nZUlEID0gdGhpcy5jaGFuZ2VJRC5zeW5jTGFtcG9ydChjaGFuZ2UuZ2V0SUQoKS5nZXRMYW1wb3J0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjaGFuZ2VzLmxlbmd0aCAmJiB0aGlzLmV2ZW50U3RyZWFtT2JzZXJ2ZXIpIHtcclxuICAgICAgdGhpcy5ldmVudFN0cmVhbU9ic2VydmVyLm5leHQoe1xyXG4gICAgICAgIHR5cGU6IERvY0V2ZW50VHlwZS5SZW1vdGVDaGFuZ2UsXHJcbiAgICAgICAgdmFsdWU6IGNoYW5nZXMubWFwKChjaGFuZ2UpID0+IHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNoYW5nZSxcclxuICAgICAgICAgICAgcGF0aHM6IHRoaXMuY3JlYXRlUGF0aHMoY2hhbmdlKSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsb2dnZXIuaXNFbmFibGVkKExvZ0xldmVsLkRlYnVnKSkge1xyXG4gICAgICBsb2dnZXIuZGVidWcoXHJcbiAgICAgICAgYGFmdGVyIGFwcGxpbmcgJHtjaGFuZ2VzLmxlbmd0aH0gcmVtb3RlIGNoYW5nZXMuYCArXHJcbiAgICAgICAgICBgZWxlbWVudHM6JHt0aGlzLnJvb3QuZ2V0RWxlbWVudE1hcFNpemUoKX0sIGAgK1xyXG4gICAgICAgICAgYCByZW1vdmVkczoke3RoaXMucm9vdC5nZXRSZW1vdmVkRWxlbWVudFNldFNpemUoKX1gLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVQYXRocyhjaGFuZ2U6IENoYW5nZSk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgY29uc3QgcGF0aHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgIGZvciAoY29uc3Qgb3Agb2YgY2hhbmdlLmdldE9wZXJhdGlvbnMoKSkge1xyXG4gICAgICBjb25zdCBjcmVhdGVkQXQgPSBvcC5nZXRFZmZlY3RlZENyZWF0ZWRBdCgpO1xyXG4gICAgICBpZiAoY3JlYXRlZEF0KSB7XHJcbiAgICAgICAgcGF0aHMucHVzaCh0aGlzLnJvb3QuY3JlYXRlUGF0aChjcmVhdGVkQXQpISk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXRocztcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHtcclxuICBKU09OQ29udGFpbmVyLFxyXG4gIEpTT05FbGVtZW50LFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2VsZW1lbnQnO1xyXG5pbXBvcnQgeyBSR0FUcmVlTGlzdCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX2xpc3QnO1xyXG5cclxuLyoqXHJcbiAqIGBBcnJheUludGVybmFsYCByZXByZXNlbnRzIEpTT04gYXJyYXkgZGF0YSBzdHJ1Y3R1cmUgaW5jbHVkaW5nIGxvZ2ljYWwgY2xvY2suXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFycmF5SW50ZXJuYWwgZXh0ZW5kcyBKU09OQ29udGFpbmVyIHtcclxuICBwcml2YXRlIGVsZW1lbnRzOiBSR0FUcmVlTGlzdDtcclxuXHJcbiAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cclxuICBjb25zdHJ1Y3RvcihjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsIGVsZW1lbnRzOiBSR0FUcmVlTGlzdCkge1xyXG4gICAgc3VwZXIoY3JlYXRlZEF0KTtcclxuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQXJyYXkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogQXJyYXlJbnRlcm5hbCB7XHJcbiAgICByZXR1cm4gbmV3IEFycmF5SW50ZXJuYWwoY3JlYXRlZEF0LCBSR0FUcmVlTGlzdC5jcmVhdGUoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBga2V5b2ZgIHJldHVybnMga2V5IG9mIHRoZSBnaXZlbiBgY3JlYXRlZEF0YCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBrZXlPZihjcmVhdGVkQXQ6IFRpbWVUaWNrZXQpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMua2V5T2YoY3JlYXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwdXJnZWAgcGh5c2ljYWxseSBwdXJnZSBjaGlsZCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJnZShlbGVtZW50OiBKU09ORWxlbWVudCk6IHZvaWQge1xyXG4gICAgdGhpcy5lbGVtZW50cy5wdXJnZShlbGVtZW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnNlcnRBZnRlcmAgaW5zZXJ0cyB0aGUgZ2l2ZW4gZWxlbWVudCBhZnRlciB0aGUgZ2l2ZW4gcHJldmlvdXMgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgaW5zZXJ0QWZ0ZXIocHJldkNyZWF0ZWRBdDogVGltZVRpY2tldCwgdmFsdWU6IEpTT05FbGVtZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLmVsZW1lbnRzLmluc2VydEFmdGVyKHByZXZDcmVhdGVkQXQsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBtb3ZlQWZ0ZXJgIG1vdmVzIHRoZSBnaXZlbiBgY3JlYXRlZEF0YCBlbGVtZW50IGFmdGVyIHRoZSBgcHJldkNyZWF0ZWRBdGAuXHJcbiAgICovXHJcbiAgcHVibGljIG1vdmVBZnRlcihcclxuICAgIHByZXZDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5lbGVtZW50cy5tb3ZlQWZ0ZXIocHJldkNyZWF0ZWRBdCwgY3JlYXRlZEF0LCBleGVjdXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRgIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIGdpdmVuIGNyZWF0ZUF0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZWxlbWVudHMuZ2V0KGNyZWF0ZWRBdCk7XHJcbiAgICBpZiAoIW5vZGUgfHwgbm9kZS5pc1JlbW92ZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QnlJbmRleGAgcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gaW5kZXguXHJcbiAgICovXHJcbiAgcHVibGljIGdldEJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IEpTT05FbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmVsZW1lbnRzLmdldEJ5SW5kZXgoaW5kZXgpO1xyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbm9kZS5nZXRWYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEhlYWRgIHJldHVybnMgZHVtbXkgaGVhZCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIZWFkKCk6IEpTT05FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmdldEhlYWQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRMYXN0YCByZXR1cm5zIGxhc3QgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TGFzdCgpOiBKU09ORWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5nZXRMYXN0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UHJldkNyZWF0ZWRBdGAgcmV0dXJucyB0aGUgY3JlYXRpb24gdGltZSBvZlxyXG4gICAqIHRoZSBwcmV2aW91cyBlbGVtZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcmV2Q3JlYXRlZEF0KGNyZWF0ZWRBdDogVGltZVRpY2tldCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMuZ2V0UHJldkNyZWF0ZWRBdChjcmVhdGVkQXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZWAgZGVsZXRlcyB0aGUgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gaW5kZXguXHJcbiAgICovXHJcbiAgcHVibGljIGRlbGV0ZShjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsIGVkaXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMuZGVsZXRlKGNyZWF0ZWRBdCwgZWRpdGVkQXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZUJ5SW5kZXhgIGRlbGV0ZXMgdGhlIGVsZW1lbnQgb2YgZ2l2ZW4gaW5kZXggYW5kIGVkaXRlZEF0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWxldGVCeUluZGV4KFxyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIGVkaXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IEpTT05FbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmRlbGV0ZUJ5SW5kZXgoaW5kZXgsIGVkaXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRMYXN0Q3JlYXRlZEF0YCBnZXQgbGFzdCBjcmVhdGVkIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldExhc3RDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5nZXRMYXN0Q3JlYXRlZEF0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgbGVuZ3RoYCByZXR1cm5zIGxlbmd0aCBvZiB0aGlzIGVsZW1lbnRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxKU09ORWxlbWVudD4ge1xyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMuZWxlbWVudHMpIHtcclxuICAgICAgaWYgKCFub2RlLmlzUmVtb3ZlZCgpKSB7XHJcbiAgICAgICAgeWllbGQgbm9kZS5nZXRWYWx1ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RGVzY2VuZGFudHNgIHRyYXZlcnNlIHRoZSBkZXNjZW5kYW50cyBvZiB0aGlzIGFycmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREZXNjZW5kYW50cyhcclxuICAgIGNhbGxiYWNrOiAoZWxlbTogSlNPTkVsZW1lbnQsIHBhcmVudDogSlNPTkNvbnRhaW5lcikgPT4gYm9vbGVhbixcclxuICApOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLmVsZW1lbnRzKSB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlLmdldFZhbHVlKCk7XHJcbiAgICAgIGlmIChjYWxsYmFjayhlbGVtZW50LCB0aGlzKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKU09OQ29udGFpbmVyKSB7XHJcbiAgICAgICAgZWxlbWVudC5nZXREZXNjZW5kYW50cyhjYWxsYmFjayk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b0pTT05gIHJldHVybnMgdGhlIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyBhcnJheS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9KU09OKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBqc29uID0gW107XHJcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMpIHtcclxuICAgICAganNvbi5wdXNoKHZhbHVlLnRvSlNPTigpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBgWyR7anNvbi5qb2luKCcsJyl9XWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdG9KU2AgcmV0dXJuIHRoZSBqYXZhc2NyaXB0IG9iamVjdCBvZiB0aGlzIGFycmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTKCk6IGFueSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnRvSlNPTigpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b1NvcnRlZEpTT05gIHJldHVybnMgdGhlIHNvcnRlZCBKU09OIGVuY29kaW5nIG9mIHRoaXMgYXJyYXkuXHJcbiAgICovXHJcbiAgcHVibGljIHRvU29ydGVkSlNPTigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RWxlbWVudHNgIHJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoaXMgUkdBVHJlZUxpc3QuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEVsZW1lbnRzKCk6IFJHQVRyZWVMaXN0IHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlZXBjb3B5YCBjb3BpZXMgaXRzZWxmIGRlZXBseS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVlcGNvcHkoKTogQXJyYXlJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBjbG9uZSA9IEFycmF5SW50ZXJuYWwuY3JlYXRlKHRoaXMuZ2V0Q3JlYXRlZEF0KCkpO1xyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMuZWxlbWVudHMpIHtcclxuICAgICAgY2xvbmUuZWxlbWVudHMuaW5zZXJ0QWZ0ZXIoXHJcbiAgICAgICAgY2xvbmUuZ2V0TGFzdENyZWF0ZWRBdCgpLFxyXG4gICAgICAgIG5vZGUuZ2V0VmFsdWUoKS5kZWVwY29weSgpLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgY2xvbmUucmVtb3ZlKHRoaXMuZ2V0UmVtb3ZlZEF0KCkpO1xyXG4gICAgcmV0dXJuIGNsb25lO1xyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEpTT05FbGVtZW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vZWxlbWVudCc7XHJcbmltcG9ydCB7IFRpbWVUaWNrZXQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS90aWNrZXQnO1xyXG5pbXBvcnQgTG9uZyBmcm9tICdsb25nJztcclxuaW1wb3J0IHsgQ29kZSwgWW9ya2llRXJyb3IgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9lcnJvcic7XHJcbmltcG9ydCB7XHJcbiAgSlNPTlByaW1pdGl2ZSxcclxuICBQcmltaXRpdmVUeXBlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3ByaW1pdGl2ZSc7XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgZW51bSBDb3VudGVyVHlwZSB7XHJcbiAgSW50ZWdlckNudCxcclxuICBMb25nQ250LFxyXG4gIERvdWJsZUNudCxcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ291bnRlclZhbHVlID0gbnVtYmVyIHwgTG9uZztcclxuXHJcbi8qKlxyXG4gKiBgQ291bnRlckludGVybmFsYCByZXByZXNlbnRzIGNoYW5nZWFibGUgbnVtYmVyIGRhdGEgdHlwZS5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ291bnRlckludGVybmFsIGV4dGVuZHMgSlNPTkVsZW1lbnQge1xyXG4gIHByaXZhdGUgdmFsdWVUeXBlPzogQ291bnRlclR5cGU7XHJcbiAgcHJpdmF0ZSB2YWx1ZTogQ291bnRlclZhbHVlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogQ291bnRlclZhbHVlLCBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQpIHtcclxuICAgIHN1cGVyKGNyZWF0ZWRBdCk7XHJcbiAgICB0aGlzLnZhbHVlVHlwZSA9IENvdW50ZXJJbnRlcm5hbC5nZXRDb3VudGVyVHlwZSh2YWx1ZSk7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgb2ZgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQ291bnRlci5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG9mKFxyXG4gICAgdmFsdWU6IENvdW50ZXJWYWx1ZSxcclxuICAgIGNyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBDb3VudGVySW50ZXJuYWwge1xyXG4gICAgcmV0dXJuIG5ldyBDb3VudGVySW50ZXJuYWwodmFsdWUsIGNyZWF0ZWRBdCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGB2YWx1ZUZyb21CeXRlc2AgcGFyc2VzIHRoZSBnaXZlbiBieXRlcyBpbnRvIHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgdmFsdWVGcm9tQnl0ZXMoXHJcbiAgICBjb3VudGVyVHlwZTogQ291bnRlclR5cGUsXHJcbiAgICBieXRlczogVWludDhBcnJheSxcclxuICApOiBDb3VudGVyVmFsdWUge1xyXG4gICAgc3dpdGNoIChjb3VudGVyVHlwZSkge1xyXG4gICAgICBjYXNlIENvdW50ZXJUeXBlLkludGVnZXJDbnQ6XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVzWzBdIHwgKGJ5dGVzWzFdIDw8IDgpIHwgKGJ5dGVzWzJdIDw8IDE2KSB8IChieXRlc1szXSA8PCAyNCk7XHJcbiAgICAgIGNhc2UgQ291bnRlclR5cGUuRG91YmxlQ250OiB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhieXRlcy5idWZmZXIpO1xyXG4gICAgICAgIGJ5dGVzLmZvckVhY2goZnVuY3Rpb24gKGIsIGkpIHtcclxuICAgICAgICAgIHZpZXcuc2V0VWludDgoaSwgYik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQ2NCgwLCB0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIENvdW50ZXJUeXBlLkxvbmdDbnQ6XHJcbiAgICAgICAgcmV0dXJuIExvbmcuZnJvbUJ5dGVzTEUoQXJyYXkuZnJvbShieXRlcykpO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBZb3JraWVFcnJvcihcclxuICAgICAgICAgIENvZGUuVW5pbXBsZW1lbnRlZCxcclxuICAgICAgICAgIGB1bmltcGxlbWVudGVkIHR5cGU6ICR7Y291bnRlclR5cGV9YCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNPTmAgcmV0dXJucyB0aGUgSlNPTiBlbmNvZGluZyBvZiB0aGUgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIHRvSlNPTigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMudmFsdWV9YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b1NvcnRlZEpTT05gIHJldHVybnMgdGhlIHNvcnRlZCBKU09OIGVuY29kaW5nIG9mIHRoZSB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9Tb3J0ZWRKU09OKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBkZWVwY29weWAgY29waWVzIGl0c2VsZiBkZWVwbHkuXHJcbiAgICovXHJcbiAgcHVibGljIGRlZXBjb3B5KCk6IENvdW50ZXJJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBjb3VudGVyID0gQ291bnRlckludGVybmFsLm9mKHRoaXMudmFsdWUsIHRoaXMuZ2V0Q3JlYXRlZEF0KCkpO1xyXG4gICAgY291bnRlci5zZXRNb3ZlZEF0KHRoaXMuZ2V0TW92ZWRBdCgpKTtcclxuICAgIHJldHVybiBjb3VudGVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFR5cGVgIHJldHVybnMgdGhlIHR5cGUgb2YgdGhlIHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUeXBlKCk6IENvdW50ZXJUeXBlIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlVHlwZSE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q291bnRlclR5cGVgIHJldHVybnMgY291bnRlciB0eXBlIG9mIGdpdmVuIHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0Q291bnRlclR5cGUodmFsdWU6IENvdW50ZXJWYWx1ZSk6IENvdW50ZXJUeXBlIHwgdW5kZWZpbmVkIHtcclxuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcbiAgICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgICAgcmV0dXJuIENvdW50ZXJUeXBlLkRvdWJsZUNudDtcclxuICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb25nKSB7XHJcbiAgICAgICAgICByZXR1cm4gQ291bnRlclR5cGUuTG9uZ0NudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBgaXNTdXBwb3J0YCBjaGVjayBpZiB0aGVyZSBpcyBhIGNvdW50ZXIgdHlwZSBvZiBnaXZlbiB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzU3VwcG9ydCh2YWx1ZTogQ291bnRlclZhbHVlKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISFDb3VudGVySW50ZXJuYWwuZ2V0Q291bnRlclR5cGUodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGlzSW50ZWdlcmAgY2hlY2tzIGlmIHRoZSBudW0gaXMgaW50ZWdlci5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzSW50ZWdlcihudW06IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIG51bSAlIDEgPT09IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaXNOdW1lcmljVHlwZWAgY2hlY2sgbnVtZXJpYyB0eXBlIGJ5IEpTT05Db3VudGVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc051bWVyaWNUeXBlKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgdCA9IHRoaXMudmFsdWVUeXBlO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdCA9PT0gQ291bnRlclR5cGUuSW50ZWdlckNudCB8fFxyXG4gICAgICB0ID09PSBDb3VudGVyVHlwZS5Mb25nQ250IHx8XHJcbiAgICAgIHQgPT09IENvdW50ZXJUeXBlLkRvdWJsZUNudFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRWYWx1ZWAgZ2V0IGNvdW50ZXIgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlKCk6IENvdW50ZXJWYWx1ZSB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b0J5dGVzYCBjcmVhdGVzIGFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIHRvQnl0ZXMoKTogVWludDhBcnJheSB7XHJcbiAgICBzd2l0Y2ggKHRoaXMudmFsdWVUeXBlKSB7XHJcbiAgICAgIGNhc2UgQ291bnRlclR5cGUuSW50ZWdlckNudDoge1xyXG4gICAgICAgIGNvbnN0IGludFZhbCA9IHRoaXMudmFsdWUgYXMgbnVtYmVyO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXHJcbiAgICAgICAgICBpbnRWYWwgJiAweGZmLFxyXG4gICAgICAgICAgKGludFZhbCA+PiA4KSAmIDB4ZmYsXHJcbiAgICAgICAgICAoaW50VmFsID4+IDE2KSAmIDB4ZmYsXHJcbiAgICAgICAgICAoaW50VmFsID4+IDI0KSAmIDB4ZmYsXHJcbiAgICAgICAgXSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBDb3VudGVyVHlwZS5Eb3VibGVDbnQ6IHtcclxuICAgICAgICBjb25zdCBkb3VibGVWYWwgPSB0aGlzLnZhbHVlIGFzIG51bWJlcjtcclxuICAgICAgICBjb25zdCB1aW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoOCk7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyh1aW50OEFycmF5LmJ1ZmZlcik7XHJcbiAgICAgICAgdmlldy5zZXRGbG9hdDY0KDAsIGRvdWJsZVZhbCwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBDb3VudGVyVHlwZS5Mb25nQ250OiB7XHJcbiAgICAgICAgY29uc3QgbG9uZ1ZhbCA9IHRoaXMudmFsdWUgYXMgTG9uZztcclxuICAgICAgICBjb25zdCBsb25nVG9CeXRlcyA9IGxvbmdWYWwudG9CeXRlc0xFKCk7XHJcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShsb25nVG9CeXRlcyk7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgWW9ya2llRXJyb3IoXHJcbiAgICAgICAgICBDb2RlLlVuaW1wbGVtZW50ZWQsXHJcbiAgICAgICAgICBgdW5pbXBsZW1lbnRlZCB0eXBlOiAke3RoaXMudmFsdWVUeXBlfWAsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbmNyZWFzZWAgaW5jcmVhc2VzIG51bWVyaWMgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgaW5jcmVhc2UodjogSlNPTlByaW1pdGl2ZSk6IENvdW50ZXJJbnRlcm5hbCB7XHJcbiAgICAvKipcclxuICAgICAqIGBjaGVja051bWVyaWNUeXBlYCBjaGVja3MgaWYgdGhlIGdpdmVuIHRhcmdldCBpcyBhIG51bWVyaWMgdHlwZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY2hlY2tOdW1lcmljVHlwZSh0YXJnZXQ6IEpTT05QcmltaXRpdmUgfCBDb3VudGVySW50ZXJuYWwpOiB2b2lkIHtcclxuICAgICAgaWYgKCF0YXJnZXQuaXNOdW1lcmljVHlwZSgpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcclxuICAgICAgICAgIGBVbnN1cHBvcnRlZCB0eXBlIG9mIHZhbHVlOiAke3R5cGVvZiB0YXJnZXQuZ2V0VmFsdWUoKX1gLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNoZWNrTnVtZXJpY1R5cGUodGhpcyk7XHJcbiAgICBjaGVja051bWVyaWNUeXBlKHYpO1xyXG5cclxuICAgIGlmICh0aGlzLnZhbHVlVHlwZSA9PT0gQ291bnRlclR5cGUuTG9uZ0NudCkge1xyXG4gICAgICB0aGlzLnZhbHVlID0gKHRoaXMudmFsdWUgYXMgTG9uZykuYWRkKHYuZ2V0VmFsdWUoKSBhcyBudW1iZXIgfCBMb25nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICh0aGlzLnZhbHVlIGFzIG51bWJlcikgKz1cclxuICAgICAgICB2LmdldFR5cGUoKSA9PT0gUHJpbWl0aXZlVHlwZS5Mb25nXHJcbiAgICAgICAgICA/ICh2LmdldFZhbHVlKCkgYXMgTG9uZykudG9OdW1iZXIoKVxyXG4gICAgICAgICAgOiAodi5nZXRWYWx1ZSgpIGFzIG51bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcblxyXG4vKipcclxuICogYEpTT05FbGVtZW50YCByZXByZXNlbnRzIEpTT04gZWxlbWVudCBpbmNsdWRpbmcgbG9naWNhbCBjbG9jay5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSlNPTkVsZW1lbnQge1xyXG4gIHByaXZhdGUgY3JlYXRlZEF0OiBUaW1lVGlja2V0O1xyXG4gIHByaXZhdGUgbW92ZWRBdD86IFRpbWVUaWNrZXQ7XHJcbiAgcHJpdmF0ZSByZW1vdmVkQXQ/OiBUaW1lVGlja2V0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihjcmVhdGVkQXQ6IFRpbWVUaWNrZXQpIHtcclxuICAgIHRoaXMuY3JlYXRlZEF0ID0gY3JlYXRlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGlzIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZWRBdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRJRGAgcmV0dXJucyB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGlzIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldElEKCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldE1vdmVkQXRgIHJldHVybnMgdGhlIG1vdmUgdGltZSBvZiB0aGlzIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdmVkQXQoKTogVGltZVRpY2tldCB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5tb3ZlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFJlbW92ZWRBdGAgcmV0dXJucyB0aGUgcmVtb3ZhbCB0aW1lIG9mIHRoaXMgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmVtb3ZlZEF0KCk6IFRpbWVUaWNrZXQgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldE1vdmVkQXRgIHNldHMgdGhlIG1vdmUgdGltZSBvZiB0aGlzIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHNldE1vdmVkQXQobW92ZWRBdD86IFRpbWVUaWNrZXQpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5tb3ZlZEF0IHx8IChtb3ZlZEF0ICYmIG1vdmVkQXQuYWZ0ZXIodGhpcy5tb3ZlZEF0KSkpIHtcclxuICAgICAgdGhpcy5tb3ZlZEF0ID0gbW92ZWRBdDtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldFJlbW92ZWRBdGAgc2V0cyB0aGUgcmVtb3ZlIHRpbWUgb2YgdGhpcyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRSZW1vdmVkQXQocmVtb3ZlZEF0PzogVGltZVRpY2tldCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmVkQXQgPSByZW1vdmVkQXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcmVtb3ZlYCByZW1vdmVzIHRoaXMgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlKHJlbW92ZWRBdD86IFRpbWVUaWNrZXQpOiBib29sZWFuIHtcclxuICAgIGlmIChcclxuICAgICAgcmVtb3ZlZEF0ICYmXHJcbiAgICAgIHJlbW92ZWRBdC5hZnRlcih0aGlzLmNyZWF0ZWRBdCkgJiZcclxuICAgICAgKCF0aGlzLnJlbW92ZWRBdCB8fCByZW1vdmVkQXQuYWZ0ZXIodGhpcy5yZW1vdmVkQXQpKVxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlZEF0ID0gcmVtb3ZlZEF0O1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaXNSZW1vdmVkYCBjaGVjayBpZiB0aGlzIGVsZW1lbnQgd2FzIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGlzUmVtb3ZlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMucmVtb3ZlZEF0O1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgdG9KU09OKCk6IHN0cmluZztcclxuICBhYnN0cmFjdCB0b1NvcnRlZEpTT04oKTogc3RyaW5nO1xyXG4gIGFic3RyYWN0IGRlZXBjb3B5KCk6IEpTT05FbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogYEpTT05Db250YWluZXJgIHJlcHJlc2VudHMgQXJyYXkgb3IgT2JqZWN0LlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBKU09OQ29udGFpbmVyIGV4dGVuZHMgSlNPTkVsZW1lbnQge1xyXG4gIGNvbnN0cnVjdG9yKGNyZWF0ZWRBdDogVGltZVRpY2tldCkge1xyXG4gICAgc3VwZXIoY3JlYXRlZEF0KTtcclxuICB9XHJcblxyXG4gIGFic3RyYWN0IGtleU9mKGNyZWF0ZWRBdDogVGltZVRpY2tldCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuXHJcbiAgYWJzdHJhY3QgcHVyZ2UoZWxlbWVudDogSlNPTkVsZW1lbnQpOiB2b2lkO1xyXG5cclxuICBhYnN0cmFjdCBkZWxldGUoY3JlYXRlZEF0OiBUaW1lVGlja2V0LCBleGVjdXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQ7XHJcblxyXG4gIGFic3RyYWN0IGdldERlc2NlbmRhbnRzKFxyXG4gICAgY2FsbGJhY2s6IChlbGVtOiBKU09ORWxlbWVudCwgcGFyZW50OiBKU09OQ29udGFpbmVyKSA9PiBib29sZWFuLFxyXG4gICk6IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgVGV4dEVsZW1lbnRgIHJlcHJlc2VudHMgVGV4dCBvciBSaWNoVGV4dC5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUZXh0RWxlbWVudCBleHRlbmRzIEpTT05FbGVtZW50IHtcclxuICBhYnN0cmFjdCBnZXRSZW1vdmVkTm9kZXNMZW4oKTogbnVtYmVyO1xyXG4gIGFic3RyYWN0IHB1cmdlVGV4dE5vZGVzV2l0aEdhcmJhZ2UodGlja2V0OiBUaW1lVGlja2V0KTogbnVtYmVyO1xyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7XHJcbiAgSlNPTkNvbnRhaW5lcixcclxuICBKU09ORWxlbWVudCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuaW1wb3J0IHsgUkhUUFFNYXAgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yaHRfcHFfbWFwJztcclxuXHJcbi8qKlxyXG4gKiBgT2JqZWN0SW50ZXJuYWxgIHJlcHJlc2VudHMgYSBKU09OIG9iamVjdCwgYnV0IHVubGlrZSByZWd1bGFyIEpTT04sIGl0IGhhcyB0aW1lXHJcbiAqIHRpY2tldHMgd2hpY2ggaXMgY3JlYXRlZCBieSBsb2dpY2FsIGNsb2NrLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPYmplY3RJbnRlcm5hbCBleHRlbmRzIEpTT05Db250YWluZXIge1xyXG4gIHByaXZhdGUgbWVtYmVyTm9kZXM6IFJIVFBRTWFwO1xyXG5cclxuICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xyXG4gIGNvbnN0cnVjdG9yKGNyZWF0ZWRBdDogVGltZVRpY2tldCwgbWVtYmVyTm9kZXM6IFJIVFBRTWFwKSB7XHJcbiAgICBzdXBlcihjcmVhdGVkQXQpO1xyXG4gICAgdGhpcy5tZW1iZXJOb2RlcyA9IG1lbWJlck5vZGVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBPYmplY3QuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogT2JqZWN0SW50ZXJuYWwge1xyXG4gICAgcmV0dXJuIG5ldyBPYmplY3RJbnRlcm5hbChjcmVhdGVkQXQsIFJIVFBRTWFwLmNyZWF0ZSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBrZXlPZmAgcmV0dXJucyBhIGtleSBvZiBSSFRQUU1hcCBiYXNlZCBvbiB0aGUgZ2l2ZW4gY3JlYXRpb24gdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMga2V5T2YoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLm1lbWJlck5vZGVzLmtleU9mKGNyZWF0ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcHVyZ2VgIHBoeXNpY2FsbHkgcHVyZ2VzIGNoaWxkIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHB1cmdlKHZhbHVlOiBKU09ORWxlbWVudCk6IHZvaWQge1xyXG4gICAgdGhpcy5tZW1iZXJOb2Rlcy5wdXJnZSh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc2V0YCBzZXRzIHRoZSBnaXZlbiBlbGVtZW50IG9mIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHNldChrZXk6IHN0cmluZywgdmFsdWU6IEpTT05FbGVtZW50KTogSlNPTkVsZW1lbnQgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMubWVtYmVyTm9kZXMuc2V0KGtleSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZWAgZGVsZXRlcyB0aGUgZWxlbWVudCBvZiB0aGUgZ2l2ZW4ga2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWxldGUoY3JlYXRlZEF0OiBUaW1lVGlja2V0LCBleGVjdXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMubWVtYmVyTm9kZXMuZGVsZXRlKGNyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVsZXRlQnlLZXlgIGRlbGV0ZXMgdGhlIGVsZW1lbnQgb2YgdGhlIGdpdmVuIGtleSBhbmQgZXhlY3V0aW9uIHRpbWUuXHJcbiAgICovXHJcbiAgcHVibGljIGRlbGV0ZUJ5S2V5KFxyXG4gICAga2V5OiBzdHJpbmcsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IEpTT05FbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLm1lbWJlck5vZGVzLmRlbGV0ZUJ5S2V5KGtleSwgZXhlY3V0ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0YCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4ga2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpOiBKU09ORWxlbWVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5tZW1iZXJOb2Rlcy5nZXQoa2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBoYXNgIHJldHVybnMgd2hldGhlciB0aGUgZWxlbWVudCBleGlzdHMgb2YgdGhlIGdpdmVuIGtleSBvciBub3QuXHJcbiAgICovXHJcbiAgcHVibGljIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubWVtYmVyTm9kZXMuaGFzKGtleSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdG9KU09OYCByZXR1cm5zIHRoZSBKU09OIGVuY29kaW5nIG9mIHRoaXMgb2JqZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTT04oKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGpzb24gPSBbXTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMpIHtcclxuICAgICAganNvbi5wdXNoKGBcIiR7a2V5fVwiOiR7dmFsdWUudG9KU09OKCl9YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYHske2pzb24uam9pbignLCcpfX1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNgIHJldHVybiB0aGUgamF2YXNjcmlwdCBvYmplY3Qgb2YgdGhpcyBvYmplY3QuXHJcbiAgICovXHJcbiAgcHVibGljIHRvSlMoKTogYW55IHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMudG9KU09OKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEtleXNgIHJldHVybnMgYXJyYXkgb2YgdGhpcyBvYmplY3QuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEtleXMoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICBjb25zdCBrZXlzID0gQXJyYXk8c3RyaW5nPigpO1xyXG4gICAgZm9yIChjb25zdCBba2V5XSBvZiB0aGlzKSB7XHJcbiAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvU29ydGVkSlNPTmAgcmV0dXJucyB0aGUgc29ydGVkIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyBvYmplY3QuXHJcbiAgICovXHJcbiAgcHVibGljIHRvU29ydGVkSlNPTigpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qga2V5cyA9IEFycmF5PHN0cmluZz4oKTtcclxuICAgIGZvciAoY29uc3QgW2tleV0gb2YgdGhpcykge1xyXG4gICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBqc29uID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzLnNvcnQoKSkge1xyXG4gICAgICBjb25zdCBub2RlID0gdGhpcy5tZW1iZXJOb2Rlcy5nZXQoa2V5KTtcclxuICAgICAganNvbi5wdXNoKGBcIiR7a2V5fVwiOiR7bm9kZSEudG9Tb3J0ZWRKU09OKCl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGB7JHtqc29uLmpvaW4oJywnKX19YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRSSFRgIFJIVE5vZGVzIHJldHVybnMgdGhlIFJIVFBRTWFwIG5vZGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSSFQoKTogUkhUUFFNYXAge1xyXG4gICAgcmV0dXJuIHRoaXMubWVtYmVyTm9kZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVlcGNvcHlgIGNvcGllcyBpdHNlbGYgZGVlcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWVwY29weSgpOiBPYmplY3RJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBjbG9uZSA9IE9iamVjdEludGVybmFsLmNyZWF0ZSh0aGlzLmdldENyZWF0ZWRBdCgpKTtcclxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLm1lbWJlck5vZGVzKSB7XHJcbiAgICAgIGNsb25lLm1lbWJlck5vZGVzLnNldChub2RlLmdldFN0cktleSgpLCBub2RlLmdldFZhbHVlKCkuZGVlcGNvcHkoKSk7XHJcbiAgICB9XHJcbiAgICBjbG9uZS5yZW1vdmUodGhpcy5nZXRSZW1vdmVkQXQoKSk7XHJcbiAgICByZXR1cm4gY2xvbmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RGVzY2VuZGFudHNgIHJldHVybnMgdGhlIGRlc2NlbmRhbnRzIG9mIHRoaXMgb2JqZWN0IGJ5IHRyYXZlcnNpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGdldERlc2NlbmRhbnRzKFxyXG4gICAgY2FsbGJhY2s6IChlbGVtOiBKU09ORWxlbWVudCwgcGFyZW50OiBKU09OQ29udGFpbmVyKSA9PiBib29sZWFuLFxyXG4gICk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMubWVtYmVyTm9kZXMpIHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IG5vZGUuZ2V0VmFsdWUoKTtcclxuICAgICAgaWYgKGNhbGxiYWNrKGVsZW1lbnQsIHRoaXMpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpTT05Db250YWluZXIpIHtcclxuICAgICAgICBlbGVtZW50LmdldERlc2NlbmRhbnRzKGNhbGxiYWNrKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W3N0cmluZywgSlNPTkVsZW1lbnRdPiB7XHJcbiAgICBjb25zdCBrZXlTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLm1lbWJlck5vZGVzKSB7XHJcbiAgICAgIGlmICgha2V5U2V0Lmhhcyhub2RlLmdldFN0cktleSgpKSkge1xyXG4gICAgICAgIGtleVNldC5hZGQobm9kZS5nZXRTdHJLZXkoKSk7XHJcbiAgICAgICAgaWYgKCFub2RlLmlzUmVtb3ZlZCgpKSB7XHJcbiAgICAgICAgICB5aWVsZCBbbm9kZS5nZXRTdHJLZXkoKSwgbm9kZS5nZXRWYWx1ZSgpXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHsgVGV4dEVsZW1lbnQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuaW1wb3J0IHtcclxuICBUZXh0Q2hhbmdlLFxyXG4gIFRleHRDaGFuZ2VUeXBlLFxyXG4gIFJHQVRyZWVTcGxpdCxcclxuICBSR0FUcmVlU3BsaXROb2RlUmFuZ2UsXHJcbiAgU2VsZWN0aW9uLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX3NwbGl0JztcclxuXHJcbi8qKlxyXG4gKiBgUGxhaW5UZXh0SW50ZXJuYWxgIHJlcHJlc2VudHMgcGxhaW4gdGV4dCBlbGVtZW50XHJcbiAqIFRleHQgaXMgYW4gZXh0ZW5kZWQgZGF0YSB0eXBlIGZvciB0aGUgY29udGVudHMgb2YgYSB0ZXh0IGVkaXRvclxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQbGFpblRleHRJbnRlcm5hbCBleHRlbmRzIFRleHRFbGVtZW50IHtcclxuICBwcml2YXRlIG9uQ2hhbmdlc0hhbmRsZXI/OiAoY2hhbmdlczogQXJyYXk8VGV4dENoYW5nZT4pID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSByZ2FUcmVlU3BsaXQ6IFJHQVRyZWVTcGxpdDxzdHJpbmc+O1xyXG4gIHByaXZhdGUgc2VsZWN0aW9uTWFwOiBNYXA8c3RyaW5nLCBTZWxlY3Rpb24+O1xyXG4gIHByaXZhdGUgcmVtb3RlQ2hhbmdlTG9jazogYm9vbGVhbjtcclxuXHJcbiAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cclxuICBjb25zdHJ1Y3RvcihyZ2FUcmVlU3BsaXQ6IFJHQVRyZWVTcGxpdDxzdHJpbmc+LCBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQpIHtcclxuICAgIHN1cGVyKGNyZWF0ZWRBdCk7XHJcbiAgICB0aGlzLnJnYVRyZWVTcGxpdCA9IHJnYVRyZWVTcGxpdDtcclxuICAgIHRoaXMuc2VsZWN0aW9uTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5yZW1vdGVDaGFuZ2VMb2NrID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGBQbGFpblRleHRgLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxyXG4gICAgcmdhVHJlZVNwbGl0OiBSR0FUcmVlU3BsaXQ8c3RyaW5nPixcclxuICAgIGNyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBQbGFpblRleHRJbnRlcm5hbCB7XHJcbiAgICByZXR1cm4gbmV3IFBsYWluVGV4dEludGVybmFsKHJnYVRyZWVTcGxpdCwgY3JlYXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBlZGl0SW50ZXJuYWxgIGVkaXRzIHRoZSBnaXZlbiByYW5nZSB3aXRoIHRoZSBnaXZlbiBjb250ZW50LlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGVkaXRJbnRlcm5hbChcclxuICAgIHJhbmdlOiBSR0FUcmVlU3BsaXROb2RlUmFuZ2UsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBlZGl0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIGxhdGVzdENyZWF0ZWRBdE1hcEJ5QWN0b3I/OiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PixcclxuICApOiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PiB7XHJcbiAgICBjb25zdCBbY2FyZXRQb3MsIGxhdGVzdENyZWF0ZWRBdE1hcCwgY2hhbmdlc10gPSB0aGlzLnJnYVRyZWVTcGxpdC5lZGl0KFxyXG4gICAgICByYW5nZSxcclxuICAgICAgZWRpdGVkQXQsXHJcbiAgICAgIGNvbnRlbnQsXHJcbiAgICAgIGxhdGVzdENyZWF0ZWRBdE1hcEJ5QWN0b3IsXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdGlvbkNoYW5nZSA9IHRoaXMuc2VsZWN0UHJpdihbY2FyZXRQb3MsIGNhcmV0UG9zXSwgZWRpdGVkQXQpO1xyXG4gICAgaWYgKHNlbGVjdGlvbkNoYW5nZSkge1xyXG4gICAgICBjaGFuZ2VzLnB1c2goc2VsZWN0aW9uQ2hhbmdlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5vbkNoYW5nZXNIYW5kbGVyKSB7XHJcbiAgICAgIHRoaXMucmVtb3RlQ2hhbmdlTG9jayA9IHRydWU7XHJcbiAgICAgIHRoaXMub25DaGFuZ2VzSGFuZGxlcihjaGFuZ2VzKTtcclxuICAgICAgdGhpcy5yZW1vdGVDaGFuZ2VMb2NrID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxhdGVzdENyZWF0ZWRBdE1hcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZWxlY3RJbnRlcm5hbGAgdXBkYXRlcyBzZWxlY3Rpb24gaW5mbyBvZiB0aGUgZ2l2ZW4gc2VsZWN0aW9uIHJhbmdlLlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIHNlbGVjdEludGVybmFsKFxyXG4gICAgcmFuZ2U6IFJHQVRyZWVTcGxpdE5vZGVSYW5nZSxcclxuICAgIHVwZGF0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnJlbW90ZUNoYW5nZUxvY2spIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYW5nZSA9IHRoaXMuc2VsZWN0UHJpdihyYW5nZSwgdXBkYXRlZEF0KTtcclxuICAgIGlmICh0aGlzLm9uQ2hhbmdlc0hhbmRsZXIgJiYgY2hhbmdlKSB7XHJcbiAgICAgIHRoaXMucmVtb3RlQ2hhbmdlTG9jayA9IHRydWU7XHJcbiAgICAgIHRoaXMub25DaGFuZ2VzSGFuZGxlcihbY2hhbmdlXSk7XHJcbiAgICAgIHRoaXMucmVtb3RlQ2hhbmdlTG9jayA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGhhc1JlbW90ZUNoYW5nZUxvY2tgIGNoZWNrcyB3aGV0aGVyIHJlbW90ZUNoYW5nZUxvY2sgaGFzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYXNSZW1vdGVDaGFuZ2VMb2NrKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVtb3RlQ2hhbmdlTG9jaztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBvbkNoYW5nZXNgIHJlZ2lzdGVycyBhIGhhbmRsZXIgb2Ygb25DaGFuZ2VzIGV2ZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbkNoYW5nZXMoaGFuZGxlcjogKGNoYW5nZXM6IEFycmF5PFRleHRDaGFuZ2U+KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlc0hhbmRsZXIgPSBoYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZVJhbmdlYCByZXR1cm5zIHBhaXIgb2YgUkdBVHJlZVNwbGl0Tm9kZVBvcyBvZiB0aGUgZ2l2ZW4gaW50ZWdlciBvZmZzZXRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGVSYW5nZShmcm9tSWR4OiBudW1iZXIsIHRvSWR4OiBudW1iZXIpOiBSR0FUcmVlU3BsaXROb2RlUmFuZ2Uge1xyXG4gICAgY29uc3QgZnJvbVBvcyA9IHRoaXMucmdhVHJlZVNwbGl0LmZpbmROb2RlUG9zKGZyb21JZHgpO1xyXG4gICAgaWYgKGZyb21JZHggPT09IHRvSWR4KSB7XHJcbiAgICAgIHJldHVybiBbZnJvbVBvcywgZnJvbVBvc107XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtmcm9tUG9zLCB0aGlzLnJnYVRyZWVTcGxpdC5maW5kTm9kZVBvcyh0b0lkeCldO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNPTmAgcmV0dXJucyB0aGUgSlNPTiBlbmNvZGluZyBvZiB0aGlzIHRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIHRvSlNPTigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBcIiR7dGhpcy5yZ2FUcmVlU3BsaXQudG9KU09OKCl9XCJgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvU29ydGVkSlNPTmAgcmV0dXJucyB0aGUgc29ydGVkIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyB0ZXh0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b1NvcnRlZEpTT04oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvU3RyaW5nYCByZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0ZXh0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMucmdhVHJlZVNwbGl0LnRvSlNPTigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFJHQVRyZWVTcGxpdGAgcmV0dXJucyB0aGUgcmdhVHJlZVNwbGl0LlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJHQVRyZWVTcGxpdCgpOiBSR0FUcmVlU3BsaXQ8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZ2FUcmVlU3BsaXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YSBvZiB0aGUgdGV4dC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5yZ2FUcmVlU3BsaXQuZ2V0QW5ub3RhdGVkU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UmVtb3ZlZE5vZGVzTGVuYCByZXR1cm5zIGxlbmd0aCBvZiByZW1vdmVkIG5vZGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZW1vdmVkTm9kZXNMZW4oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJnYVRyZWVTcGxpdC5nZXRSZW1vdmVkTm9kZXNMZW4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwdXJnZVRleHROb2Rlc1dpdGhHYXJiYWdlYCBwaHlzaWNhbGx5IHB1cmdlcyBub2RlcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkLlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIHB1cmdlVGV4dE5vZGVzV2l0aEdhcmJhZ2UodGlja2V0OiBUaW1lVGlja2V0KTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJnYVRyZWVTcGxpdC5wdXJnZVRleHROb2Rlc1dpdGhHYXJiYWdlKHRpY2tldCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVlcGNvcHlgIGNvcGllcyBpdHNlbGYgZGVlcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWVwY29weSgpOiBQbGFpblRleHRJbnRlcm5hbCB7XHJcbiAgICBjb25zdCB0ZXh0ID0gUGxhaW5UZXh0SW50ZXJuYWwuY3JlYXRlKFxyXG4gICAgICB0aGlzLnJnYVRyZWVTcGxpdC5kZWVwY29weSgpLFxyXG4gICAgICB0aGlzLmdldENyZWF0ZWRBdCgpLFxyXG4gICAgKTtcclxuICAgIHRleHQucmVtb3ZlKHRoaXMuZ2V0UmVtb3ZlZEF0KCkpO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNlbGVjdFByaXYoXHJcbiAgICByYW5nZTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlLFxyXG4gICAgdXBkYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IFRleHRDaGFuZ2UgfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbk1hcC5oYXModXBkYXRlZEF0LmdldEFjdG9ySUQoKSEpKSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0aW9uTWFwLnNldChcclxuICAgICAgICB1cGRhdGVkQXQuZ2V0QWN0b3JJRCgpISxcclxuICAgICAgICBTZWxlY3Rpb24ub2YocmFuZ2UsIHVwZGF0ZWRBdCksXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcmV2U2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25NYXAuZ2V0KHVwZGF0ZWRBdC5nZXRBY3RvcklEKCkhKTtcclxuICAgIGlmICh1cGRhdGVkQXQuYWZ0ZXIocHJldlNlbGVjdGlvbiEuZ2V0VXBkYXRlZEF0KCkpKSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0aW9uTWFwLnNldChcclxuICAgICAgICB1cGRhdGVkQXQuZ2V0QWN0b3JJRCgpISxcclxuICAgICAgICBTZWxlY3Rpb24ub2YocmFuZ2UsIHVwZGF0ZWRBdCksXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBbZnJvbSwgdG9dID0gdGhpcy5yZ2FUcmVlU3BsaXQuZmluZEluZGV4ZXNGcm9tUmFuZ2UocmFuZ2UpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFRleHRDaGFuZ2VUeXBlLlNlbGVjdGlvbixcclxuICAgICAgICBhY3RvcjogdXBkYXRlZEF0LmdldEFjdG9ySUQoKSEsXHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICB0byxcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgTG9uZyBmcm9tICdsb25nJztcclxuaW1wb3J0IHsgQ29kZSwgWW9ya2llRXJyb3IgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9lcnJvcic7XHJcbmltcG9ydCB7IFRpbWVUaWNrZXQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS90aWNrZXQnO1xyXG5pbXBvcnQgeyBKU09ORWxlbWVudCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2VsZW1lbnQnO1xyXG5cclxuZXhwb3J0IGVudW0gUHJpbWl0aXZlVHlwZSB7XHJcbiAgTnVsbCxcclxuICBCb29sZWFuLFxyXG4gIEludGVnZXIsXHJcbiAgTG9uZyxcclxuICBEb3VibGUsXHJcbiAgU3RyaW5nLFxyXG4gIEJ5dGVzLFxyXG4gIERhdGUsXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFByaW1pdGl2ZVZhbHVlID1cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG4gIG51bGwgfCBib29sZWFuIHwgbnVtYmVyIHwgTG9uZyB8IHN0cmluZyB8IFVpbnQ4QXJyYXkgfCBEYXRlO1xyXG5cclxuLyoqXHJcbiAqIGBKU09OUHJpbWl0aXZlYCByZXByZXNlbnRzIEpTT04gcHJpbWl0aXZlIGRhdGEgdHlwZSBpbmNsdWRpbmcgbG9naWNhbCBsb2NrLlxyXG4gKiBUaGlzIGlzIGltbXV0YWJsZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBKU09OUHJpbWl0aXZlIGV4dGVuZHMgSlNPTkVsZW1lbnQge1xyXG4gIHByaXZhdGUgdmFsdWVUeXBlOiBQcmltaXRpdmVUeXBlO1xyXG4gIHByaXZhdGUgdmFsdWU6IFByaW1pdGl2ZVZhbHVlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogUHJpbWl0aXZlVmFsdWUsIGNyZWF0ZWRBdDogVGltZVRpY2tldCkge1xyXG4gICAgc3VwZXIoY3JlYXRlZEF0KTtcclxuICAgIHRoaXMudmFsdWVUeXBlID0gSlNPTlByaW1pdGl2ZS5nZXRQcmltaXRpdmVUeXBlKHZhbHVlKSE7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBvZmAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBQcmltaXRpdmUuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvZihcclxuICAgIHZhbHVlOiBQcmltaXRpdmVWYWx1ZSxcclxuICAgIGNyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBKU09OUHJpbWl0aXZlIHtcclxuICAgIHJldHVybiBuZXcgSlNPTlByaW1pdGl2ZSh2YWx1ZSwgY3JlYXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB2YWx1ZUZyb21CeXRlc2AgcGFyc2VzIHRoZSBnaXZlbiBieXRlcyBpbnRvIHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgdmFsdWVGcm9tQnl0ZXMoXHJcbiAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlLFxyXG4gICAgYnl0ZXM6IFVpbnQ4QXJyYXksXHJcbiAgKTogUHJpbWl0aXZlVmFsdWUge1xyXG4gICAgc3dpdGNoIChwcmltaXRpdmVUeXBlKSB7XHJcbiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5OdWxsOlxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuQm9vbGVhbjpcclxuICAgICAgICByZXR1cm4gYnl0ZXNbMF0gPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5JbnRlZ2VyOlxyXG4gICAgICAgIHJldHVybiBieXRlc1swXSB8IChieXRlc1sxXSA8PCA4KSB8IChieXRlc1syXSA8PCAxNikgfCAoYnl0ZXNbM10gPDwgMjQpO1xyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuRG91YmxlOiB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhieXRlcy5idWZmZXIpO1xyXG4gICAgICAgIGJ5dGVzLmZvckVhY2goZnVuY3Rpb24gKGIsIGkpIHtcclxuICAgICAgICAgIHZpZXcuc2V0VWludDgoaSwgYik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQ2NCgwLCB0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuU3RyaW5nOlxyXG4gICAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKGJ5dGVzKTtcclxuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLkxvbmc6XHJcbiAgICAgICAgcmV0dXJuIExvbmcuZnJvbUJ5dGVzTEUoQXJyYXkuZnJvbShieXRlcykpO1xyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuQnl0ZXM6XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuRGF0ZTpcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoTG9uZy5mcm9tQnl0ZXNMRShBcnJheS5mcm9tKGJ5dGVzKSkudG9OdW1iZXIoKSk7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgbmV3IFlvcmtpZUVycm9yKFxyXG4gICAgICAgICAgQ29kZS5VbmltcGxlbWVudGVkLFxyXG4gICAgICAgICAgYHVuaW1wbGVtZW50ZWQgdHlwZTogJHtwcmltaXRpdmVUeXBlfWAsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b0pTT05gIHJldHVybnMgdGhlIEpTT04gZW5jb2Rpbmcgb2YgdGhlIHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTT04oKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLnZhbHVlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5TdHJpbmcpIHtcclxuICAgICAgcmV0dXJuIGBcIiR7dGhpcy52YWx1ZX1cImA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGAke3RoaXMudmFsdWV9YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b1NvcnRlZEpTT05gIHJldHVybnMgdGhlIHNvcnRlZCBKU09OIGVuY29kaW5nIG9mIHRoZSB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9Tb3J0ZWRKU09OKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBkZWVwY29weWAgY29waWVzIGl0c2VsZiBkZWVwbHkuXHJcbiAgICovXHJcbiAgcHVibGljIGRlZXBjb3B5KCk6IEpTT05QcmltaXRpdmUge1xyXG4gICAgY29uc3QgcHJpbWl0aXZlID0gSlNPTlByaW1pdGl2ZS5vZih0aGlzLnZhbHVlLCB0aGlzLmdldENyZWF0ZWRBdCgpKTtcclxuICAgIHByaW1pdGl2ZS5zZXRNb3ZlZEF0KHRoaXMuZ2V0TW92ZWRBdCgpKTtcclxuICAgIHJldHVybiBwcmltaXRpdmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0VHlwZWAgcmV0dXJucyB0aGUgdHlwZSBvZiB0aGUgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFR5cGUoKTogUHJpbWl0aXZlVHlwZSB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZVR5cGUhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFByaW1pdGl2ZVR5cGVgIHJldHVybnMgdGhlIHByaW1pdGl2ZSB0eXBlIG9mIHRoZSB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFByaW1pdGl2ZVR5cGUodmFsdWU6IHVua25vd24pOiBQcmltaXRpdmVUeXBlIHwgdW5kZWZpbmVkIHtcclxuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XHJcbiAgICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuTnVsbDtcclxuICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuQm9vbGVhbjtcclxuICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICByZXR1cm4gUHJpbWl0aXZlVHlwZS5Eb3VibGU7XHJcbiAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuU3RyaW5nO1xyXG4gICAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuTnVsbDtcclxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9uZykge1xyXG4gICAgICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuTG9uZztcclxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xyXG4gICAgICAgICAgcmV0dXJuIFByaW1pdGl2ZVR5cGUuQnl0ZXM7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgIHJldHVybiBQcmltaXRpdmVUeXBlLkRhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpc1N1cHBvcnRgIGNoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBzdXBwb3J0ZWQgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzU3VwcG9ydCh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IEpTT05QcmltaXRpdmUuZ2V0UHJpbWl0aXZlVHlwZSh2YWx1ZSk7XHJcbiAgICBpZiAocHJpbWl0aXZlVHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGlzSW50ZWdlcmAgY2hlY2tzIGlmIHRoZSBnaXZlbiBudW1iZXIgaXMgaW50ZWdlci5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzSW50ZWdlcihudW06IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIG51bSAlIDEgPT09IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaXNOdW1lcmljVHlwZWAgY2hlY2tzIG51bWVyaWMgdHlwZSBieSBKU09OUHJpbWl0aXZlXHJcbiAgICovXHJcbiAgcHVibGljIGlzTnVtZXJpY1R5cGUoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB0ID0gdGhpcy52YWx1ZVR5cGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0ID09PSBQcmltaXRpdmVUeXBlLkludGVnZXIgfHxcclxuICAgICAgdCA9PT0gUHJpbWl0aXZlVHlwZS5Mb25nIHx8XHJcbiAgICAgIHQgPT09IFByaW1pdGl2ZVR5cGUuRG91YmxlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFZhbHVlYCByZXR1cm5zIHRoZSB2YWx1ZSBvZiBQcmltaXRpdmUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlKCk6IFByaW1pdGl2ZVZhbHVlIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvQnl0ZXNgIGNyZWF0ZXMgYW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9CeXRlcygpOiBVaW50OEFycmF5IHtcclxuICAgIHN3aXRjaCAodGhpcy52YWx1ZVR5cGUpIHtcclxuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLk51bGw6IHtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoKTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuQm9vbGVhbjoge1xyXG4gICAgICAgIGNvbnN0IGJvb2xWYWwgPSB0aGlzLnZhbHVlIGFzIGJvb2xlYW47XHJcbiAgICAgICAgcmV0dXJuIGJvb2xWYWwgPyBuZXcgVWludDhBcnJheShbMV0pIDogbmV3IFVpbnQ4QXJyYXkoWzBdKTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuSW50ZWdlcjoge1xyXG4gICAgICAgIGNvbnN0IGludFZhbCA9IHRoaXMudmFsdWUgYXMgbnVtYmVyO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXHJcbiAgICAgICAgICBpbnRWYWwgJiAweGZmLFxyXG4gICAgICAgICAgKGludFZhbCA+PiA4KSAmIDB4ZmYsXHJcbiAgICAgICAgICAoaW50VmFsID4+IDE2KSAmIDB4ZmYsXHJcbiAgICAgICAgICAoaW50VmFsID4+IDI0KSAmIDB4ZmYsXHJcbiAgICAgICAgXSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLkRvdWJsZToge1xyXG4gICAgICAgIGNvbnN0IGRvdWJsZVZhbCA9IHRoaXMudmFsdWUgYXMgbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheSg4KTtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KHVpbnQ4QXJyYXkuYnVmZmVyKTtcclxuICAgICAgICB2aWV3LnNldEZsb2F0NjQoMCwgZG91YmxlVmFsLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gdWludDhBcnJheTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuU3RyaW5nOiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0aGlzLnZhbHVlIGFzIHN0cmluZyk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLkxvbmc6IHtcclxuICAgICAgICBjb25zdCBsb25nVmFsID0gdGhpcy52YWx1ZSBhcyBMb25nO1xyXG4gICAgICAgIGNvbnN0IGxvbmdUb0J5dGVzID0gbG9uZ1ZhbC50b0J5dGVzTEUoKTtcclxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGxvbmdUb0J5dGVzKTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuQnl0ZXM6IHtcclxuICAgICAgICBjb25zdCBieXRlc1ZhbCA9IHRoaXMudmFsdWUgYXMgVWludDhBcnJheTtcclxuICAgICAgICByZXR1cm4gYnl0ZXNWYWw7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLkRhdGU6IHtcclxuICAgICAgICBjb25zdCBkYXRlVmFsID0gdGhpcy52YWx1ZSBhcyBEYXRlO1xyXG4gICAgICAgIGNvbnN0IGRhdGVUb0J5dGVzID0gTG9uZy5mcm9tTnVtYmVyKGRhdGVWYWwuZ2V0VGltZSgpKS50b0J5dGVzTEUoKTtcclxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGRhdGVUb0J5dGVzKTtcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBZb3JraWVFcnJvcihcclxuICAgICAgICAgIENvZGUuVW5pbXBsZW1lbnRlZCxcclxuICAgICAgICAgIGB1bmltcGxlbWVudGVkIHR5cGU6ICR7dGhpcy52YWx1ZVR5cGV9YCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL2xvZ2dlcic7XHJcbmltcG9ydCB7IFNwbGF5Tm9kZSwgU3BsYXlUcmVlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvc3BsYXlfdHJlZSc7XHJcbmltcG9ydCB7XHJcbiAgSW5pdGlhbFRpbWVUaWNrZXQsXHJcbiAgVGltZVRpY2tldCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS90aWNrZXQnO1xyXG5pbXBvcnQgeyBKU09ORWxlbWVudCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2VsZW1lbnQnO1xyXG5pbXBvcnQgeyBKU09OUHJpbWl0aXZlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcHJpbWl0aXZlJztcclxuXHJcbi8qKlxyXG4gKiBgUkdBVHJlZUxpc3ROb2RlYCBpcyBhIG5vZGUgb2YgUkdBVHJlZUxpc3QuXHJcbiAqL1xyXG5jbGFzcyBSR0FUcmVlTGlzdE5vZGUgZXh0ZW5kcyBTcGxheU5vZGU8SlNPTkVsZW1lbnQ+IHtcclxuICBwcml2YXRlIHByZXY/OiBSR0FUcmVlTGlzdE5vZGU7XHJcbiAgcHJpdmF0ZSBuZXh0PzogUkdBVHJlZUxpc3ROb2RlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogSlNPTkVsZW1lbnQpIHtcclxuICAgIHN1cGVyKHZhbHVlKTtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVBZnRlcmAgY3JlYXRlcyBhIG5ldyBub2RlIGFmdGVyIHRoZSBwcmV2aW91cyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlQWZ0ZXIoXHJcbiAgICBwcmV2OiBSR0FUcmVlTGlzdE5vZGUsXHJcbiAgICB2YWx1ZTogSlNPTkVsZW1lbnQsXHJcbiAgKTogUkdBVHJlZUxpc3ROb2RlIHtcclxuICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgUkdBVHJlZUxpc3ROb2RlKHZhbHVlKTtcclxuICAgIGNvbnN0IHByZXZOZXh0ID0gcHJldi5uZXh0O1xyXG4gICAgcHJldi5uZXh0ID0gbmV3Tm9kZTtcclxuICAgIG5ld05vZGUucHJldiA9IHByZXY7XHJcbiAgICBuZXdOb2RlLm5leHQgPSBwcmV2TmV4dDtcclxuICAgIGlmIChwcmV2TmV4dCkge1xyXG4gICAgICBwcmV2TmV4dC5wcmV2ID0gbmV3Tm9kZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3Tm9kZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGByZW1vdmVgIHJlbW92ZXMgdmFsdWUgYmFzZWQgb24gcmVtb3ZpbmcgdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlKHJlbW92ZWRBdDogVGltZVRpY2tldCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUucmVtb3ZlKHJlbW92ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q3JlYXRlZEF0YCByZXR1cm5zIGNyZWF0aW9uIHRpbWUgb2YgdGhpcyB2YWx1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5nZXRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRQb3NpdGlvbmVkQXRgIHJldHVybnMgdGltZSB0aGlzIGVsZW1lbnQgd2FzIHBvc2l0aW9uZWQgaW4gdGhlIGFycmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQb3NpdGlvbmVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICBjb25zdCBtb3ZlZEF0ID0gdGhpcy52YWx1ZS5nZXRNb3ZlZEF0KCk7XHJcbiAgICBpZiAobW92ZWRBdCkge1xyXG4gICAgICByZXR1cm4gbW92ZWRBdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5nZXRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGByZWxlYXNlYCByZWxlYXNlcyBwcmV2IGFuZCBuZXh0IG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wcmV2KSB7XHJcbiAgICAgIHRoaXMucHJldi5uZXh0ID0gdGhpcy5uZXh0O1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubmV4dCkge1xyXG4gICAgICB0aGlzLm5leHQucHJldiA9IHRoaXMucHJldjtcclxuICAgIH1cclxuICAgIHRoaXMucHJldiA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMubmV4dCA9IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRMZW5ndGhgIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUuaXNSZW1vdmVkKCkgPyAwIDogMTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRQcmV2YCByZXR1cm5zIGEgcHJldmlvdXMgbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJldigpOiBSR0FUcmVlTGlzdE5vZGUgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMucHJldjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXROZXh0YCByZXR1cm5zIGEgbmV4dCBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXROZXh0KCk6IFJHQVRyZWVMaXN0Tm9kZSB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5uZXh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFZhbHVlYCByZXR1cm5zIGEgZWxlbWVudCB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWUoKTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaXNSZW1vdmVkYCBjaGVja3MgaWYgdGhlIHZhbHVlIHdhcyByZW1vdmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1JlbW92ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5pc1JlbW92ZWQoKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgUkdBVHJlZUxpc3RgIGlzIHJlcGxpY2F0ZWQgZ3Jvd2FibGUgYXJyYXkuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJHQVRyZWVMaXN0IHtcclxuICBwcml2YXRlIGR1bW15SGVhZDogUkdBVHJlZUxpc3ROb2RlO1xyXG4gIHByaXZhdGUgbGFzdDogUkdBVHJlZUxpc3ROb2RlO1xyXG4gIHByaXZhdGUgc2l6ZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgbm9kZU1hcEJ5SW5kZXg6IFNwbGF5VHJlZTxKU09ORWxlbWVudD47XHJcbiAgcHJpdmF0ZSBub2RlTWFwQnlDcmVhdGVkQXQ6IE1hcDxzdHJpbmcsIFJHQVRyZWVMaXN0Tm9kZT47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgY29uc3QgZHVtbXlWYWx1ZSA9IEpTT05QcmltaXRpdmUub2YoMCwgSW5pdGlhbFRpbWVUaWNrZXQpO1xyXG4gICAgZHVtbXlWYWx1ZS5zZXRSZW1vdmVkQXQoSW5pdGlhbFRpbWVUaWNrZXQpO1xyXG4gICAgdGhpcy5kdW1teUhlYWQgPSBuZXcgUkdBVHJlZUxpc3ROb2RlKGR1bW15VmFsdWUpO1xyXG4gICAgdGhpcy5sYXN0ID0gdGhpcy5kdW1teUhlYWQ7XHJcbiAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgdGhpcy5ub2RlTWFwQnlJbmRleCA9IG5ldyBTcGxheVRyZWUoKTtcclxuICAgIHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIHRoaXMubm9kZU1hcEJ5SW5kZXguaW5zZXJ0KHRoaXMuZHVtbXlIZWFkKTtcclxuICAgIHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LnNldChcclxuICAgICAgdGhpcy5kdW1teUhlYWQuZ2V0Q3JlYXRlZEF0KCkudG9JRFN0cmluZygpLFxyXG4gICAgICB0aGlzLmR1bW15SGVhZCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGluc3RhbmNlIG9mIFJHQVRyZWVMaXN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IFJHQVRyZWVMaXN0IHtcclxuICAgIHJldHVybiBuZXcgUkdBVHJlZUxpc3QoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBsZW5ndGhgIHJldHVybnMgc2l6ZSBvZiBSR0FUcmVlTGlzdC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBmaW5kTmV4dEJlZm9yZUV4ZWN1dGVkQXRgIHJldHVybnMgdGhlIG5vZGUgYnkgdGhlIGdpdmVuIGNyZWF0ZWRBdCBhbmRcclxuICAgKiBleGVjdXRlZEF0LiBJdCBwYXNzZXMgdGhyb3VnaCBub2RlcyBjcmVhdGVkIGFmdGVyIGV4ZWN1dGVkQXQgZnJvbSB0aGVcclxuICAgKiBnaXZlbiBub2RlIGFuZCByZXR1cm5zIHRoZSBuZXh0IG5vZGUuXHJcbiAgICogQHBhcmFtIGNyZWF0ZWRBdCAtIGNyZWF0ZWQgdGltZVxyXG4gICAqIEBwYXJhbSBleGVjdXRlZEF0IC0gZXhlY3V0ZWQgdGltZVxyXG4gICAqIEByZXR1cm5zIG5leHQgbm9kZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZmluZE5leHRCZWZvcmVFeGVjdXRlZEF0KFxyXG4gICAgY3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBSR0FUcmVlTGlzdE5vZGUge1xyXG4gICAgbGV0IG5vZGUgPSB0aGlzLm5vZGVNYXBCeUNyZWF0ZWRBdC5nZXQoY3JlYXRlZEF0LnRvSURTdHJpbmcoKSk7XHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKGBjYW50IGZpbmQgdGhlIGdpdmVuIG5vZGU6ICR7Y3JlYXRlZEF0LnRvSURTdHJpbmcoKX1gKTtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAoXHJcbiAgICAgIG5vZGUhLmdldE5leHQoKSAmJlxyXG4gICAgICBub2RlIS5nZXROZXh0KCkhLmdldFBvc2l0aW9uZWRBdCgpLmFmdGVyKGV4ZWN1dGVkQXQpXHJcbiAgICApIHtcclxuICAgICAgbm9kZSA9IG5vZGUhLmdldE5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbm9kZSE7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbGVhc2Uobm9kZTogUkdBVHJlZUxpc3ROb2RlKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5sYXN0ID09PSBub2RlKSB7XHJcbiAgICAgIHRoaXMubGFzdCA9IG5vZGUuZ2V0UHJldigpITtcclxuICAgIH1cclxuXHJcbiAgICBub2RlLnJlbGVhc2UoKTtcclxuICAgIHRoaXMubm9kZU1hcEJ5SW5kZXguZGVsZXRlKG5vZGUpO1xyXG4gICAgdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQuZGVsZXRlKG5vZGUuZ2V0VmFsdWUoKS5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCkpO1xyXG5cclxuICAgIGlmICghbm9kZS5pc1JlbW92ZWQoKSkge1xyXG4gICAgICB0aGlzLnNpemUgLT0gMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnNlcnRBZnRlcmAgYWRkcyBuZXh0IGVsZW1lbnQgb2YgcHJldmlvdXNseSBjcmVhdGVkIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGluc2VydEFmdGVyKFxyXG4gICAgcHJldkNyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIHZhbHVlOiBKU09ORWxlbWVudCxcclxuICAgIGV4ZWN1dGVkQXQ6IFRpbWVUaWNrZXQgPSB2YWx1ZS5nZXRDcmVhdGVkQXQoKSxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IHByZXZOb2RlID0gdGhpcy5maW5kTmV4dEJlZm9yZUV4ZWN1dGVkQXQocHJldkNyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgICBjb25zdCBuZXdOb2RlID0gUkdBVHJlZUxpc3ROb2RlLmNyZWF0ZUFmdGVyKHByZXZOb2RlLCB2YWx1ZSk7XHJcbiAgICBpZiAocHJldk5vZGUgPT09IHRoaXMubGFzdCkge1xyXG4gICAgICB0aGlzLmxhc3QgPSBuZXdOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubm9kZU1hcEJ5SW5kZXguaW5zZXJ0QWZ0ZXIocHJldk5vZGUsIG5ld05vZGUpO1xyXG4gICAgdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQuc2V0KG5ld05vZGUuZ2V0Q3JlYXRlZEF0KCkudG9JRFN0cmluZygpLCBuZXdOb2RlKTtcclxuXHJcbiAgICB0aGlzLnNpemUgKz0gMTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBtb3ZlQWZ0ZXJgIG1vdmVzIHRoZSBnaXZlbiBgY3JlYXRlZEF0YCBlbGVtZW50XHJcbiAgICogYWZ0ZXIgdGhlIGBwcmV2Q3JlYXRlZEF0YCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb3ZlQWZ0ZXIoXHJcbiAgICBwcmV2Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgY3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IHByZXZOb2RlID0gdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQuZ2V0KHByZXZDcmVhdGVkQXQudG9JRFN0cmluZygpKTtcclxuICAgIGlmICghcHJldk5vZGUpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKGBjYW50IGZpbmQgdGhlIGdpdmVuIG5vZGU6ICR7cHJldkNyZWF0ZWRBdC50b0lEU3RyaW5nKCl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LmdldChjcmVhdGVkQXQudG9JRFN0cmluZygpKTtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoYGNhbnQgZmluZCB0aGUgZ2l2ZW4gbm9kZTogJHtjcmVhdGVkQXQudG9JRFN0cmluZygpfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgcHJldk5vZGUgIT09IG5vZGUgJiZcclxuICAgICAgKCFub2RlIS5nZXRWYWx1ZSgpLmdldE1vdmVkQXQoKSB8fFxyXG4gICAgICAgIGV4ZWN1dGVkQXQuYWZ0ZXIobm9kZSEuZ2V0VmFsdWUoKS5nZXRNb3ZlZEF0KCkhKSlcclxuICAgICkge1xyXG4gICAgICB0aGlzLnJlbGVhc2Uobm9kZSEpO1xyXG4gICAgICB0aGlzLmluc2VydEFmdGVyKHByZXZOb2RlIS5nZXRDcmVhdGVkQXQoKSwgbm9kZSEuZ2V0VmFsdWUoKSwgZXhlY3V0ZWRBdCk7XHJcbiAgICAgIG5vZGUhLmdldFZhbHVlKCkuc2V0TW92ZWRBdChleGVjdXRlZEF0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnNlcnRgIGFkZHMgdGhlIGdpdmVuIGVsZW1lbnQgYWZ0ZXIgIHRoZSBsYXN0IGNyZWF0aW9uIHRpbWUuXHJcbiAgICovXHJcbiAgcHVibGljIGluc2VydCh2YWx1ZTogSlNPTkVsZW1lbnQpOiB2b2lkIHtcclxuICAgIHRoaXMuaW5zZXJ0QWZ0ZXIodGhpcy5sYXN0LmdldENyZWF0ZWRBdCgpLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0YCByZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSBnaXZlbiBpbmRleC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0KGNyZWF0ZWRBdDogVGltZVRpY2tldCk6IEpTT05FbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVNYXBCeUNyZWF0ZWRBdC5nZXQoY3JlYXRlZEF0LnRvSURTdHJpbmcoKSk7XHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBub2RlLmdldFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBga2V5T2ZgIGtleSBiYXNlZCBvbiB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGUgbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMga2V5T2YoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVNYXBCeUNyZWF0ZWRBdC5nZXQoY3JlYXRlZEF0LnRvSURTdHJpbmcoKSk7XHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLm5vZGVNYXBCeUluZGV4LmluZGV4T2Yobm9kZSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHB1cmdlYCBwaHlzaWNhbGx5IHB1cmdlcyBjaGlsZCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJnZShlbGVtZW50OiBKU09ORWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LmdldChcclxuICAgICAgZWxlbWVudC5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCksXHJcbiAgICApO1xyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbChcclxuICAgICAgICBgZmFpbCB0byBmaW5kIHRoZSBnaXZlbiBjcmVhdGVkQXQ6ICR7ZWxlbWVudFxyXG4gICAgICAgICAgLmdldENyZWF0ZWRBdCgpXHJcbiAgICAgICAgICAudG9JRFN0cmluZygpfWAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlbGVhc2Uobm9kZSEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEJ5SW5kZXhgIHJldHVybnMgbm9kZSBvZiB0aGUgZ2l2ZW4gaW5kZXguXHJcbiAgICovXHJcbiAgcHVibGljIGdldEJ5SW5kZXgoaWR4OiBudW1iZXIpOiBSR0FUcmVlTGlzdE5vZGUgfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKGlkeCA+PSB0aGlzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgW25vZGUsIG9mZnNldF0gPSB0aGlzLm5vZGVNYXBCeUluZGV4LmZpbmQoaWR4KTtcclxuICAgIGxldCByZ2FOb2RlID0gbm9kZSBhcyBSR0FUcmVlTGlzdE5vZGUgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgaWYgKChpZHggPT09IDAgJiYgbm9kZSA9PT0gdGhpcy5kdW1teUhlYWQpIHx8IG9mZnNldCA+IDApIHtcclxuICAgICAgZG8ge1xyXG4gICAgICAgIGlmIChyZ2FOb2RlKSB7XHJcbiAgICAgICAgICByZ2FOb2RlID0gcmdhTm9kZS5nZXROZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IHdoaWxlIChyZ2FOb2RlICYmIHJnYU5vZGUuaXNSZW1vdmVkKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZ2FOb2RlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFByZXZDcmVhdGVkQXRgIHJldHVybnMgYSBjcmVhdGlvbiB0aW1lIG9mIHRoZSBwcmV2aW91cyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQcmV2Q3JlYXRlZEF0KGNyZWF0ZWRBdDogVGltZVRpY2tldCk6IFRpbWVUaWNrZXQge1xyXG4gICAgbGV0IG5vZGUgPSB0aGlzLm5vZGVNYXBCeUNyZWF0ZWRBdC5nZXQoY3JlYXRlZEF0LnRvSURTdHJpbmcoKSk7XHJcbiAgICBkbyB7XHJcbiAgICAgIG5vZGUgPSBub2RlIS5nZXRQcmV2KCkhO1xyXG4gICAgfSB3aGlsZSAodGhpcy5kdW1teUhlYWQgIT09IG5vZGUgJiYgbm9kZS5pc1JlbW92ZWQoKSk7XHJcbiAgICByZXR1cm4gbm9kZS5nZXRWYWx1ZSgpLmdldENyZWF0ZWRBdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZWAgZGVsZXRlcyB0aGUgbm9kZSBvZiB0aGUgZ2l2ZW4gY3JlYXRpb24gdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVsZXRlKGNyZWF0ZWRBdDogVGltZVRpY2tldCwgZWRpdGVkQXQ6IFRpbWVUaWNrZXQpOiBKU09ORWxlbWVudCB7XHJcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQuZ2V0KGNyZWF0ZWRBdC50b0lEU3RyaW5nKCkpO1xyXG4gICAgY29uc3QgYWxyZWFkeVJlbW92ZWQgPSBub2RlIS5pc1JlbW92ZWQoKTtcclxuICAgIGlmIChub2RlIS5yZW1vdmUoZWRpdGVkQXQpICYmICFhbHJlYWR5UmVtb3ZlZCkge1xyXG4gICAgICB0aGlzLm5vZGVNYXBCeUluZGV4LnNwbGF5Tm9kZShub2RlISk7XHJcbiAgICAgIHRoaXMuc2l6ZSAtPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGUhLmdldFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVsZXRlQnlJbmRleGAgZGVsZXRlcyB0aGUgbm9kZSBvZiB0aGUgZ2l2ZW4gaW5kZXguXHJcbiAgICovXHJcbiAgcHVibGljIGRlbGV0ZUJ5SW5kZXgoXHJcbiAgICBpbmRleDogbnVtYmVyLFxyXG4gICAgZWRpdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogSlNPTkVsZW1lbnQgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0QnlJbmRleChpbmRleCk7XHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChub2RlLnJlbW92ZShlZGl0ZWRBdCkpIHtcclxuICAgICAgdGhpcy5ub2RlTWFwQnlJbmRleC5zcGxheU5vZGUobm9kZSk7XHJcbiAgICAgIHRoaXMuc2l6ZSAtPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGUuZ2V0VmFsdWUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRIZWFkYCByZXR1cm5zIHRoZSB2YWx1ZSBvZiBoZWFkIGVsZW1lbnRzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIZWFkKCk6IEpTT05FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmR1bW15SGVhZC5nZXRWYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldExhc3RgIHJldHVybnMgdGhlIHZhbHVlIG9mIGxhc3QgZWxlbWVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldExhc3QoKTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMubGFzdC5nZXRWYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldExhc3RDcmVhdGVkQXRgIHJldHVybnMgdGhlIGNyZWF0aW9uIHRpbWUgb2YgbGFzdCBlbGVtZW50cy5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TGFzdENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLmxhc3QuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YSBvZiB0aGUgbm9kZSBpZFxyXG4gICAqIGZvciBkZWJ1Z2dpbmcgcHVycG9zZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBqc29uID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpIHtcclxuICAgICAgY29uc3QgZWxlbSA9IGAke25vZGUuZ2V0Q3JlYXRlZEF0KCkudG9JRFN0cmluZygpfToke25vZGVcclxuICAgICAgICAuZ2V0VmFsdWUoKVxyXG4gICAgICAgIC50b0pTT04oKX1gO1xyXG4gICAgICBpZiAobm9kZS5pc1JlbW92ZWQoKSkge1xyXG4gICAgICAgIGpzb24ucHVzaChgeyR7ZWxlbX19YCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAganNvbi5wdXNoKGBbJHtlbGVtfV1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBqc29uLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcclxuICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UkdBVHJlZUxpc3ROb2RlPiB7XHJcbiAgICBsZXQgbm9kZSA9IHRoaXMuZHVtbXlIZWFkLmdldE5leHQoKTtcclxuICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgIHlpZWxkIG5vZGU7XHJcbiAgICAgIG5vZGUgPSBub2RlLmdldE5leHQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBBY3RvcklEIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvYWN0b3JfaWQnO1xyXG5pbXBvcnQgeyBDb21wYXJhdG9yIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvY29tcGFyYXRvcic7XHJcbmltcG9ydCB7IFNwbGF5Tm9kZSwgU3BsYXlUcmVlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvc3BsYXlfdHJlZSc7XHJcbmltcG9ydCB7IExMUkJUcmVlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbGxyYl90cmVlJztcclxuaW1wb3J0IHtcclxuICBJbml0aWFsVGltZVRpY2tldCxcclxuICBNYXhUaW1lVGlja2V0LFxyXG4gIFRpbWVUaWNrZXQsXHJcbn0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuXHJcbi8qKlxyXG4gKiBgVGV4dENoYW5nZVR5cGVgIGlzIHRoZSB0eXBlIG9mIFRleHRDaGFuZ2UuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGVudW0gVGV4dENoYW5nZVR5cGUge1xyXG4gIENvbnRlbnQgPSAnY29udGVudCcsXHJcbiAgU2VsZWN0aW9uID0gJ3NlbGVjdGlvbicsXHJcbiAgU3R5bGUgPSAnc3R5bGUnLFxyXG59XHJcblxyXG4vKipcclxuICogYFRleHRDaGFuZ2VgIGlzIHRoZSB2YWx1ZSBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gYFRleHQub25DaGFuZ2VzKClgLlxyXG4gKiBgVGV4dC5vbkNoYW5nZXMoKWAgaXMgY2FsbGVkIHdoZW4gdGhlIGBUZXh0YCBpcyBtb2RpZmllZC5cclxuICovXHJcbmV4cG9ydCB0eXBlIFRleHRDaGFuZ2UgPSB7XHJcbiAgdHlwZTogVGV4dENoYW5nZVR5cGU7XHJcbiAgYWN0b3I6IEFjdG9ySUQ7XHJcbiAgZnJvbTogbnVtYmVyO1xyXG4gIHRvOiBudW1iZXI7XHJcbiAgY29udGVudD86IHN0cmluZztcclxuICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxufTtcclxuXHJcbmludGVyZmFjZSBSR0FUcmVlU3BsaXRWYWx1ZSB7XHJcbiAgbGVuZ3RoOiBudW1iZXI7XHJcbiAgc3Vic3RyaW5nKGluZGV4U3RhcnQ6IG51bWJlciwgaW5kZXhFbmQ/OiBudW1iZXIpOiBSR0FUcmVlU3BsaXRWYWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBSR0FUcmVlU3BsaXROb2RlSURgIGlzIGFuIElEIG9mIFJHQVRyZWVTcGxpdE5vZGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUkdBVHJlZVNwbGl0Tm9kZUlEIHtcclxuICBwcml2YXRlIGNyZWF0ZWRBdDogVGltZVRpY2tldDtcclxuICBwcml2YXRlIG9mZnNldDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsIG9mZnNldDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmNyZWF0ZWRBdCA9IGNyZWF0ZWRBdDtcclxuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9mYCBjcmVhdGVzIGEgaW5zdGFuY2Ugb2YgUkdBVHJlZVNwbGl0Tm9kZUlELlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb2YoY3JlYXRlZEF0OiBUaW1lVGlja2V0LCBvZmZzZXQ6IG51bWJlcik6IFJHQVRyZWVTcGxpdE5vZGVJRCB7XHJcbiAgICByZXR1cm4gbmV3IFJHQVRyZWVTcGxpdE5vZGVJRChjcmVhdGVkQXQsIG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q3JlYXRlZEF0YCByZXR1cm5zIHRoZSBjcmVhdGlvbiB0aW1lIG9mIHRoaXMgSUQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZWRBdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRPZmZzZXRgIHJldHVybnMgcmV0dXJucyB0aGUgb2Zmc2V0IG9mIHRoaXMgSUQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldE9mZnNldCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGVxdWFsc2AgcmV0dXJucyB3aGV0aGVyIGdpdmVuIElEIGVxdWFscyB0byB0aGlzIElEIG9yIG5vdC5cclxuICAgKi9cclxuICBwdWJsaWMgZXF1YWxzKG90aGVyOiBSR0FUcmVlU3BsaXROb2RlSUQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuY3JlYXRlZEF0LmNvbXBhcmUob3RoZXIuY3JlYXRlZEF0KSA9PT0gMCAmJlxyXG4gICAgICB0aGlzLm9mZnNldCA9PT0gb3RoZXIub2Zmc2V0XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGhhc1NhbWVDcmVhdGVkQXRgIHJldHVybnMgd2hldGhlciBnaXZlbiBJRCBoYXMgc2FtZSBjcmVhdGlvbiB0aW1lIHdpdGggdGhpcyBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzU2FtZUNyZWF0ZWRBdChvdGhlcjogUkdBVHJlZVNwbGl0Tm9kZUlEKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVkQXQuY29tcGFyZShvdGhlci5jcmVhdGVkQXQpID09PSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNwbGl0YCBjcmVhdGVzIGEgbmV3IElEIHdpdGggYW4gb2Zmc2V0IGZyb20gdGhpcyBJRC5cclxuICAgKi9cclxuICBwdWJsaWMgc3BsaXQob2Zmc2V0OiBudW1iZXIpOiBSR0FUcmVlU3BsaXROb2RlSUQge1xyXG4gICAgcmV0dXJuIG5ldyBSR0FUcmVlU3BsaXROb2RlSUQodGhpcy5jcmVhdGVkQXQsIHRoaXMub2Zmc2V0ICsgb2Zmc2V0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBTdHJpbmcgY29udGFpbmluZ1xyXG4gICAqIHRoZSBtZXRhIGRhdGEgb2YgdGhlIG5vZGUgaWQgZm9yIGRlYnVnZ2luZyBwdXJwb3NlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLmNyZWF0ZWRBdC5nZXRBbm5vdGF0ZWRTdHJpbmcoKX06JHt0aGlzLm9mZnNldH1gO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgSW5pdGlhbFJHQVRyZWVTcGxpdE5vZGVJRCA9IFJHQVRyZWVTcGxpdE5vZGVJRC5vZihJbml0aWFsVGltZVRpY2tldCwgMCk7XHJcblxyXG4vKipcclxuICogYFJHQVRyZWVTcGxpdE5vZGVQb3NgIGlzIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGV4dCBpbnNpZGUgdGhlIG5vZGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUkdBVHJlZVNwbGl0Tm9kZVBvcyB7XHJcbiAgcHJpdmF0ZSBpZDogUkdBVHJlZVNwbGl0Tm9kZUlEO1xyXG4gIHByaXZhdGUgcmVsYXRpdmVPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IFJHQVRyZWVTcGxpdE5vZGVJRCwgcmVsYXRpdmVPZmZzZXQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCA9IHJlbGF0aXZlT2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9mYCBjcmVhdGVzIGEgaW5zdGFuY2Ugb2YgUkdBVHJlZVNwbGl0Tm9kZVBvcy5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG9mKFxyXG4gICAgaWQ6IFJHQVRyZWVTcGxpdE5vZGVJRCxcclxuICAgIHJlbGF0aXZlT2Zmc2V0OiBudW1iZXIsXHJcbiAgKTogUkdBVHJlZVNwbGl0Tm9kZVBvcyB7XHJcbiAgICByZXR1cm4gbmV3IFJHQVRyZWVTcGxpdE5vZGVQb3MoaWQsIHJlbGF0aXZlT2Zmc2V0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRJRGAgcmV0dXJucyB0aGUgSUQgb2YgdGhpcyBSR0FUcmVlU3BsaXROb2RlUG9zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJRCgpOiBSR0FUcmVlU3BsaXROb2RlSUQge1xyXG4gICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UmVsYXRpdmVPZmZzZXRgIHJldHVybnMgdGhlIHJlbGF0aXZlIG9mZnNldCBvZiB0aGlzIFJHQVRyZWVTcGxpdE5vZGVQb3MuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJlbGF0aXZlT2Zmc2V0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWxhdGl2ZU9mZnNldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBYnNvbHV0ZUlEYCByZXR1cm5zIHRoZSBhYnNvbHV0ZSBpZCBvZiB0aGlzIFJHQVRyZWVTcGxpdE5vZGVQb3MuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFic29sdXRlSUQoKTogUkdBVHJlZVNwbGl0Tm9kZUlEIHtcclxuICAgIHJldHVybiBSR0FUcmVlU3BsaXROb2RlSUQub2YoXHJcbiAgICAgIHRoaXMuaWQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgIHRoaXMuaWQuZ2V0T2Zmc2V0KCkgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0LFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIFN0cmluZyBjb250YWluaW5nXHJcbiAgICogdGhlIG1ldGEgZGF0YSBvZiB0aGUgcG9zaXRpb24gZm9yIGRlYnVnZ2luZyBwdXJwb3NlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLmlkLmdldEFubm90YXRlZFN0cmluZygpfToke3RoaXMucmVsYXRpdmVPZmZzZXR9YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBlcXVhbHNgIHJldHVybnMgd2hldGhlciBnaXZlbiBwb3MgZXF1YWwgdG8gdGhpcyBwb3Mgb3Igbm90LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcXVhbHMob3RoZXI6IFJHQVRyZWVTcGxpdE5vZGVQb3MpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5pZC5lcXVhbHMob3RoZXIuaWQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZWxhdGl2ZU9mZnNldCA9PT0gb3RoZXIucmVsYXRpdmVPZmZzZXQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSR0FUcmVlU3BsaXROb2RlUmFuZ2UgPSBbUkdBVHJlZVNwbGl0Tm9kZVBvcywgUkdBVHJlZVNwbGl0Tm9kZVBvc107XHJcblxyXG4vKipcclxuICogYFJHQVRyZWVTcGxpdE5vZGVgIGlzIGEgbm9kZSBvZiBSR0FUcmVlU3BsaXQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUkdBVHJlZVNwbGl0Tm9kZTxcclxuICBUIGV4dGVuZHMgUkdBVHJlZVNwbGl0VmFsdWUsXHJcbj4gZXh0ZW5kcyBTcGxheU5vZGU8VD4ge1xyXG4gIHByaXZhdGUgaWQ6IFJHQVRyZWVTcGxpdE5vZGVJRDtcclxuICBwcml2YXRlIHJlbW92ZWRBdD86IFRpbWVUaWNrZXQ7XHJcblxyXG4gIHByaXZhdGUgcHJldj86IFJHQVRyZWVTcGxpdE5vZGU8VD47XHJcbiAgcHJpdmF0ZSBuZXh0PzogUkdBVHJlZVNwbGl0Tm9kZTxUPjtcclxuICBwcml2YXRlIGluc1ByZXY/OiBSR0FUcmVlU3BsaXROb2RlPFQ+O1xyXG4gIHByaXZhdGUgaW5zTmV4dD86IFJHQVRyZWVTcGxpdE5vZGU8VD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkOiBSR0FUcmVlU3BsaXROb2RlSUQsIHZhbHVlPzogVCwgcmVtb3ZlZEF0PzogVGltZVRpY2tldCkge1xyXG4gICAgc3VwZXIodmFsdWUhKTtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMucmVtb3ZlZEF0ID0gcmVtb3ZlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIGluc3RhbmNlIG9mIFJHQVRyZWVTcGxpdE5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGU8VCBleHRlbmRzIFJHQVRyZWVTcGxpdFZhbHVlPihcclxuICAgIGlkOiBSR0FUcmVlU3BsaXROb2RlSUQsXHJcbiAgICB2YWx1ZT86IFQsXHJcbiAgKTogUkdBVHJlZVNwbGl0Tm9kZTxUPiB7XHJcbiAgICByZXR1cm4gbmV3IFJHQVRyZWVTcGxpdE5vZGUoaWQsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVDb21wYXJhdG9yYCBjcmVhdGVzIGEgZnVuY3Rpb24gdG8gY29tcGFyZSB0d28gUkdBVHJlZVNwbGl0Tm9kZUlELlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlQ29tcGFyYXRvcigpOiBDb21wYXJhdG9yPFJHQVRyZWVTcGxpdE5vZGVJRD4ge1xyXG4gICAgcmV0dXJuIChwMTogUkdBVHJlZVNwbGl0Tm9kZUlELCBwMjogUkdBVHJlZVNwbGl0Tm9kZUlEKTogbnVtYmVyID0+IHtcclxuICAgICAgY29uc3QgY29tcGFyZSA9IHAxLmdldENyZWF0ZWRBdCgpLmNvbXBhcmUocDIuZ2V0Q3JlYXRlZEF0KCkpO1xyXG4gICAgICBpZiAoY29tcGFyZSAhPT0gMCkge1xyXG4gICAgICAgIHJldHVybiBjb21wYXJlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocDEuZ2V0T2Zmc2V0KCkgPiBwMi5nZXRPZmZzZXQoKSkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9IGVsc2UgaWYgKHAxLmdldE9mZnNldCgpIDwgcDIuZ2V0T2Zmc2V0KCkpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldElEYCByZXR1cm5zIHRoZSBJRCBvZiB0aGlzIFJHQVRyZWVTcGxpdE5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldElEKCk6IFJHQVRyZWVTcGxpdE5vZGVJRCB7XHJcbiAgICByZXR1cm4gdGhpcy5pZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRDcmVhdGVkQXRgIHJldHVybnMgY3JlYXRpb24gdGltZSBvZiB0aGUgSWQgb2YgUkdBVHJlZVNwbGl0Tm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q3JlYXRlZEF0KCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuaWQuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0TGVuZ3RoYCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhpcyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIGlmICh0aGlzLnJlbW92ZWRBdCkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmdldENvbnRlbnRMZW5ndGgoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRDb250ZW50TGVuZ3RoYCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhpcyB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29udGVudExlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUubGVuZ3RoKSB8fCAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFByZXZgIHJldHVybnMgYSBwcmV2aW91cyBub2RlIG9mIHRoaXMgbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJldigpOiBSR0FUcmVlU3BsaXROb2RlPFQ+IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLnByZXY7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0TmV4dGAgcmV0dXJucyBhIG5leHQgbm9kZSBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldE5leHQoKTogUkdBVHJlZVNwbGl0Tm9kZTxUPiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5uZXh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEluc1ByZXZgIHJldHVybnMgYSBwcmV2aW91cyBub2RlIG9mIHRoaXMgbm9kZSBpbnNlcnRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGdldEluc1ByZXYoKTogUkdBVHJlZVNwbGl0Tm9kZTxUPiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnNQcmV2O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEluc05leHRgIHJldHVybnMgYSBuZXh0IG5vZGUgb2YgdGhpcyBub2RlIGluc2VydGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SW5zTmV4dCgpOiBSR0FUcmVlU3BsaXROb2RlPFQ+IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmluc05leHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0SW5zUHJldklEYCByZXR1cm5zIGEgSUQgb2YgcHJldmlvdXMgbm9kZSBpbnNlcnRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGdldEluc1ByZXZJRCgpOiBSR0FUcmVlU3BsaXROb2RlSUQge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5zUHJldiEuZ2V0SUQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRQcmV2YCBzZXRzIHByZXZpb3VzIG5vZGUgb2YgdGhpcyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQcmV2KG5vZGU/OiBSR0FUcmVlU3BsaXROb2RlPFQ+KTogdm9pZCB7XHJcbiAgICB0aGlzLnByZXYgPSBub2RlO1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgbm9kZS5uZXh0ID0gdGhpcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXROZXh0YCBzZXRzIG5leHQgbm9kZSBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIHNldE5leHQobm9kZT86IFJHQVRyZWVTcGxpdE5vZGU8VD4pOiB2b2lkIHtcclxuICAgIHRoaXMubmV4dCA9IG5vZGU7XHJcbiAgICBpZiAobm9kZSkge1xyXG4gICAgICBub2RlLnByZXYgPSB0aGlzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldEluc1ByZXZgIHNldHMgcHJldmlvdXMgbm9kZSBvZiB0aGlzIG5vZGUgaW5zZXJ0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRJbnNQcmV2KG5vZGU/OiBSR0FUcmVlU3BsaXROb2RlPFQ+KTogdm9pZCB7XHJcbiAgICB0aGlzLmluc1ByZXYgPSBub2RlO1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgbm9kZS5pbnNOZXh0ID0gdGhpcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRJbnNOZXh0YCBzZXRzIG5leHQgbm9kZSBvZiB0aGlzIG5vZGUgaW5zZXJ0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRJbnNOZXh0KG5vZGU/OiBSR0FUcmVlU3BsaXROb2RlPFQ+KTogdm9pZCB7XHJcbiAgICB0aGlzLmluc05leHQgPSBub2RlO1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgbm9kZS5pbnNQcmV2ID0gdGhpcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBoYXNOZXh0YCBjaGVja3MgaWYgbmV4dCBub2RlIGV4aXN0cy5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzTmV4dCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMubmV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBoYXNJbnNQcmV2YCBjaGVja3MgaWYgcHJldmlvdXMgaW5zZXJ0aW9uIG5vZGUgZXhpc3RzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYXNJbnNQcmV2KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICEhdGhpcy5pbnNQcmV2O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGlzUmVtb3ZlZGAgY2hlY2tzIGlmIHJlbW92ZWQgdGltZSBleGlzdHMuXHJcbiAgICovXHJcbiAgcHVibGljIGlzUmVtb3ZlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMucmVtb3ZlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFJlbW92ZWRBdGAgcmV0dXJucyB0aGUgcmVtb3ZlIHRpbWUgb2YgdGhpcyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZW1vdmVkQXQoKTogVGltZVRpY2tldCB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVkQXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc3BsaXRgIGNyZWF0ZXMgYSBuZXcgc3BsaXQgbm9kZSBvZiB0aGUgZ2l2ZW4gb2Zmc2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzcGxpdChvZmZzZXQ6IG51bWJlcik6IFJHQVRyZWVTcGxpdE5vZGU8VD4ge1xyXG4gICAgcmV0dXJuIG5ldyBSR0FUcmVlU3BsaXROb2RlKHRoaXMuaWQuc3BsaXQob2Zmc2V0KSwgdGhpcy5zcGxpdFZhbHVlKG9mZnNldCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNhbkRlbGV0ZWAgY2hlY2tzIGlmIG5vZGUgaXMgYWJsZSB0byBkZWxldGUuXHJcbiAgICovXHJcbiAgcHVibGljIGNhbkRlbGV0ZShlZGl0ZWRBdDogVGltZVRpY2tldCwgbGF0ZXN0Q3JlYXRlZEF0OiBUaW1lVGlja2V0KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAhdGhpcy5nZXRDcmVhdGVkQXQoKS5hZnRlcihsYXRlc3RDcmVhdGVkQXQpICYmXHJcbiAgICAgICghdGhpcy5yZW1vdmVkQXQgfHwgZWRpdGVkQXQuYWZ0ZXIodGhpcy5yZW1vdmVkQXQpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGByZW1vdmVgIHJlbW92ZXMgbm9kZSBvZiBnaXZlbiBlZGl0ZWQgdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlKGVkaXRlZEF0PzogVGltZVRpY2tldCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmVkQXQgPSBlZGl0ZWRBdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVSYW5nZWAgY3JlYXRlcyByYW5nZXMgb2YgUkdBVHJlZVNwbGl0Tm9kZVBvcy5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlUmFuZ2UoKTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIFJHQVRyZWVTcGxpdE5vZGVQb3Mub2YodGhpcy5pZCwgMCksXHJcbiAgICAgIFJHQVRyZWVTcGxpdE5vZGVQb3Mub2YodGhpcy5pZCwgdGhpcy5nZXRMZW5ndGgoKSksXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlZXBjb3B5YCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgUkdBVHJlZVNwbGl0Tm9kZSB3aXRob3V0IHN0cnVjdHVyYWwgaW5mby5cclxuICAgKi9cclxuICBwdWJsaWMgZGVlcGNvcHkoKTogUkdBVHJlZVNwbGl0Tm9kZTxUPiB7XHJcbiAgICByZXR1cm4gbmV3IFJHQVRyZWVTcGxpdE5vZGUodGhpcy5pZCwgdGhpcy52YWx1ZSwgdGhpcy5yZW1vdmVkQXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIFN0cmluZyBjb250YWluaW5nXHJcbiAgICogdGhlIG1ldGEgZGF0YSBvZiB0aGUgbm9kZSBmb3IgZGVidWdnaW5nIHB1cnBvc2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFubm90YXRlZFN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMuaWQuZ2V0QW5ub3RhdGVkU3RyaW5nKCl9ICR7dGhpcy52YWx1ZSA/IHRoaXMudmFsdWUgOiAnJ31gO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzcGxpdFZhbHVlKG9mZnNldDogbnVtYmVyKTogVCB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIG9mZnNldCkgYXMgVDtcclxuICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob2Zmc2V0LCB2YWx1ZS5sZW5ndGgpIGFzIFQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogYFJHQVRyZWVTcGxpdGAgaXMgYSBibG9jay1iYXNlZCBsaXN0IHdpdGggaW1wcm92ZWQgaW5kZXgtYmFzZWQgbG9va3VwIGluIFJHQS5cclxuICogVGhlIGRpZmZlcmVuY2UgZnJvbSBSR0FUcmVlTGlzdCBpcyB0aGF0IGl0IGhhcyBkYXRhIG9uIGEgYmxvY2sgYmFzaXMgdG9cclxuICogcmVkdWNlIHRoZSBzaXplIG9mIENSRFQgbWV0YWRhdGEuIFdoZW4gYW4gZWRpdCBvY2N1cnMgb24gYSBibG9jayxcclxuICogdGhlIGJsb2NrIGlzIHNwbGl0LlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSR0FUcmVlU3BsaXQ8VCBleHRlbmRzIFJHQVRyZWVTcGxpdFZhbHVlPiB7XHJcbiAgcHJpdmF0ZSBoZWFkOiBSR0FUcmVlU3BsaXROb2RlPFQ+O1xyXG4gIHByaXZhdGUgdHJlZUJ5SW5kZXg6IFNwbGF5VHJlZTxUPjtcclxuICBwcml2YXRlIHRyZWVCeUlEOiBMTFJCVHJlZTxSR0FUcmVlU3BsaXROb2RlSUQsIFJHQVRyZWVTcGxpdE5vZGU8VD4+O1xyXG4gIHByaXZhdGUgcmVtb3ZlZE5vZGVNYXA6IE1hcDxzdHJpbmcsIFJHQVRyZWVTcGxpdE5vZGU8VD4+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaGVhZCA9IFJHQVRyZWVTcGxpdE5vZGUuY3JlYXRlKEluaXRpYWxSR0FUcmVlU3BsaXROb2RlSUQpO1xyXG4gICAgdGhpcy50cmVlQnlJbmRleCA9IG5ldyBTcGxheVRyZWUoKTtcclxuICAgIHRoaXMudHJlZUJ5SUQgPSBuZXcgTExSQlRyZWUoUkdBVHJlZVNwbGl0Tm9kZS5jcmVhdGVDb21wYXJhdG9yKCkpO1xyXG4gICAgdGhpcy5yZW1vdmVkTm9kZU1hcCA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICB0aGlzLnRyZWVCeUluZGV4Lmluc2VydCh0aGlzLmhlYWQpO1xyXG4gICAgdGhpcy50cmVlQnlJRC5wdXQodGhpcy5oZWFkLmdldElEKCksIHRoaXMuaGVhZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgaW5zdGFuY2UgUkdBVHJlZVNwbGl0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlPFQgZXh0ZW5kcyBSR0FUcmVlU3BsaXRWYWx1ZT4oKTogUkdBVHJlZVNwbGl0PFQ+IHtcclxuICAgIHJldHVybiBuZXcgUkdBVHJlZVNwbGl0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZWRpdGAgZG9lcyBmb2xsb3dpbmcgc3RlcHNcclxuICAgKiAxLiBzcGxpdCBub2RlcyB3aXRoIGZyb20gYW5kIHRvXHJcbiAgICogMi4gZGVsZXRlIGJldHdlZW4gZnJvbSBhbmQgdG9cclxuICAgKiAzLiBpbnNlcnQgYSBuZXcgbm9kZVxyXG4gICAqIDQuIGFkZCByZW1vdmVkIG5vZGVcclxuICAgKiBAcGFyYW0gcmFuZ2UgLSByYW5nZSBvZiBSR0FUcmVlU3BsaXROb2RlXHJcbiAgICogQHBhcmFtIGVkaXRlZEF0IC0gZWRpdGVkIHRpbWVcclxuICAgKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZVxyXG4gICAqIEBwYXJhbSBsYXRlc3RDcmVhdGVkQXRNYXBCeUFjdG9yIC0gbGF0ZXN0Q3JlYXRlZEF0TWFwQnlBY3RvclxyXG4gICAqIEByZXR1cm5zIGBbUkdBVHJlZVNwbGl0Tm9kZVBvcywgTWFwPHN0cmluZywgVGltZVRpY2tldD4sIEFycmF5PENoYW5nZT5dYFxyXG4gICAqL1xyXG4gIHB1YmxpYyBlZGl0KFxyXG4gICAgcmFuZ2U6IFJHQVRyZWVTcGxpdE5vZGVSYW5nZSxcclxuICAgIGVkaXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgdmFsdWU/OiBULFxyXG4gICAgbGF0ZXN0Q3JlYXRlZEF0TWFwQnlBY3Rvcj86IE1hcDxzdHJpbmcsIFRpbWVUaWNrZXQ+LFxyXG4gICk6IFtSR0FUcmVlU3BsaXROb2RlUG9zLCBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PiwgQXJyYXk8VGV4dENoYW5nZT5dIHtcclxuICAgIC8vIDAxLiBzcGxpdCBub2RlcyB3aXRoIGZyb20gYW5kIHRvXHJcbiAgICBjb25zdCBbdG9MZWZ0LCB0b1JpZ2h0XSA9IHRoaXMuZmluZE5vZGVXaXRoU3BsaXQocmFuZ2VbMV0sIGVkaXRlZEF0KTtcclxuICAgIGNvbnN0IFtmcm9tTGVmdCwgZnJvbVJpZ2h0XSA9IHRoaXMuZmluZE5vZGVXaXRoU3BsaXQocmFuZ2VbMF0sIGVkaXRlZEF0KTtcclxuXHJcbiAgICAvLyAwMi4gZGVsZXRlIGJldHdlZW4gZnJvbSBhbmQgdG9cclxuICAgIGNvbnN0IG5vZGVzVG9EZWxldGUgPSB0aGlzLmZpbmRCZXR3ZWVuKGZyb21SaWdodCwgdG9SaWdodCk7XHJcbiAgICBjb25zdCBbY2hhbmdlcywgbGF0ZXN0Q3JlYXRlZEF0TWFwLCByZW1vdmVkTm9kZU1hcEJ5Tm9kZUtleV0gPVxyXG4gICAgICB0aGlzLmRlbGV0ZU5vZGVzKG5vZGVzVG9EZWxldGUsIGVkaXRlZEF0LCBsYXRlc3RDcmVhdGVkQXRNYXBCeUFjdG9yKTtcclxuXHJcbiAgICBjb25zdCBjYXJldElEID0gdG9SaWdodCA/IHRvUmlnaHQuZ2V0SUQoKSA6IHRvTGVmdC5nZXRJRCgpO1xyXG4gICAgbGV0IGNhcmV0UG9zID0gUkdBVHJlZVNwbGl0Tm9kZVBvcy5vZihjYXJldElELCAwKTtcclxuXHJcbiAgICAvLyAwMy4gaW5zZXJ0IGEgbmV3IG5vZGVcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBjb25zdCBpZHggPSB0aGlzLmZpbmRJZHhGcm9tTm9kZVBvcyhmcm9tTGVmdC5jcmVhdGVSYW5nZSgpWzFdLCB0cnVlKTtcclxuXHJcbiAgICAgIGNvbnN0IGluc2VydGVkID0gdGhpcy5pbnNlcnRBZnRlcihcclxuICAgICAgICBmcm9tTGVmdCxcclxuICAgICAgICBSR0FUcmVlU3BsaXROb2RlLmNyZWF0ZShSR0FUcmVlU3BsaXROb2RlSUQub2YoZWRpdGVkQXQsIDApLCB2YWx1ZSksXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFRleHRDaGFuZ2VUeXBlLkNvbnRlbnQsXHJcbiAgICAgICAgYWN0b3I6IGVkaXRlZEF0LmdldEFjdG9ySUQoKSEsXHJcbiAgICAgICAgZnJvbTogaWR4LFxyXG4gICAgICAgIHRvOiBpZHgsXHJcbiAgICAgICAgY29udGVudDogdmFsdWUudG9TdHJpbmcoKSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjYXJldFBvcyA9IFJHQVRyZWVTcGxpdE5vZGVQb3Mub2YoXHJcbiAgICAgICAgaW5zZXJ0ZWQuZ2V0SUQoKSxcclxuICAgICAgICBpbnNlcnRlZC5nZXRDb250ZW50TGVuZ3RoKCksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMDQuIGFkZCByZW1vdmVkIG5vZGVcclxuICAgIGZvciAoY29uc3QgW2tleSwgcmVtb3ZlZE5vZGVdIG9mIHJlbW92ZWROb2RlTWFwQnlOb2RlS2V5KSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlZE5vZGVNYXAuc2V0KGtleSwgcmVtb3ZlZE5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbY2FyZXRQb3MsIGxhdGVzdENyZWF0ZWRBdE1hcCwgY2hhbmdlc107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZmluZE5vZGVQb3NgIGZpbmRzIFJHQVRyZWVTcGxpdE5vZGVQb3Mgb2YgZ2l2ZW4gb2Zmc2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaW5kTm9kZVBvcyhpZHg6IG51bWJlcik6IFJHQVRyZWVTcGxpdE5vZGVQb3Mge1xyXG4gICAgY29uc3QgW25vZGUsIG9mZnNldF0gPSB0aGlzLnRyZWVCeUluZGV4LmZpbmQoaWR4KTtcclxuICAgIGNvbnN0IHNwbGl0Tm9kZSA9IG5vZGUgYXMgUkdBVHJlZVNwbGl0Tm9kZTxUPjtcclxuICAgIHJldHVybiBSR0FUcmVlU3BsaXROb2RlUG9zLm9mKHNwbGl0Tm9kZS5nZXRJRCgpLCBvZmZzZXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGZpbmRJbmRleGVzRnJvbVJhbmdlYCBmaW5kcyBpbmRleGVzIGJhc2VkIG9uIHJhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaW5kSW5kZXhlc0Zyb21SYW5nZShyYW5nZTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlKTogW251bWJlciwgbnVtYmVyXSB7XHJcbiAgICBjb25zdCBbZnJvbVBvcywgdG9Qb3NdID0gcmFuZ2U7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB0aGlzLmZpbmRJZHhGcm9tTm9kZVBvcyhmcm9tUG9zLCBmYWxzZSksXHJcbiAgICAgIHRoaXMuZmluZElkeEZyb21Ob2RlUG9zKHRvUG9zLCB0cnVlKSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZmluZElkeEZyb21Ob2RlUG9zYCBmaW5kcyBpbmRleCBiYXNlZCBvbiBub2RlIHBvc2l0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaW5kSWR4RnJvbU5vZGVQb3MoXHJcbiAgICBwb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICBwcmVmZXJUb0xlZnQ6IGJvb2xlYW4sXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGFic29sdXRlSUQgPSBwb3MuZ2V0QWJzb2x1dGVJRCgpO1xyXG4gICAgY29uc3Qgbm9kZSA9IHByZWZlclRvTGVmdFxyXG4gICAgICA/IHRoaXMuZmluZEZsb29yTm9kZVByZWZlclRvTGVmdChhYnNvbHV0ZUlEKVxyXG4gICAgICA6IHRoaXMuZmluZEZsb29yTm9kZShhYnNvbHV0ZUlEKTtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoXHJcbiAgICAgICAgYHRoZSBub2RlIG9mIHRoZSBnaXZlbiBpZCBzaG91bGQgYmUgZm91bmQ6ICR7YWJzb2x1dGVJRC5nZXRBbm5vdGF0ZWRTdHJpbmcoKX1gLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnRyZWVCeUluZGV4LmluZGV4T2Yobm9kZSEpO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gbm9kZSEuaXNSZW1vdmVkKClcclxuICAgICAgPyAwXHJcbiAgICAgIDogYWJzb2x1dGVJRC5nZXRPZmZzZXQoKSAtIG5vZGUhLmdldElEKCkuZ2V0T2Zmc2V0KCk7XHJcbiAgICByZXR1cm4gaW5kZXggKyBvZmZzZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZmluZE5vZGVgIGZpbmRzIG5vZGUgb2YgZ2l2ZW4gaWQuXHJcbiAgICovXHJcbiAgcHVibGljIGZpbmROb2RlKGlkOiBSR0FUcmVlU3BsaXROb2RlSUQpOiBSR0FUcmVlU3BsaXROb2RlPFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmZpbmRGbG9vck5vZGUoaWQpITtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB0b0pTT05gIHJldHVybnMgdGhlIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyBBcnJheS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9KU09OKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBqc29uID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpIHtcclxuICAgICAgaWYgKCFub2RlLmlzUmVtb3ZlZCgpKSB7XHJcbiAgICAgICAganNvbi5wdXNoKG5vZGUuZ2V0VmFsdWUoKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ganNvbi5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXHJcbiAgcHVibGljICpbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFJHQVRyZWVTcGxpdE5vZGU8VD4+IHtcclxuICAgIGxldCBub2RlID0gdGhpcy5oZWFkLmdldE5leHQoKTtcclxuICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgIHlpZWxkIG5vZGU7XHJcbiAgICAgIG5vZGUgPSBub2RlLmdldE5leHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRIZWFkYCByZXR1cm5zIGhlYWQgb2YgUkdBVHJlZVNwbGl0Tm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SGVhZCgpOiBSR0FUcmVlU3BsaXROb2RlPFQ+IHtcclxuICAgIHJldHVybiB0aGlzLmhlYWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVlcGNvcHlgIGNvcGllcyBpdHNlbGYgZGVlcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWVwY29weSgpOiBSR0FUcmVlU3BsaXQ8VD4ge1xyXG4gICAgY29uc3QgY2xvbmUgPSBuZXcgUkdBVHJlZVNwbGl0PFQ+KCk7XHJcblxyXG4gICAgbGV0IG5vZGUgPSB0aGlzLmhlYWQuZ2V0TmV4dCgpO1xyXG5cclxuICAgIGxldCBwcmV2ID0gY2xvbmUuaGVhZDtcclxuICAgIGxldCBjdXJyZW50O1xyXG4gICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgY3VycmVudCA9IGNsb25lLmluc2VydEFmdGVyKHByZXYsIG5vZGUuZGVlcGNvcHkoKSk7XHJcbiAgICAgIGlmIChub2RlLmhhc0luc1ByZXYoKSkge1xyXG4gICAgICAgIGNvbnN0IGluc1ByZXZOb2RlID0gY2xvbmUuZmluZE5vZGUobm9kZS5nZXRJbnNQcmV2SUQoKSk7XHJcbiAgICAgICAgY3VycmVudC5zZXRJbnNQcmV2KGluc1ByZXZOb2RlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJldiA9IGN1cnJlbnQ7XHJcbiAgICAgIG5vZGUgPSBub2RlLmdldE5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2xvbmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgU3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YSBvZiB0aGUgbm9kZVxyXG4gICAqIGZvciBkZWJ1Z2dpbmcgcHVycG9zZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBsZXQgbm9kZTogUkdBVHJlZVNwbGl0Tm9kZTxUPiB8IHVuZGVmaW5lZCA9IHRoaXMuaGVhZDtcclxuICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgIGlmIChub2RlLmlzUmVtb3ZlZCgpKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goYHske25vZGUuZ2V0QW5ub3RhdGVkU3RyaW5nKCl9fWApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKGBbJHtub2RlLmdldEFubm90YXRlZFN0cmluZygpfV1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbm9kZSA9IG5vZGUuZ2V0TmV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW5zZXJ0QWZ0ZXJgIGluc2VydHMgdGhlIGdpdmVuIG5vZGUgYWZ0ZXIgdGhlIGdpdmVuIHByZXZpb3VzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGluc2VydEFmdGVyKFxyXG4gICAgcHJldk5vZGU6IFJHQVRyZWVTcGxpdE5vZGU8VD4sXHJcbiAgICBuZXdOb2RlOiBSR0FUcmVlU3BsaXROb2RlPFQ+LFxyXG4gICk6IFJHQVRyZWVTcGxpdE5vZGU8VD4ge1xyXG4gICAgY29uc3QgbmV4dCA9IHByZXZOb2RlLmdldE5leHQoKTtcclxuICAgIG5ld05vZGUuc2V0UHJldihwcmV2Tm9kZSk7XHJcbiAgICBpZiAobmV4dCkge1xyXG4gICAgICBuZXh0LnNldFByZXYobmV3Tm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50cmVlQnlJRC5wdXQobmV3Tm9kZS5nZXRJRCgpLCBuZXdOb2RlKTtcclxuICAgIHRoaXMudHJlZUJ5SW5kZXguaW5zZXJ0QWZ0ZXIocHJldk5vZGUsIG5ld05vZGUpO1xyXG5cclxuICAgIHJldHVybiBuZXdOb2RlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGZpbmROb2RlV2l0aFNwbGl0YCBzcGxpdHMgYW5kIHJldHVybiBub2RlcyBvZiB0aGUgZ2l2ZW4gcG9zaXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGZpbmROb2RlV2l0aFNwbGl0KFxyXG4gICAgcG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgZWRpdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogW1JHQVRyZWVTcGxpdE5vZGU8VD4sIFJHQVRyZWVTcGxpdE5vZGU8VD5dIHtcclxuICAgIGNvbnN0IGFic29sdXRlSUQgPSBwb3MuZ2V0QWJzb2x1dGVJRCgpO1xyXG4gICAgbGV0IG5vZGUgPSB0aGlzLmZpbmRGbG9vck5vZGVQcmVmZXJUb0xlZnQoYWJzb2x1dGVJRCk7XHJcbiAgICBjb25zdCByZWxhdGl2ZU9mZnNldCA9IGFic29sdXRlSUQuZ2V0T2Zmc2V0KCkgLSBub2RlLmdldElEKCkuZ2V0T2Zmc2V0KCk7XHJcblxyXG4gICAgdGhpcy5zcGxpdE5vZGUobm9kZSwgcmVsYXRpdmVPZmZzZXQpO1xyXG5cclxuICAgIHdoaWxlIChub2RlLmhhc05leHQoKSAmJiBub2RlLmdldE5leHQoKSEuZ2V0Q3JlYXRlZEF0KCkuYWZ0ZXIoZWRpdGVkQXQpKSB7XHJcbiAgICAgIG5vZGUgPSBub2RlLmdldE5leHQoKSE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtub2RlLCBub2RlLmdldE5leHQoKSFdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmaW5kRmxvb3JOb2RlUHJlZmVyVG9MZWZ0KFxyXG4gICAgaWQ6IFJHQVRyZWVTcGxpdE5vZGVJRCxcclxuICApOiBSR0FUcmVlU3BsaXROb2RlPFQ+IHtcclxuICAgIGxldCBub2RlID0gdGhpcy5maW5kRmxvb3JOb2RlKGlkKTtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoXHJcbiAgICAgICAgYHRoZSBub2RlIG9mIHRoZSBnaXZlbiBpZCBzaG91bGQgYmUgZm91bmQ6ICR7aWQuZ2V0QW5ub3RhdGVkU3RyaW5nKCl9YCxcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaWQuZ2V0T2Zmc2V0KCkgPiAwICYmIG5vZGUhLmdldElEKCkuZ2V0T2Zmc2V0KCkgPT0gaWQuZ2V0T2Zmc2V0KCkpIHtcclxuICAgICAgLy8gTk9URTogSW5zUHJldiBtYXkgbm90IGJlIHByZXNlbnQgZHVlIHRvIEdDLlxyXG4gICAgICBpZiAoIW5vZGUhLmhhc0luc1ByZXYoKSkge1xyXG4gICAgICAgIHJldHVybiBub2RlITtcclxuICAgICAgfVxyXG4gICAgICBub2RlID0gbm9kZSEuZ2V0SW5zUHJldigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBub2RlITtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZmluZEZsb29yTm9kZShcclxuICAgIGlkOiBSR0FUcmVlU3BsaXROb2RlSUQsXHJcbiAgKTogUkdBVHJlZVNwbGl0Tm9kZTxUPiB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMudHJlZUJ5SUQuZmxvb3JFbnRyeShpZCk7XHJcbiAgICBpZiAoIWVudHJ5KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVudHJ5LmtleS5lcXVhbHMoaWQpICYmICFlbnRyeS5rZXkuaGFzU2FtZUNyZWF0ZWRBdChpZCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbnRyeS52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBmaW5kQmV0d2VlbmAgcmV0dXJucyBub2RlcyBiZXR3ZWVuIGZyb21Ob2RlIGFuZCB0b05vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGZpbmRCZXR3ZWVuKFxyXG4gICAgZnJvbU5vZGU6IFJHQVRyZWVTcGxpdE5vZGU8VD4sXHJcbiAgICB0b05vZGU6IFJHQVRyZWVTcGxpdE5vZGU8VD4sXHJcbiAgKTogQXJyYXk8UkdBVHJlZVNwbGl0Tm9kZTxUPj4ge1xyXG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcclxuXHJcbiAgICBsZXQgY3VycmVudDogUkdBVHJlZVNwbGl0Tm9kZTxUPiB8IHVuZGVmaW5lZCA9IGZyb21Ob2RlO1xyXG4gICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudCAhPT0gdG9Ob2RlKSB7XHJcbiAgICAgIG5vZGVzLnB1c2goY3VycmVudCk7XHJcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmdldE5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNwbGl0Tm9kZShcclxuICAgIG5vZGU6IFJHQVRyZWVTcGxpdE5vZGU8VD4sXHJcbiAgICBvZmZzZXQ6IG51bWJlcixcclxuICApOiBSR0FUcmVlU3BsaXROb2RlPFQ+IHwgdW5kZWZpbmVkIHtcclxuICAgIGlmIChvZmZzZXQgPiBub2RlLmdldENvbnRlbnRMZW5ndGgoKSkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ29mZnNldCBzaG91bGQgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGxlbmd0aCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcclxuICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9IGVsc2UgaWYgKG9mZnNldCA9PT0gbm9kZS5nZXRDb250ZW50TGVuZ3RoKCkpIHtcclxuICAgICAgcmV0dXJuIG5vZGUuZ2V0TmV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNwbGl0Tm9kZSA9IG5vZGUuc3BsaXQob2Zmc2V0KTtcclxuICAgIHRoaXMudHJlZUJ5SW5kZXgudXBkYXRlU3VidHJlZShzcGxpdE5vZGUpO1xyXG4gICAgdGhpcy5pbnNlcnRBZnRlcihub2RlLCBzcGxpdE5vZGUpO1xyXG5cclxuICAgIGNvbnN0IGluc05leHQgPSBub2RlLmdldEluc05leHQoKTtcclxuICAgIGlmIChpbnNOZXh0KSB7XHJcbiAgICAgIGluc05leHQuc2V0SW5zUHJldihzcGxpdE5vZGUpO1xyXG4gICAgfVxyXG4gICAgc3BsaXROb2RlLnNldEluc1ByZXYobm9kZSk7XHJcblxyXG4gICAgcmV0dXJuIHNwbGl0Tm9kZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVsZXRlTm9kZXMoXHJcbiAgICBjYW5kaWRhdGVzOiBBcnJheTxSR0FUcmVlU3BsaXROb2RlPFQ+PixcclxuICAgIGVkaXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgbGF0ZXN0Q3JlYXRlZEF0TWFwQnlBY3Rvcj86IE1hcDxzdHJpbmcsIFRpbWVUaWNrZXQ+LFxyXG4gICk6IFtcclxuICAgIEFycmF5PFRleHRDaGFuZ2U+LFxyXG4gICAgTWFwPHN0cmluZywgVGltZVRpY2tldD4sXHJcbiAgICBNYXA8c3RyaW5nLCBSR0FUcmVlU3BsaXROb2RlPFQ+PixcclxuICBdIHtcclxuICAgIGNvbnN0IGlzUmVtb3RlID0gISFsYXRlc3RDcmVhdGVkQXRNYXBCeUFjdG9yO1xyXG4gICAgY29uc3QgY2hhbmdlczogQXJyYXk8VGV4dENoYW5nZT4gPSBbXTtcclxuICAgIGNvbnN0IGNyZWF0ZWRBdE1hcEJ5QWN0b3IgPSBuZXcgTWFwKCk7XHJcbiAgICBjb25zdCByZW1vdmVkTm9kZU1hcCA9IG5ldyBNYXAoKTtcclxuICAgIGNvbnN0IG5vZGVzVG9EZWxldGU6IEFycmF5PFJHQVRyZWVTcGxpdE5vZGU8VD4+ID0gW107XHJcblxyXG4gICAgLy8gTk9URTogV2UgbmVlZCB0byBjb2xsZWN0IGluZGV4ZXMgZm9yIGNoYW5nZSBmaXJzdCB0aGVuIGRlbGV0ZSB0aGUgbm9kZXMuXHJcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgY2FuZGlkYXRlcykge1xyXG4gICAgICBjb25zdCBhY3RvcklEID0gbm9kZS5nZXRDcmVhdGVkQXQoKS5nZXRBY3RvcklEKCk7XHJcblxyXG4gICAgICBjb25zdCBsYXRlc3RDcmVhdGVkQXQgPSBpc1JlbW90ZVxyXG4gICAgICAgID8gbGF0ZXN0Q3JlYXRlZEF0TWFwQnlBY3RvciEuaGFzKGFjdG9ySUQhKVxyXG4gICAgICAgICAgPyBsYXRlc3RDcmVhdGVkQXRNYXBCeUFjdG9yIS5nZXQoYWN0b3JJRCEpXHJcbiAgICAgICAgICA6IEluaXRpYWxUaW1lVGlja2V0XHJcbiAgICAgICAgOiBNYXhUaW1lVGlja2V0O1xyXG5cclxuICAgICAgLy8gRGVsZXRlIG5vZGVzIGNyZWF0ZWQgYmVmb3JlIHRoZSBsYXRlc3QgdGltZSByZW1haW5pbmcgaW4gdGhlIHJlcGxpY2EgdGhhdCBwZXJmb3JtZWQgdGhlIGRlbGV0aW9uLlxyXG4gICAgICBpZiAobm9kZS5jYW5EZWxldGUoZWRpdGVkQXQsIGxhdGVzdENyZWF0ZWRBdCEpKSB7XHJcbiAgICAgICAgbm9kZXNUb0RlbGV0ZS5wdXNoKG5vZGUpO1xyXG5cclxuICAgICAgICBpZiAoIW5vZGUuaXNSZW1vdmVkKCkpIHtcclxuICAgICAgICAgIGNvbnN0IFtmcm9tSWR4LCB0b0lkeF0gPSB0aGlzLmZpbmRJbmRleGVzRnJvbVJhbmdlKFxyXG4gICAgICAgICAgICBub2RlLmNyZWF0ZVJhbmdlKCksXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY29uc3QgY2hhbmdlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBUZXh0Q2hhbmdlVHlwZS5Db250ZW50LFxyXG4gICAgICAgICAgICBhY3RvcjogZWRpdGVkQXQuZ2V0QWN0b3JJRCgpISxcclxuICAgICAgICAgICAgZnJvbTogZnJvbUlkeCxcclxuICAgICAgICAgICAgdG86IHRvSWR4LFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAvLyBSZWR1Y2UgYWRqYWNlbnQgZGVsZXRpb25zOiBpLmcpIFsoMSwgMiksICgyLCAzKV0gPT4gWygxLCAzKV1cclxuICAgICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCAmJiBjaGFuZ2VzWzBdLnRvID09PSBjaGFuZ2UuZnJvbSkge1xyXG4gICAgICAgICAgICBjaGFuZ2VzWzBdLnRvID0gY2hhbmdlLnRvO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hhbmdlcy51bnNoaWZ0KGNoYW5nZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhY3JlYXRlZEF0TWFwQnlBY3Rvci5oYXMoYWN0b3JJRCkgfHxcclxuICAgICAgICAgIG5vZGUuZ2V0SUQoKS5nZXRDcmVhdGVkQXQoKS5hZnRlcihjcmVhdGVkQXRNYXBCeUFjdG9yLmdldChhY3RvcklEKSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNyZWF0ZWRBdE1hcEJ5QWN0b3Iuc2V0KGFjdG9ySUQsIG5vZGUuZ2V0SUQoKS5nZXRDcmVhdGVkQXQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbW92ZWROb2RlTWFwLnNldChub2RlLmdldElEKCkuZ2V0QW5ub3RhdGVkU3RyaW5nKCksIG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzVG9EZWxldGUpIHtcclxuICAgICAgbm9kZS5yZW1vdmUoZWRpdGVkQXQpO1xyXG4gICAgICB0aGlzLnRyZWVCeUluZGV4LnNwbGF5Tm9kZShub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW2NoYW5nZXMsIGNyZWF0ZWRBdE1hcEJ5QWN0b3IsIHJlbW92ZWROb2RlTWFwXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRSZW1vdmVkTm9kZXNMZW5gIHJldHVybnMgc2l6ZSBvZiByZW1vdmVkIG5vZGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZW1vdmVkTm9kZXNMZW4oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJlbW92ZWROb2RlTWFwLnNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcHVyZ2VUZXh0Tm9kZXNXaXRoR2FyYmFnZWAgcGh5c2ljYWxseSBwdXJnZXMgbm9kZXMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZC5cclxuICAgKi9cclxuICBwdWJsaWMgcHVyZ2VUZXh0Tm9kZXNXaXRoR2FyYmFnZSh0aWNrZXQ6IFRpbWVUaWNrZXQpOiBudW1iZXIge1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuICAgIGZvciAoY29uc3QgWywgbm9kZV0gb2YgdGhpcy5yZW1vdmVkTm9kZU1hcCkge1xyXG4gICAgICBpZiAobm9kZS5nZXRSZW1vdmVkQXQoKSAmJiB0aWNrZXQuY29tcGFyZShub2RlLmdldFJlbW92ZWRBdCgpISkgPj0gMCkge1xyXG4gICAgICAgIHRoaXMudHJlZUJ5SW5kZXguZGVsZXRlKG5vZGUpO1xyXG4gICAgICAgIHRoaXMucHVyZ2Uobm9kZSk7XHJcbiAgICAgICAgdGhpcy50cmVlQnlJRC5yZW1vdmUobm9kZS5nZXRJRCgpKTtcclxuICAgICAgICB0aGlzLnJlbW92ZWROb2RlTWFwLmRlbGV0ZShub2RlLmdldElEKCkuZ2V0QW5ub3RhdGVkU3RyaW5nKCkpO1xyXG4gICAgICAgIGNvdW50Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY291bnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcHVyZ2VgIHBoeXNpY2FsbHkgcHVyZ2VzIHRoZSBnaXZlbiBub2RlIGZyb20gUkdBVHJlZVNwbGl0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJnZShub2RlOiBSR0FUcmVlU3BsaXROb2RlPFQ+KTogdm9pZCB7XHJcbiAgICBjb25zdCBwcmV2ID0gbm9kZS5nZXRQcmV2KCk7XHJcbiAgICBjb25zdCBuZXh0ID0gbm9kZS5nZXROZXh0KCk7XHJcbiAgICBjb25zdCBpbnNQcmV2ID0gbm9kZS5nZXRJbnNQcmV2KCk7XHJcbiAgICBjb25zdCBpbnNOZXh0ID0gbm9kZS5nZXRJbnNOZXh0KCk7XHJcblxyXG4gICAgaWYgKHByZXYpIHtcclxuICAgICAgcHJldi5zZXROZXh0KG5leHQpO1xyXG4gICAgfVxyXG4gICAgaWYgKG5leHQpIHtcclxuICAgICAgbmV4dC5zZXRQcmV2KHByZXYpO1xyXG4gICAgfVxyXG5cclxuICAgIG5vZGUuc2V0UHJldih1bmRlZmluZWQpO1xyXG4gICAgbm9kZS5zZXROZXh0KHVuZGVmaW5lZCk7XHJcblxyXG4gICAgaWYgKGluc1ByZXYpIHtcclxuICAgICAgaW5zUHJldi5zZXRJbnNOZXh0KGluc05leHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbnNOZXh0KSB7XHJcbiAgICAgIGluc05leHQuc2V0SW5zUHJldihpbnNQcmV2KTtcclxuICAgIH1cclxuXHJcbiAgICBub2RlLnNldEluc1ByZXYodW5kZWZpbmVkKTtcclxuICAgIG5vZGUuc2V0SW5zTmV4dCh1bmRlZmluZWQpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGBTZWxlY3Rpb25gIHJlcHJlc2VudHMgdGhlIHNlbGVjdGlvbiBvZiB0ZXh0IHJhbmdlIGluIHRoZSBlZGl0b3IuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uIHtcclxuICBwcml2YXRlIGZyb206IFJHQVRyZWVTcGxpdE5vZGVQb3M7XHJcbiAgcHJpdmF0ZSB0bzogUkdBVHJlZVNwbGl0Tm9kZVBvcztcclxuICBwcml2YXRlIHVwZGF0ZWRBdDogVGltZVRpY2tldDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBmcm9tOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgdG86IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICB1cGRhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKSB7XHJcbiAgICB0aGlzLmZyb20gPSBmcm9tO1xyXG4gICAgdGhpcy50byA9IHRvO1xyXG4gICAgdGhpcy51cGRhdGVkQXQgPSB1cGRhdGVkQXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgb2ZgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgU2VsZWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgb2YoXHJcbiAgICByYW5nZTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlLFxyXG4gICAgdXBkYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IFNlbGVjdGlvbiB7XHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihyYW5nZVswXSwgcmFuZ2VbMV0sIHVwZGF0ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0VXBkYXRlZEF0YCByZXR1cm5zIHVwZGF0ZSB0aW1lIG9mIHRoaXMgc2VsZWN0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRVcGRhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy51cGRhdGVkQXQ7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcblxyXG4vKipcclxuICogYFJIVE5vZGVgIGlzIGEgbm9kZSBvZiBSSFQoUmVwbGljYXRlZCBIYXNodGFibGUpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJIVE5vZGUge1xyXG4gIHByaXZhdGUga2V5OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSB2YWx1ZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgdXBkYXRlZEF0OiBUaW1lVGlja2V0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgdXBkYXRlZEF0OiBUaW1lVGlja2V0KSB7XHJcbiAgICB0aGlzLmtleSA9IGtleTtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIHRoaXMudXBkYXRlZEF0ID0gdXBkYXRlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9mYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJIVE5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvZihrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogUkhUTm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IFJIVE5vZGUoa2V5LCB2YWx1ZSwgY3JlYXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRLZXlgIHJldHVybnMgYSBrZXkgb2Ygbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0S2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5rZXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0VmFsdWVgIHJldHVybnMgYSB2YWx1ZSBvZiBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRWYWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0VXBkYXRlZEF0IGByZXR1cm5zIHVwZGF0ZWQgdGltZSBvZiBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRVcGRhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy51cGRhdGVkQXQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUkhUIGlzIHJlcGxpY2F0ZWQgaGFzaCB0YWJsZSBieSBjcmVhdGlvbiB0aW1lLlxyXG4gKiBGb3IgbW9yZSBkZXRhaWxzIGFib3V0IFJIVDogQHNlZSBodHRwOi8vY3NsLnNra3UuZWR1L3BhcGVycy9qcGRjMTEucGRmXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUkhUIHtcclxuICBwcml2YXRlIG5vZGVNYXBCeUtleTogTWFwPHN0cmluZywgUkhUTm9kZT47XHJcbiAgcHJpdmF0ZSBub2RlTWFwQnlDcmVhdGVkQXQ6IE1hcDxzdHJpbmcsIFJIVE5vZGU+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubm9kZU1hcEJ5S2V5ID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQgPSBuZXcgTWFwKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJIVC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBSSFQge1xyXG4gICAgcmV0dXJuIG5ldyBSSFQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRgIHNldHMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZXhlY3V0ZWRBdDogVGltZVRpY2tldCk6IHZvaWQge1xyXG4gICAgY29uc3QgcHJldiA9IHRoaXMubm9kZU1hcEJ5S2V5LmdldChrZXkpO1xyXG5cclxuICAgIGlmIChwcmV2ID09PSB1bmRlZmluZWQgfHwgZXhlY3V0ZWRBdC5hZnRlcihwcmV2LmdldFVwZGF0ZWRBdCgpKSkge1xyXG4gICAgICBjb25zdCBub2RlID0gUkhUTm9kZS5vZihrZXksIHZhbHVlLCBleGVjdXRlZEF0KTtcclxuICAgICAgdGhpcy5ub2RlTWFwQnlLZXkuc2V0KGtleSwgbm9kZSk7XHJcbiAgICAgIHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LnNldChleGVjdXRlZEF0LnRvSURTdHJpbmcoKSwgbm9kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzYCByZXR1cm5zIHdoZXRoZXIgdGhlIGVsZW1lbnQgZXhpc3RzIG9mIHRoZSBnaXZlbiBrZXkgb3Igbm90LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLm5vZGVNYXBCeUtleS5oYXMoa2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRgIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAoIXRoaXMubm9kZU1hcEJ5S2V5LmhhcyhrZXkpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5ub2RlTWFwQnlLZXkuZ2V0KGtleSkhLmdldFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVlcGNvcHlgIGNvcGllcyBpdHNlbGYgZGVlcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWVwY29weSgpOiBSSFQge1xyXG4gICAgY29uc3Qgcmh0ID0gbmV3IFJIVCgpO1xyXG4gICAgZm9yIChjb25zdCBbLCBub2RlXSBvZiB0aGlzLm5vZGVNYXBCeUtleSkge1xyXG4gICAgICByaHQuc2V0KG5vZGUuZ2V0S2V5KCksIG5vZGUuZ2V0VmFsdWUoKSwgbm9kZS5nZXRVcGRhdGVkQXQoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNPTmAgcmV0dXJucyB0aGUgSlNPTiBlbmNvZGluZyBvZiB0aGlzIGhhc2h0YWJsZS5cclxuICAgKi9cclxuICBwdWJsaWMgdG9KU09OKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBba2V5LCBub2RlXSBvZiB0aGlzLm5vZGVNYXBCeUtleSkge1xyXG4gICAgICBpdGVtcy5wdXNoKGBcIiR7a2V5fVwiOlwiJHtub2RlLmdldFZhbHVlKCl9XCJgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBgeyR7aXRlbXMuam9pbignLCcpfX1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvT2JqZWN0YCByZXR1cm5zIHRoZSBvYmplY3Qgb2YgdGhpcyBoYXNodGFibGUuXHJcbiAgICovXHJcbiAgcHVibGljIHRvT2JqZWN0KCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xyXG4gICAgY29uc3Qgb2JqOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIG5vZGVdIG9mIHRoaXMubm9kZU1hcEJ5S2V5KSB7XHJcbiAgICAgIG9ialtrZXldID0gbm9kZS5nZXRWYWx1ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfVxyXG5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xyXG4gIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxSSFROb2RlPiB7XHJcbiAgICBmb3IgKGNvbnN0IFssIG5vZGVdIG9mIHRoaXMubm9kZU1hcEJ5S2V5KSB7XHJcbiAgICAgIHlpZWxkIG5vZGUgYXMgUkhUTm9kZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBIZWFwTm9kZSwgSGVhcCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL2hlYXAnO1xyXG5pbXBvcnQge1xyXG4gIFRpY2tldENvbXBhcmF0b3IsXHJcbiAgVGltZVRpY2tldCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS90aWNrZXQnO1xyXG5pbXBvcnQgeyBKU09ORWxlbWVudCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2VsZW1lbnQnO1xyXG5cclxuLyoqXHJcbiAqIGBSSFRQUU1hcE5vZGVgIGlzIGEgbm9kZSBvZiBSSFRQUU1hcC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSSFRQUU1hcE5vZGUgZXh0ZW5kcyBIZWFwTm9kZTxUaW1lVGlja2V0LCBKU09ORWxlbWVudD4ge1xyXG4gIHByaXZhdGUgc3RyS2V5OiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHN0cktleTogc3RyaW5nLCB2YWx1ZTogSlNPTkVsZW1lbnQpIHtcclxuICAgIHN1cGVyKHZhbHVlLmdldENyZWF0ZWRBdCgpLCB2YWx1ZSk7XHJcbiAgICB0aGlzLnN0cktleSA9IHN0cktleTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBvZmAgY3JlYXRlcyBhIGluc3RhbmNlIG9mIFJIVFBRTWFwTm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG9mKHN0cktleTogc3RyaW5nLCB2YWx1ZTogSlNPTkVsZW1lbnQpOiBSSFRQUU1hcE5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBSSFRQUU1hcE5vZGUoc3RyS2V5LCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaXNSZW1vdmVkYCBjaGVja3Mgd2hldGhlciB0aGlzIHZhbHVlIHdhcyByZW1vdmVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1JlbW92ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpLmlzUmVtb3ZlZCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFN0cktleWAgcmV0dXJucyB0aGUga2V5IG9mIHRoaXMgbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U3RyS2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5zdHJLZXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcmVtb3ZlYCByZW1vdmVzIGEgdmFsdWUgYmFzZSBvbiByZW1vdmluZyB0aW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZW1vdmUocmVtb3ZlZEF0OiBUaW1lVGlja2V0KTogdm9pZCB7XHJcbiAgICB0aGlzLmdldFZhbHVlKCkucmVtb3ZlKHJlbW92ZWRBdCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUkhUUFFNYXAgaXMgcmVwbGljYXRlZCBoYXNoIHRhYmxlIHdpdGggcHJpb3JpdHkgcXVldWUgYnkgY3JlYXRpb24gdGltZS5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUkhUUFFNYXAge1xyXG4gIHByaXZhdGUgZWxlbWVudFF1ZXVlTWFwQnlLZXk6IE1hcDxzdHJpbmcsIEhlYXA8VGltZVRpY2tldCwgSlNPTkVsZW1lbnQ+PjtcclxuICBwcml2YXRlIG5vZGVNYXBCeUNyZWF0ZWRBdDogTWFwPHN0cmluZywgUkhUUFFNYXBOb2RlPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRRdWV1ZU1hcEJ5S2V5ID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQgPSBuZXcgTWFwKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgaW5zdGFuY2Ugb2YgUkhUUFFNYXAuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogUkhUUFFNYXAge1xyXG4gICAgcmV0dXJuIG5ldyBSSFRQUU1hcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldGAgc2V0cyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIGtleS5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogSlNPTkVsZW1lbnQpOiBKU09ORWxlbWVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICBsZXQgcmVtb3ZlZDtcclxuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5lbGVtZW50UXVldWVNYXBCeUtleS5nZXQoa2V5KTtcclxuICAgIGlmIChxdWV1ZSAmJiBxdWV1ZS5sZW4oKSkge1xyXG4gICAgICBjb25zdCBub2RlID0gcXVldWUucGVlaygpIGFzIFJIVFBRTWFwTm9kZTtcclxuICAgICAgaWYgKCFub2RlLmlzUmVtb3ZlZCgpICYmIG5vZGUucmVtb3ZlKHZhbHVlLmdldENyZWF0ZWRBdCgpKSkge1xyXG4gICAgICAgIHJlbW92ZWQgPSBub2RlLmdldFZhbHVlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldEludGVybmFsKGtleSwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHJlbW92ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc2V0SW50ZXJuYWxgIHNldHMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEludGVybmFsKGtleTogc3RyaW5nLCB2YWx1ZTogSlNPTkVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5lbGVtZW50UXVldWVNYXBCeUtleS5oYXMoa2V5KSkge1xyXG4gICAgICB0aGlzLmVsZW1lbnRRdWV1ZU1hcEJ5S2V5LnNldChrZXksIG5ldyBIZWFwKFRpY2tldENvbXBhcmF0b3IpKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBub2RlID0gUkhUUFFNYXBOb2RlLm9mKGtleSwgdmFsdWUpO1xyXG4gICAgdGhpcy5lbGVtZW50UXVldWVNYXBCeUtleS5nZXQoa2V5KSEucHVzaChub2RlKTtcclxuICAgIHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LnNldCh2YWx1ZS5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCksIG5vZGUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZWAgZGVsZXRlcyBkZWxldGVzIHRoZSBFbGVtZW50IG9mIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIGRlbGV0ZShjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsIGV4ZWN1dGVkQXQ6IFRpbWVUaWNrZXQpOiBKU09ORWxlbWVudCB7XHJcbiAgICBpZiAoIXRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LmhhcyhjcmVhdGVkQXQudG9JRFN0cmluZygpKSkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoYGZhaWwgdG8gZmluZCAke2NyZWF0ZWRBdC50b0lEU3RyaW5nKCl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LmdldChjcmVhdGVkQXQudG9JRFN0cmluZygpKSE7XHJcbiAgICBub2RlLnJlbW92ZShleGVjdXRlZEF0KTtcclxuICAgIHJldHVybiBub2RlLmdldFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBga2V5T2ZgIHJldHVybnMgYSBrZXkgb2Ygbm9kZSBiYXNlZCBvbiBjcmVhdGlvbiB0aW1lXHJcbiAgICovXHJcbiAgcHVibGljIGtleU9mKGNyZWF0ZWRBdDogVGltZVRpY2tldCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQuZ2V0KGNyZWF0ZWRBdC50b0lEU3RyaW5nKCkpO1xyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbm9kZS5nZXRTdHJLZXkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwdXJnZWAgcGh5c2ljYWxseSBwdXJnZSBjaGlsZCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXJnZShlbGVtZW50OiBKU09ORWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZU1hcEJ5Q3JlYXRlZEF0LmdldChcclxuICAgICAgZWxlbWVudC5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCksXHJcbiAgICApO1xyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBmaW5kICR7ZWxlbWVudC5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCl9YCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBxdWV1ZSA9IHRoaXMuZWxlbWVudFF1ZXVlTWFwQnlLZXkuZ2V0KG5vZGUuZ2V0U3RyS2V5KCkpO1xyXG4gICAgaWYgKCFxdWV1ZSkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoXHJcbiAgICAgICAgYGZhaWwgdG8gZmluZCBxdWV1ZSBvZiAke2VsZW1lbnQuZ2V0Q3JlYXRlZEF0KCkudG9JRFN0cmluZygpfWAsXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBxdWV1ZS5yZWxlYXNlKG5vZGUpO1xyXG4gICAgdGhpcy5ub2RlTWFwQnlDcmVhdGVkQXQuZGVsZXRlKG5vZGUuZ2V0VmFsdWUoKS5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZUJ5S2V5YCBkZWxldGVzIHRoZSBFbGVtZW50IG9mIHRoZSBnaXZlbiBrZXkgYW5kIHJlbW92ZWQgdGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVsZXRlQnlLZXkoXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIHJlbW92ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBKU09ORWxlbWVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAoIXRoaXMuZWxlbWVudFF1ZXVlTWFwQnlLZXkuaGFzKGtleSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmVsZW1lbnRRdWV1ZU1hcEJ5S2V5LmdldChrZXkpIS5wZWVrKCkgYXMgUkhUUFFNYXBOb2RlO1xyXG4gICAgbm9kZS5yZW1vdmUocmVtb3ZlZEF0KTtcclxuICAgIHJldHVybiBub2RlLmdldFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzYCByZXR1cm5zIHdoZXRoZXIgdGhlIGVsZW1lbnQgZXhpc3RzIG9mIHRoZSBnaXZlbiBrZXkgb3Igbm90LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5lbGVtZW50UXVldWVNYXBCeUtleS5oYXMoa2V5KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZWxlbWVudFF1ZXVlTWFwQnlLZXkuZ2V0KGtleSkhLnBlZWsoKSBhcyBSSFRQUU1hcE5vZGU7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNSZW1vdmVkKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0YCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4ga2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpOiBKU09ORWxlbWVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAoIXRoaXMuZWxlbWVudFF1ZXVlTWFwQnlLZXkuaGFzKGtleSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRRdWV1ZU1hcEJ5S2V5IS5nZXQoa2V5KSEucGVlaygpIS5nZXRWYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcclxuICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UkhUUFFNYXBOb2RlPiB7XHJcbiAgICBmb3IgKGNvbnN0IFssIGhlYXBdIG9mIHRoaXMuZWxlbWVudFF1ZXVlTWFwQnlLZXkpIHtcclxuICAgICAgZm9yIChjb25zdCBub2RlIG9mIGhlYXApIHtcclxuICAgICAgICB5aWVsZCBub2RlIGFzIFJIVFBRTWFwTm9kZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRpbWVUaWNrZXQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS90aWNrZXQnO1xyXG5pbXBvcnQgeyBSSFQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yaHQnO1xyXG5pbXBvcnQgeyBUZXh0RWxlbWVudCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2VsZW1lbnQnO1xyXG5pbXBvcnQge1xyXG4gIFRleHRDaGFuZ2UsXHJcbiAgVGV4dENoYW5nZVR5cGUsXHJcbiAgUkdBVHJlZVNwbGl0LFxyXG4gIFJHQVRyZWVTcGxpdE5vZGVSYW5nZSxcclxuICBTZWxlY3Rpb24sXHJcbn0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcmdhX3RyZWVfc3BsaXQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSaWNoVGV4dFZhbCB7XHJcbiAgYXR0cmlidXRlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgUmljaFRleHRWYWx1ZWAgaXMgYSB2YWx1ZSBvZiBSaWNoVGV4dFxyXG4gKiB3aGljaCBoYXMgYSBhdHRyaWJ1dGVzIHRoYXQgZXhwcmVzc2VzIHRoZSB0ZXh0IHN0eWxlLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSaWNoVGV4dFZhbHVlIHtcclxuICBwcml2YXRlIGF0dHJpYnV0ZXM6IFJIVDtcclxuICBwcml2YXRlIGNvbnRlbnQ6IHN0cmluZztcclxuXHJcbiAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cclxuICBjb25zdHJ1Y3Rvcihjb250ZW50OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuYXR0cmlidXRlcyA9IFJIVC5jcmVhdGUoKTtcclxuICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgaW5zdGFuY2Ugb2YgUmljaFRleHRWYWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjb250ZW50OiBzdHJpbmcpOiBSaWNoVGV4dFZhbHVlIHtcclxuICAgIHJldHVybiBuZXcgUmljaFRleHRWYWx1ZShjb250ZW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBsZW5ndGhgIHJldHVybnMgdGhlIGxlbmd0aCBvZiBjb250ZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzdWJzdHJpbmdgIHJldHVybnMgYSBzdWItc3RyaW5nIHZhbHVlIG9mIHRoZSBnaXZlbiByYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3Vic3RyaW5nKGluZGV4U3RhcnQ6IG51bWJlciwgaW5kZXhFbmQ6IG51bWJlcik6IFJpY2hUZXh0VmFsdWUge1xyXG4gICAgY29uc3QgdmFsdWUgPSBuZXcgUmljaFRleHRWYWx1ZShcclxuICAgICAgdGhpcy5jb250ZW50LnN1YnN0cmluZyhpbmRleFN0YXJ0LCBpbmRleEVuZCksXHJcbiAgICApO1xyXG4gICAgdmFsdWUuYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcy5kZWVwY29weSgpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldEF0dHJgIHNldHMgYXR0cmlidXRlIG9mIHRoZSBnaXZlbiBrZXksIHVwZGF0ZWQgdGltZSBhbmQgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEF0dHIoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHVwZGF0ZWRBdDogVGltZVRpY2tldCk6IHZvaWQge1xyXG4gICAgdGhpcy5hdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlLCB1cGRhdGVkQXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvU3RyaW5nYCByZXR1cm5zIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNPTmAgcmV0dXJucyB0aGUgSlNPTiBlbmNvZGluZyBvZiB0aGlzIC5cclxuICAgKi9cclxuICBwdWJsaWMgdG9KU09OKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYHtcImF0dHJzXCI6JHt0aGlzLmF0dHJpYnV0ZXMudG9KU09OKCl9LFwiY29udGVudFwiOiR7dGhpcy5jb250ZW50fX1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEF0dHJpYnV0ZXNgIHJldHVybnMgdGhlIGF0dHJpYnV0ZXMgb2YgdGhpcyB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QXR0cmlidXRlcygpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMudG9PYmplY3QoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRDb250ZW50YCByZXR1cm5zIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENvbnRlbnQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRlbnQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogIGBSaWNoVGV4dEludGVybmFsYCBpcyBhbiBleHRlbmRlZCBkYXRhIHR5cGUgZm9yIHRoZSBjb250ZW50cyBvZiBhIHRleHQgZWRpdG9yLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSaWNoVGV4dEludGVybmFsIGV4dGVuZHMgVGV4dEVsZW1lbnQge1xyXG4gIHByaXZhdGUgb25DaGFuZ2VzSGFuZGxlcj86IChjaGFuZ2VzOiBBcnJheTxUZXh0Q2hhbmdlPikgPT4gdm9pZDtcclxuICBwcml2YXRlIHJnYVRyZWVTcGxpdDogUkdBVHJlZVNwbGl0PFJpY2hUZXh0VmFsdWU+O1xyXG4gIHByaXZhdGUgc2VsZWN0aW9uTWFwOiBNYXA8c3RyaW5nLCBTZWxlY3Rpb24+O1xyXG4gIHByaXZhdGUgcmVtb3RlQ2hhbmdlTG9jazogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZ2FUcmVlU3BsaXQ6IFJHQVRyZWVTcGxpdDxSaWNoVGV4dFZhbHVlPixcclxuICAgIGNyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICApIHtcclxuICAgIHN1cGVyKGNyZWF0ZWRBdCk7XHJcbiAgICB0aGlzLnJnYVRyZWVTcGxpdCA9IHJnYVRyZWVTcGxpdDtcclxuICAgIHRoaXMuc2VsZWN0aW9uTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5yZW1vdGVDaGFuZ2VMb2NrID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBhIGluc3RhbmNlIG9mIFJpY2hUZXh0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxyXG4gICAgcmdhVHJlZVNwbGl0OiBSR0FUcmVlU3BsaXQ8UmljaFRleHRWYWx1ZT4sXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogUmljaFRleHRJbnRlcm5hbCB7XHJcbiAgICBjb25zdCB0ZXh0ID0gbmV3IFJpY2hUZXh0SW50ZXJuYWwocmdhVHJlZVNwbGl0LCBjcmVhdGVkQXQpO1xyXG4gICAgY29uc3QgcmFuZ2UgPSB0ZXh0LmNyZWF0ZVJhbmdlKDAsIDApO1xyXG4gICAgdGV4dC5lZGl0SW50ZXJuYWwocmFuZ2UsICdcXG4nLCBjcmVhdGVkQXQpO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZWRpdEludGVybmFsYCBlZGl0cyB0aGUgZ2l2ZW4gcmFuZ2Ugd2l0aCB0aGUgZ2l2ZW4gY29udGVudCBhbmQgYXR0cmlidXRlcy5cclxuICAgKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBlZGl0SW50ZXJuYWwoXHJcbiAgICByYW5nZTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlLFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgZWRpdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcclxuICAgIGxhdGVzdENyZWF0ZWRBdE1hcEJ5QWN0b3I/OiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PixcclxuICApOiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGNvbnRlbnQgPyBSaWNoVGV4dFZhbHVlLmNyZWF0ZShjb250ZW50KSA6IHVuZGVmaW5lZDtcclxuICAgIGlmIChjb250ZW50ICYmIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykpIHtcclxuICAgICAgICB2YWx1ZSEuc2V0QXR0cihrLCB2LCBlZGl0ZWRBdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBbY2FyZXRQb3MsIGxhdGVzdENyZWF0ZWRBdE1hcCwgY2hhbmdlc10gPSB0aGlzLnJnYVRyZWVTcGxpdC5lZGl0KFxyXG4gICAgICByYW5nZSxcclxuICAgICAgZWRpdGVkQXQsXHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICBsYXRlc3RDcmVhdGVkQXRNYXBCeUFjdG9yLFxyXG4gICAgKTtcclxuICAgIGlmIChjb250ZW50ICYmIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgY29uc3QgY2hhbmdlID0gY2hhbmdlc1tjaGFuZ2VzLmxlbmd0aCAtIDFdO1xyXG4gICAgICBjaGFuZ2UuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2VsZWN0aW9uQ2hhbmdlID0gdGhpcy5zZWxlY3RQcml2KFtjYXJldFBvcywgY2FyZXRQb3NdLCBlZGl0ZWRBdCk7XHJcbiAgICBpZiAoc2VsZWN0aW9uQ2hhbmdlKSB7XHJcbiAgICAgIGNoYW5nZXMucHVzaChzZWxlY3Rpb25DaGFuZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9uQ2hhbmdlc0hhbmRsZXIpIHtcclxuICAgICAgdGhpcy5yZW1vdGVDaGFuZ2VMb2NrID0gdHJ1ZTtcclxuICAgICAgdGhpcy5vbkNoYW5nZXNIYW5kbGVyKGNoYW5nZXMpO1xyXG4gICAgICB0aGlzLnJlbW90ZUNoYW5nZUxvY2sgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGF0ZXN0Q3JlYXRlZEF0TWFwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldFN0eWxlSW50ZXJuYWxgIGFwcGxpZXMgdGhlIHN0eWxlIG9mIHRoZSBnaXZlbiByYW5nZS5cclxuICAgKiAwMS4gc3BsaXQgbm9kZXMgd2l0aCBmcm9tIGFuZCB0b1xyXG4gICAqIDAyLiBzdHlsZSBub2RlcyBiZXR3ZWVuIGZyb20gYW5kIHRvXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcmFuZ2UgLSByYW5nZSBvZiBSR0FUcmVlU3BsaXROb2RlXHJcbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgLSBzdHlsZSBhdHRyaWJ1dGVzXHJcbiAgICogQHBhcmFtIGVkaXRlZEF0IC0gZWRpdGVkIHRpbWVcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U3R5bGVJbnRlcm5hbChcclxuICAgIHJhbmdlOiBSR0FUcmVlU3BsaXROb2RlUmFuZ2UsXHJcbiAgICBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG4gICAgZWRpdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogdm9pZCB7XHJcbiAgICAvLyAwMS4gc3BsaXQgbm9kZXMgd2l0aCBmcm9tIGFuZCB0b1xyXG4gICAgY29uc3QgWywgdG9SaWdodF0gPSB0aGlzLnJnYVRyZWVTcGxpdC5maW5kTm9kZVdpdGhTcGxpdChyYW5nZVsxXSwgZWRpdGVkQXQpO1xyXG4gICAgY29uc3QgWywgZnJvbVJpZ2h0XSA9IHRoaXMucmdhVHJlZVNwbGl0LmZpbmROb2RlV2l0aFNwbGl0KFxyXG4gICAgICByYW5nZVswXSxcclxuICAgICAgZWRpdGVkQXQsXHJcbiAgICApO1xyXG5cclxuICAgIC8vIDAyLiBzdHlsZSBub2RlcyBiZXR3ZWVuIGZyb20gYW5kIHRvXHJcbiAgICBjb25zdCBjaGFuZ2VzID0gW107XHJcbiAgICBjb25zdCBub2RlcyA9IHRoaXMucmdhVHJlZVNwbGl0LmZpbmRCZXR3ZWVuKGZyb21SaWdodCwgdG9SaWdodCk7XHJcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpIHtcclxuICAgICAgaWYgKG5vZGUuaXNSZW1vdmVkKCkpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgW2Zyb21JZHgsIHRvSWR4XSA9IHRoaXMucmdhVHJlZVNwbGl0LmZpbmRJbmRleGVzRnJvbVJhbmdlKFxyXG4gICAgICAgIG5vZGUuY3JlYXRlUmFuZ2UoKSxcclxuICAgICAgKTtcclxuICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICB0eXBlOiBUZXh0Q2hhbmdlVHlwZS5TdHlsZSxcclxuICAgICAgICBhY3RvcjogZWRpdGVkQXQuZ2V0QWN0b3JJRCgpISxcclxuICAgICAgICBmcm9tOiBmcm9tSWR4LFxyXG4gICAgICAgIHRvOiB0b0lkeCxcclxuICAgICAgICBhdHRyaWJ1dGVzLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgbm9kZS5nZXRWYWx1ZSgpLnNldEF0dHIoa2V5LCB2YWx1ZSwgZWRpdGVkQXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMub25DaGFuZ2VzSGFuZGxlcikge1xyXG4gICAgICB0aGlzLnJlbW90ZUNoYW5nZUxvY2sgPSB0cnVlO1xyXG4gICAgICB0aGlzLm9uQ2hhbmdlc0hhbmRsZXIoY2hhbmdlcyk7XHJcbiAgICAgIHRoaXMucmVtb3RlQ2hhbmdlTG9jayA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNlbGVjdEludGVybmFsYCBzdG9yZXMgdGhhdCB0aGUgZ2l2ZW4gcmFuZ2UgaGFzIGJlZW4gc2VsZWN0ZWQuXHJcbiAgICpcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgc2VsZWN0SW50ZXJuYWwoXHJcbiAgICByYW5nZTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlLFxyXG4gICAgdXBkYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucmVtb3RlQ2hhbmdlTG9jaykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2hhbmdlID0gdGhpcy5zZWxlY3RQcml2KHJhbmdlLCB1cGRhdGVkQXQpO1xyXG4gICAgaWYgKHRoaXMub25DaGFuZ2VzSGFuZGxlciAmJiBjaGFuZ2UpIHtcclxuICAgICAgdGhpcy5yZW1vdGVDaGFuZ2VMb2NrID0gdHJ1ZTtcclxuICAgICAgdGhpcy5vbkNoYW5nZXNIYW5kbGVyKFtjaGFuZ2VdKTtcclxuICAgICAgdGhpcy5yZW1vdGVDaGFuZ2VMb2NrID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzUmVtb3RlQ2hhbmdlTG9ja2AgY2hlY2tzIHdoZXRoZXIgcmVtb3RlQ2hhbmdlTG9jayBoYXMuXHJcbiAgICovXHJcbiAgcHVibGljIGhhc1JlbW90ZUNoYW5nZUxvY2soKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZW1vdGVDaGFuZ2VMb2NrO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9uQ2hhbmdlc2AgcmVnaXN0ZXJzIGEgaGFuZGxlciBvZiBvbkNoYW5nZXMgZXZlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIG9uQ2hhbmdlcyhoYW5kbGVyOiAoY2hhbmdlczogQXJyYXk8VGV4dENoYW5nZT4pID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMub25DaGFuZ2VzSGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlUmFuZ2VgIHJldHVybnMgcGFpciBvZiBSR0FUcmVlU3BsaXROb2RlUG9zIG9mIHRoZSBnaXZlbiBpbnRlZ2VyIG9mZnNldHMuXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZVJhbmdlKGZyb21JZHg6IG51bWJlciwgdG9JZHg6IG51bWJlcik6IFJHQVRyZWVTcGxpdE5vZGVSYW5nZSB7XHJcbiAgICBjb25zdCBmcm9tUG9zID0gdGhpcy5yZ2FUcmVlU3BsaXQuZmluZE5vZGVQb3MoZnJvbUlkeCk7XHJcbiAgICBpZiAoZnJvbUlkeCA9PT0gdG9JZHgpIHtcclxuICAgICAgcmV0dXJuIFtmcm9tUG9zLCBmcm9tUG9zXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW2Zyb21Qb3MsIHRoaXMucmdhVHJlZVNwbGl0LmZpbmROb2RlUG9zKHRvSWR4KV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdG9KU09OYCByZXR1cm5zIHRoZSBKU09OIGVuY29kaW5nIG9mIHRoaXMgcmljaCB0ZXh0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTT04oKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGpzb24gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5yZ2FUcmVlU3BsaXQpIHtcclxuICAgICAgaWYgKCFub2RlLmlzUmVtb3ZlZCgpKSB7XHJcbiAgICAgICAganNvbi5wdXNoKG5vZGUuZ2V0VmFsdWUoKS50b0pTT04oKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYFske2pzb24uam9pbignLCcpfV1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvU29ydGVkSlNPTmAgcmV0dXJucyB0aGUgc29ydGVkIEpTT04gZW5jb2Rpbmcgb2YgdGhpcyByaWNoIHRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIHRvU29ydGVkSlNPTigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdmFsdWVzYCByZXR1cm5zIHZhbHVlIGFycmF5IG9mIHRoaXMgUmljaFRleHRWYWwuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlcygpOiBBcnJheTxSaWNoVGV4dFZhbD4ge1xyXG4gICAgY29uc3QgdmFsdWVzID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMucmdhVHJlZVNwbGl0KSB7XHJcbiAgICAgIGlmICghbm9kZS5pc1JlbW92ZWQoKSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gbm9kZS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgIHZhbHVlcy5wdXNoKHtcclxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHZhbHVlLmdldEF0dHJpYnV0ZXMoKSxcclxuICAgICAgICAgIGNvbnRlbnQ6IHZhbHVlLmdldENvbnRlbnQoKSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UkdBVHJlZVNwbGl0YCByZXR1cm5zIHJnYVRyZWVTcGxpdC5cclxuICAgKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSR0FUcmVlU3BsaXQoKTogUkdBVHJlZVNwbGl0PFJpY2hUZXh0VmFsdWU+IHtcclxuICAgIHJldHVybiB0aGlzLnJnYVRyZWVTcGxpdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBTdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhIG9mIHRoaXMgdmFsdWVcclxuICAgKiBmb3IgZGVidWdnaW5nIHB1cnBvc2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFubm90YXRlZFN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMucmdhVHJlZVNwbGl0LmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFJlbW92ZWROb2Rlc0xlbmAgcmV0dXJucyBsZW5ndGggb2YgcmVtb3ZlZCBub2Rlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZW1vdmVkTm9kZXNMZW4oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJnYVRyZWVTcGxpdC5nZXRSZW1vdmVkTm9kZXNMZW4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwdXJnZVRleHROb2Rlc1dpdGhHYXJiYWdlYCBwaHlzaWNhbGx5IHB1cmdlcyBub2RlcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkLlxyXG4gICAqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIHB1cmdlVGV4dE5vZGVzV2l0aEdhcmJhZ2UodGlja2V0OiBUaW1lVGlja2V0KTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJnYVRyZWVTcGxpdC5wdXJnZVRleHROb2Rlc1dpdGhHYXJiYWdlKHRpY2tldCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVlcGNvcHlgIGNvcGllcyBpdHNlbGYgZGVlcGx5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWVwY29weSgpOiBSaWNoVGV4dEludGVybmFsIHtcclxuICAgIGNvbnN0IHRleHQgPSBuZXcgUmljaFRleHRJbnRlcm5hbChcclxuICAgICAgdGhpcy5yZ2FUcmVlU3BsaXQuZGVlcGNvcHkoKSxcclxuICAgICAgdGhpcy5nZXRDcmVhdGVkQXQoKSxcclxuICAgICk7XHJcbiAgICB0ZXh0LnJlbW92ZSh0aGlzLmdldFJlbW92ZWRBdCgpKTtcclxuICAgIHJldHVybiB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZWxlY3RQcml2KFxyXG4gICAgcmFuZ2U6IFJHQVRyZWVTcGxpdE5vZGVSYW5nZSxcclxuICAgIHVwZGF0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBUZXh0Q2hhbmdlIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghdGhpcy5zZWxlY3Rpb25NYXAuaGFzKHVwZGF0ZWRBdC5nZXRBY3RvcklEKCkhKSkge1xyXG4gICAgICB0aGlzLnNlbGVjdGlvbk1hcC5zZXQoXHJcbiAgICAgICAgdXBkYXRlZEF0LmdldEFjdG9ySUQoKSEsXHJcbiAgICAgICAgU2VsZWN0aW9uLm9mKHJhbmdlLCB1cGRhdGVkQXQpLFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJldlNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uTWFwLmdldCh1cGRhdGVkQXQuZ2V0QWN0b3JJRCgpISk7XHJcbiAgICBpZiAodXBkYXRlZEF0LmFmdGVyKHByZXZTZWxlY3Rpb24hLmdldFVwZGF0ZWRBdCgpKSkge1xyXG4gICAgICB0aGlzLnNlbGVjdGlvbk1hcC5zZXQoXHJcbiAgICAgICAgdXBkYXRlZEF0LmdldEFjdG9ySUQoKSEsXHJcbiAgICAgICAgU2VsZWN0aW9uLm9mKHJhbmdlLCB1cGRhdGVkQXQpLFxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgW2Zyb20sIHRvXSA9IHRoaXMucmdhVHJlZVNwbGl0LmZpbmRJbmRleGVzRnJvbVJhbmdlKHJhbmdlKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBUZXh0Q2hhbmdlVHlwZS5TZWxlY3Rpb24sXHJcbiAgICAgICAgYWN0b3I6IHVwZGF0ZWRBdC5nZXRBY3RvcklEKCkhLFxyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgdG8sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHtcclxuICBJbml0aWFsVGltZVRpY2tldCxcclxuICBUaW1lVGlja2V0LFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7XHJcbiAgSlNPTkNvbnRhaW5lcixcclxuICBKU09ORWxlbWVudCxcclxuICBUZXh0RWxlbWVudCxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuaW1wb3J0IHsgT2JqZWN0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9vYmplY3QnO1xyXG5cclxuaW50ZXJmYWNlIEpTT05FbGVtZW50UGFpciB7XHJcbiAgZWxlbWVudDogSlNPTkVsZW1lbnQ7XHJcbiAgcGFyZW50PzogSlNPTkNvbnRhaW5lcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBKU09OUm9vdGAgaXMgYSBzdHJ1Y3R1cmUgcmVwcmVzZW50cyB0aGUgcm9vdCBvZiBKU09OLiBJdCBoYXMgYSBoYXNoIHRhYmxlIG9mXHJcbiAqIGFsbCBKU09OIGVsZW1lbnRzIHRvIGZpbmQgYSBzcGVjaWZpYyBlbGVtZW50IHdoZW4gYXBwbHlpbmcgcmVtb3RlIGNoYW5nZXNcclxuICogcmVjZWl2ZWQgZnJvbSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIEV2ZXJ5IGVsZW1lbnQgaGFzIGEgdW5pcXVlIHRpbWUgdGlja2V0IGF0IGNyZWF0aW9uLCB3aGljaCBhbGxvd3MgdXMgdG8gZmluZFxyXG4gKiBhIHBhcnRpY3VsYXIgZWxlbWVudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBKU09OUm9vdCB7XHJcbiAgcHJpdmF0ZSByb290T2JqZWN0OiBPYmplY3RJbnRlcm5hbDtcclxuICBwcml2YXRlIGVsZW1lbnRQYWlyTWFwQnlDcmVhdGVkQXQ6IE1hcDxzdHJpbmcsIEpTT05FbGVtZW50UGFpcj47XHJcbiAgcHJpdmF0ZSByZW1vdmVkRWxlbWVudFNldEJ5Q3JlYXRlZEF0OiBTZXQ8c3RyaW5nPjtcclxuICBwcml2YXRlIHRleHRXaXRoR2FyYmFnZVNldEJ5Q3JlYXRlZEF0OiBTZXQ8c3RyaW5nPjtcclxuXHJcbiAgY29uc3RydWN0b3Iocm9vdE9iamVjdDogT2JqZWN0SW50ZXJuYWwpIHtcclxuICAgIHRoaXMucm9vdE9iamVjdCA9IHJvb3RPYmplY3Q7XHJcbiAgICB0aGlzLmVsZW1lbnRQYWlyTWFwQnlDcmVhdGVkQXQgPSBuZXcgTWFwKCk7XHJcbiAgICB0aGlzLnJlbW92ZWRFbGVtZW50U2V0QnlDcmVhdGVkQXQgPSBuZXcgU2V0KCk7XHJcbiAgICB0aGlzLnRleHRXaXRoR2FyYmFnZVNldEJ5Q3JlYXRlZEF0ID0gbmV3IFNldCgpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudFBhaXJNYXBCeUNyZWF0ZWRBdC5zZXQoXHJcbiAgICAgIHRoaXMucm9vdE9iamVjdC5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCksXHJcbiAgICAgIHsgZWxlbWVudDogdGhpcy5yb290T2JqZWN0IH0sXHJcbiAgICApO1xyXG5cclxuICAgIHJvb3RPYmplY3QuZ2V0RGVzY2VuZGFudHMoXHJcbiAgICAgIChlbGVtOiBKU09ORWxlbWVudCwgcGFyZW50OiBKU09OQ29udGFpbmVyKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckVsZW1lbnQoZWxlbSwgcGFyZW50KTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSb290LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEpTT05Sb290IHtcclxuICAgIHJldHVybiBuZXcgSlNPTlJvb3QoT2JqZWN0SW50ZXJuYWwuY3JlYXRlKEluaXRpYWxUaW1lVGlja2V0KSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZmluZEJ5Q3JlYXRlZEF0YCByZXR1cm5zIHRoZSBlbGVtZW50IG9mIGdpdmVuIGNyZWF0aW9uIHRpbWUuXHJcbiAgICovXHJcbiAgcHVibGljIGZpbmRCeUNyZWF0ZWRBdChjcmVhdGVkQXQ6IFRpbWVUaWNrZXQpOiBKU09ORWxlbWVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBwYWlyID0gdGhpcy5lbGVtZW50UGFpck1hcEJ5Q3JlYXRlZEF0LmdldChjcmVhdGVkQXQudG9JRFN0cmluZygpKTtcclxuICAgIGlmICghcGFpcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhaXIuZWxlbWVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVQYXRoYCBjcmVhdGVzIHBhdGggb2YgdGhlIGdpdmVuIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZVBhdGgoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGxldCBwYWlyID0gdGhpcy5lbGVtZW50UGFpck1hcEJ5Q3JlYXRlZEF0LmdldChjcmVhdGVkQXQudG9JRFN0cmluZygpKTtcclxuICAgIGlmICghcGFpcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga2V5czogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgd2hpbGUgKHBhaXIucGFyZW50KSB7XHJcbiAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IHBhaXIuZWxlbWVudC5nZXRDcmVhdGVkQXQoKTtcclxuICAgICAgbGV0IGtleSA9IHBhaXIucGFyZW50LmtleU9mKGNyZWF0ZWRBdCk7XHJcbiAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGxvZ2dlci5mYXRhbChgY2FudCBmaW5kIHRoZSBnaXZlbiBlbGVtZW50OiAke2NyZWF0ZWRBdC50b0lEU3RyaW5nKCl9YCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAga2V5ID0ga2V5LnJlcGxhY2UoL1skLl0vZywgJ1xcXFwkJicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBrZXlzLnVuc2hpZnQoa2V5ISk7XHJcbiAgICAgIHBhaXIgPSB0aGlzLmVsZW1lbnRQYWlyTWFwQnlDcmVhdGVkQXQuZ2V0KFxyXG4gICAgICAgIHBhaXIucGFyZW50LmdldENyZWF0ZWRBdCgpLnRvSURTdHJpbmcoKSxcclxuICAgICAgKSE7XHJcbiAgICB9XHJcblxyXG4gICAga2V5cy51bnNoaWZ0KCckJyk7XHJcbiAgICByZXR1cm4ga2V5cy5qb2luKCcuJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcmVnaXN0ZXJFbGVtZW50YCByZWdpc3RlcnMgdGhlIGdpdmVuIGVsZW1lbnQgdG8gaGFzaCB0YWJsZS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXJFbGVtZW50KGVsZW1lbnQ6IEpTT05FbGVtZW50LCBwYXJlbnQ6IEpTT05Db250YWluZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuZWxlbWVudFBhaXJNYXBCeUNyZWF0ZWRBdC5zZXQoZWxlbWVudC5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCksIHtcclxuICAgICAgcGFyZW50LFxyXG4gICAgICBlbGVtZW50LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVyZWdpc3RlckVsZW1lbnRgIGRlcmVnaXN0ZXIgdGhlIGdpdmVuIGVsZW1lbnQgZnJvbSBoYXNoIHRhYmxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXJlZ2lzdGVyRWxlbWVudChlbGVtZW50OiBKU09ORWxlbWVudCk6IHZvaWQge1xyXG4gICAgdGhpcy5lbGVtZW50UGFpck1hcEJ5Q3JlYXRlZEF0LmRlbGV0ZShlbGVtZW50LmdldENyZWF0ZWRBdCgpLnRvSURTdHJpbmcoKSk7XHJcbiAgICB0aGlzLnJlbW92ZWRFbGVtZW50U2V0QnlDcmVhdGVkQXQuZGVsZXRlKFxyXG4gICAgICBlbGVtZW50LmdldENyZWF0ZWRBdCgpLnRvSURTdHJpbmcoKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcmVnaXN0ZXJSZW1vdmVkRWxlbWVudGAgcmVnaXN0ZXJzIHRoZSBnaXZlbiBlbGVtZW50IHRvIGhhc2ggdGFibGUuXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ2lzdGVyUmVtb3ZlZEVsZW1lbnQoZWxlbWVudDogSlNPTkVsZW1lbnQpOiB2b2lkIHtcclxuICAgIHRoaXMucmVtb3ZlZEVsZW1lbnRTZXRCeUNyZWF0ZWRBdC5hZGQoZWxlbWVudC5nZXRDcmVhdGVkQXQoKS50b0lEU3RyaW5nKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHJlZ2lzdGVyVGV4dFdpdGhHYXJiYWdlYCByZWdpc3RlcnMgdGhlIGdpdmVuIHRleHQgdG8gaGFzaCBzZXQuXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ2lzdGVyVGV4dFdpdGhHYXJiYWdlKHRleHQ6IFRleHRFbGVtZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLnRleHRXaXRoR2FyYmFnZVNldEJ5Q3JlYXRlZEF0LmFkZCh0ZXh0LmdldENyZWF0ZWRBdCgpLnRvSURTdHJpbmcoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RWxlbWVudE1hcFNpemVgIHJldHVybnMgdGhlIHNpemUgb2YgZWxlbWVudCBtYXAuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEVsZW1lbnRNYXBTaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UGFpck1hcEJ5Q3JlYXRlZEF0LnNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UmVtb3ZlZEVsZW1lbnRTZXRTaXplKClgIHJldHVybnMgdGhlIHNpemUgb2YgcmVtb3ZlZCBlbGVtZW50IHNldC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmVtb3ZlZEVsZW1lbnRTZXRTaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVkRWxlbWVudFNldEJ5Q3JlYXRlZEF0LnNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0T2JqZWN0YCByZXR1cm5zIHJvb3Qgb2JqZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPYmplY3QoKTogT2JqZWN0SW50ZXJuYWwge1xyXG4gICAgcmV0dXJuIHRoaXMucm9vdE9iamVjdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRHYXJiYWdlTGVuYCByZXR1cm5zIGxlbmd0aCBvZiBub2RlcyB3aGljaCBzaG91bGQgZ2FyYmFnZSBjb2xsZWN0aW9uIHRhc2tcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0R2FyYmFnZUxlbigpOiBudW1iZXIge1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGNyZWF0ZWRBdCBvZiB0aGlzLnJlbW92ZWRFbGVtZW50U2V0QnlDcmVhdGVkQXQpIHtcclxuICAgICAgY291bnQrKztcclxuICAgICAgY29uc3QgcGFpciA9IHRoaXMuZWxlbWVudFBhaXJNYXBCeUNyZWF0ZWRBdC5nZXQoY3JlYXRlZEF0KSE7XHJcbiAgICAgIGlmIChwYWlyLmVsZW1lbnQgaW5zdGFuY2VvZiBKU09OQ29udGFpbmVyKSB7XHJcbiAgICAgICAgcGFpci5lbGVtZW50LmdldERlc2NlbmRhbnRzKCgpID0+IHtcclxuICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IGNyZWF0ZWRBdCBvZiB0aGlzLnRleHRXaXRoR2FyYmFnZVNldEJ5Q3JlYXRlZEF0KSB7XHJcbiAgICAgIGNvbnN0IHBhaXIgPSB0aGlzLmVsZW1lbnRQYWlyTWFwQnlDcmVhdGVkQXQuZ2V0KGNyZWF0ZWRBdCkhO1xyXG4gICAgICBjb25zdCB0ZXh0ID0gcGFpci5lbGVtZW50IGFzIFRleHRFbGVtZW50O1xyXG4gICAgICBjb3VudCArPSB0ZXh0LmdldFJlbW92ZWROb2Rlc0xlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBkZWVwY29weWAgY29waWVzIGl0c2VsZiBkZWVwbHkuXHJcbiAgICovXHJcbiAgcHVibGljIGRlZXBjb3B5KCk6IEpTT05Sb290IHtcclxuICAgIHJldHVybiBuZXcgSlNPTlJvb3QodGhpcy5yb290T2JqZWN0LmRlZXBjb3B5KCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdhcmJhZ2VDb2xsZWN0YCBwdXJnZXMgZWxlbWVudHMgdGhhdCB3ZXJlIHJlbW92ZWQgYmVmb3JlIHRoZSBnaXZlbiB0aW1lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnYXJiYWdlQ29sbGVjdCh0aWNrZXQ6IFRpbWVUaWNrZXQpOiBudW1iZXIge1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGNyZWF0ZWRBdCBvZiB0aGlzLnJlbW92ZWRFbGVtZW50U2V0QnlDcmVhdGVkQXQpIHtcclxuICAgICAgY29uc3QgcGFpciA9IHRoaXMuZWxlbWVudFBhaXJNYXBCeUNyZWF0ZWRBdC5nZXQoY3JlYXRlZEF0KSE7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBwYWlyLmVsZW1lbnQuZ2V0UmVtb3ZlZEF0KCkgJiZcclxuICAgICAgICB0aWNrZXQuY29tcGFyZShwYWlyLmVsZW1lbnQuZ2V0UmVtb3ZlZEF0KCkhKSA+PSAwXHJcbiAgICAgICkge1xyXG4gICAgICAgIHBhaXIucGFyZW50IS5wdXJnZShwYWlyLmVsZW1lbnQpO1xyXG4gICAgICAgIGNvdW50ICs9IHRoaXMuZ2FyYmFnZUNvbGxlY3RJbnRlcm5hbChwYWlyLmVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBjcmVhdGVkQXQgb2YgdGhpcy50ZXh0V2l0aEdhcmJhZ2VTZXRCeUNyZWF0ZWRBdCkge1xyXG4gICAgICBjb25zdCBwYWlyID0gdGhpcy5lbGVtZW50UGFpck1hcEJ5Q3JlYXRlZEF0LmdldChjcmVhdGVkQXQpITtcclxuICAgICAgY29uc3QgdGV4dCA9IHBhaXIuZWxlbWVudCBhcyBUZXh0RWxlbWVudDtcclxuXHJcbiAgICAgIGNvbnN0IHJlbW92ZWROb2RlQ250ID0gdGV4dC5wdXJnZVRleHROb2Rlc1dpdGhHYXJiYWdlKHRpY2tldCk7XHJcbiAgICAgIGlmIChyZW1vdmVkTm9kZUNudCA+IDApIHtcclxuICAgICAgICB0aGlzLnRleHRXaXRoR2FyYmFnZVNldEJ5Q3JlYXRlZEF0LmRlbGV0ZShcclxuICAgICAgICAgIHRleHQuZ2V0Q3JlYXRlZEF0KCkudG9JRFN0cmluZygpLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgY291bnQgKz0gcmVtb3ZlZE5vZGVDbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvdW50O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnYXJiYWdlQ29sbGVjdEludGVybmFsKGVsZW1lbnQ6IEpTT05FbGVtZW50KTogbnVtYmVyIHtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgY29uc3QgY2FsbGJhY2sgPSAoZWxlbTogSlNPTkVsZW1lbnQsIHBhcmVudD86IEpTT05Db250YWluZXIpOiBib29sZWFuID0+IHtcclxuICAgICAgdGhpcy5kZXJlZ2lzdGVyRWxlbWVudChlbGVtKTtcclxuICAgICAgY291bnQrKztcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBjYWxsYmFjayhlbGVtZW50KTtcclxuXHJcbiAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpTT05Db250YWluZXIpIHtcclxuICAgICAgZWxlbWVudC5nZXREZXNjZW5kYW50cyhjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvdW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSlNPTmAgcmV0dXJucyB0aGUgSlNPTiBlbmNvZGluZyBvZiB0aGlzIHJvb3Qgb2JqZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTT04oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnJvb3RPYmplY3QudG9KU09OKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdG9Tb3J0ZWRKU09OYCByZXR1cm5zIHRoZSBzb3J0ZWQgSlNPTiBlbmNvZGluZyBvZiB0aGlzIHJvb3Qgb2JqZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b1NvcnRlZEpTT04oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnJvb3RPYmplY3QudG9Tb3J0ZWRKU09OKCk7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05FbGVtZW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vZWxlbWVudCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IEFycmF5SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9hcnJheSc7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vb3BlcmF0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBgQWRkT3BlcmF0aW9uYCBpcyBhbiBvcGVyYXRpb24gcmVwcmVzZW50aW5nIGFkZGluZyBhbiBlbGVtZW50IHRvIGFuIEFycmF5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFkZE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgcHJpdmF0ZSBwcmV2Q3JlYXRlZEF0OiBUaW1lVGlja2V0O1xyXG4gIHByaXZhdGUgdmFsdWU6IEpTT05FbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIHByZXZDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICB2YWx1ZTogSlNPTkVsZW1lbnQsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICkge1xyXG4gICAgc3VwZXIocGFyZW50Q3JlYXRlZEF0LCBleGVjdXRlZEF0KTtcclxuICAgIHRoaXMucHJldkNyZWF0ZWRBdCA9IHByZXZDcmVhdGVkQXQ7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEFkZE9wZXJhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcclxuICAgIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIHByZXZDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICB2YWx1ZTogSlNPTkVsZW1lbnQsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IEFkZE9wZXJhdGlvbiB7XHJcbiAgICByZXR1cm4gbmV3IEFkZE9wZXJhdGlvbihwYXJlbnRDcmVhdGVkQXQsIHByZXZDcmVhdGVkQXQsIHZhbHVlLCBleGVjdXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBleGVjdXRlYCBleGVjdXRlcyB0aGlzIG9wZXJhdGlvbiBvbiB0aGUgZ2l2ZW4gZG9jdW1lbnQoYHJvb3RgKS5cclxuICAgKi9cclxuICBwdWJsaWMgZXhlY3V0ZShyb290OiBKU09OUm9vdCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyZW50T2JqZWN0ID0gcm9vdC5maW5kQnlDcmVhdGVkQXQodGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKSk7XHJcbiAgICBpZiAocGFyZW50T2JqZWN0IGluc3RhbmNlb2YgQXJyYXlJbnRlcm5hbCkge1xyXG4gICAgICBjb25zdCBhcnJheSA9IHBhcmVudE9iamVjdCBhcyBBcnJheUludGVybmFsO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWUuZGVlcGNvcHkoKTtcclxuICAgICAgYXJyYXkuaW5zZXJ0QWZ0ZXIodGhpcy5wcmV2Q3JlYXRlZEF0LCB2YWx1ZSk7XHJcbiAgICAgIHJvb3QucmVnaXN0ZXJFbGVtZW50KHZhbHVlLCBhcnJheSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXBhcmVudE9iamVjdCkge1xyXG4gICAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBmaW5kICR7dGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbG9nZ2VyLmZhdGFsKGBmYWlsIHRvIGV4ZWN1dGUsIG9ubHkgYXJyYXkgY2FuIGV4ZWN1dGUgYWRkYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RWZmZWN0ZWRDcmVhdGVkQXRgIHJldHVybnMgdGhlIHRpbWUgb2YgdGhlIGVmZmVjdGVkIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEVmZmVjdGVkQ3JlYXRlZEF0KCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKS5nZXRBbm5vdGF0ZWRTdHJpbmcoKX0uQUREYDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRQcmV2Q3JlYXRlZEF0YCByZXR1cm5zIHRoZSBjcmVhdGlvbiB0aW1lIG9mIHByZXZpb3VzIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFByZXZDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5wcmV2Q3JlYXRlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFZhbHVlYCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGlzIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWUoKTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IFJHQVRyZWVTcGxpdE5vZGVQb3MgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yZ2FfdHJlZV9zcGxpdCc7XHJcbmltcG9ydCB7IFBsYWluVGV4dEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcGxhaW5fdGV4dCc7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vb3BlcmF0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBgRWRpdE9wZXJhdGlvbmAgaXMgYW4gb3BlcmF0aW9uIHJlcHJlc2VudGluZyBlZGl0aW5nIFRleHQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRWRpdE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgcHJpdmF0ZSBmcm9tUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zO1xyXG4gIHByaXZhdGUgdG9Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3M7XHJcbiAgcHJpdmF0ZSBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yOiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PjtcclxuICBwcml2YXRlIGNvbnRlbnQ6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBmcm9tUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgdG9Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yOiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PixcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIGV4ZWN1dGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKSB7XHJcbiAgICBzdXBlcihwYXJlbnRDcmVhdGVkQXQsIGV4ZWN1dGVkQXQpO1xyXG4gICAgdGhpcy5mcm9tUG9zID0gZnJvbVBvcztcclxuICAgIHRoaXMudG9Qb3MgPSB0b1BvcztcclxuICAgIHRoaXMubWF4Q3JlYXRlZEF0TWFwQnlBY3RvciA9IG1heENyZWF0ZWRBdE1hcEJ5QWN0b3I7XHJcbiAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBFZGl0T3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgZnJvbVBvczogUkdBVHJlZVNwbGl0Tm9kZVBvcyxcclxuICAgIHRvUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgbWF4Q3JlYXRlZEF0TWFwQnlBY3RvcjogTWFwPHN0cmluZywgVGltZVRpY2tldD4sXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IEVkaXRPcGVyYXRpb24ge1xyXG4gICAgcmV0dXJuIG5ldyBFZGl0T3BlcmF0aW9uKFxyXG4gICAgICBwYXJlbnRDcmVhdGVkQXQsXHJcbiAgICAgIGZyb21Qb3MsXHJcbiAgICAgIHRvUG9zLFxyXG4gICAgICBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yLFxyXG4gICAgICBjb250ZW50LFxyXG4gICAgICBleGVjdXRlZEF0LFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBleGVjdXRlYCBleGVjdXRlcyB0aGlzIG9wZXJhdGlvbiBvbiB0aGUgZ2l2ZW4gZG9jdW1lbnQoYHJvb3RgKS5cclxuICAgKi9cclxuICBwdWJsaWMgZXhlY3V0ZShyb290OiBKU09OUm9vdCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyZW50T2JqZWN0ID0gcm9vdC5maW5kQnlDcmVhdGVkQXQodGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKSk7XHJcbiAgICBpZiAocGFyZW50T2JqZWN0IGluc3RhbmNlb2YgUGxhaW5UZXh0SW50ZXJuYWwpIHtcclxuICAgICAgY29uc3QgdGV4dCA9IHBhcmVudE9iamVjdCBhcyBQbGFpblRleHRJbnRlcm5hbDtcclxuICAgICAgdGV4dC5lZGl0SW50ZXJuYWwoXHJcbiAgICAgICAgW3RoaXMuZnJvbVBvcywgdGhpcy50b1Bvc10sXHJcbiAgICAgICAgdGhpcy5jb250ZW50LFxyXG4gICAgICAgIHRoaXMuZ2V0RXhlY3V0ZWRBdCgpLFxyXG4gICAgICAgIHRoaXMubWF4Q3JlYXRlZEF0TWFwQnlBY3RvcixcclxuICAgICAgKTtcclxuICAgICAgaWYgKCF0aGlzLmZyb21Qb3MuZXF1YWxzKHRoaXMudG9Qb3MpKSB7XHJcbiAgICAgICAgcm9vdC5yZWdpc3RlclRleHRXaXRoR2FyYmFnZSh0ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFwYXJlbnRPYmplY3QpIHtcclxuICAgICAgICBsb2dnZXIuZmF0YWwoYGZhaWwgdG8gZmluZCAke3RoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCl9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBleGVjdXRlLCBvbmx5IFBsYWluVGV4dCBjYW4gZXhlY3V0ZSBlZGl0YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RWZmZWN0ZWRDcmVhdGVkQXRgIHJldHVybnMgdGhlIHRpbWUgb2YgdGhlIGVmZmVjdGVkIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEVmZmVjdGVkQ3JlYXRlZEF0KCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgY29uc3QgZnJvbVBvcyA9IHRoaXMuZnJvbVBvcy5nZXRBbm5vdGF0ZWRTdHJpbmcoKTtcclxuICAgIGNvbnN0IHRvUG9zID0gdGhpcy50b1Bvcy5nZXRBbm5vdGF0ZWRTdHJpbmcoKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmNvbnRlbnQ7XHJcbiAgICByZXR1cm4gYCR7cGFyZW50fS5FRElUKCR7ZnJvbVBvc30sJHt0b1Bvc30sJHtjb250ZW50fSlgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEZyb21Qb3NgIHJldHVybnMgdGhlIHN0YXJ0IHBvaW50IG9mIHRoZSBlZGl0aW5nIHJhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGcm9tUG9zKCk6IFJHQVRyZWVTcGxpdE5vZGVQb3Mge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJvbVBvcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRUb1Bvc2AgcmV0dXJucyB0aGUgZW5kIHBvaW50IG9mIHRoZSBlZGl0aW5nIHJhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUb1BvcygpOiBSR0FUcmVlU3BsaXROb2RlUG9zIHtcclxuICAgIHJldHVybiB0aGlzLnRvUG9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldENvbnRlbnRgIHJldHVybnMgdGhlIGNvbnRlbnQgb2YgRWRpdC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29udGVudCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRNYXhDcmVhdGVkQXRNYXBCeUFjdG9yYCByZXR1cm5zIHRoZSBtYXAgdGhhdCBzdG9yZXMgdGhlIGxhdGVzdCBjcmVhdGlvbiB0aW1lXHJcbiAgICogYnkgYWN0b3IgZm9yIHRoZSBub2RlcyBpbmNsdWRlZCBpbiB0aGUgZWRpdGluZyByYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWF4Q3JlYXRlZEF0TWFwQnlBY3RvcigpOiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXhDcmVhdGVkQXRNYXBCeUFjdG9yO1xyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05FbGVtZW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vZWxlbWVudCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IEpTT05QcmltaXRpdmUgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9wcmltaXRpdmUnO1xyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBDb3VudGVySW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9jb3VudGVyJztcclxuXHJcbi8qKlxyXG4gKiBgSW5jcmVhc2VPcGVyYXRpb25gIHJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHRoYXQgaW5jcmVtZW50cyBhIG51bWVyaWMgdmFsdWUgdG8gQ291bnRlci5cclxuICogQW1vbmcgUHJpbWl0aXZlcywgbnVtZXJpYyB0eXBlcyBJbnRlZ2VyLCBMb25nLCBhbmQgRG91YmxlIGFyZSB1c2VkIGFzIHZhbHVlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbmNyZWFzZU9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgcHJpdmF0ZSB2YWx1ZTogSlNPTkVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgdmFsdWU6IEpTT05FbGVtZW50LFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApIHtcclxuICAgIHN1cGVyKHBhcmVudENyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEluY3JlYXNlT3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgdmFsdWU6IEpTT05FbGVtZW50LFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBJbmNyZWFzZU9wZXJhdGlvbiB7XHJcbiAgICByZXR1cm4gbmV3IEluY3JlYXNlT3BlcmF0aW9uKHBhcmVudENyZWF0ZWRBdCwgdmFsdWUsIGV4ZWN1dGVkQXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGV4ZWN1dGVgIGV4ZWN1dGVzIHRoaXMgb3BlcmF0aW9uIG9uIHRoZSBnaXZlbiBkb2N1bWVudChgcm9vdGApLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRlKHJvb3Q6IEpTT05Sb290KTogdm9pZCB7XHJcbiAgICBjb25zdCBwYXJlbnRPYmplY3QgPSByb290LmZpbmRCeUNyZWF0ZWRBdCh0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpKTtcclxuICAgIGlmIChwYXJlbnRPYmplY3QgaW5zdGFuY2VvZiBDb3VudGVySW50ZXJuYWwpIHtcclxuICAgICAgY29uc3QgY291bnRlciA9IHBhcmVudE9iamVjdCBhcyBDb3VudGVySW50ZXJuYWw7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZS5kZWVwY29weSgpIGFzIEpTT05QcmltaXRpdmU7XHJcbiAgICAgIGNvdW50ZXIuaW5jcmVhc2UodmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFwYXJlbnRPYmplY3QpIHtcclxuICAgICAgICBsb2dnZXIuZmF0YWwoYGZhaWwgdG8gZmluZCAke3RoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCl9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBleGVjdXRlLCBvbmx5IENvdW50ZXIgY2FuIGV4ZWN1dGUgaW5jcmVhc2VgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFZmZlY3RlZENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgdGltZSBvZiB0aGUgZWZmZWN0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RWZmZWN0ZWRDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpLmdldEFubm90YXRlZFN0cmluZygpfS5JTkNSRUFTRWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0VmFsdWVgIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRWYWx1ZSgpOiBKU09ORWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHsgSlNPTlJvb3QgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yb290JztcclxuaW1wb3J0IHsgQXJyYXlJbnRlcm5hbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2FycmF5JztcclxuaW1wb3J0IHsgT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9vcGVyYXRpb24nO1xyXG5cclxuLyoqXHJcbiAqIGBNb3ZlT3BlcmF0aW9uYCBpcyBhbiBvcGVyYXRpb24gcmVwcmVzZW50aW5nIG1vdmluZyBhbiBlbGVtZW50IHRvIGFuIEFycmF5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vdmVPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xyXG4gIHByaXZhdGUgcHJldkNyZWF0ZWRBdDogVGltZVRpY2tldDtcclxuICBwcml2YXRlIGNyZWF0ZWRBdDogVGltZVRpY2tldDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBwcmV2Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgY3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApIHtcclxuICAgIHN1cGVyKHBhcmVudENyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgICB0aGlzLnByZXZDcmVhdGVkQXQgPSBwcmV2Q3JlYXRlZEF0O1xyXG4gICAgdGhpcy5jcmVhdGVkQXQgPSBjcmVhdGVkQXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlYCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1vdmVPcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBwcmV2Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgY3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiBNb3ZlT3BlcmF0aW9uIHtcclxuICAgIHJldHVybiBuZXcgTW92ZU9wZXJhdGlvbihcclxuICAgICAgcGFyZW50Q3JlYXRlZEF0LFxyXG4gICAgICBwcmV2Q3JlYXRlZEF0LFxyXG4gICAgICBjcmVhdGVkQXQsXHJcbiAgICAgIGV4ZWN1dGVkQXQsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGV4ZWN1dGVgIGV4ZWN1dGVzIHRoaXMgb3BlcmF0aW9uIG9uIHRoZSBnaXZlbiBkb2N1bWVudChgcm9vdGApLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRlKHJvb3Q6IEpTT05Sb290KTogdm9pZCB7XHJcbiAgICBjb25zdCBwYXJlbnRPYmplY3QgPSByb290LmZpbmRCeUNyZWF0ZWRBdCh0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpKTtcclxuICAgIGlmIChwYXJlbnRPYmplY3QgaW5zdGFuY2VvZiBBcnJheUludGVybmFsKSB7XHJcbiAgICAgIGNvbnN0IGFycmF5ID0gcGFyZW50T2JqZWN0IGFzIEFycmF5SW50ZXJuYWw7XHJcbiAgICAgIGFycmF5Lm1vdmVBZnRlcihcclxuICAgICAgICB0aGlzLnByZXZDcmVhdGVkQXQhLFxyXG4gICAgICAgIHRoaXMuY3JlYXRlZEF0LFxyXG4gICAgICAgIHRoaXMuZ2V0RXhlY3V0ZWRBdCgpLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFwYXJlbnRPYmplY3QpIHtcclxuICAgICAgICBsb2dnZXIuZmF0YWwoYGZhaWwgdG8gZmluZCAke3RoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCl9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBleGVjdXRlLCBvbmx5IGFycmF5IGNhbiBleGVjdXRlIGFkZGApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEVmZmVjdGVkQ3JlYXRlZEF0YCByZXR1cm5zIHRoZSB0aW1lIG9mIHRoZSBlZmZlY3RlZCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFZmZlY3RlZENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZWRBdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpLmdldEFubm90YXRlZFN0cmluZygpfS5NT1ZgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFByZXZDcmVhdGVkQXRgIHJldHVybnMgdGhlIGNyZWF0aW9uIHRpbWUgb2YgcHJldmlvdXMgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJldkNyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLnByZXZDcmVhdGVkQXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q3JlYXRlZEF0YCByZXR1cm5zIHRoZSBjcmVhdGlvbiB0aW1lIG9mIHRoZSB0YXJnZXQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q3JlYXRlZEF0KCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlZEF0O1xyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFjdG9ySUQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS9hY3Rvcl9pZCc7XHJcbmltcG9ydCB7IFRpbWVUaWNrZXQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvdGltZS90aWNrZXQnO1xyXG5pbXBvcnQgeyBKU09OUm9vdCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3Jvb3QnO1xyXG5cclxuLyoqXHJcbiAqIGBPcGVyYXRpb25gIHJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHRvIGJlIGV4ZWN1dGVkIG9uIGEgZG9jdW1lbnQuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgT3BlcmF0aW9uIHtcclxuICBwcml2YXRlIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldDtcclxuICBwcml2YXRlIGV4ZWN1dGVkQXQ6IFRpbWVUaWNrZXQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCwgZXhlY3V0ZWRBdDogVGltZVRpY2tldCkge1xyXG4gICAgdGhpcy5wYXJlbnRDcmVhdGVkQXQgPSBwYXJlbnRDcmVhdGVkQXQ7XHJcbiAgICB0aGlzLmV4ZWN1dGVkQXQgPSBleGVjdXRlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFBhcmVudENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgdG9cclxuICAgKiBleGVjdXRlIHRoZSBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGdldFBhcmVudENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudENyZWF0ZWRBdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFeGVjdXRlZEF0YCByZXR1cm5zIGV4ZWN1dGlvbiB0aW1lIG9mIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFeGVjdXRlZEF0KCk6IFRpbWVUaWNrZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZWRBdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRBY3RvcmAgc2V0cyB0aGUgZ2l2ZW4gYWN0b3IgdG8gdGhpcyBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHNldEFjdG9yKGFjdG9ySUQ6IEFjdG9ySUQpOiB2b2lkIHtcclxuICAgIHRoaXMuZXhlY3V0ZWRBdCA9IHRoaXMuZXhlY3V0ZWRBdC5zZXRBY3RvcihhY3RvcklEKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFZmZlY3RlZENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgdGltZSBvZiB0aGUgZWZmZWN0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RWZmZWN0ZWRDcmVhdGVkQXQoKTogVGltZVRpY2tldDtcclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBtZXRhIGRhdGEuXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldEFubm90YXRlZFN0cmluZygpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGBleGVjdXRlYCBleGVjdXRlcyB0aGlzIG9wZXJhdGlvbiBvbiB0aGUgZ2l2ZW4gZG9jdW1lbnQoYHJvb3RgKS5cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZXhlY3V0ZShyb290OiBKU09OUm9vdCk6IHZvaWQ7XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHsgSlNPTlJvb3QgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yb290JztcclxuaW1wb3J0IHsgT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBKU09OQ29udGFpbmVyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vZWxlbWVudCc7XHJcblxyXG4vKipcclxuICogYFJlbW92ZU9wZXJhdGlvbmAgaXMgYW4gb3BlcmF0aW9uIHJlcHJlc2VudGluZyByZW1vdmVzIGFuIGVsZW1lbnQgZnJvbSBDb250YWluZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVtb3ZlT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uIHtcclxuICBwcml2YXRlIGNyZWF0ZWRBdDogVGltZVRpY2tldDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICkge1xyXG4gICAgc3VwZXIocGFyZW50Q3JlYXRlZEF0LCBleGVjdXRlZEF0KTtcclxuICAgIHRoaXMuY3JlYXRlZEF0ID0gY3JlYXRlZEF0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZW1vdmVPcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IFJlbW92ZU9wZXJhdGlvbiB7XHJcbiAgICByZXR1cm4gbmV3IFJlbW92ZU9wZXJhdGlvbihwYXJlbnRDcmVhdGVkQXQsIGNyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZXhlY3V0ZWAgZXhlY3V0ZXMgdGhpcyBvcGVyYXRpb24gb24gdGhlIGdpdmVuIGRvY3VtZW50KGByb290YCkuXHJcbiAgICovXHJcbiAgcHVibGljIGV4ZWN1dGUocm9vdDogSlNPTlJvb3QpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBhcmVudE9iamVjdCA9IHJvb3QuZmluZEJ5Q3JlYXRlZEF0KHRoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpO1xyXG4gICAgaWYgKHBhcmVudE9iamVjdCBpbnN0YW5jZW9mIEpTT05Db250YWluZXIpIHtcclxuICAgICAgY29uc3Qgb2JqID0gcGFyZW50T2JqZWN0O1xyXG4gICAgICBjb25zdCBlbGVtID0gb2JqLmRlbGV0ZSh0aGlzLmNyZWF0ZWRBdCwgdGhpcy5nZXRFeGVjdXRlZEF0KCkpO1xyXG4gICAgICByb290LnJlZ2lzdGVyUmVtb3ZlZEVsZW1lbnQoZWxlbSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXBhcmVudE9iamVjdCkge1xyXG4gICAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBmaW5kICR7dGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbG9nZ2VyLmZhdGFsKGBvbmx5IG9iamVjdCBhbmQgYXJyYXkgY2FuIGV4ZWN1dGUgcmVtb3ZlOiAke3BhcmVudE9iamVjdH1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFZmZlY3RlZENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgdGltZSBvZiB0aGUgZWZmZWN0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RWZmZWN0ZWRDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpLmdldEFubm90YXRlZFN0cmluZygpfS5SRU1PVkVgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZWRBdDtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHsgSlNPTlJvb3QgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yb290JztcclxuaW1wb3J0IHsgUkdBVHJlZVNwbGl0Tm9kZVBvcyB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX3NwbGl0JztcclxuaW1wb3J0IHsgUmljaFRleHRJbnRlcm5hbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JpY2hfdGV4dCc7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vb3BlcmF0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBgUmljaEVkaXRPcGVyYXRpb25gIGlzIGFuIG9wZXJhdGlvbiByZXByZXNlbnRpbmcgZWRpdGluZyBSaWNoVGV4dC4gTW9zdCBvZiB0aGUgc2FtZSBhc1xyXG4gKiBFZGl0LCBidXQgd2l0aCBhZGRpdGlvbmFsIHN0eWxlIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmljaEVkaXRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xyXG4gIHByaXZhdGUgZnJvbVBvczogUkdBVHJlZVNwbGl0Tm9kZVBvcztcclxuICBwcml2YXRlIHRvUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zO1xyXG4gIHByaXZhdGUgbWF4Q3JlYXRlZEF0TWFwQnlBY3RvcjogTWFwPHN0cmluZywgVGltZVRpY2tldD47XHJcbiAgcHJpdmF0ZSBjb250ZW50OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBhdHRyaWJ1dGVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIGZyb21Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICB0b1BvczogUkdBVHJlZVNwbGl0Tm9kZVBvcyxcclxuICAgIG1heENyZWF0ZWRBdE1hcEJ5QWN0b3I6IE1hcDxzdHJpbmcsIFRpbWVUaWNrZXQ+LFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgYXR0cmlidXRlczogTWFwPHN0cmluZywgc3RyaW5nPixcclxuICAgIGV4ZWN1dGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKSB7XHJcbiAgICBzdXBlcihwYXJlbnRDcmVhdGVkQXQsIGV4ZWN1dGVkQXQpO1xyXG4gICAgdGhpcy5mcm9tUG9zID0gZnJvbVBvcztcclxuICAgIHRoaXMudG9Qb3MgPSB0b1BvcztcclxuICAgIHRoaXMubWF4Q3JlYXRlZEF0TWFwQnlBY3RvciA9IG1heENyZWF0ZWRBdE1hcEJ5QWN0b3I7XHJcbiAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmljaEVkaXRPcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBmcm9tUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgdG9Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yOiBNYXA8c3RyaW5nLCBUaW1lVGlja2V0PixcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIGF0dHJpYnV0ZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4sXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IFJpY2hFZGl0T3BlcmF0aW9uIHtcclxuICAgIHJldHVybiBuZXcgUmljaEVkaXRPcGVyYXRpb24oXHJcbiAgICAgIHBhcmVudENyZWF0ZWRBdCxcclxuICAgICAgZnJvbVBvcyxcclxuICAgICAgdG9Qb3MsXHJcbiAgICAgIG1heENyZWF0ZWRBdE1hcEJ5QWN0b3IsXHJcbiAgICAgIGNvbnRlbnQsXHJcbiAgICAgIGF0dHJpYnV0ZXMsXHJcbiAgICAgIGV4ZWN1dGVkQXQsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGV4ZWN1dGVgIGV4ZWN1dGVzIHRoaXMgb3BlcmF0aW9uIG9uIHRoZSBnaXZlbiBkb2N1bWVudChgcm9vdGApLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRlKHJvb3Q6IEpTT05Sb290KTogdm9pZCB7XHJcbiAgICBjb25zdCBwYXJlbnRPYmplY3QgPSByb290LmZpbmRCeUNyZWF0ZWRBdCh0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpKTtcclxuICAgIGlmIChwYXJlbnRPYmplY3QgaW5zdGFuY2VvZiBSaWNoVGV4dEludGVybmFsKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBwYXJlbnRPYmplY3QgYXMgUmljaFRleHRJbnRlcm5hbDtcclxuICAgICAgdGV4dC5lZGl0SW50ZXJuYWwoXHJcbiAgICAgICAgW3RoaXMuZnJvbVBvcywgdGhpcy50b1Bvc10sXHJcbiAgICAgICAgdGhpcy5jb250ZW50LFxyXG4gICAgICAgIHRoaXMuZ2V0RXhlY3V0ZWRBdCgpLFxyXG4gICAgICAgIE9iamVjdC5mcm9tRW50cmllcyh0aGlzLmF0dHJpYnV0ZXMpLFxyXG4gICAgICAgIHRoaXMubWF4Q3JlYXRlZEF0TWFwQnlBY3RvcixcclxuICAgICAgKTtcclxuICAgICAgaWYgKCF0aGlzLmZyb21Qb3MuZXF1YWxzKHRoaXMudG9Qb3MpKSB7XHJcbiAgICAgICAgcm9vdC5yZWdpc3RlclRleHRXaXRoR2FyYmFnZSh0ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFwYXJlbnRPYmplY3QpIHtcclxuICAgICAgICBsb2dnZXIuZmF0YWwoYGZhaWwgdG8gZmluZCAke3RoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCl9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBleGVjdXRlLCBvbmx5IFJpY2hUZXh0IGNhbiBleGVjdXRlIGVkaXRgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFZmZlY3RlZENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgdGltZSBvZiB0aGUgZWZmZWN0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RWZmZWN0ZWRDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCkuZ2V0QW5ub3RhdGVkU3RyaW5nKCk7XHJcbiAgICBjb25zdCBmcm9tUG9zID0gdGhpcy5mcm9tUG9zLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgY29uc3QgdG9Qb3MgPSB0aGlzLnRvUG9zLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgY29uc3QgY29udGVudCA9IHRoaXMuY29udGVudDtcclxuICAgIHJldHVybiBgJHtwYXJlbnR9LkVESVQoJHtmcm9tUG9zfSwke3RvUG9zfSwke2NvbnRlbnR9KWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RnJvbVBvc2AgcmV0dXJucyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGVkaXRpbmcgcmFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZyb21Qb3MoKTogUkdBVHJlZVNwbGl0Tm9kZVBvcyB7XHJcbiAgICByZXR1cm4gdGhpcy5mcm9tUG9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFRvUG9zYCByZXR1cm5zIHRoZSBlbmQgcG9pbnQgb2YgdGhlIGVkaXRpbmcgcmFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRvUG9zKCk6IFJHQVRyZWVTcGxpdE5vZGVQb3Mge1xyXG4gICAgcmV0dXJuIHRoaXMudG9Qb3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0Q29udGVudGAgcmV0dXJucyB0aGUgY29udGVudCBvZiBSaWNoRWRpdC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29udGVudCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBdHRyaWJ1dGVzYCByZXR1cm5zIHRoZSBhdHRyaWJ1dGVzIG9mIHRoaXMgRWRpdC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QXR0cmlidXRlcygpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMgfHwgbmV3IE1hcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldE1heENyZWF0ZWRBdE1hcEJ5QWN0b3JgIHJldHVybnMgdGhlIG1hcCB0aGF0IHN0b3JlcyB0aGUgbGF0ZXN0IGNyZWF0aW9uIHRpbWVcclxuICAgKiBieSBhY3RvciBmb3IgdGhlIG5vZGVzIGluY2x1ZGVkIGluIHRoZSBlZGl0aW5nIHJhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXhDcmVhdGVkQXRNYXBCeUFjdG9yKCk6IE1hcDxzdHJpbmcsIFRpbWVUaWNrZXQ+IHtcclxuICAgIHJldHVybiB0aGlzLm1heENyZWF0ZWRBdE1hcEJ5QWN0b3I7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IFJHQVRyZWVTcGxpdE5vZGVQb3MgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yZ2FfdHJlZV9zcGxpdCc7XHJcbmltcG9ydCB7IFBsYWluVGV4dEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcGxhaW5fdGV4dCc7XHJcbmltcG9ydCB7IFJpY2hUZXh0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yaWNoX3RleHQnO1xyXG5pbXBvcnQgeyBPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL29wZXJhdGlvbic7XHJcblxyXG4vKipcclxuICogIGBTZWxlY3RPcGVyYXRpb25gIHJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHRoYXQgc2VsZWN0cyBhbiBhcmVhIGluIHRoZSB0ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlbGVjdE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgcHJpdmF0ZSBmcm9tUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zO1xyXG4gIHByaXZhdGUgdG9Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3M7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgZnJvbVBvczogUkdBVHJlZVNwbGl0Tm9kZVBvcyxcclxuICAgIHRvUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgZXhlY3V0ZWRBdDogVGltZVRpY2tldCxcclxuICApIHtcclxuICAgIHN1cGVyKHBhcmVudENyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgICB0aGlzLmZyb21Qb3MgPSBmcm9tUG9zO1xyXG4gICAgdGhpcy50b1BvcyA9IHRvUG9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBTZWxlY3RPcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBmcm9tUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zLFxyXG4gICAgdG9Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IFNlbGVjdE9wZXJhdGlvbiB7XHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdE9wZXJhdGlvbihwYXJlbnRDcmVhdGVkQXQsIGZyb21Qb3MsIHRvUG9zLCBleGVjdXRlZEF0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBleGVjdXRlYCBleGVjdXRlcyB0aGlzIG9wZXJhdGlvbiBvbiB0aGUgZ2l2ZW4gZG9jdW1lbnQoYHJvb3RgKS5cclxuICAgKi9cclxuICBwdWJsaWMgZXhlY3V0ZShyb290OiBKU09OUm9vdCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyZW50T2JqZWN0ID0gcm9vdC5maW5kQnlDcmVhdGVkQXQodGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKSk7XHJcbiAgICBpZiAocGFyZW50T2JqZWN0IGluc3RhbmNlb2YgUGxhaW5UZXh0SW50ZXJuYWwpIHtcclxuICAgICAgY29uc3QgdGV4dCA9IHBhcmVudE9iamVjdCBhcyBQbGFpblRleHRJbnRlcm5hbDtcclxuICAgICAgdGV4dC5zZWxlY3RJbnRlcm5hbChbdGhpcy5mcm9tUG9zLCB0aGlzLnRvUG9zXSwgdGhpcy5nZXRFeGVjdXRlZEF0KCkpO1xyXG4gICAgfSBlbHNlIGlmIChwYXJlbnRPYmplY3QgaW5zdGFuY2VvZiBSaWNoVGV4dEludGVybmFsKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBwYXJlbnRPYmplY3QgYXMgUmljaFRleHRJbnRlcm5hbDtcclxuICAgICAgdGV4dC5zZWxlY3RJbnRlcm5hbChbdGhpcy5mcm9tUG9zLCB0aGlzLnRvUG9zXSwgdGhpcy5nZXRFeGVjdXRlZEF0KCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFwYXJlbnRPYmplY3QpIHtcclxuICAgICAgICBsb2dnZXIuZmF0YWwoYGZhaWwgdG8gZmluZCAke3RoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCl9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvZ2dlci5mYXRhbChcclxuICAgICAgICBgZmFpbCB0byBleGVjdXRlLCBvbmx5IFBsYWluVGV4dCwgUmljaFRleHQgY2FuIGV4ZWN1dGUgc2VsZWN0YCxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFZmZlY3RlZENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgdGltZSBvZiB0aGUgZWZmZWN0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RWZmZWN0ZWRDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCkuZ2V0QW5ub3RhdGVkU3RyaW5nKCk7XHJcbiAgICBjb25zdCBmcm9tUG9zID0gdGhpcy5mcm9tUG9zLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgY29uc3QgdG9Qb3MgPSB0aGlzLnRvUG9zLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgcmV0dXJuIGAke3BhcmVudH0uU0VMVCgke2Zyb21Qb3N9LCR7dG9Qb3N9KWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RnJvbVBvc2AgcmV0dXJucyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGVkaXRpbmcgcmFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZyb21Qb3MoKTogUkdBVHJlZVNwbGl0Tm9kZVBvcyB7XHJcbiAgICByZXR1cm4gdGhpcy5mcm9tUG9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFRvUG9zYCByZXR1cm5zIHRoZSBlbmQgcG9pbnQgb2YgdGhlIGVkaXRpbmcgcmFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRvUG9zKCk6IFJHQVRyZWVTcGxpdE5vZGVQb3Mge1xyXG4gICAgcmV0dXJuIHRoaXMudG9Qb3M7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05FbGVtZW50IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vZWxlbWVudCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IE9iamVjdEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vb2JqZWN0JztcclxuaW1wb3J0IHsgT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9vcGVyYXRpb24nO1xyXG5cclxuLyoqXHJcbiAqIGBTZXRPcGVyYXRpb25gIHJlcHJlc2VudHMgYW4gb3BlcmF0aW9uIHRoYXQgc3RvcmVzIHRoZSB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZVxyXG4gKiBnaXZlbiBrZXkgaW4gdGhlIE9iamVjdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xyXG4gIHByaXZhdGUga2V5OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSB2YWx1ZTogSlNPTkVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAga2V5OiBzdHJpbmcsXHJcbiAgICB2YWx1ZTogSlNPTkVsZW1lbnQsXHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICkge1xyXG4gICAgc3VwZXIocGFyZW50Q3JlYXRlZEF0LCBleGVjdXRlZEF0KTtcclxuICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBTZXRPcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIHZhbHVlOiBKU09ORWxlbWVudCxcclxuICAgIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIGV4ZWN1dGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogU2V0T3BlcmF0aW9uIHtcclxuICAgIHJldHVybiBuZXcgU2V0T3BlcmF0aW9uKGtleSwgdmFsdWUsIHBhcmVudENyZWF0ZWRBdCwgZXhlY3V0ZWRBdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZXhlY3V0ZWAgZXhlY3V0ZXMgdGhpcyBvcGVyYXRpb24gb24gdGhlIGdpdmVuIGRvY3VtZW50KGByb290YCkuXHJcbiAgICovXHJcbiAgcHVibGljIGV4ZWN1dGUocm9vdDogSlNPTlJvb3QpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBhcmVudE9iamVjdCA9IHJvb3QuZmluZEJ5Q3JlYXRlZEF0KHRoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpO1xyXG4gICAgaWYgKHBhcmVudE9iamVjdCBpbnN0YW5jZW9mIE9iamVjdEludGVybmFsKSB7XHJcbiAgICAgIGNvbnN0IG9iaiA9IHBhcmVudE9iamVjdCBhcyBPYmplY3RJbnRlcm5hbDtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlLmRlZXBjb3B5KCk7XHJcbiAgICAgIG9iai5zZXQodGhpcy5rZXksIHZhbHVlKTtcclxuICAgICAgcm9vdC5yZWdpc3RlckVsZW1lbnQodmFsdWUsIG9iaik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXBhcmVudE9iamVjdCkge1xyXG4gICAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBmaW5kICR7dGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbG9nZ2VyLmZhdGFsKGBmYWlsIHRvIGV4ZWN1dGUsIG9ubHkgb2JqZWN0IGNhbiBleGVjdXRlIHNldGApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEVmZmVjdGVkQ3JlYXRlZEF0YCByZXR1cm5zIHRoZSB0aW1lIG9mIHRoZSBlZmZlY3RlZCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFZmZlY3RlZENyZWF0ZWRBdCgpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlLmdldENyZWF0ZWRBdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBtZXRhIGRhdGEuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFubm90YXRlZFN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCkuZ2V0QW5ub3RhdGVkU3RyaW5nKCl9LlNFVGA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0S2V5YCByZXR1cm5zIHRoZSBrZXkgb2YgdGhpcyBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGdldEtleSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMua2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldFZhbHVlYCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGlzIG9wZXJhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWUoKTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IEpTT05Sb290IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcm9vdCc7XHJcbmltcG9ydCB7IFJHQVRyZWVTcGxpdE5vZGVQb3MgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yZ2FfdHJlZV9zcGxpdCc7XHJcbmltcG9ydCB7IFJpY2hUZXh0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yaWNoX3RleHQnO1xyXG5pbXBvcnQgeyBPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL29wZXJhdGlvbic7XHJcblxyXG4vKipcclxuICogIGBTdHlsZU9wZXJhdGlvbmAgaXMgYW4gb3BlcmF0aW9uIGFwcGxpZXMgdGhlIHN0eWxlIG9mIHRoZSBnaXZlbiByYW5nZSB0byBSaWNoVGV4dC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHlsZU9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgcHJpdmF0ZSBmcm9tUG9zOiBSR0FUcmVlU3BsaXROb2RlUG9zO1xyXG4gIHByaXZhdGUgdG9Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3M7XHJcbiAgcHJpdmF0ZSBhdHRyaWJ1dGVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIGZyb21Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICB0b1BvczogUkdBVHJlZVNwbGl0Tm9kZVBvcyxcclxuICAgIGF0dHJpYnV0ZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4sXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICkge1xyXG4gICAgc3VwZXIocGFyZW50Q3JlYXRlZEF0LCBleGVjdXRlZEF0KTtcclxuICAgIHRoaXMuZnJvbVBvcyA9IGZyb21Qb3M7XHJcbiAgICB0aGlzLnRvUG9zID0gdG9Qb3M7XHJcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBTdHlsZU9wZXJhdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcclxuICAgIHBhcmVudENyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICAgIGZyb21Qb3M6IFJHQVRyZWVTcGxpdE5vZGVQb3MsXHJcbiAgICB0b1BvczogUkdBVHJlZVNwbGl0Tm9kZVBvcyxcclxuICAgIGF0dHJpYnV0ZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4sXHJcbiAgICBleGVjdXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IFN0eWxlT3BlcmF0aW9uIHtcclxuICAgIHJldHVybiBuZXcgU3R5bGVPcGVyYXRpb24oXHJcbiAgICAgIHBhcmVudENyZWF0ZWRBdCxcclxuICAgICAgZnJvbVBvcyxcclxuICAgICAgdG9Qb3MsXHJcbiAgICAgIGF0dHJpYnV0ZXMsXHJcbiAgICAgIGV4ZWN1dGVkQXQsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGV4ZWN1dGVgIGV4ZWN1dGVzIHRoaXMgb3BlcmF0aW9uIG9uIHRoZSBnaXZlbiBkb2N1bWVudChgcm9vdGApLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRlKHJvb3Q6IEpTT05Sb290KTogdm9pZCB7XHJcbiAgICBjb25zdCBwYXJlbnRPYmplY3QgPSByb290LmZpbmRCeUNyZWF0ZWRBdCh0aGlzLmdldFBhcmVudENyZWF0ZWRBdCgpKTtcclxuICAgIGlmIChwYXJlbnRPYmplY3QgaW5zdGFuY2VvZiBSaWNoVGV4dEludGVybmFsKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBwYXJlbnRPYmplY3QgYXMgUmljaFRleHRJbnRlcm5hbDtcclxuICAgICAgdGV4dC5zZXRTdHlsZUludGVybmFsKFxyXG4gICAgICAgIFt0aGlzLmZyb21Qb3MsIHRoaXMudG9Qb3NdLFxyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA/IE9iamVjdC5mcm9tRW50cmllcyh0aGlzLmF0dHJpYnV0ZXMpIDoge30sXHJcbiAgICAgICAgdGhpcy5nZXRFeGVjdXRlZEF0KCksXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXBhcmVudE9iamVjdCkge1xyXG4gICAgICAgIGxvZ2dlci5mYXRhbChgZmFpbCB0byBmaW5kICR7dGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbG9nZ2VyLmZhdGFsKGBmYWlsIHRvIGV4ZWN1dGUsIG9ubHkgUGxhaW5UZXh0IGNhbiBleGVjdXRlIGVkaXRgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRFZmZlY3RlZENyZWF0ZWRBdGAgcmV0dXJucyB0aGUgdGltZSBvZiB0aGUgZWZmZWN0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RWZmZWN0ZWRDcmVhdGVkQXQoKTogVGltZVRpY2tldCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBbm5vdGF0ZWRTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbWV0YSBkYXRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbm5vdGF0ZWRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q3JlYXRlZEF0KCkuZ2V0QW5ub3RhdGVkU3RyaW5nKCk7XHJcbiAgICBjb25zdCBmcm9tUG9zID0gdGhpcy5mcm9tUG9zLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgY29uc3QgdG9Qb3MgPSB0aGlzLnRvUG9zLmdldEFubm90YXRlZFN0cmluZygpO1xyXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcclxuICAgIHJldHVybiBgJHtwYXJlbnR9LlNUWUwoJHtmcm9tUG9zfSwke3RvUG9zfSwke0pTT04uc3RyaW5naWZ5KGF0dHJpYnV0ZXMpfSlgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEZyb21Qb3NgIHJldHVybnMgdGhlIHN0YXJ0IHBvaW50IG9mIHRoZSBlZGl0aW5nIHJhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGcm9tUG9zKCk6IFJHQVRyZWVTcGxpdE5vZGVQb3Mge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJvbVBvcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRUb1Bvc2AgcmV0dXJucyB0aGUgZW5kIHBvaW50IG9mIHRoZSBlZGl0aW5nIHJhbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUb1BvcygpOiBSR0FUcmVlU3BsaXROb2RlUG9zIHtcclxuICAgIHJldHVybiB0aGlzLnRvUG9zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEF0dHJpYnV0ZXNgIHJldHVybnMgdGhlIGF0dHJpYnV0ZXMgb2YgdGhpcyBvcGVyYXRpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGdldEF0dHJpYnV0ZXMoKTogTWFwPHN0cmluZywgc3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzO1xyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGxvZ2dlciwgTG9nTGV2ZWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuaW1wb3J0IHsgQWRkT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9hZGRfb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgTW92ZU9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vbW92ZV9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBSZW1vdmVPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL3JlbW92ZV9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBDaGFuZ2VDb250ZXh0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jb250ZXh0JztcclxuaW1wb3J0IHsgSlNPTkVsZW1lbnQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuaW1wb3J0IHsgT2JqZWN0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9vYmplY3QnO1xyXG5pbXBvcnQgeyBBcnJheUludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vYXJyYXknO1xyXG5pbXBvcnQge1xyXG4gIEpTT05QcmltaXRpdmUsXHJcbiAgUHJpbWl0aXZlVmFsdWUsXHJcbn0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcHJpbWl0aXZlJztcclxuaW1wb3J0IHsgT2JqZWN0UHJveHkgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvcHJveHkvb2JqZWN0X3Byb3h5JztcclxuaW1wb3J0IHsgdG9Qcm94eSB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9wcm94eSc7XHJcblxyXG4vKipcclxuICogYEpTT05BcnJheWAgcmVwcmVzZW50cyBKU09OIGFycmF5LCBidXQgdW5saWtlIHJlZ3VsYXIgSlNPTiwgaXQgaGFzIHRpbWVcclxuICogdGlja2V0cyBjcmVhdGVkIGJ5IGEgbG9naWNhbCBjbG9jayB0byByZXNvbHZlIGNvbmZsaWN0cy5cclxuICovXHJcbmV4cG9ydCB0eXBlIEpTT05BcnJheTxUID0gdW5rbm93bj4gPSB7XHJcbiAgLyoqXHJcbiAgICogYGdldElEYCByZXR1cm5zIHRoZSBJRCwgYFRpbWVUaWNrZXRgIG9mIHRoaXMgT2JqZWN0LlxyXG4gICAqL1xyXG4gIGdldElEPygpOiBUaW1lVGlja2V0O1xyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RWxlbWVudEJ5SURgIHJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBnaXZlbiBJRC5cclxuICAgKi9cclxuICBnZXRFbGVtZW50QnlJRD8oY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQgJiBUO1xyXG5cclxuICAvKipcclxuICAgKiBgZ2V0RWxlbWVudEJ5SW5kZXhgIHJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBnaXZlbiBpbmRleC5cclxuICAgKi9cclxuICBnZXRFbGVtZW50QnlJbmRleD8oaW5kZXg6IG51bWJlcik6IEpTT05FbGVtZW50ICYgVDtcclxuXHJcbiAgLyoqXHJcbiAgICogYGdldExhc3RgIHJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiB0aGlzIGFycmF5LlxyXG4gICAqL1xyXG4gIGdldExhc3Q/KCk6IEpTT05FbGVtZW50O1xyXG5cclxuICAvKipcclxuICAgKiBgZGVsZXRlQnlJRGAgZGVsZXRlcyB0aGUgZWxlbWVudCBvZiB0aGUgZ2l2ZW4gSUQuXHJcbiAgICovXHJcbiAgZGVsZXRlQnlJRD8oY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQgJiBUO1xyXG5cclxuICAvKipcclxuICAgKiBgaW5zZXJ0QmVmb3JlYCBpbnNlcnRzIGEgdmFsdWUgYmVmb3JlIHRoZSBnaXZlbiBuZXh0IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgaW5zZXJ0QmVmb3JlPyhuZXh0SUQ6IFRpbWVUaWNrZXQsIHZhbHVlOiBhbnkpOiBKU09ORWxlbWVudCAmIFQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnNlcnRBZnRlcmAgaW5zZXJ0cyBhIHZhbHVlIGFmdGVyIHRoZSBnaXZlbiBwcmV2aW91cyBlbGVtZW50LlxyXG4gICAqL1xyXG4gIGluc2VydEFmdGVyPyhwcmV2SUQ6IFRpbWVUaWNrZXQsIHZhbHVlOiBhbnkpOiBKU09ORWxlbWVudCAmIFQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIGBtb3ZlQmVmb3JlYCBtb3ZlcyB0aGUgZWxlbWVudCBiZWZvcmUgdGhlIGdpdmVuIG5leHQgZWxlbWVudC5cclxuICAgKi9cclxuICBtb3ZlQmVmb3JlPyhuZXh0SUQ6IFRpbWVUaWNrZXQsIGlkOiBUaW1lVGlja2V0KTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogYG1vdmVBZnRlcmAgbW92ZXMgdGhlIGVsZW1lbnQgYWZ0ZXIgdGhlIGdpdmVuIHByZXZpb3VzIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgbW92ZUFmdGVyPyhwcmV2SUQ6IFRpbWVUaWNrZXQsIGlkOiBUaW1lVGlja2V0KTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogYG1vdmVGcm9udGAgbW92ZXMgdGhlIGVsZW1lbnQgYmVmb3JlIHRoZSBmaXJzdCBlbGVtZW50LlxyXG4gICAqL1xyXG4gIG1vdmVGcm9udD8oaWQ6IFRpbWVUaWNrZXQpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBgbW92ZUxhc3RgIG1vdmVzIHRoZSBlbGVtZW50IGFmdGVyIHRoZSBsYXN0IGVsZW1lbnQuXHJcbiAgICovXHJcbiAgbW92ZUxhc3Q/KGlkOiBUaW1lVGlja2V0KTogdm9pZDtcclxufSAmIEFycmF5PFQ+O1xyXG5cclxuLyoqXHJcbiAqIGBpc051bWVyaWNTdHJpbmdgIGNoZWNrcyBpZiB2YWx1ZSBpcyBudW1lcmljIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIGlzTnVtZXJpY1N0cmluZyh2YWw6IGFueSk6IGJvb2xlYW4ge1xyXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB2YWwgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuICAgIHJldHVybiAhaXNOYU4odmFsIGFzIGFueSk7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBBcnJheVByb3h5YCBpcyBhIHByb3h5IHJlcHJlc2VudGluZyBBcnJheS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBcnJheVByb3h5IHtcclxuICBwcml2YXRlIGNvbnRleHQ6IENoYW5nZUNvbnRleHQ7XHJcbiAgcHJpdmF0ZSBoYW5kbGVyczogYW55O1xyXG4gIHByaXZhdGUgYXJyYXk6IEFycmF5SW50ZXJuYWw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENoYW5nZUNvbnRleHQsIGFycmF5OiBBcnJheUludGVybmFsKSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xyXG4gICAgdGhpcy5oYW5kbGVycyA9IHtcclxuICAgICAgZ2V0OiAoXHJcbiAgICAgICAgdGFyZ2V0OiBBcnJheUludGVybmFsLFxyXG4gICAgICAgIG1ldGhvZDoga2V5b2YgSlNPTkFycmF5PHVua25vd24+LFxyXG4gICAgICAgIHJlY2VpdmVyOiBhbnksXHJcbiAgICAgICk6IGFueSA9PiB7XHJcbiAgICAgICAgLy8gWW9ya2llIGV4dGVuc2lvbiBBUElcclxuICAgICAgICBpZiAobWV0aG9kID09PSAnZ2V0SUQnKSB7XHJcbiAgICAgICAgICByZXR1cm4gKCk6IFRpbWVUaWNrZXQgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmdldENyZWF0ZWRBdCgpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2dldEVsZW1lbnRCeUlEJykge1xyXG4gICAgICAgICAgcmV0dXJuIChjcmVhdGVkQXQ6IFRpbWVUaWNrZXQpOiBKU09ORWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0b1Byb3h5KGNvbnRleHQsIHRhcmdldC5nZXQoY3JlYXRlZEF0KSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAnZ2V0RWxlbWVudEJ5SW5kZXgnKSB7XHJcbiAgICAgICAgICByZXR1cm4gKGluZGV4OiBudW1iZXIpOiBKU09ORWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSB0YXJnZXQuZ2V0QnlJbmRleChpbmRleCk7XHJcbiAgICAgICAgICAgIGlmIChlbGVtIGluc3RhbmNlb2YgSlNPTlByaW1pdGl2ZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBlbGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0b1Byb3h5KGNvbnRleHQsIGVsZW0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2dldExhc3QnKSB7XHJcbiAgICAgICAgICByZXR1cm4gKCk6IEpTT05FbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRvUHJveHkoY29udGV4dCwgdGFyZ2V0LmdldExhc3QoKSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAnZGVsZXRlQnlJRCcpIHtcclxuICAgICAgICAgIHJldHVybiAoY3JlYXRlZEF0OiBUaW1lVGlja2V0KTogSlNPTkVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkZWxldGVkID0gQXJyYXlQcm94eS5kZWxldGVJbnRlcm5hbEJ5SUQoXHJcbiAgICAgICAgICAgICAgY29udGV4dCxcclxuICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgY3JlYXRlZEF0LFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gdG9Qcm94eShjb250ZXh0LCBkZWxldGVkKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdpbnNlcnRBZnRlcicpIHtcclxuICAgICAgICAgIHJldHVybiAocHJldklEOiBUaW1lVGlja2V0LCB2YWx1ZTogYW55KTogSlNPTkVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnNlcnRlZCA9IEFycmF5UHJveHkuaW5zZXJ0QWZ0ZXJJbnRlcm5hbChcclxuICAgICAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICBwcmV2SUQsXHJcbiAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiB0b1Byb3h5KGNvbnRleHQsIGluc2VydGVkKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdpbnNlcnRCZWZvcmUnKSB7XHJcbiAgICAgICAgICByZXR1cm4gKG5leHRJRDogVGltZVRpY2tldCwgdmFsdWU6IGFueSk6IEpTT05FbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5zZXJ0ZWQgPSBBcnJheVByb3h5Lmluc2VydEJlZm9yZUludGVybmFsKFxyXG4gICAgICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICAgICAgdGFyZ2V0LFxyXG4gICAgICAgICAgICAgIG5leHRJRCxcclxuICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRvUHJveHkoY29udGV4dCwgaW5zZXJ0ZWQpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ21vdmVCZWZvcmUnKSB7XHJcbiAgICAgICAgICByZXR1cm4gKG5leHRJRDogVGltZVRpY2tldCwgaWQ6IFRpbWVUaWNrZXQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgQXJyYXlQcm94eS5tb3ZlQmVmb3JlSW50ZXJuYWwoY29udGV4dCwgdGFyZ2V0LCBuZXh0SUQsIGlkKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICAvLyBKYXZhU2NyaXB0IE5hdGl2ZSBBUElcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ21vdmVBZnRlcicpIHtcclxuICAgICAgICAgIHJldHVybiAocHJldklEOiBUaW1lVGlja2V0LCBpZDogVGltZVRpY2tldCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBBcnJheVByb3h5Lm1vdmVBZnRlckludGVybmFsKGNvbnRleHQsIHRhcmdldCwgcHJldklELCBpZCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAnbW92ZUZyb250Jykge1xyXG4gICAgICAgICAgcmV0dXJuIChpZDogVGltZVRpY2tldCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBBcnJheVByb3h5Lm1vdmVGcm9udEludGVybmFsKGNvbnRleHQsIHRhcmdldCwgaWQpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ21vdmVMYXN0Jykge1xyXG4gICAgICAgICAgcmV0dXJuIChpZDogVGltZVRpY2tldCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBBcnJheVByb3h5Lm1vdmVMYXN0SW50ZXJuYWwoY29udGV4dCwgdGFyZ2V0LCBpZCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljU3RyaW5nKG1ldGhvZCkpIHtcclxuICAgICAgICAgIHJldHVybiB0b1Byb3h5KGNvbnRleHQsIHRhcmdldC5nZXRCeUluZGV4KCsobWV0aG9kIGFzIHN0cmluZykpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ3B1c2gnKSB7XHJcbiAgICAgICAgICByZXR1cm4gKHZhbHVlOiBhbnkpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAobG9nZ2VyLmlzRW5hYmxlZChMb2dMZXZlbC5Ucml2aWFsKSkge1xyXG4gICAgICAgICAgICAgIGxvZ2dlci50cml2aWFsKGBhcnJheS5wdXNoKCR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfSlgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5UHJveHkucHVzaEludGVybmFsKGNvbnRleHQsIHRhcmdldCwgdmFsdWUpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2ZpbHRlcicpIHtcclxuICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoXHJcbiAgICAgICAgICAgICAgZWxlbTogSlNPTkVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgaWR4OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgYXJyOiBBcnJheTxKU09ORWxlbWVudD4sXHJcbiAgICAgICAgICAgICkgPT4gQXJyYXk8SlNPTkVsZW1lbnQ+LFxyXG4gICAgICAgICAgKTogQXJyYXk8SlNPTkVsZW1lbnQ+ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGFyZ2V0KVxyXG4gICAgICAgICAgICAgIC5tYXAoKGUpID0+IHRvUHJveHkoY29udGV4dCwgZSkpXHJcbiAgICAgICAgICAgICAgLmZpbHRlcihjYWxsYmFjayk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAncmVkdWNlJykge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgY2FsbGJhY2s6IChhY2N1bXVsYXRvcjogYW55LCBjdXJyOiBKU09ORWxlbWVudCkgPT4gYW55LFxyXG4gICAgICAgICAgICBhY2N1bXVsYXRvcjogYW55LFxyXG4gICAgICAgICAgKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRhcmdldClcclxuICAgICAgICAgICAgICAubWFwKChlKSA9PiB0b1Byb3h5KGNvbnRleHQsIGUpKVxyXG4gICAgICAgICAgICAgIC5yZWR1Y2UoY2FsbGJhY2ssIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdsZW5ndGgnKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Lmxlbmd0aDtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdzeW1ib2wnICYmIG1ldGhvZCA9PT0gU3ltYm9sLml0ZXJhdG9yKSB7XHJcbiAgICAgICAgICByZXR1cm4gQXJyYXlQcm94eS5pdGVyYXRvckludGVybmFsLmJpbmQodGhpcywgY29udGV4dCwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRPRE8gd2UgbmVlZCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRoZSBjYXNlIHdlIG5lZWQgdG8gY2FsbCBkZWZhdWx0XHJcbiAgICAgICAgLy8gYmVoYXZpb3IgYW5kIHRoZSBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gY2FsbCBhbiBpbnRlcm5hbCBtZXRob2RcclxuICAgICAgICAvLyB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCBtZXRob2Q6ICR7U3RyaW5nKG1ldGhvZCl9YCk7XHJcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgbWV0aG9kLCByZWNlaXZlcik7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRlbGV0ZVByb3BlcnR5OiAodGFyZ2V0OiBBcnJheUludGVybmFsLCBrZXk6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgIGlmIChsb2dnZXIuaXNFbmFibGVkKExvZ0xldmVsLlRyaXZpYWwpKSB7XHJcbiAgICAgICAgICBsb2dnZXIudHJpdmlhbChgYXJyYXlbJHtrZXl9XWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQXJyYXlQcm94eS5kZWxldGVJbnRlcm5hbEJ5SW5kZXgoY29udGV4dCwgdGFyZ2V0LCBOdW1iZXIucGFyc2VJbnQoa2V5KSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcclxuICBwdWJsaWMgc3RhdGljICppdGVyYXRvckludGVybmFsKFxyXG4gICAgY2hhbmdlOiBDaGFuZ2VDb250ZXh0LFxyXG4gICAgdGFyZ2V0OiBBcnJheUludGVybmFsLFxyXG4gICk6IEl0ZXJhYmxlSXRlcmF0b3I8YW55PiB7XHJcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2YgdGFyZ2V0KSB7XHJcbiAgICAgIHlpZWxkIHRvUHJveHkoY2hhbmdlLCBlbGVtKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQXJyYXlQcm94eS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcclxuICAgIGNvbnRleHQ6IENoYW5nZUNvbnRleHQsXHJcbiAgICB0YXJnZXQ6IEFycmF5SW50ZXJuYWwsXHJcbiAgKTogQXJyYXlJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBhcnJheVByb3h5ID0gbmV3IEFycmF5UHJveHkoY29udGV4dCwgdGFyZ2V0KTtcclxuICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LCBhcnJheVByb3h5LmdldEhhbmRsZXJzKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHB1c2hJbnRlcm5hbGAgcHVzaGVzIHRoZSB2YWx1ZSB0byB0aGUgdGFyZ2V0IGFycmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgcHVzaEludGVybmFsKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogQXJyYXlJbnRlcm5hbCxcclxuICAgIHZhbHVlOiB1bmtub3duLFxyXG4gICk6IG51bWJlciB7XHJcbiAgICBBcnJheVByb3h5Lmluc2VydEFmdGVySW50ZXJuYWwoXHJcbiAgICAgIGNvbnRleHQsXHJcbiAgICAgIHRhcmdldCxcclxuICAgICAgdGFyZ2V0LmdldExhc3RDcmVhdGVkQXQoKSxcclxuICAgICAgdmFsdWUsXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHRhcmdldC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgbW92ZUJlZm9yZUludGVybmFsYCBtb3ZlcyB0aGUgZ2l2ZW4gYGNyZWF0ZWRBdGAgZWxlbWVudFxyXG4gICAqIGFmdGVyIHRoZSBwcmV2aW91c2x5IGNyZWF0ZWQgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG1vdmVCZWZvcmVJbnRlcm5hbChcclxuICAgIGNvbnRleHQ6IENoYW5nZUNvbnRleHQsXHJcbiAgICB0YXJnZXQ6IEFycmF5SW50ZXJuYWwsXHJcbiAgICBuZXh0Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgY3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgdGlja2V0ID0gY29udGV4dC5pc3N1ZVRpbWVUaWNrZXQoKTtcclxuICAgIGNvbnN0IHByZXZDcmVhdGVkQXQgPSB0YXJnZXQuZ2V0UHJldkNyZWF0ZWRBdChuZXh0Q3JlYXRlZEF0KTtcclxuICAgIHRhcmdldC5tb3ZlQWZ0ZXIocHJldkNyZWF0ZWRBdCwgY3JlYXRlZEF0LCB0aWNrZXQpO1xyXG4gICAgY29udGV4dC5wdXNoKFxyXG4gICAgICBNb3ZlT3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgcHJldkNyZWF0ZWRBdCxcclxuICAgICAgICBjcmVhdGVkQXQsXHJcbiAgICAgICAgdGlja2V0LFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBtb3ZlQWZ0ZXJJbnRlcm5hbGAgbW92ZXMgdGhlIGdpdmVuIGBjcmVhdGVkQXRgIGVsZW1lbnRcclxuICAgKiBhZnRlciB0aGUgc3BlY2lmaWMgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG1vdmVBZnRlckludGVybmFsKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogQXJyYXlJbnRlcm5hbCxcclxuICAgIHByZXZDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogdm9pZCB7XHJcbiAgICBjb25zdCB0aWNrZXQgPSBjb250ZXh0Lmlzc3VlVGltZVRpY2tldCgpO1xyXG4gICAgdGFyZ2V0Lm1vdmVBZnRlcihwcmV2Q3JlYXRlZEF0LCBjcmVhdGVkQXQsIHRpY2tldCk7XHJcbiAgICBjb250ZXh0LnB1c2goXHJcbiAgICAgIE1vdmVPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIHRhcmdldC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICBwcmV2Q3JlYXRlZEF0LFxyXG4gICAgICAgIGNyZWF0ZWRBdCxcclxuICAgICAgICB0aWNrZXQsXHJcbiAgICAgICksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG1vdmVGcm9udEludGVybmFsYCBtb3ZlcyB0aGUgZ2l2ZW4gYGNyZWF0ZWRBdGAgZWxlbWVudFxyXG4gICAqIGF0IHRoZSBmaXJzdCBvZiBhcnJheS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG1vdmVGcm9udEludGVybmFsKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogQXJyYXlJbnRlcm5hbCxcclxuICAgIGNyZWF0ZWRBdDogVGltZVRpY2tldCxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IHRpY2tldCA9IGNvbnRleHQuaXNzdWVUaW1lVGlja2V0KCk7XHJcbiAgICBjb25zdCBoZWFkID0gdGFyZ2V0LmdldEhlYWQoKTtcclxuICAgIHRhcmdldC5tb3ZlQWZ0ZXIoaGVhZC5nZXRDcmVhdGVkQXQoKSwgY3JlYXRlZEF0LCB0aWNrZXQpO1xyXG4gICAgY29udGV4dC5wdXNoKFxyXG4gICAgICBNb3ZlT3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgaGVhZC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICBjcmVhdGVkQXQsXHJcbiAgICAgICAgdGlja2V0LFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBtb3ZlQWZ0ZXJJbnRlcm5hbGAgbW92ZXMgdGhlIGdpdmVuIGBjcmVhdGVkQXRgIGVsZW1lbnRcclxuICAgKiBhdCB0aGUgbGFzdCBvZiBhcnJheS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG1vdmVMYXN0SW50ZXJuYWwoXHJcbiAgICBjb250ZXh0OiBDaGFuZ2VDb250ZXh0LFxyXG4gICAgdGFyZ2V0OiBBcnJheUludGVybmFsLFxyXG4gICAgY3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgdGlja2V0ID0gY29udGV4dC5pc3N1ZVRpbWVUaWNrZXQoKTtcclxuICAgIGNvbnN0IGxhc3QgPSB0YXJnZXQuZ2V0TGFzdENyZWF0ZWRBdCgpO1xyXG4gICAgdGFyZ2V0Lm1vdmVBZnRlcihsYXN0LCBjcmVhdGVkQXQsIHRpY2tldCk7XHJcbiAgICBjb250ZXh0LnB1c2goXHJcbiAgICAgIE1vdmVPcGVyYXRpb24uY3JlYXRlKHRhcmdldC5nZXRDcmVhdGVkQXQoKSwgbGFzdCwgY3JlYXRlZEF0LCB0aWNrZXQpLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnNlcnRBZnRlckludGVybmFsYCBpbnNlcnRzIHRoZSB2YWx1ZSBhZnRlciB0aGUgcHJldmlvdXNseSBjcmVhdGVkIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpbnNlcnRBZnRlckludGVybmFsKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogQXJyYXlJbnRlcm5hbCxcclxuICAgIHByZXZDcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgICB2YWx1ZTogdW5rbm93bixcclxuICApOiBKU09ORWxlbWVudCB7XHJcbiAgICBjb25zdCB0aWNrZXQgPSBjb250ZXh0Lmlzc3VlVGltZVRpY2tldCgpO1xyXG4gICAgaWYgKEpTT05QcmltaXRpdmUuaXNTdXBwb3J0KHZhbHVlKSkge1xyXG4gICAgICBjb25zdCBwcmltaXRpdmUgPSBKU09OUHJpbWl0aXZlLm9mKHZhbHVlIGFzIFByaW1pdGl2ZVZhbHVlLCB0aWNrZXQpO1xyXG4gICAgICBjb25zdCBjbG9uZSA9IHByaW1pdGl2ZS5kZWVwY29weSgpO1xyXG4gICAgICB0YXJnZXQuaW5zZXJ0QWZ0ZXIocHJldkNyZWF0ZWRBdCwgY2xvbmUpO1xyXG4gICAgICBjb250ZXh0LnJlZ2lzdGVyRWxlbWVudChjbG9uZSwgdGFyZ2V0KTtcclxuICAgICAgY29udGV4dC5wdXNoKFxyXG4gICAgICAgIEFkZE9wZXJhdGlvbi5jcmVhdGUoXHJcbiAgICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgICBwcmV2Q3JlYXRlZEF0LFxyXG4gICAgICAgICAgcHJpbWl0aXZlLFxyXG4gICAgICAgICAgdGlja2V0LFxyXG4gICAgICAgICksXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBwcmltaXRpdmU7XHJcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIGNvbnN0IGFycmF5ID0gQXJyYXlJbnRlcm5hbC5jcmVhdGUodGlja2V0KTtcclxuICAgICAgY29uc3QgY2xvbmUgPSBhcnJheS5kZWVwY29weSgpO1xyXG4gICAgICB0YXJnZXQuaW5zZXJ0QWZ0ZXIocHJldkNyZWF0ZWRBdCwgY2xvbmUpO1xyXG4gICAgICBjb250ZXh0LnJlZ2lzdGVyRWxlbWVudChjbG9uZSwgdGFyZ2V0KTtcclxuICAgICAgY29udGV4dC5wdXNoKFxyXG4gICAgICAgIEFkZE9wZXJhdGlvbi5jcmVhdGUoXHJcbiAgICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgICBwcmV2Q3JlYXRlZEF0LFxyXG4gICAgICAgICAgYXJyYXksXHJcbiAgICAgICAgICB0aWNrZXQsXHJcbiAgICAgICAgKSxcclxuICAgICAgKTtcclxuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHZhbHVlKSB7XHJcbiAgICAgICAgQXJyYXlQcm94eS5wdXNoSW50ZXJuYWwoY29udGV4dCwgY2xvbmUsIGVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBjb25zdCBvYmogPSBPYmplY3RJbnRlcm5hbC5jcmVhdGUodGlja2V0KTtcclxuICAgICAgdGFyZ2V0Lmluc2VydEFmdGVyKHByZXZDcmVhdGVkQXQsIG9iaik7XHJcbiAgICAgIGNvbnRleHQucmVnaXN0ZXJFbGVtZW50KG9iaiwgdGFyZ2V0KTtcclxuICAgICAgY29udGV4dC5wdXNoKFxyXG4gICAgICAgIEFkZE9wZXJhdGlvbi5jcmVhdGUodGFyZ2V0LmdldENyZWF0ZWRBdCgpLCBwcmV2Q3JlYXRlZEF0LCBvYmosIHRpY2tldCksXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyh2YWx1ZSEpKSB7XHJcbiAgICAgICAgT2JqZWN0UHJveHkuc2V0SW50ZXJuYWwoY29udGV4dCwgb2JqLCBrLCB2KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2JqO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSBvZiB2YWx1ZTogJHt0eXBlb2YgdmFsdWV9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW5zZXJ0QmVmb3JlSW50ZXJuYWxgIGluc2VydHMgdGhlIHZhbHVlIGJlZm9yZSB0aGUgcHJldmlvdXNseSBjcmVhdGVkIGVsZW1lbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpbnNlcnRCZWZvcmVJbnRlcm5hbChcclxuICAgIGNvbnRleHQ6IENoYW5nZUNvbnRleHQsXHJcbiAgICB0YXJnZXQ6IEFycmF5SW50ZXJuYWwsXHJcbiAgICBuZXh0Q3JlYXRlZEF0OiBUaW1lVGlja2V0LFxyXG4gICAgdmFsdWU6IHVua25vd24sXHJcbiAgKTogSlNPTkVsZW1lbnQge1xyXG4gICAgcmV0dXJuIEFycmF5UHJveHkuaW5zZXJ0QWZ0ZXJJbnRlcm5hbChcclxuICAgICAgY29udGV4dCxcclxuICAgICAgdGFyZ2V0LFxyXG4gICAgICB0YXJnZXQuZ2V0UHJldkNyZWF0ZWRBdChuZXh0Q3JlYXRlZEF0KSxcclxuICAgICAgdmFsdWUsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGRlbGV0ZUludGVybmFsQnlJbmRleGAgZGVsZXRlcyB0YXJnZXQgZWxlbWVudCBvZiBnaXZlbiBpbmRleC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRlbGV0ZUludGVybmFsQnlJbmRleChcclxuICAgIGNvbnRleHQ6IENoYW5nZUNvbnRleHQsXHJcbiAgICB0YXJnZXQ6IEFycmF5SW50ZXJuYWwsXHJcbiAgICBpbmRleDogbnVtYmVyLFxyXG4gICk6IEpTT05FbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IHRpY2tldCA9IGNvbnRleHQuaXNzdWVUaW1lVGlja2V0KCk7XHJcbiAgICBjb25zdCBkZWxldGVkID0gdGFyZ2V0LmRlbGV0ZUJ5SW5kZXgoaW5kZXgsIHRpY2tldCk7XHJcbiAgICBpZiAoIWRlbGV0ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQucHVzaChcclxuICAgICAgUmVtb3ZlT3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgZGVsZXRlZC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICB0aWNrZXQsXHJcbiAgICAgICksXHJcbiAgICApO1xyXG4gICAgY29udGV4dC5yZWdpc3RlclJlbW92ZWRFbGVtZW50KGRlbGV0ZWQpO1xyXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVsZXRlSW50ZXJuYWxCeUlEYCBkZWxldGVzIHRoZSBlbGVtZW50IG9mIHRoZSBnaXZlbiBpbmRleC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRlbGV0ZUludGVybmFsQnlJRChcclxuICAgIGNvbnRleHQ6IENoYW5nZUNvbnRleHQsXHJcbiAgICB0YXJnZXQ6IEFycmF5SW50ZXJuYWwsXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVUaWNrZXQsXHJcbiAgKTogSlNPTkVsZW1lbnQge1xyXG4gICAgY29uc3QgdGlja2V0ID0gY29udGV4dC5pc3N1ZVRpbWVUaWNrZXQoKTtcclxuICAgIGNvbnN0IGRlbGV0ZWQgPSB0YXJnZXQuZGVsZXRlKGNyZWF0ZWRBdCwgdGlja2V0KTtcclxuICAgIGNvbnRleHQucHVzaChcclxuICAgICAgUmVtb3ZlT3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgZGVsZXRlZC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICB0aWNrZXQsXHJcbiAgICAgICksXHJcbiAgICApO1xyXG4gICAgY29udGV4dC5yZWdpc3RlclJlbW92ZWRFbGVtZW50KGRlbGV0ZWQpO1xyXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0SGFuZGxlcnNgIGdldHMgaGFuZGxlcnMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEhhbmRsZXJzKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycztcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvdXRpbC9sb2dnZXInO1xyXG5pbXBvcnQgeyBDaGFuZ2VDb250ZXh0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jb250ZXh0JztcclxuaW1wb3J0IHsgSlNPTlByaW1pdGl2ZSB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3ByaW1pdGl2ZSc7XHJcbmltcG9ydCB7IEluY3JlYXNlT3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9pbmNyZWFzZV9vcGVyYXRpb24nO1xyXG5pbXBvcnQgTG9uZyBmcm9tICdsb25nJztcclxuaW1wb3J0IHsgQ291bnRlckludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vY291bnRlcic7XHJcblxyXG4vKipcclxuICogYENvdW50ZXJgIGlzIHRoZSBjb3VudGVyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvdW50ZXIge1xyXG4gIHByaXZhdGUgdmFsdWU6IG51bWJlciB8IExvbmc7XHJcbiAgcHJpdmF0ZSBjb250ZXh0PzogQ2hhbmdlQ29udGV4dDtcclxuICBwcml2YXRlIGNvdW50ZXI/OiBDb3VudGVySW50ZXJuYWw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBudW1iZXIgfCBMb25nKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW5pdGlhbGl6ZWAgaW5pdGlhbGl6ZSB0aGlzIHRleHQgd2l0aCBjb250ZXh0IGFuZCBpbnRlcm5hbCB0ZXh0LlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKGNvbnRleHQ6IENoYW5nZUNvbnRleHQsIGNvdW50ZXI6IENvdW50ZXJJbnRlcm5hbCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMuY291bnRlciA9IGNvdW50ZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0VmFsdWVgIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoaXMgY291bnRlcjtcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWUoKTogbnVtYmVyIHwgTG9uZyB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbmNyZWFzZWAgaW5jcmVhc2VzIG51bWVyaWMgZGF0YS5cclxuICAgKi9cclxuICBwdWJsaWMgaW5jcmVhc2UodjogbnVtYmVyIHwgTG9uZyk6IENvdW50ZXIge1xyXG4gICAgaWYgKCF0aGlzLmNvbnRleHQgfHwgIXRoaXMuY291bnRlcikge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ2l0IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQnKTtcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGlja2V0ID0gdGhpcy5jb250ZXh0Lmlzc3VlVGltZVRpY2tldCgpO1xyXG4gICAgY29uc3QgdmFsdWUgPSBKU09OUHJpbWl0aXZlLm9mKHYsIHRpY2tldCk7XHJcbiAgICBpZiAoIXZhbHVlLmlzTnVtZXJpY1R5cGUoKSkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxyXG4gICAgICAgIGBVbnN1cHBvcnRlZCB0eXBlIG9mIHZhbHVlOiAke3R5cGVvZiB2YWx1ZS5nZXRWYWx1ZSgpfWAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnB1c2goXHJcbiAgICAgIEluY3JlYXNlT3BlcmF0aW9uLmNyZWF0ZSh0aGlzLmNvdW50ZXIuZ2V0Q3JlYXRlZEF0KCksIHZhbHVlLCB0aWNrZXQpLFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuaW1wb3J0IHsgVGltZVRpY2tldCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL3RpY2tldCc7XHJcbmltcG9ydCB7IFNldE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vc2V0X29wZXJhdGlvbic7XHJcbmltcG9ydCB7IFJlbW92ZU9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vcmVtb3ZlX29wZXJhdGlvbic7XHJcbmltcG9ydCB7IENoYW5nZUNvbnRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NvbnRleHQnO1xyXG5pbXBvcnQgeyBKU09ORWxlbWVudCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2VsZW1lbnQnO1xyXG5pbXBvcnQgeyBPYmplY3RJbnRlcm5hbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL29iamVjdCc7XHJcbmltcG9ydCB7IEFycmF5SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9hcnJheSc7XHJcbmltcG9ydCB7XHJcbiAgSlNPTlByaW1pdGl2ZSxcclxuICBQcmltaXRpdmVWYWx1ZSxcclxufSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9wcmltaXRpdmUnO1xyXG5pbXBvcnQgeyBSR0FUcmVlU3BsaXQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yZ2FfdHJlZV9zcGxpdCc7XHJcbmltcG9ydCB7IFBsYWluVGV4dEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcGxhaW5fdGV4dCc7XHJcbmltcG9ydCB7IFJpY2hUZXh0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9yaWNoX3RleHQnO1xyXG5pbXBvcnQgeyBBcnJheVByb3h5IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L2FycmF5X3Byb3h5JztcclxuaW1wb3J0IHsgUGxhaW5UZXh0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L3RleHRfcHJveHknO1xyXG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9yaWNoX3RleHRfcHJveHknO1xyXG5pbXBvcnQgeyB0b1Byb3h5IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L3Byb3h5JztcclxuaW1wb3J0IHtcclxuICBDb3VudGVyVmFsdWUsXHJcbiAgQ291bnRlckludGVybmFsLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2NvdW50ZXInO1xyXG5pbXBvcnQgeyBDb3VudGVyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L2NvdW50ZXJfcHJveHknO1xyXG5pbXBvcnQgeyBJbmRleGFibGUgfSBmcm9tICcuLi9kb2N1bWVudCc7XHJcblxyXG4vKipcclxuICogYEpTT05PYmplY3RgIHJlcHJlc2VudHMgYSBKU09OIG9iamVjdCwgYnV0IHVubGlrZSByZWd1bGFyIEpTT04sIGl0IGhhcyB0aW1lXHJcbiAqIHRpY2tldHMgY3JlYXRlZCBieSBhIGxvZ2ljYWwgY2xvY2sgdG8gcmVzb2x2ZSBjb25mbGljdHMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBKU09OT2JqZWN0PFQgZXh0ZW5kcyBJbmRleGFibGU+ID0ge1xyXG4gIC8qKlxyXG4gICAqIGBnZXRJRGAgcmV0dXJucyB0aGUgSUQodGltZSB0aWNrZXQpIG9mIHRoaXMgT2JqZWN0LlxyXG4gICAqL1xyXG4gIGdldElEPygpOiBUaW1lVGlja2V0O1xyXG5cclxuICAvKipcclxuICAgKiBgdG9KU09OYCByZXR1cm5zIHRoZSBKU09OIGVuY29kaW5nIG9mIHRoaXMgb2JqZWN0LlxyXG4gICAqL1xyXG4gIHRvSlNPTj8oKTogc3RyaW5nO1xyXG59ICYgVDtcclxuXHJcbi8qKlxyXG4gKiBgT2JqZWN0UHJveHlgIGlzIGEgcHJveHkgcmVwcmVzZW50aW5nIGBPYmplY3RgLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE9iamVjdFByb3h5IHtcclxuICBwcml2YXRlIGNvbnRleHQ6IENoYW5nZUNvbnRleHQ7XHJcbiAgcHJpdmF0ZSBoYW5kbGVyczogYW55O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDaGFuZ2VDb250ZXh0KSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy5oYW5kbGVycyA9IHtcclxuICAgICAgc2V0OiAodGFyZ2V0OiBPYmplY3RJbnRlcm5hbCwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBib29sZWFuID0+IHtcclxuICAgICAgICBpZiAobG9nZ2VyLmlzRW5hYmxlZChMb2dMZXZlbC5Ucml2aWFsKSkge1xyXG4gICAgICAgICAgbG9nZ2VyLnRyaXZpYWwoYG9ialske2tleX1dPSR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0UHJveHkuc2V0SW50ZXJuYWwoY29udGV4dCwgdGFyZ2V0LCBrZXksIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldDogKFxyXG4gICAgICAgIHRhcmdldDogT2JqZWN0SW50ZXJuYWwsXHJcbiAgICAgICAga2V5T3JNZXRob2Q6IEV4dHJhY3Q8a2V5b2YgSlNPTk9iamVjdDxhbnk+LCAnc3RyaW5nJz4sXHJcbiAgICAgICk6IGFueSA9PiB7XHJcbiAgICAgICAgaWYgKGxvZ2dlci5pc0VuYWJsZWQoTG9nTGV2ZWwuVHJpdmlhbCkpIHtcclxuICAgICAgICAgIGxvZ2dlci50cml2aWFsKGBvYmpbJHtrZXlPck1ldGhvZH1dYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoa2V5T3JNZXRob2QgPT09ICdnZXRJRCcpIHtcclxuICAgICAgICAgIHJldHVybiAoKTogVGltZVRpY2tldCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5T3JNZXRob2QgPT09ICd0b0pTT04nKSB7XHJcbiAgICAgICAgICByZXR1cm4gKCk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQudG9KU09OKCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvUHJveHkoY29udGV4dCwgdGFyZ2V0LmdldChrZXlPck1ldGhvZCkpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgb3duS2V5czogKHRhcmdldDogT2JqZWN0SW50ZXJuYWwpOiBBcnJheTxzdHJpbmc+ID0+IHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0LmdldEtleXMoKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBkZWxldGVQcm9wZXJ0eTogKHRhcmdldDogT2JqZWN0SW50ZXJuYWwsIGtleTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgaWYgKGxvZ2dlci5pc0VuYWJsZWQoTG9nTGV2ZWwuVHJpdmlhbCkpIHtcclxuICAgICAgICAgIGxvZ2dlci50cml2aWFsKGBvYmpbJHtrZXl9XWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0UHJveHkuZGVsZXRlSW50ZXJuYWwoY29udGV4dCwgdGFyZ2V0LCBrZXkpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjcmVhdGVgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgT2JqZWN0UHJveHkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBjb250ZXh0OiBDaGFuZ2VDb250ZXh0LFxyXG4gICAgdGFyZ2V0OiBPYmplY3RJbnRlcm5hbCxcclxuICApOiBPYmplY3RJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBvYmplY3RQcm94eSA9IG5ldyBPYmplY3RQcm94eShjb250ZXh0KTtcclxuICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LCBvYmplY3RQcm94eS5nZXRIYW5kbGVycygpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRJbnRlcm5hbGAgc2V0cyBhIG5ldyBPYmplY3QgZm9yIHRoZSBnaXZlbiBrZXlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHNldEludGVybmFsKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogT2JqZWN0SW50ZXJuYWwsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIHZhbHVlOiB1bmtub3duLFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgdGlja2V0ID0gY29udGV4dC5pc3N1ZVRpbWVUaWNrZXQoKTtcclxuXHJcbiAgICBjb25zdCBzZXRBbmRSZWdpc3RlciA9IGZ1bmN0aW9uIChlbGVtOiBKU09ORWxlbWVudCkge1xyXG4gICAgICBjb25zdCByZW1vdmVkID0gdGFyZ2V0LnNldChrZXksIGVsZW0pO1xyXG4gICAgICBjb250ZXh0LnJlZ2lzdGVyRWxlbWVudChlbGVtLCB0YXJnZXQpO1xyXG4gICAgICBpZiAocmVtb3ZlZCkge1xyXG4gICAgICAgIGNvbnRleHQucmVnaXN0ZXJSZW1vdmVkRWxlbWVudChyZW1vdmVkKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoSlNPTlByaW1pdGl2ZS5pc1N1cHBvcnQodmFsdWUpKSB7XHJcbiAgICAgIGNvbnN0IHByaW1pdGl2ZSA9IEpTT05QcmltaXRpdmUub2YodmFsdWUgYXMgUHJpbWl0aXZlVmFsdWUsIHRpY2tldCk7XHJcbiAgICAgIHNldEFuZFJlZ2lzdGVyKHByaW1pdGl2ZSk7XHJcbiAgICAgIGNvbnRleHQucHVzaChcclxuICAgICAgICBTZXRPcGVyYXRpb24uY3JlYXRlKGtleSwgcHJpbWl0aXZlLCB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksIHRpY2tldCksXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIGNvbnN0IGFycmF5ID0gQXJyYXlJbnRlcm5hbC5jcmVhdGUodGlja2V0KTtcclxuICAgICAgc2V0QW5kUmVnaXN0ZXIoYXJyYXkpO1xyXG4gICAgICBjb250ZXh0LnB1c2goXHJcbiAgICAgICAgU2V0T3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICAgIGtleSxcclxuICAgICAgICAgIGFycmF5LmRlZXBjb3B5KCksXHJcbiAgICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgICB0aWNrZXQsXHJcbiAgICAgICAgKSxcclxuICAgICAgKTtcclxuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHZhbHVlKSB7XHJcbiAgICAgICAgQXJyYXlQcm94eS5wdXNoSW50ZXJuYWwoY29udGV4dCwgYXJyYXksIGVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUGxhaW5UZXh0KSB7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IFBsYWluVGV4dEludGVybmFsLmNyZWF0ZShSR0FUcmVlU3BsaXQuY3JlYXRlKCksIHRpY2tldCk7XHJcbiAgICAgICAgdGFyZ2V0LnNldChrZXksIHRleHQpO1xyXG4gICAgICAgIGNvbnRleHQucmVnaXN0ZXJFbGVtZW50KHRleHQsIHRhcmdldCk7XHJcbiAgICAgICAgY29udGV4dC5wdXNoKFxyXG4gICAgICAgICAgU2V0T3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICB0ZXh0LmRlZXBjb3B5KCksXHJcbiAgICAgICAgICAgIHRhcmdldC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICAgICAgdGlja2V0LFxyXG4gICAgICAgICAgKSxcclxuICAgICAgICApO1xyXG4gICAgICAgIHZhbHVlLmluaXRpYWxpemUoY29udGV4dCwgdGV4dCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBSaWNoVGV4dCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSBSaWNoVGV4dEludGVybmFsLmNyZWF0ZShSR0FUcmVlU3BsaXQuY3JlYXRlKCksIHRpY2tldCk7XHJcbiAgICAgICAgdGFyZ2V0LnNldChrZXksIHRleHQpO1xyXG4gICAgICAgIGNvbnRleHQucmVnaXN0ZXJFbGVtZW50KHRleHQsIHRhcmdldCk7XHJcbiAgICAgICAgY29udGV4dC5wdXNoKFxyXG4gICAgICAgICAgU2V0T3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICB0ZXh0LmRlZXBjb3B5KCksXHJcbiAgICAgICAgICAgIHRhcmdldC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICAgICAgdGlja2V0LFxyXG4gICAgICAgICAgKSxcclxuICAgICAgICApO1xyXG4gICAgICAgIHZhbHVlLmluaXRpYWxpemUoY29udGV4dCwgdGV4dCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBDb3VudGVyKSB7XHJcbiAgICAgICAgY29uc3QgY291bnRlciA9IENvdW50ZXJJbnRlcm5hbC5vZih2YWx1ZS5nZXRWYWx1ZSgpLCB0aWNrZXQpO1xyXG4gICAgICAgIHRhcmdldC5zZXQoa2V5LCBjb3VudGVyKTtcclxuICAgICAgICBjb250ZXh0LnJlZ2lzdGVyRWxlbWVudChjb3VudGVyLCB0YXJnZXQpO1xyXG4gICAgICAgIGNvbnRleHQucHVzaChcclxuICAgICAgICAgIFNldE9wZXJhdGlvbi5jcmVhdGUoXHJcbiAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgY291bnRlci5kZWVwY29weSgpLFxyXG4gICAgICAgICAgICB0YXJnZXQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgICAgIHRpY2tldCxcclxuICAgICAgICAgICksXHJcbiAgICAgICAgKTtcclxuICAgICAgICB2YWx1ZS5pbml0aWFsaXplKGNvbnRleHQsIGNvdW50ZXIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IE9iamVjdEludGVybmFsLmNyZWF0ZSh0aWNrZXQpO1xyXG4gICAgICAgIHNldEFuZFJlZ2lzdGVyKG9iaik7XHJcbiAgICAgICAgY29udGV4dC5wdXNoKFxyXG4gICAgICAgICAgU2V0T3BlcmF0aW9uLmNyZWF0ZShcclxuICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICBvYmouZGVlcGNvcHkoKSxcclxuICAgICAgICAgICAgdGFyZ2V0LmdldENyZWF0ZWRBdCgpLFxyXG4gICAgICAgICAgICB0aWNrZXQsXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUhKSkge1xyXG4gICAgICAgICAgT2JqZWN0UHJveHkuc2V0SW50ZXJuYWwoY29udGV4dCwgb2JqLCBrLCB2KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbChgdW5zdXBwb3J0ZWQgdHlwZSBvZiB2YWx1ZTogJHt0eXBlb2YgdmFsdWV9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlVGV4dGAgY3JlYXRlcyBhIG5ldyBUZXh0IGZvciB0aGUgZ2l2ZW4ga2V5XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVUZXh0KFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogT2JqZWN0SW50ZXJuYWwsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICApOiBQbGFpblRleHQge1xyXG4gICAgY29uc3QgdGlja2V0ID0gY29udGV4dC5pc3N1ZVRpbWVUaWNrZXQoKTtcclxuICAgIGNvbnN0IHRleHQgPSBQbGFpblRleHRJbnRlcm5hbC5jcmVhdGUoUkdBVHJlZVNwbGl0LmNyZWF0ZSgpLCB0aWNrZXQpO1xyXG4gICAgdGFyZ2V0LnNldChrZXksIHRleHQpO1xyXG4gICAgY29udGV4dC5yZWdpc3RlckVsZW1lbnQodGV4dCwgdGFyZ2V0KTtcclxuICAgIGNvbnRleHQucHVzaChcclxuICAgICAgU2V0T3BlcmF0aW9uLmNyZWF0ZShrZXksIHRleHQuZGVlcGNvcHkoKSwgdGFyZ2V0LmdldENyZWF0ZWRBdCgpLCB0aWNrZXQpLFxyXG4gICAgKTtcclxuICAgIHJldHVybiBuZXcgUGxhaW5UZXh0KGNvbnRleHQsIHRleHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZVJpY2hUZXh0YCBhIG5ldyBSaWNoVGV4dCBmb3IgdGhlIGdpdmVuIGtleS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZVJpY2hUZXh0KFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogT2JqZWN0SW50ZXJuYWwsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICApOiBSaWNoVGV4dCB7XHJcbiAgICBjb25zdCB0aWNrZXQgPSBjb250ZXh0Lmlzc3VlVGltZVRpY2tldCgpO1xyXG4gICAgY29uc3QgdGV4dCA9IFJpY2hUZXh0SW50ZXJuYWwuY3JlYXRlKFJHQVRyZWVTcGxpdC5jcmVhdGUoKSwgdGlja2V0KTtcclxuICAgIHRhcmdldC5zZXQoa2V5LCB0ZXh0KTtcclxuICAgIGNvbnRleHQucmVnaXN0ZXJFbGVtZW50KHRleHQsIHRhcmdldCk7XHJcbiAgICBjb250ZXh0LnB1c2goXHJcbiAgICAgIFNldE9wZXJhdGlvbi5jcmVhdGUoa2V5LCB0ZXh0LmRlZXBjb3B5KCksIHRhcmdldC5nZXRDcmVhdGVkQXQoKSwgdGlja2V0KSxcclxuICAgICk7XHJcbiAgICByZXR1cm4gbmV3IFJpY2hUZXh0KGNvbnRleHQsIHRleHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGNyZWF0ZUNvdW50ZXJgIGEgbmV3IENvdW50ZXIgZm9yIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVDb3VudGVyKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogT2JqZWN0SW50ZXJuYWwsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICAgIHZhbHVlOiBDb3VudGVyVmFsdWUsXHJcbiAgKTogQ291bnRlciB7XHJcbiAgICBjb25zdCB0aWNrZXQgPSBjb250ZXh0Lmlzc3VlVGltZVRpY2tldCgpO1xyXG4gICAgY29uc3QgY291bnRlckludGVybmFsID0gQ291bnRlckludGVybmFsLm9mKHZhbHVlLCB0aWNrZXQpO1xyXG4gICAgdGFyZ2V0LnNldChrZXksIGNvdW50ZXJJbnRlcm5hbCk7XHJcbiAgICBjb250ZXh0LnJlZ2lzdGVyRWxlbWVudChjb3VudGVySW50ZXJuYWwsIHRhcmdldCk7XHJcbiAgICBjb250ZXh0LnB1c2goXHJcbiAgICAgIFNldE9wZXJhdGlvbi5jcmVhdGUoXHJcbiAgICAgICAga2V5LFxyXG4gICAgICAgIGNvdW50ZXJJbnRlcm5hbC5kZWVwY29weSgpLFxyXG4gICAgICAgIHRhcmdldC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICB0aWNrZXQsXHJcbiAgICAgICksXHJcbiAgICApO1xyXG4gICAgY29uc3QgY291bnRlciA9IG5ldyBDb3VudGVyKDApO1xyXG4gICAgY291bnRlci5pbml0aWFsaXplKGNvbnRleHQsIGNvdW50ZXJJbnRlcm5hbCk7XHJcbiAgICByZXR1cm4gY291bnRlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBkZWxldGVJbnRlcm5hbGAgZGVsZXRlcyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIGtleS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRlbGV0ZUludGVybmFsKFxyXG4gICAgY29udGV4dDogQ2hhbmdlQ29udGV4dCxcclxuICAgIHRhcmdldDogT2JqZWN0SW50ZXJuYWwsXHJcbiAgICBrZXk6IHN0cmluZyxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IHRpY2tldCA9IGNvbnRleHQuaXNzdWVUaW1lVGlja2V0KCk7XHJcbiAgICBjb25zdCBkZWxldGVkID0gdGFyZ2V0LmRlbGV0ZUJ5S2V5KGtleSwgdGlja2V0KTtcclxuICAgIGlmICghZGVsZXRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29udGV4dC5wdXNoKFxyXG4gICAgICBSZW1vdmVPcGVyYXRpb24uY3JlYXRlKFxyXG4gICAgICAgIHRhcmdldC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICBkZWxldGVkLmdldENyZWF0ZWRBdCgpLFxyXG4gICAgICAgIHRpY2tldCxcclxuICAgICAgKSxcclxuICAgICk7XHJcbiAgICBjb250ZXh0LnJlZ2lzdGVyUmVtb3ZlZEVsZW1lbnQoZGVsZXRlZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0SGFuZGxlcnNgIGdldHMgaGFuZGxlcnMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEhhbmRsZXJzKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycztcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDaGFuZ2VDb250ZXh0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2NoYW5nZS9jb250ZXh0JztcclxuaW1wb3J0IHsgSlNPTkVsZW1lbnQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuaW1wb3J0IHsgT2JqZWN0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9vYmplY3QnO1xyXG5pbXBvcnQgeyBBcnJheUludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vYXJyYXknO1xyXG5pbXBvcnQgeyBKU09OUHJpbWl0aXZlIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcHJpbWl0aXZlJztcclxuaW1wb3J0IHsgUmljaFRleHRJbnRlcm5hbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JpY2hfdGV4dCc7XHJcbmltcG9ydCB7IFBsYWluVGV4dEludGVybmFsIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L2pzb24vcGxhaW5fdGV4dCc7XHJcbmltcG9ydCB7IE9iamVjdFByb3h5IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L29iamVjdF9wcm94eSc7XHJcbmltcG9ydCB7IEFycmF5UHJveHkgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvcHJveHkvYXJyYXlfcHJveHknO1xyXG5pbXBvcnQgeyBQbGFpblRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvcHJveHkvdGV4dF9wcm94eSc7XHJcbmltcG9ydCB7IFJpY2hUZXh0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L3JpY2hfdGV4dF9wcm94eSc7XHJcbmltcG9ydCB7IENvdW50ZXIgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvcHJveHkvY291bnRlcl9wcm94eSc7XHJcbmltcG9ydCB7IENvdW50ZXJJbnRlcm5hbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL2NvdW50ZXInO1xyXG5cclxuLyoqXHJcbiAqIGBjcmVhdGVQcm94eWAgY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIE9iamVjdFByb3h5LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3h5PFQ+KFxyXG4gIGNvbnRleHQ6IENoYW5nZUNvbnRleHQsXHJcbiAgdGFyZ2V0OiBPYmplY3RJbnRlcm5hbCxcclxuKTogVCAmIE9iamVjdEludGVybmFsIHtcclxuICByZXR1cm4gT2JqZWN0UHJveHkuY3JlYXRlKGNvbnRleHQsIHRhcmdldCkgYXMgVCAmIE9iamVjdEludGVybmFsO1xyXG59XHJcblxyXG4vKipcclxuICogYHRvUHJveHlgIHJldHVybnMgYSBwcm94eSBiYXNlZCBvbiBlbGVtZW50LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvUHJveHkoY29udGV4dDogQ2hhbmdlQ29udGV4dCwgZWxlbT86IEpTT05FbGVtZW50KTogYW55IHtcclxuICBpZiAoZWxlbSBpbnN0YW5jZW9mIEpTT05QcmltaXRpdmUpIHtcclxuICAgIGNvbnN0IHByaW1pdGl2ZSA9IGVsZW0gYXMgSlNPTlByaW1pdGl2ZTtcclxuICAgIHJldHVybiBwcmltaXRpdmUuZ2V0VmFsdWUoKTtcclxuICB9IGVsc2UgaWYgKGVsZW0gaW5zdGFuY2VvZiBPYmplY3RJbnRlcm5hbCkge1xyXG4gICAgY29uc3Qgb2JqID0gZWxlbSBhcyBPYmplY3RJbnRlcm5hbDtcclxuICAgIHJldHVybiBPYmplY3RQcm94eS5jcmVhdGUoY29udGV4dCwgb2JqKTtcclxuICB9IGVsc2UgaWYgKGVsZW0gaW5zdGFuY2VvZiBBcnJheUludGVybmFsKSB7XHJcbiAgICBjb25zdCBhcnJheSA9IGVsZW0gYXMgQXJyYXlJbnRlcm5hbDtcclxuICAgIHJldHVybiBBcnJheVByb3h5LmNyZWF0ZShjb250ZXh0LCBhcnJheSk7XHJcbiAgfSBlbHNlIGlmIChlbGVtIGluc3RhbmNlb2YgUGxhaW5UZXh0SW50ZXJuYWwpIHtcclxuICAgIGNvbnN0IHRleHQgPSBlbGVtIGFzIFBsYWluVGV4dEludGVybmFsO1xyXG4gICAgcmV0dXJuIG5ldyBQbGFpblRleHQoY29udGV4dCwgdGV4dCk7XHJcbiAgfSBlbHNlIGlmIChlbGVtIGluc3RhbmNlb2YgUmljaFRleHRJbnRlcm5hbCkge1xyXG4gICAgY29uc3QgdGV4dCA9IGVsZW0gYXMgUmljaFRleHRJbnRlcm5hbDtcclxuICAgIHJldHVybiBuZXcgUmljaFRleHQoY29udGV4dCwgdGV4dCk7XHJcbiAgfSBlbHNlIGlmIChlbGVtIGluc3RhbmNlb2YgQ291bnRlckludGVybmFsKSB7XHJcbiAgICBjb25zdCBjb3VudGVySW50ZXJuYWwgPSBlbGVtIGFzIENvdW50ZXJJbnRlcm5hbDtcclxuICAgIGNvbnN0IGNvdW50ZXIgPSBuZXcgQ291bnRlcigwKTtcclxuICAgIGNvdW50ZXIuaW5pdGlhbGl6ZShjb250ZXh0LCBjb3VudGVySW50ZXJuYWwpO1xyXG4gICAgcmV0dXJuIGNvdW50ZXI7XHJcbiAgfSBlbHNlIGlmICghZWxlbSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCB0eXBlIG9mIGVsZW1lbnQ6ICR7dHlwZW9mIGVsZW19YCk7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL2xvZ2dlcic7XHJcbmltcG9ydCB7IENoYW5nZUNvbnRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NvbnRleHQnO1xyXG5pbXBvcnQge1xyXG4gIFJHQVRyZWVTcGxpdE5vZGVSYW5nZSxcclxuICBUZXh0Q2hhbmdlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX3NwbGl0JztcclxuaW1wb3J0IHtcclxuICBSaWNoVGV4dEludGVybmFsLFxyXG4gIFJpY2hUZXh0VmFsLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JpY2hfdGV4dCc7XHJcbmltcG9ydCB7IFJpY2hFZGl0T3BlcmF0aW9uIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L29wZXJhdGlvbi9yaWNoX2VkaXRfb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgU3R5bGVPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL3N0eWxlX29wZXJhdGlvbic7XHJcbmltcG9ydCB7IFNlbGVjdE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vc2VsZWN0X29wZXJhdGlvbic7XHJcblxyXG4vKipcclxuICogYFJpY2hUZXh0YCBpcyBhbiBleHRlbmRlZCBkYXRhIHR5cGUgZm9yIHRoZSBjb250ZW50cyBvZiBhIHRleHQgZWRpdG9yLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJpY2hUZXh0IHtcclxuICBwcml2YXRlIGNvbnRleHQ/OiBDaGFuZ2VDb250ZXh0O1xyXG4gIHByaXZhdGUgdGV4dD86IFJpY2hUZXh0SW50ZXJuYWw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ/OiBDaGFuZ2VDb250ZXh0LCB0ZXh0PzogUmljaFRleHRJbnRlcm5hbCkge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW5pdGlhbGl6ZWAgaW5pdGlhbGl6ZSB0aGlzIHJpY2ggdGV4dCB3aXRoIGNvbnRleHQgYW5kIGludGVybmFsIHRleHQuXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemUoY29udGV4dDogQ2hhbmdlQ29udGV4dCwgdGV4dDogUmljaFRleHRJbnRlcm5hbCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZWRpdGAgZWRpdHMgdGhpcyB0ZXh0IHdpdGggdGhlIGdpdmVuIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgZWRpdChcclxuICAgIGZyb21JZHg6IG51bWJlcixcclxuICAgIHRvSWR4OiBudW1iZXIsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcclxuICApOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZnJvbUlkeCA+IHRvSWR4KSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbCgnZnJvbSBzaG91bGQgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRvJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByYW5nZSA9IHRoaXMudGV4dC5jcmVhdGVSYW5nZShmcm9tSWR4LCB0b0lkeCk7XHJcbiAgICBpZiAobG9nZ2VyLmlzRW5hYmxlZChMb2dMZXZlbC5EZWJ1ZykpIHtcclxuICAgICAgbG9nZ2VyLmRlYnVnKFxyXG4gICAgICAgIGBFRElUOiBmOiR7ZnJvbUlkeH0tPiR7cmFuZ2VbMF0uZ2V0QW5ub3RhdGVkU3RyaW5nKCl9LCB0OiR7dG9JZHh9LT4ke3JhbmdlWzFdLmdldEFubm90YXRlZFN0cmluZygpfSBjOiR7Y29udGVudH1gLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRpY2tldCA9IHRoaXMuY29udGV4dC5pc3N1ZVRpbWVUaWNrZXQoKTtcclxuICAgIGNvbnN0IG1heENyZWF0ZWRBdE1hcEJ5QWN0b3IgPSB0aGlzLnRleHQuZWRpdEludGVybmFsKFxyXG4gICAgICByYW5nZSxcclxuICAgICAgY29udGVudCxcclxuICAgICAgdGlja2V0LFxyXG4gICAgICBhdHRyaWJ1dGVzLFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmNvbnRleHQucHVzaChcclxuICAgICAgbmV3IFJpY2hFZGl0T3BlcmF0aW9uKFxyXG4gICAgICAgIHRoaXMudGV4dC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICByYW5nZVswXSxcclxuICAgICAgICByYW5nZVsxXSxcclxuICAgICAgICBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yLFxyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgYXR0cmlidXRlcyA/IG5ldyBNYXAoT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykpIDogbmV3IE1hcCgpLFxyXG4gICAgICAgIHRpY2tldCxcclxuICAgICAgKSxcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFyYW5nZVswXS5lcXVhbHMocmFuZ2VbMV0pKSB7XHJcbiAgICAgIHRoaXMuY29udGV4dC5yZWdpc3RlclJlbW92ZWROb2RlVGV4dEVsZW1lbnQodGhpcy50ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRTdHlsZWAgc3R5bGVzIHRoaXMgdGV4dCB3aXRoIHRoZSBnaXZlbiBhdHRyaWJ1dGVzLlxyXG4gICAqL1xyXG4gIHNldFN0eWxlKFxyXG4gICAgZnJvbUlkeDogbnVtYmVyLFxyXG4gICAgdG9JZHg6IG51bWJlcixcclxuICAgIGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMuY29udGV4dCB8fCAhdGhpcy50ZXh0KSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbCgnaXQgaXMgbm90IGluaXRpYWxpemVkIHlldCcpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZyb21JZHggPiB0b0lkeCkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ2Zyb20gc2hvdWxkIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0bycpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLnRleHQuY3JlYXRlUmFuZ2UoZnJvbUlkeCwgdG9JZHgpO1xyXG4gICAgaWYgKGxvZ2dlci5pc0VuYWJsZWQoTG9nTGV2ZWwuRGVidWcpKSB7XHJcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcclxuICAgICAgICBgU1RZTDogZjoke2Zyb21JZHh9LT4ke3JhbmdlWzBdLmdldEFubm90YXRlZFN0cmluZygpfSwgdDoke3RvSWR4fS0+JHtyYW5nZVsxXS5nZXRBbm5vdGF0ZWRTdHJpbmcoKX0gYToke0pTT04uc3RyaW5naWZ5KFxyXG4gICAgICAgICAgYXR0cmlidXRlcyxcclxuICAgICAgICApfWAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGlja2V0ID0gdGhpcy5jb250ZXh0Lmlzc3VlVGltZVRpY2tldCgpO1xyXG4gICAgdGhpcy50ZXh0LnNldFN0eWxlSW50ZXJuYWwocmFuZ2UsIGF0dHJpYnV0ZXMsIHRpY2tldCk7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnB1c2goXHJcbiAgICAgIG5ldyBTdHlsZU9wZXJhdGlvbihcclxuICAgICAgICB0aGlzLnRleHQuZ2V0Q3JlYXRlZEF0KCksXHJcbiAgICAgICAgcmFuZ2VbMF0sXHJcbiAgICAgICAgcmFuZ2VbMV0sXHJcbiAgICAgICAgbmV3IE1hcChPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSksXHJcbiAgICAgICAgdGlja2V0LFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZWxlY3RgIHNlbGVjdHMgdGhlIGdpdmVuIHJhbmdlLlxyXG4gICAqL1xyXG4gIHNlbGVjdChmcm9tSWR4OiBudW1iZXIsIHRvSWR4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByYW5nZSA9IHRoaXMudGV4dC5jcmVhdGVSYW5nZShmcm9tSWR4LCB0b0lkeCk7XHJcbiAgICBpZiAobG9nZ2VyLmlzRW5hYmxlZChMb2dMZXZlbC5EZWJ1ZykpIHtcclxuICAgICAgbG9nZ2VyLmRlYnVnKFxyXG4gICAgICAgIGBTRUxUOiBmOiR7ZnJvbUlkeH0tPiR7cmFuZ2VbMF0uZ2V0QW5ub3RhdGVkU3RyaW5nKCl9LCB0OiR7dG9JZHh9LT4ke3JhbmdlWzFdLmdldEFubm90YXRlZFN0cmluZygpfWAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aWNrZXQgPSB0aGlzLmNvbnRleHQuaXNzdWVUaW1lVGlja2V0KCk7XHJcbiAgICB0aGlzLnRleHQuc2VsZWN0SW50ZXJuYWwocmFuZ2UsIHRpY2tldCk7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnB1c2goXHJcbiAgICAgIG5ldyBTZWxlY3RPcGVyYXRpb24odGhpcy50ZXh0LmdldENyZWF0ZWRBdCgpLCByYW5nZVswXSwgcmFuZ2VbMV0sIHRpY2tldCksXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIFN0cmluZyBjb250YWluaW5nIHRoZSBtZXRhIGRhdGEgb2YgdGhlIG5vZGVcclxuICAgKiBmb3IgZGVidWdnaW5nIHB1cnBvc2UuXHJcbiAgICovXHJcbiAgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuY29udGV4dCB8fCAhdGhpcy50ZXh0KSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbCgnaXQgaXMgbm90IGluaXRpYWxpemVkIHlldCcpO1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMudGV4dC5nZXRBbm5vdGF0ZWRTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB2YWx1ZXNgIHJldHVybnMgdmFsdWVzIG9mIHRoaXMgdGV4dC5cclxuICAgKi9cclxuICB2YWx1ZXMoKTogQXJyYXk8UmljaFRleHRWYWw+IHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnRleHQudmFsdWVzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlUmFuZ2VgIHJldHVybnMgcGFpciBvZiBSR0FUcmVlU3BsaXROb2RlUG9zIG9mIHRoZSBnaXZlbiBpbnRlZ2VyIG9mZnNldHMuXHJcbiAgICovXHJcbiAgY3JlYXRlUmFuZ2UoZnJvbUlkeDogbnVtYmVyLCB0b0lkeDogbnVtYmVyKTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnRleHQuY3JlYXRlUmFuZ2UoZnJvbUlkeCwgdG9JZHgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9uQ2hhbmdlc2AgcmVnaXN0ZXJzIGEgaGFuZGxlciBvZiBvbkNoYW5nZXMgZXZlbnQuXHJcbiAgICovXHJcbiAgb25DaGFuZ2VzKGhhbmRsZXI6IChjaGFuZ2VzOiBBcnJheTxUZXh0Q2hhbmdlPikgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmNvbnRleHQgfHwgIXRoaXMudGV4dCkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ2l0IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGV4dC5vbkNoYW5nZXMoaGFuZGxlcik7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL2xvZ2dlcic7XHJcbmltcG9ydCB7IENoYW5nZUNvbnRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvY2hhbmdlL2NvbnRleHQnO1xyXG5pbXBvcnQge1xyXG4gIFJHQVRyZWVTcGxpdE5vZGVSYW5nZSxcclxuICBUZXh0Q2hhbmdlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX3NwbGl0JztcclxuaW1wb3J0IHsgUGxhaW5UZXh0SW50ZXJuYWwgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9wbGFpbl90ZXh0JztcclxuaW1wb3J0IHsgRWRpdE9wZXJhdGlvbiB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9vcGVyYXRpb24vZWRpdF9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBTZWxlY3RPcGVyYXRpb24gfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvb3BlcmF0aW9uL3NlbGVjdF9vcGVyYXRpb24nO1xyXG5cclxuLyoqXHJcbiAqIGBQbGFpblRleHRgIHJlcHJlc2VudHMgcGxhaW4gdGV4dCBlbGVtZW50IGZvciByZXByZXNlbnRpbmcgY29udGVudHMgb2YgYSB0ZXh0IGVkaXRvci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQbGFpblRleHQge1xyXG4gIHByaXZhdGUgY29udGV4dD86IENoYW5nZUNvbnRleHQ7XHJcbiAgcHJpdmF0ZSB0ZXh0PzogUGxhaW5UZXh0SW50ZXJuYWw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ/OiBDaGFuZ2VDb250ZXh0LCB0ZXh0PzogUGxhaW5UZXh0SW50ZXJuYWwpIHtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGluaXRpYWxpemVgIGluaXRpYWxpemUgdGhpcyB0ZXh0IHdpdGggY29udGV4dCBhbmQgaW50ZXJuYWwgdGV4dC5cclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhbGl6ZShjb250ZXh0OiBDaGFuZ2VDb250ZXh0LCB0ZXh0OiBQbGFpblRleHRJbnRlcm5hbCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZWRpdGAgZWRpdHMgdGhpcyB0ZXh0IHdpdGggdGhlIGdpdmVuIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGVkaXQoZnJvbUlkeDogbnVtYmVyLCB0b0lkeDogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZnJvbUlkeCA+IHRvSWR4KSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbCgnZnJvbSBzaG91bGQgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLnRleHQuY3JlYXRlUmFuZ2UoZnJvbUlkeCwgdG9JZHgpO1xyXG4gICAgaWYgKGxvZ2dlci5pc0VuYWJsZWQoTG9nTGV2ZWwuRGVidWcpKSB7XHJcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcclxuICAgICAgICBgRURJVDogZjoke2Zyb21JZHh9LT4ke3JhbmdlWzBdLmdldEFubm90YXRlZFN0cmluZygpfSwgdDoke3RvSWR4fS0+JHtyYW5nZVsxXS5nZXRBbm5vdGF0ZWRTdHJpbmcoKX0gYzoke2NvbnRlbnR9YCxcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0aWNrZXQgPSB0aGlzLmNvbnRleHQuaXNzdWVUaW1lVGlja2V0KCk7XHJcbiAgICBjb25zdCBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yID0gdGhpcy50ZXh0LmVkaXRJbnRlcm5hbChcclxuICAgICAgcmFuZ2UsXHJcbiAgICAgIGNvbnRlbnQsXHJcbiAgICAgIHRpY2tldCxcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnB1c2goXHJcbiAgICAgIG5ldyBFZGl0T3BlcmF0aW9uKFxyXG4gICAgICAgIHRoaXMudGV4dC5nZXRDcmVhdGVkQXQoKSxcclxuICAgICAgICByYW5nZVswXSxcclxuICAgICAgICByYW5nZVsxXSxcclxuICAgICAgICBtYXhDcmVhdGVkQXRNYXBCeUFjdG9yLFxyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgdGlja2V0LFxyXG4gICAgICApLFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIXJhbmdlWzBdLmVxdWFscyhyYW5nZVsxXSkpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LnJlZ2lzdGVyUmVtb3ZlZE5vZGVUZXh0RWxlbWVudCh0aGlzLnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNlbGVjdGAgc2VsZWN0cyB0aGUgZ2l2ZW4gcmFuZ2UuXHJcbiAgICovXHJcbiAgcHVibGljIHNlbGVjdChmcm9tSWR4OiBudW1iZXIsIHRvSWR4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByYW5nZSA9IHRoaXMudGV4dC5jcmVhdGVSYW5nZShmcm9tSWR4LCB0b0lkeCk7XHJcbiAgICBpZiAobG9nZ2VyLmlzRW5hYmxlZChMb2dMZXZlbC5EZWJ1ZykpIHtcclxuICAgICAgbG9nZ2VyLmRlYnVnKFxyXG4gICAgICAgIGBTRUxUOiBmOiR7ZnJvbUlkeH0tPiR7cmFuZ2VbMF0uZ2V0QW5ub3RhdGVkU3RyaW5nKCl9LCB0OiR7dG9JZHh9LT4ke3JhbmdlWzFdLmdldEFubm90YXRlZFN0cmluZygpfWAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aWNrZXQgPSB0aGlzLmNvbnRleHQuaXNzdWVUaW1lVGlja2V0KCk7XHJcbiAgICB0aGlzLnRleHQuc2VsZWN0SW50ZXJuYWwocmFuZ2UsIHRpY2tldCk7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnB1c2goXHJcbiAgICAgIG5ldyBTZWxlY3RPcGVyYXRpb24odGhpcy50ZXh0LmdldENyZWF0ZWRBdCgpLCByYW5nZVswXSwgcmFuZ2VbMV0sIHRpY2tldCksXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIFN0cmluZyBjb250YWluaW5nIHRoZSBtZXRhIGRhdGEgb2YgdGhlIG5vZGVcclxuICAgKiBmb3IgZGVidWdnaW5nIHB1cnBvc2UuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFubm90YXRlZFN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgaWYgKCF0aGlzLmNvbnRleHQgfHwgIXRoaXMudGV4dCkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ2l0IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQnKTtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnRleHQuZ2V0QW5ub3RhdGVkU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdG9TdHJpbmdgIHJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHRleHQuXHJcbiAgICovXHJcbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy50ZXh0LnRvU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY3JlYXRlUmFuZ2VgIHJldHVybnMgcGFpciBvZiBSR0FUcmVlU3BsaXROb2RlUG9zIG9mIHRoZSBnaXZlbiBpbnRlZ2VyIG9mZnNldHMuXHJcbiAgICovXHJcbiAgY3JlYXRlUmFuZ2UoZnJvbUlkeDogbnVtYmVyLCB0b0lkeDogbnVtYmVyKTogUkdBVHJlZVNwbGl0Tm9kZVJhbmdlIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLnRleHQpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKCdpdCBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnRleHQuY3JlYXRlUmFuZ2UoZnJvbUlkeCwgdG9JZHgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9uQ2hhbmdlc2AgcmVnaXN0ZXJzIGEgaGFuZGxlciBvZiBvbkNoYW5nZXMgZXZlbnQuXHJcbiAgICovXHJcbiAgb25DaGFuZ2VzKGhhbmRsZXI6IChjaGFuZ2VzOiBBcnJheTxUZXh0Q2hhbmdlPikgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmNvbnRleHQgfHwgIXRoaXMudGV4dCkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ2l0IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGV4dC5vbkNoYW5nZXMoaGFuZGxlcik7XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIGBBY3RvcklEYCBpcyB1c2VkIHRvIGlkZW50aWZ5IHdobyBpcyBtYWtpbmcgY2hhbmdlcyB0byB0aGUgZG9jdW1lbnQuXHJcbiAqIEl0IGlzIGhleGFkZWNpbWFsIHN0cmluZyBhbmQgc2hvdWxkIGJlIGdlbmVyYXRlZCBieSB1bmlxdWUgdmFsdWUuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIEFjdG9ySUQgPSBzdHJpbmc7XHJcblxyXG4vKipcclxuICogYEluaXRpYWxBY3RvcklEYCBpcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBBY3RvcklELlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEluaXRpYWxBY3RvcklEID0gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XHJcblxyXG4vKipcclxuICogYE1heEFjdG9ySURgIGlzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIEFjdG9ySUQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWF4QWN0b3JJRCA9ICdGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYnO1xyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCBMb25nIGZyb20gJ2xvbmcnO1xyXG5pbXBvcnQgeyBDb21wYXJhdG9yIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvY29tcGFyYXRvcic7XHJcbmltcG9ydCB7XHJcbiAgQWN0b3JJRCxcclxuICBJbml0aWFsQWN0b3JJRCxcclxuICBNYXhBY3RvcklELFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL2FjdG9yX2lkJztcclxuXHJcbmV4cG9ydCBjb25zdCBUaWNrZXRDb21wYXJhdG9yOiBDb21wYXJhdG9yPFRpbWVUaWNrZXQ+ID0gKFxyXG4gIHAxOiBUaW1lVGlja2V0LFxyXG4gIHAyOiBUaW1lVGlja2V0LFxyXG4pID0+IHtcclxuICByZXR1cm4gcDEuY29tcGFyZShwMik7XHJcbn07XHJcblxyXG4vKipcclxuICogYFRpbWVUaWNrZXRgIGlzIGEgdGltZXN0YW1wIG9mIHRoZSBsb2dpY2FsIGNsb2NrLiBUaWNrZXQgaXMgaW1tdXRhYmxlLlxyXG4gKiBJdCBpcyBjcmVhdGVkIGJ5IGBDaGFuZ2VJRGAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUaW1lVGlja2V0IHtcclxuICBwcml2YXRlIGxhbXBvcnQ6IExvbmc7XHJcbiAgcHJpdmF0ZSBkZWxpbWl0ZXI6IG51bWJlcjtcclxuICBwcml2YXRlIGFjdG9ySUQ/OiBBY3RvcklEO1xyXG5cclxuICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xyXG4gIGNvbnN0cnVjdG9yKGxhbXBvcnQ6IExvbmcsIGRlbGltaXRlcjogbnVtYmVyLCBhY3RvcklEPzogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmxhbXBvcnQgPSBsYW1wb3J0O1xyXG4gICAgdGhpcy5kZWxpbWl0ZXIgPSBkZWxpbWl0ZXI7XHJcbiAgICB0aGlzLmFjdG9ySUQgPSBhY3RvcklEO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYG9mYCBjcmVhdGVzIGFuIGluc3RhbmNlIG9mIFRpY2tldC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG9mKFxyXG4gICAgbGFtcG9ydDogTG9uZyxcclxuICAgIGRlbGltaXRlcjogbnVtYmVyLFxyXG4gICAgYWN0b3JJRD86IHN0cmluZyxcclxuICApOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiBuZXcgVGltZVRpY2tldChsYW1wb3J0LCBkZWxpbWl0ZXIsIGFjdG9ySUQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHRvSURTdHJpbmdgIHJldHVybnMgdGhlIGxhbXBvcnQgc3RyaW5nIGZvciB0aGlzIFRpY2tldC5cclxuICAgKi9cclxuICBwdWJsaWMgdG9JRFN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgaWYgKCF0aGlzLmFjdG9ySUQpIHtcclxuICAgICAgcmV0dXJuIGAke3RoaXMubGFtcG9ydC50b1N0cmluZygpfTpuaWw6JHt0aGlzLmRlbGltaXRlcn1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3RoaXMubGFtcG9ydC50b1N0cmluZygpfToke3RoaXMuYWN0b3JJRH06JHt0aGlzLmRlbGltaXRlcn1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldEFubm90YXRlZFN0cmluZ2AgcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBtZXRhIGRhdGEgb2YgdGhlIHRpY2tldFxyXG4gICAqIGZvciBkZWJ1Z2dpbmcgcHVycG9zZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuYWN0b3JJRCkge1xyXG4gICAgICByZXR1cm4gYCR7dGhpcy5sYW1wb3J0LnRvU3RyaW5nKCl9Om5pbDoke3RoaXMuZGVsaW1pdGVyfWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7dGhpcy5sYW1wb3J0LnRvU3RyaW5nKCl9OiR7dGhpcy5hY3RvcklELnN1YnN0cmluZygyMiwgMjQpfToke1xyXG4gICAgICB0aGlzLmRlbGltaXRlclxyXG4gICAgfWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc2V0QWN0b3JgIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGlja2V0IHdpdGggdGhlIGdpdmVuIGFjdG9ySUQuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEFjdG9yKGFjdG9ySUQ6IEFjdG9ySUQpOiBUaW1lVGlja2V0IHtcclxuICAgIHJldHVybiBuZXcgVGltZVRpY2tldCh0aGlzLmxhbXBvcnQsIHRoaXMuZGVsaW1pdGVyLCBhY3RvcklEKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRMYW1wb3J0QXNTdHJpbmdgIHJldHVybnMgdGhlIGxhbXBvcnQgc3RyaW5nLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRMYW1wb3J0QXNTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmxhbXBvcnQudG9TdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXREZWxpbWl0ZXJgIHJldHVybnMgZGVsaW1pdGVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREZWxpbWl0ZXIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmRlbGltaXRlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRBY3RvcklEYCByZXR1cm5zIGFjdG9ySUQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFjdG9ySUQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmFjdG9ySUQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgYWZ0ZXJgIHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gdGlja2V0IHdhcyBjcmVhdGVkIGxhdGVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZnRlcihvdGhlcjogVGltZVRpY2tldCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZShvdGhlcikgPiAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGVxdWFsc2AgcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiB0aWNrZXQgd2FzIGNyZWF0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGVxdWFscyhvdGhlcjogVGltZVRpY2tldCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZShvdGhlcikgPT09IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgY29tcGFyZWAgcmV0dXJucyBhbiBpbnRlZ2VyIGNvbXBhcmluZyB0d28gVGlja2V0LlxyXG4gICAqICBUaGUgcmVzdWx0IHdpbGwgYmUgMCBpZiBpZD09b3RoZXIsIC0xIGlmIGBpZCA8IG90aGVyYCwgYW5kICsxIGlmIGBpZCA+IG90aGVyYC5cclxuICAgKiAgSWYgdGhlIHJlY2VpdmVyIG9yIGFyZ3VtZW50IGlzIG5pbCwgaXQgd291bGQgcGFuaWMgYXQgcnVudGltZS5cclxuICAgKi9cclxuICBwdWJsaWMgY29tcGFyZShvdGhlcjogVGltZVRpY2tldCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5sYW1wb3J0LmdyZWF0ZXJUaGFuKG90aGVyLmxhbXBvcnQpKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfSBlbHNlIGlmIChvdGhlci5sYW1wb3J0LmdyZWF0ZXJUaGFuKHRoaXMubGFtcG9ydCkpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbXBhcmUgPSB0aGlzLmFjdG9ySUQhLmxvY2FsZUNvbXBhcmUob3RoZXIuYWN0b3JJRCEpO1xyXG4gICAgaWYgKGNvbXBhcmUgIT09IDApIHtcclxuICAgICAgcmV0dXJuIGNvbXBhcmU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZGVsaW1pdGVyID4gb3RoZXIuZGVsaW1pdGVyKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfSBlbHNlIGlmIChvdGhlci5kZWxpbWl0ZXIgPiB0aGlzLmRlbGltaXRlcikge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSW5pdGlhbERlbGltaXRlciA9IDA7XHJcbmV4cG9ydCBjb25zdCBNYXhEZWxlbWl0ZXIgPSA0Mjk0OTY3Mjk1O1xyXG5leHBvcnQgY29uc3QgTWF4TGFtcG9ydCA9IExvbmcuZnJvbVN0cmluZygnMTg0NDY3NDQwNzM3MDk1NTE2MTUnLCB0cnVlKTtcclxuXHJcbmV4cG9ydCBjb25zdCBJbml0aWFsVGltZVRpY2tldCA9IG5ldyBUaW1lVGlja2V0KFxyXG4gIExvbmcuZnJvbU51bWJlcigwLCB0cnVlKSxcclxuICBJbml0aWFsRGVsaW1pdGVyLFxyXG4gIEluaXRpYWxBY3RvcklELFxyXG4pO1xyXG5leHBvcnQgY29uc3QgTWF4VGltZVRpY2tldCA9IG5ldyBUaW1lVGlja2V0KFxyXG4gIE1heExhbXBvcnQsXHJcbiAgTWF4RGVsZW1pdGVyLFxyXG4gIE1heEFjdG9ySUQsXHJcbik7XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuZXhwb3J0IHR5cGUgQ29tcGFyYXRvcjxLPiA9IChrZXlBOiBLLCBrZXlCOiBLKSA9PiBudW1iZXI7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xyXG5leHBvcnQgY29uc3QgRGVmYXVsdENvbXBhcmF0b3IgPSAoYTogYW55LCBiOiBhbnkpOiBudW1iZXIgPT4ge1xyXG4gIGlmIChhID09PSBiKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9IGVsc2UgaWYgKGEgPCBiKSB7XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxufTtcclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5leHBvcnQgZW51bSBDb2RlIHtcclxuICBPayA9ICdvaycsXHJcbiAgQ2xpZW50Tm90QWN0aXZlID0gJ2NsaWVudC1ub3QtYWN0aXZlJyxcclxuICBVbmltcGxlbWVudGVkID0gJ3VuaW1wbGVtZW50ZWQnLFxyXG4gIFVuc3VwcG9ydGVkID0gJ3Vuc3VwcG9ydGVkJyxcclxufVxyXG5cclxuLyoqXHJcbiAqIGBZb3JraWVFcnJvcmAgaXMgYW4gZXJyb3IgcmV0dXJuZWQgYnkgYSBZb3JraWUgb3BlcmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFlvcmtpZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIG5hbWUgPSAnWW9ya2llRXJyb3InO1xyXG4gIHN0YWNrPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBjb2RlOiBDb2RlLCByZWFkb25seSBtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgdGhpcy50b1N0cmluZyA9ICgpOiBzdHJpbmcgPT5cclxuICAgICAgYCR7dGhpcy5uYW1lfTogW2NvZGU9JHt0aGlzLmNvZGV9XTogJHt0aGlzLm1lc3NhZ2V9YDtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gIENvbXBhcmF0b3IsXHJcbiAgRGVmYXVsdENvbXBhcmF0b3IsXHJcbn0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvY29tcGFyYXRvcic7XHJcblxyXG4vKipcclxuICogYEhlYXBOb2RlYCBpcyBhIG5vZGUgb2YgYEhlYXBgLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEhlYXBOb2RlPEssIFY+IHtcclxuICBwcml2YXRlIGtleTogSztcclxuICBwcml2YXRlIHZhbHVlOiBWO1xyXG5cclxuICBjb25zdHJ1Y3RvcihrZXk6IEssIHZhbHVlOiBWKSB7XHJcbiAgICB0aGlzLmtleSA9IGtleTtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRLZXlgIHJldHVybnMgYSBrZXkgb2YgSGVhcE5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEtleSgpOiBLIHtcclxuICAgIHJldHVybiB0aGlzLmtleTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRWYWx1ZWAgcmV0dXJucyBhIHZhbHVlIG9mIEhlYXBOb2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRWYWx1ZSgpOiBWIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGBIZWFwYCBpcyBhIGhlYXAgaW1wbGVtZW50ZWQgd2l0aCBtYXggaGVhcC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBIZWFwPEssIFY+IHtcclxuICBwcml2YXRlIG5vZGVzOiBBcnJheTxIZWFwTm9kZTxLLCBWPj47XHJcbiAgcHJpdmF0ZSBjb21wYXJhdG9yOiBDb21wYXJhdG9yPEs+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb21wYXJhdG9yPzogQ29tcGFyYXRvcjxLPikge1xyXG4gICAgdGhpcy5jb21wYXJhdG9yID0gY29tcGFyYXRvciB8fCBEZWZhdWx0Q29tcGFyYXRvcjtcclxuICAgIHRoaXMubm9kZXMgPSBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwZWVrYCByZXR1cm5zIHRoZSBtYXhpbXVtIGVsZW1lbnQgZnJvbSB0aGlzIEhlYXAuXHJcbiAgICovXHJcbiAgcHVibGljIHBlZWsoKTogSGVhcE5vZGU8SywgVj4gfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCF0aGlzLm5vZGVzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMubm9kZXNbMF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgbGVuYCBpcyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoaXMgSGVhcC5cclxuICAgKi9cclxuICBwdWJsaWMgbGVuKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcmVsZWFzZWAgZGVsZXRlcyB0aGUgZ2l2ZW4gdmFsdWUgZnJvbSB0aGlzIEhlYXAuXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2Uobm9kZTogSGVhcE5vZGU8SywgVj4pOiB2b2lkIHtcclxuICAgIGNvbnN0IHRhcmdldEluZGV4ID0gdGhpcy5ub2Rlcy5maW5kSW5kZXgoXHJcbiAgICAgIChfbm9kZSkgPT4gX25vZGUuZ2V0VmFsdWUoKSA9PT0gbm9kZS5nZXRWYWx1ZSgpLFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGxhc3ROb2RlID0gdGhpcy5ub2Rlcy5wb3AoKSE7XHJcblxyXG4gICAgaWYgKHRhcmdldEluZGV4IDwgMCB8fCAhdGhpcy5sZW4oKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ub2Rlc1t0YXJnZXRJbmRleF0gPSBsYXN0Tm9kZTtcclxuXHJcbiAgICB0aGlzLmhlYXBpZnkodGhpcy5nZXRQYXJlbnRJbmRleCh0YXJnZXRJbmRleCksIHRhcmdldEluZGV4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwdXNoYCBwdXNoZXMgdGhlIGdpdmVuIG5vZGUgb250byB0aGlzIEhlYXAuXHJcbiAgICovXHJcbiAgcHVibGljIHB1c2gobm9kZTogSGVhcE5vZGU8SywgVj4pOiB2b2lkIHtcclxuICAgIHRoaXMubm9kZXMucHVzaChub2RlKTtcclxuICAgIHRoaXMubW92ZVVwKHRoaXMubm9kZXMubGVuZ3RoIC0gMSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcG9wYCByZW1vdmVzIGFuZCByZXR1cm5zIHRoZSBtYXhpbXVtIGVsZW1lbnQgZnJvbSB0aGlzIEhlYXAuXHJcbiAgICovXHJcbiAgcHVibGljIHBvcCgpOiBIZWFwTm9kZTxLLCBWPiB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBjb3VudCA9IHRoaXMubm9kZXMubGVuZ3RoO1xyXG4gICAgY29uc3QgaGVhZCA9IHRoaXMubm9kZXNbMF07XHJcbiAgICBpZiAoY291bnQgPD0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9IGVsc2UgaWYgKGNvdW50ID09IDEpIHtcclxuICAgICAgLy8gY2xlYXIgYXJyYXlcclxuICAgICAgdGhpcy5ub2Rlcy5sZW5ndGggPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5ub2Rlc1swXSA9IHRoaXMubm9kZXMucG9wKCkhO1xyXG4gICAgICB0aGlzLm1vdmVEb3duKDApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoZWFkO1xyXG4gIH1cclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcclxuICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SGVhcE5vZGU8SywgVj4+IHtcclxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLm5vZGVzKSB7XHJcbiAgICAgIHlpZWxkIG5vZGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhlYXBpZnkocGFyZW50SW5kZXg6IG51bWJlciwgdGFyZ2V0SW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKFxyXG4gICAgICBwYXJlbnRJbmRleCA+IC0xICYmXHJcbiAgICAgIHRoaXMuY29tcGFyYXRvcihcclxuICAgICAgICB0aGlzLm5vZGVzW3BhcmVudEluZGV4XS5nZXRLZXkoKSxcclxuICAgICAgICB0aGlzLm5vZGVzW3RhcmdldEluZGV4XS5nZXRLZXkoKSxcclxuICAgICAgKSA8IDBcclxuICAgICkge1xyXG4gICAgICB0aGlzLm1vdmVVcCh0YXJnZXRJbmRleCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm1vdmVEb3duKHRhcmdldEluZGV4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgbW92ZVVwKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVzW2luZGV4XTtcclxuXHJcbiAgICB3aGlsZSAoaW5kZXggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHBhcmVudEluZGV4ID0gdGhpcy5nZXRQYXJlbnRJbmRleChpbmRleCk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLmNvbXBhcmF0b3IodGhpcy5ub2Rlc1twYXJlbnRJbmRleF0uZ2V0S2V5KCksIG5vZGUuZ2V0S2V5KCkpIDwgMFxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLm5vZGVzW2luZGV4XSA9IHRoaXMubm9kZXNbcGFyZW50SW5kZXhdO1xyXG4gICAgICAgIGluZGV4ID0gcGFyZW50SW5kZXg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMubm9kZXNbaW5kZXhdID0gbm9kZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbW92ZURvd24oaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgY291bnQgPSB0aGlzLm5vZGVzLmxlbmd0aDtcclxuXHJcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1tpbmRleF07XHJcbiAgICB3aGlsZSAoaW5kZXggPCBjb3VudCA+PiAxKSB7XHJcbiAgICAgIGNvbnN0IGxlZnRDaGlsZEluZGV4ID0gdGhpcy5nZXRMZWZ0Q2hpbGRJbmRleChpbmRleCk7XHJcbiAgICAgIGNvbnN0IHJpZ2h0Q2hpbGRJbmRleCA9IHRoaXMuZ2V0UmlnaHRDaGlsZEluZGV4KGluZGV4KTtcclxuXHJcbiAgICAgIGNvbnN0IHNtYWxsZXJDaGlsZEluZGV4ID1cclxuICAgICAgICByaWdodENoaWxkSW5kZXggPCBjb3VudCAmJlxyXG4gICAgICAgIHRoaXMuY29tcGFyYXRvcihcclxuICAgICAgICAgIHRoaXMubm9kZXNbbGVmdENoaWxkSW5kZXhdLmdldEtleSgpLFxyXG4gICAgICAgICAgdGhpcy5ub2Rlc1tyaWdodENoaWxkSW5kZXhdLmdldEtleSgpLFxyXG4gICAgICAgICkgPCAwXHJcbiAgICAgICAgICA/IHJpZ2h0Q2hpbGRJbmRleFxyXG4gICAgICAgICAgOiBsZWZ0Q2hpbGRJbmRleDtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLmNvbXBhcmF0b3IodGhpcy5ub2Rlc1tzbWFsbGVyQ2hpbGRJbmRleF0uZ2V0S2V5KCksIG5vZGUuZ2V0S2V5KCkpIDxcclxuICAgICAgICAwXHJcbiAgICAgICkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLm5vZGVzW2luZGV4XSA9IHRoaXMubm9kZXNbc21hbGxlckNoaWxkSW5kZXhdO1xyXG4gICAgICBpbmRleCA9IHNtYWxsZXJDaGlsZEluZGV4O1xyXG4gICAgfVxyXG4gICAgdGhpcy5ub2Rlc1tpbmRleF0gPSBub2RlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQYXJlbnRJbmRleChpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAoaW5kZXggLSAxKSA+PiAxO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRMZWZ0Q2hpbGRJbmRleChpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBpbmRleCAqIDIgKyAxO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRSaWdodENoaWxkSW5kZXgoaW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gaW5kZXggKiAyICsgMjtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gIENvbXBhcmF0b3IsXHJcbiAgRGVmYXVsdENvbXBhcmF0b3IsXHJcbn0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvY29tcGFyYXRvcic7XHJcblxyXG5pbnRlcmZhY2UgRW50cnk8SywgVj4ge1xyXG4gIGtleTogSztcclxuICB2YWx1ZTogVjtcclxufVxyXG5cclxuLyoqXHJcbiAqIGBMTFJCTm9kZWAgaXMgbm9kZSBvZiBMTFJCVHJlZS5cclxuICovXHJcbmNsYXNzIExMUkJOb2RlPEssIFY+IHtcclxuICBwdWJsaWMga2V5OiBLO1xyXG4gIHB1YmxpYyB2YWx1ZTogVjtcclxuICBwdWJsaWMgcGFyZW50PzogTExSQk5vZGU8SywgVj47XHJcbiAgcHVibGljIGxlZnQ/OiBMTFJCTm9kZTxLLCBWPjtcclxuICBwdWJsaWMgcmlnaHQ/OiBMTFJCTm9kZTxLLCBWPjtcclxuICBwdWJsaWMgaXNSZWQ6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGtleTogSywgdmFsdWU6IFYsIGlzUmVkOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmtleSA9IGtleTtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIHRoaXMuaXNSZWQgPSBpc1JlZDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgU29ydGVkTWFwSXRlcmF0b3JgIGlzIGEgaW50ZXJhdG9yIGZvciB0cmF2ZXJzaW5nIExMUkJUcmVlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNvcnRlZE1hcEl0ZXJhdG9yPEssIFY+IHtcclxuICBwdWJsaWMgc3RhY2s6IEFycmF5PEVudHJ5PEssIFY+PjtcclxuXHJcbiAgY29uc3RydWN0b3Iocm9vdDogTExSQk5vZGU8SywgVj4pIHtcclxuICAgIHRoaXMuc3RhY2sgPSBbXTtcclxuICAgIHRoaXMudHJhdmVyc2VJbm9yZGVyKHJvb3QpO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETzogUmVwbGFjZSB3aXRoIGl0ZXJhdGl2ZSBhcHByb2FjaCwgaWYgd2UgZW5jb3VudGVyIHBlcmZvcm1hbmNlIHByb2JsZW0uXHJcbiAgcHJpdmF0ZSB0cmF2ZXJzZUlub3JkZXIobm9kZTogTExSQk5vZGU8SywgVj4pOiB2b2lkIHtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50cmF2ZXJzZUlub3JkZXIobm9kZS5sZWZ0ISk7XHJcbiAgICB0aGlzLnN0YWNrLnB1c2goe1xyXG4gICAgICBrZXk6IG5vZGUua2V5LFxyXG4gICAgICB2YWx1ZTogbm9kZS52YWx1ZSxcclxuICAgIH0pO1xyXG4gICAgdGhpcy50cmF2ZXJzZUlub3JkZXIobm9kZS5yaWdodCEpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIExMUkJUcmVlIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIExlZnQtbGVhcm5pbmcgUmVkLUJsYWNrIFRyZWUuXHJcbiAqXHJcbiAqIE9yaWdpbmFsIHBhcGVyIG9uIExlZnQtbGVhbmluZyBSZWQtQmxhY2sgVHJlZXM6XHJcbiAqIEBzZWUgaHR0cDovL3d3dy5jcy5wcmluY2V0b24uZWR1L35ycy90YWxrcy9MTFJCL0xMUkIucGRmXHJcbiAqXHJcbiAqIEludmFyaWFudCAxOiBObyByZWQgbm9kZSBoYXMgYSByZWQgY2hpbGRcclxuICogSW52YXJpYW50IDI6IEV2ZXJ5IGxlYWYgcGF0aCBoYXMgdGhlIHNhbWUgbnVtYmVyIG9mIGJsYWNrIG5vZGVzXHJcbiAqIEludmFyaWFudCAzOiBPbmx5IHRoZSBsZWZ0IGNoaWxkIGNhbiBiZSByZWQgKGxlZnQgbGVhbmluZylcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMTFJCVHJlZTxLLCBWPiB7XHJcbiAgcHJpdmF0ZSByb290PzogTExSQk5vZGU8SywgVj47XHJcbiAgcHJpdmF0ZSBjb21wYXJhdG9yOiBDb21wYXJhdG9yPEs+O1xyXG4gIHByaXZhdGUgY291bnRlcjogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb21wYXJhdG9yPzogQ29tcGFyYXRvcjxLPikge1xyXG4gICAgdGhpcy5jb21wYXJhdG9yID1cclxuICAgICAgdHlwZW9mIGNvbXBhcmF0b3IgIT09ICd1bmRlZmluZWQnID8gY29tcGFyYXRvciA6IERlZmF1bHRDb21wYXJhdG9yO1xyXG4gICAgdGhpcy5jb3VudGVyID0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBwdXRgIHB1dHMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHB1dChrZXk6IEssIHZhbHVlOiBWKTogViB7XHJcbiAgICB0aGlzLnJvb3QgPSB0aGlzLnB1dEludGVybmFsKGtleSwgdmFsdWUsIHRoaXMucm9vdCk7XHJcbiAgICB0aGlzLnJvb3QuaXNSZWQgPSBmYWxzZTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRgIGdldHMgYSB2YWx1ZSBvZiB0aGUgZ2l2ZW4ga2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQoa2V5OiBLKTogViB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBub2RlID0gdGhpcy5nZXRJbnRlcm5hbChrZXksIHRoaXMucm9vdCk7XHJcbiAgICByZXR1cm4gbm9kZSA/IG5vZGUudmFsdWUgOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgcmVtb3ZlYCByZW1vdmVzIGEgZWxlbWVudCBvZiBrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZShrZXk6IEspOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5pc1JlZCh0aGlzLnJvb3QhLmxlZnQhKSAmJiAhdGhpcy5pc1JlZCh0aGlzLnJvb3QhLnJpZ2h0ISkpIHtcclxuICAgICAgdGhpcy5yb290IS5pc1JlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yb290ID0gdGhpcy5yZW1vdmVJbnRlcm5hbCh0aGlzLnJvb3QhLCBrZXkpO1xyXG4gICAgaWYgKHRoaXMucm9vdCkge1xyXG4gICAgICB0aGlzLnJvb3QuaXNSZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRJdGVyYXRvcmAgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBTb3J0ZWRNYXBJdGVyYXRvci5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SXRlcmF0b3IoKTogU29ydGVkTWFwSXRlcmF0b3I8SywgVj4ge1xyXG4gICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3QhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGB2YWx1ZXNgIHJldHVybnMgdmFsdWUgYXJyYXkgb2YgTExSQlRyZWUuXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlcygpOiBBcnJheTxWPiB7XHJcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5nZXRJdGVyYXRvcigpLnN0YWNrKSB7XHJcbiAgICAgIHZhbHVlcy5wdXNoKGVudHJ5LnZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZmxvb3JFbnRyeWAgcmV0dXJucyB0aGUgZW50cnkgZm9yIHRoZSBncmVhdGVzdCBrZXkgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZVxyXG4gICAqICBnaXZlbiBrZXkuIElmIHRoZXJlIGlzIG5vIHN1Y2gga2V5LCByZXR1cm5zIGB1bmRlZmluZWRgLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmbG9vckVudHJ5KGtleTogSyk6IEVudHJ5PEssIFY+IHwgdW5kZWZpbmVkIHtcclxuICAgIGxldCBub2RlID0gdGhpcy5yb290O1xyXG4gICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgY29uc3QgY29tcGFyZSA9IHRoaXMuY29tcGFyYXRvcihrZXksIG5vZGUua2V5KTtcclxuICAgICAgaWYgKGNvbXBhcmUgPiAwKSB7XHJcbiAgICAgICAgaWYgKG5vZGUucmlnaHQpIHtcclxuICAgICAgICAgIG5vZGUucmlnaHQucGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoY29tcGFyZSA8IDApIHtcclxuICAgICAgICBpZiAobm9kZS5sZWZ0KSB7XHJcbiAgICAgICAgICBub2RlLmxlZnQucGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGxldCBwYXJlbnQgPSBub2RlLnBhcmVudDtcclxuICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBjaGlsZE5vZGUgPT09IHBhcmVudC5sZWZ0KSB7XHJcbiAgICAgICAgICAgIGNoaWxkTm9kZSA9IHBhcmVudDtcclxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBwYXJlbnQhO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGxhc3RFbnRyeWAgcmV0dXJucyBsYXN0IGVudHJ5IG9mIExMUkJUcmVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsYXN0RW50cnkoKTogRW50cnk8SywgVj4gfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCF0aGlzLnJvb3QpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucm9vdDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbm9kZSA9IHRoaXMucm9vdDtcclxuICAgIHdoaWxlIChub2RlLnJpZ2h0KSB7XHJcbiAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc2l6ZWAgaXMgYSBzaXplIG9mIExMUkJUcmVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb3VudGVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGlzRW1wdHlgIGNoZWNrcyBpZiBzaXplIGlzIGVtcHR5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY291bnRlciA9PT0gMDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0SW50ZXJuYWwoXHJcbiAgICBrZXk6IEssXHJcbiAgICBub2RlPzogTExSQk5vZGU8SywgVj4sXHJcbiAgKTogTExSQk5vZGU8SywgVj4gfCB1bmRlZmluZWQge1xyXG4gICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgY29uc3QgY29tcGFyZSA9IHRoaXMuY29tcGFyYXRvcihrZXksIG5vZGUua2V5KTtcclxuICAgICAgaWYgKGNvbXBhcmUgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgfSBlbHNlIGlmIChjb21wYXJlIDwgMCkge1xyXG4gICAgICAgIG5vZGUgPSBub2RlLmxlZnQhO1xyXG4gICAgICB9IGVsc2UgaWYgKGNvbXBhcmUgPiAwKSB7XHJcbiAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQhO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwdXRJbnRlcm5hbChrZXk6IEssIHZhbHVlOiBWLCBub2RlPzogTExSQk5vZGU8SywgVj4pOiBMTFJCTm9kZTxLLCBWPiB7XHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgdGhpcy5jb3VudGVyICs9IDE7XHJcbiAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCB2YWx1ZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tcGFyZSA9IHRoaXMuY29tcGFyYXRvcihrZXksIG5vZGUua2V5KTtcclxuICAgIGlmIChjb21wYXJlIDwgMCkge1xyXG4gICAgICBub2RlLmxlZnQgPSB0aGlzLnB1dEludGVybmFsKGtleSwgdmFsdWUsIG5vZGUubGVmdCk7XHJcbiAgICB9IGVsc2UgaWYgKGNvbXBhcmUgPiAwKSB7XHJcbiAgICAgIG5vZGUucmlnaHQgPSB0aGlzLnB1dEludGVybmFsKGtleSwgdmFsdWUsIG5vZGUucmlnaHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbm9kZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzUmVkKG5vZGUucmlnaHQhKSAmJiAhdGhpcy5pc1JlZChub2RlLmxlZnQhKSkge1xyXG4gICAgICBub2RlID0gdGhpcy5yb3RhdGVMZWZ0KG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzUmVkKG5vZGUubGVmdCEpICYmIHRoaXMuaXNSZWQobm9kZS5sZWZ0IS5sZWZ0ISkpIHtcclxuICAgICAgbm9kZSA9IHRoaXMucm90YXRlUmlnaHQobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNSZWQobm9kZS5sZWZ0ISkgJiYgdGhpcy5pc1JlZChub2RlLnJpZ2h0ISkpIHtcclxuICAgICAgdGhpcy5mbGlwQ29sb3JzKG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBub2RlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVJbnRlcm5hbChcclxuICAgIG5vZGU6IExMUkJOb2RlPEssIFY+LFxyXG4gICAga2V5OiBLLFxyXG4gICk6IExMUkJOb2RlPEssIFY+IHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICh0aGlzLmNvbXBhcmF0b3Ioa2V5LCBub2RlLmtleSkgPCAwKSB7XHJcbiAgICAgIGlmICghdGhpcy5pc1JlZChub2RlLmxlZnQhKSAmJiAhdGhpcy5pc1JlZChub2RlLmxlZnQhLmxlZnQhKSkge1xyXG4gICAgICAgIG5vZGUgPSB0aGlzLm1vdmVSZWRMZWZ0KG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIG5vZGUubGVmdCA9IHRoaXMucmVtb3ZlSW50ZXJuYWwobm9kZS5sZWZ0ISwga2V5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLmlzUmVkKG5vZGUubGVmdCEpKSB7XHJcbiAgICAgICAgbm9kZSA9IHRoaXMucm90YXRlUmlnaHQobm9kZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLmNvbXBhcmF0b3Ioa2V5LCBub2RlLmtleSkgPT09IDAgJiYgIW5vZGUucmlnaHQpIHtcclxuICAgICAgICB0aGlzLmNvdW50ZXIgLT0gMTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5pc1JlZChub2RlLnJpZ2h0ISkgJiYgIXRoaXMuaXNSZWQobm9kZS5yaWdodCEubGVmdCEpKSB7XHJcbiAgICAgICAgbm9kZSA9IHRoaXMubW92ZVJlZFJpZ2h0KG5vZGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5jb21wYXJhdG9yKGtleSwgbm9kZS5rZXkpID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyIC09IDE7XHJcbiAgICAgICAgY29uc3Qgc21hbGxlc3QgPSB0aGlzLm1pbihub2RlLnJpZ2h0ISk7XHJcbiAgICAgICAgbm9kZS52YWx1ZSA9IHNtYWxsZXN0LnZhbHVlO1xyXG4gICAgICAgIG5vZGUua2V5ID0gc21hbGxlc3Qua2V5O1xyXG4gICAgICAgIG5vZGUucmlnaHQgPSB0aGlzLnJlbW92ZU1pbihub2RlLnJpZ2h0ISk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbm9kZS5yaWdodCA9IHRoaXMucmVtb3ZlSW50ZXJuYWwobm9kZS5yaWdodCEsIGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5maXhVcChub2RlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWluKG5vZGU6IExMUkJOb2RlPEssIFY+KTogTExSQk5vZGU8SywgVj4ge1xyXG4gICAgaWYgKCFub2RlLmxlZnQpIHtcclxuICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5taW4obm9kZS5sZWZ0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVtb3ZlTWluKG5vZGU6IExMUkJOb2RlPEssIFY+KTogTExSQk5vZGU8SywgVj4gfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCFub2RlLmxlZnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5pc1JlZChub2RlLmxlZnQpICYmICF0aGlzLmlzUmVkKG5vZGUubGVmdCEubGVmdCEpKSB7XHJcbiAgICAgIG5vZGUgPSB0aGlzLm1vdmVSZWRMZWZ0KG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG5vZGUubGVmdCA9IHRoaXMucmVtb3ZlTWluKG5vZGUubGVmdCEpO1xyXG4gICAgcmV0dXJuIHRoaXMuZml4VXAobm9kZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZpeFVwKG5vZGU6IExMUkJOb2RlPEssIFY+KTogTExSQk5vZGU8SywgVj4ge1xyXG4gICAgaWYgKHRoaXMuaXNSZWQobm9kZS5yaWdodCEpKSB7XHJcbiAgICAgIG5vZGUgPSB0aGlzLnJvdGF0ZUxlZnQobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNSZWQobm9kZS5sZWZ0ISkgJiYgdGhpcy5pc1JlZChub2RlLmxlZnQhLmxlZnQhKSkge1xyXG4gICAgICBub2RlID0gdGhpcy5yb3RhdGVSaWdodChub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc1JlZChub2RlLmxlZnQhKSAmJiB0aGlzLmlzUmVkKG5vZGUucmlnaHQhKSkge1xyXG4gICAgICB0aGlzLmZsaXBDb2xvcnMobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1vdmVSZWRMZWZ0KG5vZGU6IExMUkJOb2RlPEssIFY+KTogTExSQk5vZGU8SywgVj4ge1xyXG4gICAgdGhpcy5mbGlwQ29sb3JzKG5vZGUpO1xyXG4gICAgaWYgKHRoaXMuaXNSZWQobm9kZS5yaWdodCEubGVmdCEpKSB7XHJcbiAgICAgIG5vZGUucmlnaHQgPSB0aGlzLnJvdGF0ZVJpZ2h0KG5vZGUucmlnaHQhKTtcclxuICAgICAgbm9kZSA9IHRoaXMucm90YXRlTGVmdChub2RlKTtcclxuICAgICAgdGhpcy5mbGlwQ29sb3JzKG5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1vdmVSZWRSaWdodChub2RlOiBMTFJCTm9kZTxLLCBWPik6IExMUkJOb2RlPEssIFY+IHtcclxuICAgIHRoaXMuZmxpcENvbG9ycyhub2RlKTtcclxuICAgIGlmICh0aGlzLmlzUmVkKG5vZGUubGVmdCEubGVmdCEpKSB7XHJcbiAgICAgIG5vZGUgPSB0aGlzLnJvdGF0ZVJpZ2h0KG5vZGUpO1xyXG4gICAgICB0aGlzLmZsaXBDb2xvcnMobm9kZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNSZWQobm9kZTogTExSQk5vZGU8SywgVj4pOiBib29sZWFuIHtcclxuICAgIHJldHVybiBub2RlICYmIG5vZGUuaXNSZWQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJvdGF0ZUxlZnQobm9kZTogTExSQk5vZGU8SywgVj4pOiBMTFJCTm9kZTxLLCBWPiB7XHJcbiAgICBjb25zdCB4ID0gbm9kZS5yaWdodCE7XHJcbiAgICBub2RlLnJpZ2h0ID0geC5sZWZ0O1xyXG4gICAgeC5sZWZ0ID0gbm9kZTtcclxuICAgIHguaXNSZWQgPSB4LmxlZnQuaXNSZWQ7XHJcbiAgICB4LmxlZnQuaXNSZWQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHg7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJvdGF0ZVJpZ2h0KG5vZGU6IExMUkJOb2RlPEssIFY+KTogTExSQk5vZGU8SywgVj4ge1xyXG4gICAgY29uc3QgeCA9IG5vZGUubGVmdCE7XHJcbiAgICBub2RlLmxlZnQgPSB4LnJpZ2h0O1xyXG4gICAgeC5yaWdodCA9IG5vZGU7XHJcbiAgICB4LmlzUmVkID0geC5yaWdodC5pc1JlZDtcclxuICAgIHgucmlnaHQuaXNSZWQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHg7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZsaXBDb2xvcnMobm9kZTogTExSQk5vZGU8SywgVj4pOiB2b2lkIHtcclxuICAgIG5vZGUuaXNSZWQgPSAhbm9kZS5pc1JlZCE7XHJcbiAgICBub2RlLmxlZnQhLmlzUmVkID0gIW5vZGUubGVmdCEuaXNSZWQ7XHJcbiAgICBub2RlLnJpZ2h0IS5pc1JlZCA9ICFub2RlLnJpZ2h0IS5pc1JlZDtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XHJcbiAgVHJpdmlhbCxcclxuICBEZWJ1ZyxcclxuICBJbmZvLFxyXG4gIFdhcm4sXHJcbiAgRXJyb3IsXHJcbiAgRmF0YWwsXHJcbn1cclxuXHJcbmxldCBsZXZlbCA9IExvZ0xldmVsLkRlYnVnO1xyXG5cclxuLyoqXHJcbiAqIGBzZXRMb2dMZXZlbGAgc2V0cyBsb2cgbGV2ZWwuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9nTGV2ZWwobDogTG9nTGV2ZWwpOiB2b2lkIHtcclxuICBsZXZlbCA9IGw7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSB7XHJcbiAgdHJpdmlhbDogKC4uLm1lc3NhZ2VzOiBBcnJheTx1bmtub3duPik6IHZvaWQgPT4ge1xyXG4gICAgaWYgKGxldmVsID4gTG9nTGV2ZWwuVHJpdmlhbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdZT1JLSUUgVDonLCAuLi5tZXNzYWdlcyk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgZGVidWc6ICguLi5tZXNzYWdlczogQXJyYXk8dW5rbm93bj4pOiB2b2lkID0+IHtcclxuICAgIGlmIChsZXZlbCA+IExvZ0xldmVsLkRlYnVnKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1lPUktJRSBEOicsIC4uLm1lc3NhZ2VzKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBpbmZvOiAoLi4ubWVzc2FnZXM6IEFycmF5PHVua25vd24+KTogdm9pZCA9PiB7XHJcbiAgICBpZiAobGV2ZWwgPiBMb2dMZXZlbC5JbmZvKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1lPUktJRSBJOicsIC4uLm1lc3NhZ2VzKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICB3YXJuOiAoLi4ubWVzc2FnZXM6IEFycmF5PHVua25vd24+KTogdm9pZCA9PiB7XHJcbiAgICBpZiAobGV2ZWwgPiBMb2dMZXZlbC5XYXJuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLndhcm4gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdZT1JLSUUgVzonLCAuLi5tZXNzYWdlcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1lPUktJRSBXOicsIC4uLm1lc3NhZ2VzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGVycm9yOiAoLi4ubWVzc2FnZXM6IEFycmF5PHVua25vd24+KTogdm9pZCA9PiB7XHJcbiAgICBpZiAobGV2ZWwgPiBMb2dMZXZlbC5FcnJvcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS5lcnJvciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdZT1JLSUUgRTonLCAuLi5tZXNzYWdlcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1lPUktJRSBFOicsIC4uLm1lc3NhZ2VzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGZhdGFsOiAobWVzc2FnZTogc3RyaW5nLCAuLi5tZXNzYWdlczogQXJyYXk8dW5rbm93bj4pOiB2b2lkID0+IHtcclxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPSAndW5kZWZpbmVkJykge1xyXG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZXJyb3IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignWU9SS0lFIEY6JywgLi4ubWVzc2FnZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdZT1JLSUUgRjonLCAuLi5tZXNzYWdlcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFlPUktJRSBGOiAke21lc3NhZ2V9YCk7XHJcbiAgfSxcclxuXHJcbiAgaXNFbmFibGVkOiAobDogTG9nTGV2ZWwpOiBib29sZWFuID0+IHtcclxuICAgIHJldHVybiBsZXZlbCA8PSBsO1xyXG4gIH0sXHJcbn07XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCB0eXBlIE5leHRGbjxUPiA9ICh2YWx1ZTogVCkgPT4gdm9pZDtcclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCB0eXBlIEVycm9yRm4gPSAoZXJyb3I6IEVycm9yKSA9PiB2b2lkO1xyXG5cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29tcGxldGVGbiA9ICgpID0+IHZvaWQ7XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE9ic2VydmVyPFQ+IHtcclxuICBuZXh0OiBOZXh0Rm48VD47XHJcbiAgZXJyb3I/OiBFcnJvckZuO1xyXG4gIGNvbXBsZXRlPzogQ29tcGxldGVGbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVW5zdWJzY3JpYmUgPSAoKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpYmVGbjxUPiB7XHJcbiAgKFxyXG4gICAgbmV4dDogT2JzZXJ2ZXI8VD4gfCBOZXh0Rm48VD4sXHJcbiAgICBlcnJvcj86IEVycm9yRm4sXHJcbiAgICBjb21wbGV0ZT86IENvbXBsZXRlRm4sXHJcbiAgKTogVW5zdWJzY3JpYmU7XHJcbiAgKG9ic2VydmVyOiBPYnNlcnZlcjxUPik6IFVuc3Vic2NyaWJlO1xyXG59XHJcblxyXG5jb25zdCBOb29wID0gKCk6IHZvaWQgPT4ge1xyXG4gIC8vIERvIG5vdGhpbmdcclxufTtcclxuXHJcbi8qKlxyXG4gKiBgT2JzZXJ2ZXJQcm94eWAgaXMgcHJveHkgb2YgYE9ic2VydmVyYC5cclxuICovXHJcbmNsYXNzIE9ic2VydmVyUHJveHk8VD4gaW1wbGVtZW50cyBPYnNlcnZlcjxUPiB7XHJcbiAgcHVibGljIGZpbmFsaXplZCA9IGZhbHNlO1xyXG4gIHB1YmxpYyBvbk5vT2JzZXJ2ZXJzOiBFeGVjdXRvcjxUPiB8IHVuZGVmaW5lZDtcclxuXHJcbiAgcHJpdmF0ZSBvYnNlcnZlcnM6IEFycmF5PE9ic2VydmVyPFQ+PiB8IHVuZGVmaW5lZCA9IFtdO1xyXG4gIHByaXZhdGUgdW5zdWJzY3JpYmVzOiBBcnJheTxVbnN1YnNjcmliZT4gPSBbXTtcclxuICBwcml2YXRlIG9ic2VydmVyQ291bnQgPSAwO1xyXG4gIHByaXZhdGUgdGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gIHByaXZhdGUgZmluYWxFcnJvcj86IEVycm9yO1xyXG5cclxuICBjb25zdHJ1Y3RvcihleGVjdXRvcjogRXhlY3V0b3I8VD4sIG9uTm9PYnNlcnZlcnM/OiBFeGVjdXRvcjxUPikge1xyXG4gICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgIHRoaXMudGFza1xyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgZXhlY3V0b3IodGhpcyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICB0aGlzLmVycm9yKGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgbmV4dGAgaXRlcmF0ZXMgbmV4dCBvYnNlcnZlci5cclxuICAgKi9cclxuICBwdWJsaWMgbmV4dCh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4ge1xyXG4gICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGVycm9yYCBpbnZva2UgZXJyb3IuXHJcbiAgICovXHJcbiAgcHVibGljIGVycm9yKGVycm9yOiBFcnJvcik6IHZvaWQge1xyXG4gICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4ge1xyXG4gICAgICBvYnNlcnZlci5lcnJvciEoZXJyb3IpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmNsb3NlKGVycm9yKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBjb21wbGV0ZWAgY29tcGxldGVzIG9ic2VydmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wbGV0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcclxuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUhKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuY2xvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzdWJzY3JpYmVgIGlzIGEgZnVuY3Rpb24gZm9yIHN1YnNjcmliaW5nIG9ic2VydmVyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzY3JpYmUoXHJcbiAgICBuZXh0T3JPYnNlcnZlcjogT2JzZXJ2ZXI8VD4gfCBOZXh0Rm48VD4sXHJcbiAgICBlcnJvcj86IEVycm9yRm4sXHJcbiAgICBjb21wbGV0ZT86IENvbXBsZXRlRm4sXHJcbiAgKTogVW5zdWJzY3JpYmUge1xyXG4gICAgbGV0IG9ic2VydmVyOiBPYnNlcnZlcjxUPjtcclxuXHJcbiAgICBpZiAoIW5leHRPck9ic2VydmVyKSB7XHJcbiAgICAgIGxvZ2dlci5mYXRhbCgnbWlzc2luZyBvYnNlcnZlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICBsb2dnZXIuZmF0YWwoJ29ic2VydmFibGUgaXMgZmluYWxpemVkIGR1ZSB0byBwcmV2aW91cyBlcnJvcicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgbmV4dE9yT2JzZXJ2ZXIgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIG9ic2VydmVyID0gbmV4dE9yT2JzZXJ2ZXIgYXMgT2JzZXJ2ZXI8VD47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvYnNlcnZlciA9IHtcclxuICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlciBhcyBOZXh0Rm48VD4sXHJcbiAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgY29tcGxldGUsXHJcbiAgICAgIH0gYXMgT2JzZXJ2ZXI8VD47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvYnNlcnZlci5uZXh0ID0gTm9vcCBhcyBOZXh0Rm48VD47XHJcbiAgICB9XHJcbiAgICBpZiAob2JzZXJ2ZXIuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvYnNlcnZlci5lcnJvciA9IE5vb3AgYXMgRXJyb3JGbjtcclxuICAgIH1cclxuICAgIGlmIChvYnNlcnZlci5jb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlID0gTm9vcCBhcyBDb21wbGV0ZUZuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzIS5sZW5ndGgpO1xyXG5cclxuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmICh0aGlzLmZpbmFsRXJyb3IpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IhKHRoaXMuZmluYWxFcnJvcik7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSEoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgIC8vIG5vdGhpbmdcclxuICAgICAgICAgIGxvZ2dlci53YXJuKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vYnNlcnZlcnMhLnB1c2gob2JzZXJ2ZXIgYXMgT2JzZXJ2ZXI8VD4pO1xyXG4gICAgdGhpcy5vYnNlcnZlckNvdW50ICs9IDE7XHJcblxyXG4gICAgcmV0dXJuIHVuc3ViO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZU9uZShpOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm9ic2VydmVycyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub2JzZXJ2ZXJzW2ldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuXHJcbiAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgIGlmICh0aGlzLm9ic2VydmVyQ291bnQgPT09IDAgJiYgdGhpcy5vbk5vT2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmb3JFYWNoT2JzZXJ2ZXIoZm46IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9ic2VydmVycyEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdGhpcy5zZW5kT25lKGksIGZuKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2VuZE9uZShpOiBudW1iZXIsIGZuOiAob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZm4odGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xvc2UoZXJyPzogRXJyb3IpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5maW5hbGl6ZWQgPSB0cnVlO1xyXG4gICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZTxUPiB7XHJcbiAgc3Vic2NyaWJlOiBTdWJzY3JpYmVGbjxUPjtcclxuICBnZXRQcm94eT86ICgpID0+IE9ic2VydmVyUHJveHk8VD47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEV4ZWN1dG9yPFQ+ID0gKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZDtcclxuXHJcbi8qKlxyXG4gKiBgY3JlYXRlT2JzZXJ2YWJsZWAgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBPYnNlcnZlclByb3h5XHJcbiAqIGFuZCBzdWJzY3JpYmUgdGhlIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGU8VD4oZXhlY3V0b3I6IEV4ZWN1dG9yPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgY29uc3QgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvcik7XHJcbiAgcmV0dXJuIHtcclxuICAgIHN1YnNjcmliZTogcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpLFxyXG4gICAgZ2V0UHJveHk6ICgpOiBPYnNlcnZlclByb3h5PFQ+ID0+IHtcclxuICAgICAgcmV0dXJuIHByb3h5O1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAyMDIwIFRoZSBZb3JraWUgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL3V0aWwvbG9nZ2VyJztcclxuXHJcbi8qKlxyXG4gKiBgU3BsYXlOb2RlYCBpcyBhIG5vZGUgb2YgU3BsYXlUcmVlLlxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNwbGF5Tm9kZTxWPiB7XHJcbiAgcHJvdGVjdGVkIHZhbHVlOiBWO1xyXG5cclxuICBwcml2YXRlIGxlZnQ/OiBTcGxheU5vZGU8Vj47XHJcbiAgcHJpdmF0ZSByaWdodD86IFNwbGF5Tm9kZTxWPjtcclxuICBwcml2YXRlIHBhcmVudD86IFNwbGF5Tm9kZTxWPjtcclxuICBwcml2YXRlIHdlaWdodCE6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IodmFsdWU6IFYpIHtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIHRoaXMuaW5pdFdlaWdodCgpO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgZ2V0TGVuZ3RoKCk6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogYGdldE5vZGVTdHJpbmdgIHJldHVybnMgYSBzdHJpbmcgb2Ygd2VpZ2h0IGFuZCB2YWx1ZSBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldE5vZGVTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLndlaWdodH0ke3RoaXMudmFsdWV9YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRWYWx1ZWAgcmV0dXJucyB2YWx1ZSBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlKCk6IFYge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0TGVmdFdlaWdodGAgcmV0dXJucyBsZWZ0IHdlaWdodCBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldExlZnRXZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAhdGhpcy5oYXNMZWZ0KCkgPyAwIDogdGhpcy5sZWZ0IS5nZXRXZWlnaHQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRSaWdodFdlaWdodGAgcmV0dXJucyByaWdodCB3ZWlnaHQgb2YgdGhpcyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSaWdodFdlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICF0aGlzLmhhc1JpZ2h0KCkgPyAwIDogdGhpcy5yaWdodCEuZ2V0V2VpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0V2VpZ2h0YCByZXR1cm5zIHdlaWdodCBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFdlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMud2VpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGdldExlZnRgIHJldHVybnMgYSBsZWZ0IG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldExlZnQoKTogU3BsYXlOb2RlPFY+IHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmxlZnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UmlnaHRgIHJldHVybnMgYSByaWdodCBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSaWdodCgpOiBTcGxheU5vZGU8Vj4gfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMucmlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgc2V0UmlnaHRgIHNldHMgYSByaWdodCBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRSaWdodChyaWdodD86IFNwbGF5Tm9kZTxWPik6IHZvaWQge1xyXG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGhhc0xlZnRgIGNoZWNrIGlmIHRoZSBsZWZ0IG5vZGUgZXhpc3RzXHJcbiAgICovXHJcbiAgcHVibGljIGhhc0xlZnQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISF0aGlzLmxlZnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzUmlnaHRgIGNoZWNrIGlmIHRoZSByaWdodCBub2RlIGV4aXN0c1xyXG4gICAqL1xyXG4gIHB1YmxpYyBoYXNSaWdodCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMucmlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaGFzUGFyZW50YCBjaGVjayBpZiB0aGUgcGFyZW50IG5vZGUgZXhpc3RzXHJcbiAgICovXHJcbiAgcHVibGljIGhhc1BhcmVudCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMucGFyZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNldFBhcmVudGAgc2V0cyBhIHBhcmVudCBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQYXJlbnQocGFyZW50PzogU3BsYXlOb2RlPFY+KTogdm9pZCB7XHJcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBzZXRMZWZ0YCBzZXRzIGEgbGVmdCBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRMZWZ0KGxlZnQ/OiBTcGxheU5vZGU8Vj4pOiB2b2lkIHtcclxuICAgIHRoaXMubGVmdCA9IGxlZnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0UGFyZW50YCByZXR1cm5zIHBhcmVudCBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFBhcmVudCgpOiBTcGxheU5vZGU8Vj4gfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHVubGlua2AgdW5saW5rIHBhcmVudCwgcmlnaHQgYW5kIGxlZnQgbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgdW5saW5rKCk6IHZvaWQge1xyXG4gICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGhhc0xpbmtzYCBjaGVja3MgaWYgcGFyZW50LCByaWdodCBhbmQgbGVmdCBub2RlIGV4aXN0cy5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzTGlua3MoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5oYXNQYXJlbnQoKSB8fCB0aGlzLmhhc0xlZnQoKSB8fCB0aGlzLmhhc1JpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW5jcmVhc2VXZWlnaHRgIGluY3JlYXNlcyB3ZWlnaHQuXHJcbiAgICovXHJcbiAgcHVibGljIGluY3JlYXNlV2VpZ2h0KHdlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLndlaWdodCEgKz0gd2VpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYGluaXRXZWlnaHRgIHNldCBpbml0aWFsIHdlaWdodCBvZiB0aGlzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRXZWlnaHQoKTogdm9pZCB7XHJcbiAgICB0aGlzLndlaWdodCA9IHRoaXMuZ2V0TGVuZ3RoKCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3BsYXlUcmVlIGlzIHdlaWdodGVkIGJpbmFyeSBzZWFyY2ggdHJlZSB3aGljaCBpcyBiYXNlZCBvbiBTcGxheSB0cmVlLlxyXG4gKiBvcmlnaW5hbCBwYXBlciBvbiBTcGxheSBUcmVlczpcclxuICogQHNlZSBodHRwczovL3d3dy5jcy5jbXUuZWR1L35zbGVhdG9yL3BhcGVycy9zZWxmLWFkanVzdGluZy5wZGZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTcGxheVRyZWU8Vj4ge1xyXG4gIHByaXZhdGUgcm9vdD86IFNwbGF5Tm9kZTxWPjtcclxuXHJcbiAgY29uc3RydWN0b3Iocm9vdD86IFNwbGF5Tm9kZTxWPikge1xyXG4gICAgdGhpcy5yb290ID0gcm9vdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBmaW5kYCByZXR1cm5zIHRoZSBOb2RlIGFuZCBvZmZzZXQgb2YgdGhlIGdpdmVuIGluZGV4LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaW5kKHBvczogbnVtYmVyKTogW1NwbGF5Tm9kZTxWPiB8IHVuZGVmaW5lZCwgbnVtYmVyXSB7XHJcbiAgICBpZiAoIXRoaXMucm9vdCkge1xyXG4gICAgICByZXR1cm4gW3VuZGVmaW5lZCwgMF07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG5vZGUgPSB0aGlzLnJvb3Q7XHJcbiAgICBmb3IgKDs7KSB7XHJcbiAgICAgIGlmIChub2RlLmhhc0xlZnQoKSAmJiBwb3MgPD0gbm9kZS5nZXRMZWZ0V2VpZ2h0KCkpIHtcclxuICAgICAgICBub2RlID0gbm9kZS5nZXRMZWZ0KCkhO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIG5vZGUuaGFzUmlnaHQoKSAmJlxyXG4gICAgICAgIG5vZGUuZ2V0TGVmdFdlaWdodCgpICsgbm9kZS5nZXRMZW5ndGgoKSA8IHBvc1xyXG4gICAgICApIHtcclxuICAgICAgICBwb3MgLT0gbm9kZS5nZXRMZWZ0V2VpZ2h0KCkgKyBub2RlLmdldExlbmd0aCgpO1xyXG4gICAgICAgIG5vZGUgPSBub2RlLmdldFJpZ2h0KCkhO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBvcyAtPSBub2RlLmdldExlZnRXZWlnaHQoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBvcyA+IG5vZGUuZ2V0TGVuZ3RoKCkpIHtcclxuICAgICAgbG9nZ2VyLmZhdGFsKFxyXG4gICAgICAgIGBvdXQgb2YgaW5kZXggcmFuZ2U6IHBvczogJHtwb3N9ID4gbm9kZS5sZW5ndGg6ICR7bm9kZS5nZXRMZW5ndGgoKX1gLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtub2RlLCBwb3NdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmluZCB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIG5vZGUgaW4gQlNULlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG5vZGUgLSB0aGUgZ2l2ZW4gbm9kZVxyXG4gICAqIEByZXR1cm5zIHRoZSBpbmRleCBvZiBnaXZlbiBub2RlXHJcbiAgICovXHJcbiAgcHVibGljIGluZGV4T2Yobm9kZTogU3BsYXlOb2RlPFY+KTogbnVtYmVyIHtcclxuICAgIGlmICghbm9kZSB8fCAhbm9kZS5oYXNMaW5rcygpKSB7XHJcbiAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgbGV0IGN1cnJlbnQ6IFNwbGF5Tm9kZTxWPiB8IHVuZGVmaW5lZCA9IG5vZGU7XHJcbiAgICBsZXQgcHJldjogU3BsYXlOb2RlPFY+IHwgdW5kZWZpbmVkO1xyXG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcclxuICAgICAgaWYgKCFwcmV2IHx8IHByZXYgPT09IGN1cnJlbnQuZ2V0UmlnaHQoKSkge1xyXG4gICAgICAgIGluZGV4ICs9XHJcbiAgICAgICAgICBjdXJyZW50LmdldExlbmd0aCgpICtcclxuICAgICAgICAgIChjdXJyZW50Lmhhc0xlZnQoKSA/IGN1cnJlbnQuZ2V0TGVmdFdlaWdodCgpIDogMCk7XHJcbiAgICAgIH1cclxuICAgICAgcHJldiA9IGN1cnJlbnQ7XHJcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmdldFBhcmVudCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluZGV4IC0gbm9kZS5nZXRMZW5ndGgoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBnZXRSb290YCByZXR1cm5zIHJvb3Qgb2YgdGhpcyB0cmVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSb290KCk6IFNwbGF5Tm9kZTxWPiB7XHJcbiAgICByZXR1cm4gdGhpcy5yb290ITtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGBpbnNlcnRgIGluc2VydHMgdGhlIG5vZGUgYXQgdGhlIGxhc3QuXHJcbiAgICovXHJcbiAgcHVibGljIGluc2VydChuZXdOb2RlOiBTcGxheU5vZGU8Vj4pOiBTcGxheU5vZGU8Vj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QWZ0ZXIodGhpcy5yb290ISwgbmV3Tm9kZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgaW5zZXJ0QWZ0ZXJgIGluc2VydHMgdGhlIG5vZGUgYWZ0ZXIgdGhlIGdpdmVuIHByZXZpb3VzIG5vZGUuXHJcbiAgICovXHJcbiAgcHVibGljIGluc2VydEFmdGVyKFxyXG4gICAgdGFyZ2V0OiBTcGxheU5vZGU8Vj4sXHJcbiAgICBuZXdOb2RlOiBTcGxheU5vZGU8Vj4sXHJcbiAgKTogU3BsYXlOb2RlPFY+IHtcclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgIHRoaXMucm9vdCA9IG5ld05vZGU7XHJcbiAgICAgIHJldHVybiBuZXdOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc3BsYXlOb2RlKHRhcmdldCk7XHJcbiAgICB0aGlzLnJvb3QgPSBuZXdOb2RlO1xyXG4gICAgbmV3Tm9kZS5zZXRSaWdodCh0YXJnZXQuZ2V0UmlnaHQoKSk7XHJcbiAgICBpZiAodGFyZ2V0Lmhhc1JpZ2h0KCkpIHtcclxuICAgICAgdGFyZ2V0LmdldFJpZ2h0KCkhLnNldFBhcmVudChuZXdOb2RlKTtcclxuICAgIH1cclxuICAgIG5ld05vZGUuc2V0TGVmdCh0YXJnZXQpO1xyXG4gICAgdGFyZ2V0LnNldFBhcmVudChuZXdOb2RlKTtcclxuICAgIHRhcmdldC5zZXRSaWdodCgpO1xyXG4gICAgdGhpcy51cGRhdGVTdWJ0cmVlKHRhcmdldCk7XHJcbiAgICB0aGlzLnVwZGF0ZVN1YnRyZWUobmV3Tm9kZSk7XHJcblxyXG4gICAgcmV0dXJuIG5ld05vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgdXBkYXRlU3VidHJlZWAgcmVjYWxjdWxhdGVzIHdlaWdodHMgd2l0aCBsZWZ0IGFuZCByaWdodCBub2Rlcy5cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlU3VidHJlZShub2RlOiBTcGxheU5vZGU8Vj4pOiB2b2lkIHtcclxuICAgIG5vZGUuaW5pdFdlaWdodCgpO1xyXG5cclxuICAgIGlmIChub2RlLmhhc0xlZnQoKSkge1xyXG4gICAgICBub2RlLmluY3JlYXNlV2VpZ2h0KG5vZGUuZ2V0TGVmdFdlaWdodCgpKTtcclxuICAgIH1cclxuICAgIGlmIChub2RlLmhhc1JpZ2h0KCkpIHtcclxuICAgICAgbm9kZS5pbmNyZWFzZVdlaWdodChub2RlLmdldFJpZ2h0V2VpZ2h0KCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYHNwbGF5Tm9kZWAgbW92ZXMgdGhlIGdpdmVuIG5vZGUgdG8gdGhlIHJvb3QuXHJcbiAgICovXHJcbiAgcHVibGljIHNwbGF5Tm9kZShub2RlOiBTcGxheU5vZGU8Vj4pOiB2b2lkIHtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICg7Oykge1xyXG4gICAgICBpZiAodGhpcy5pc0xlZnRDaGlsZChub2RlLmdldFBhcmVudCgpKSAmJiB0aGlzLmlzUmlnaHRDaGlsZChub2RlKSkge1xyXG4gICAgICAgIC8vIHppZy16YWdcclxuICAgICAgICB0aGlzLnJvdGF0ZUxlZnQobm9kZSk7XHJcbiAgICAgICAgdGhpcy5yb3RhdGVSaWdodChub2RlKTtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICB0aGlzLmlzUmlnaHRDaGlsZChub2RlLmdldFBhcmVudCgpKSAmJlxyXG4gICAgICAgIHRoaXMuaXNMZWZ0Q2hpbGQobm9kZSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gemlnLXphZ1xyXG4gICAgICAgIHRoaXMucm90YXRlUmlnaHQobm9kZSk7XHJcbiAgICAgICAgdGhpcy5yb3RhdGVMZWZ0KG5vZGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMZWZ0Q2hpbGQobm9kZS5nZXRQYXJlbnQoKSkgJiYgdGhpcy5pc0xlZnRDaGlsZChub2RlKSkge1xyXG4gICAgICAgIC8vIHppZy16aWdcclxuICAgICAgICB0aGlzLnJvdGF0ZVJpZ2h0KG5vZGUuZ2V0UGFyZW50KCkhKTtcclxuICAgICAgICB0aGlzLnJvdGF0ZVJpZ2h0KG5vZGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIHRoaXMuaXNSaWdodENoaWxkKG5vZGUuZ2V0UGFyZW50KCkpICYmXHJcbiAgICAgICAgdGhpcy5pc1JpZ2h0Q2hpbGQobm9kZSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gemlnLXppZ1xyXG4gICAgICAgIHRoaXMucm90YXRlTGVmdChub2RlLmdldFBhcmVudCgpISk7XHJcbiAgICAgICAgdGhpcy5yb3RhdGVMZWZ0KG5vZGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHppZ1xyXG4gICAgICAgIGlmICh0aGlzLmlzTGVmdENoaWxkKG5vZGUpKSB7XHJcbiAgICAgICAgICB0aGlzLnJvdGF0ZVJpZ2h0KG5vZGUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1JpZ2h0Q2hpbGQobm9kZSkpIHtcclxuICAgICAgICAgIHRoaXMucm90YXRlTGVmdChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZGVsZXRlYCBkZWxldGVzIHRhcmdldCBub2RlIG9mIHRoaXMgdHJlZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVsZXRlKG5vZGU6IFNwbGF5Tm9kZTxWPik6IHZvaWQge1xyXG4gICAgdGhpcy5zcGxheU5vZGUobm9kZSk7XHJcblxyXG4gICAgY29uc3QgbGVmdFRyZWUgPSBuZXcgU3BsYXlUcmVlKG5vZGUuZ2V0TGVmdCgpKTtcclxuICAgIGlmIChsZWZ0VHJlZS5yb290KSB7XHJcbiAgICAgIGxlZnRUcmVlLnJvb3Quc2V0UGFyZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmlnaHRUcmVlID0gbmV3IFNwbGF5VHJlZShub2RlLmdldFJpZ2h0KCkpO1xyXG4gICAgaWYgKHJpZ2h0VHJlZS5yb290KSB7XHJcbiAgICAgIHJpZ2h0VHJlZS5yb290LnNldFBhcmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsZWZ0VHJlZS5yb290KSB7XHJcbiAgICAgIGNvbnN0IG1heE5vZGUgPSBsZWZ0VHJlZS5nZXRNYXhpbXVtKCk7XHJcbiAgICAgIGxlZnRUcmVlLnNwbGF5Tm9kZShtYXhOb2RlKTtcclxuICAgICAgbGVmdFRyZWUucm9vdC5zZXRSaWdodChyaWdodFRyZWUucm9vdCk7XHJcbiAgICAgIGlmIChyaWdodFRyZWUucm9vdCkge1xyXG4gICAgICAgIHJpZ2h0VHJlZS5yb290LnNldFBhcmVudChsZWZ0VHJlZS5yb290KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJvb3QgPSBsZWZ0VHJlZS5yb290O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yb290ID0gcmlnaHRUcmVlLnJvb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS51bmxpbmsoKTtcclxuICAgIGlmICh0aGlzLnJvb3QpIHtcclxuICAgICAgdGhpcy51cGRhdGVTdWJ0cmVlKHRoaXMucm9vdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBgZ2V0QW5ub3RhdGVkU3RyaW5nYCByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG1ldGEgZGF0YSBvZiB0aGUgTm9kZVxyXG4gICAqIGZvciBkZWJ1Z2dpbmcgcHVycG9zZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QW5ub3RhdGVkU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBtZXRhU3RyaW5nOiBBcnJheTxTcGxheU5vZGU8Vj4+ID0gW107XHJcbiAgICB0aGlzLnRyYXZlcnNlSW5vcmRlcih0aGlzLnJvb3QhLCBtZXRhU3RyaW5nKTtcclxuICAgIHJldHVybiBtZXRhU3RyaW5nXHJcbiAgICAgIC5tYXAoKG4pID0+IGBbJHtuLmdldFdlaWdodCgpfSwke24uZ2V0TGVuZ3RoKCl9XSR7bi5nZXRWYWx1ZSgpIHx8ICcnfWApXHJcbiAgICAgIC5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0TWF4aW11bSgpOiBTcGxheU5vZGU8Vj4ge1xyXG4gICAgbGV0IG5vZGUgPSB0aGlzLnJvb3QhO1xyXG4gICAgd2hpbGUgKG5vZGUuaGFzUmlnaHQoKSkge1xyXG4gICAgICBub2RlID0gbm9kZS5nZXRSaWdodCgpITtcclxuICAgIH1cclxuICAgIHJldHVybiBub2RlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB0cmF2ZXJzZUlub3JkZXIoXHJcbiAgICBub2RlOiBTcGxheU5vZGU8Vj4gfCB1bmRlZmluZWQsXHJcbiAgICBzdGFjazogQXJyYXk8U3BsYXlOb2RlPFY+PixcclxuICApOiB2b2lkIHtcclxuICAgIGlmICghbm9kZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50cmF2ZXJzZUlub3JkZXIobm9kZS5nZXRMZWZ0KCksIHN0YWNrKTtcclxuICAgIHN0YWNrLnB1c2gobm9kZSk7XHJcbiAgICB0aGlzLnRyYXZlcnNlSW5vcmRlcihub2RlLmdldFJpZ2h0KCksIHN0YWNrKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcm90YXRlTGVmdChwaXZvdDogU3BsYXlOb2RlPFY+KTogdm9pZCB7XHJcbiAgICBjb25zdCByb290ID0gcGl2b3QuZ2V0UGFyZW50KCkhO1xyXG4gICAgaWYgKHJvb3QuaGFzUGFyZW50KCkpIHtcclxuICAgICAgaWYgKHJvb3QgPT09IHJvb3QuZ2V0UGFyZW50KCkhLmdldExlZnQoKSkge1xyXG4gICAgICAgIHJvb3QuZ2V0UGFyZW50KCkhLnNldExlZnQocGl2b3QpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJvb3QuZ2V0UGFyZW50KCkhLnNldFJpZ2h0KHBpdm90KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yb290ID0gcGl2b3Q7XHJcbiAgICB9XHJcbiAgICBwaXZvdC5zZXRQYXJlbnQocm9vdC5nZXRQYXJlbnQoKSk7XHJcblxyXG4gICAgcm9vdC5zZXRSaWdodChwaXZvdC5nZXRMZWZ0KCkpO1xyXG4gICAgaWYgKHJvb3QuaGFzUmlnaHQoKSkge1xyXG4gICAgICByb290LmdldFJpZ2h0KCkhLnNldFBhcmVudChyb290KTtcclxuICAgIH1cclxuXHJcbiAgICBwaXZvdC5zZXRMZWZ0KHJvb3QpO1xyXG4gICAgcGl2b3QuZ2V0TGVmdCgpIS5zZXRQYXJlbnQocGl2b3QpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlU3VidHJlZShyb290KTtcclxuICAgIHRoaXMudXBkYXRlU3VidHJlZShwaXZvdCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJvdGF0ZVJpZ2h0KHBpdm90OiBTcGxheU5vZGU8Vj4pOiB2b2lkIHtcclxuICAgIGNvbnN0IHJvb3QgPSBwaXZvdC5nZXRQYXJlbnQoKSE7XHJcbiAgICBpZiAocm9vdC5oYXNQYXJlbnQoKSkge1xyXG4gICAgICBpZiAocm9vdCA9PT0gcm9vdC5nZXRQYXJlbnQoKSEuZ2V0TGVmdCgpKSB7XHJcbiAgICAgICAgcm9vdC5nZXRQYXJlbnQoKSEuc2V0TGVmdChwaXZvdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcm9vdC5nZXRQYXJlbnQoKSEuc2V0UmlnaHQocGl2b3QpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJvb3QgPSBwaXZvdDtcclxuICAgIH1cclxuICAgIHBpdm90LnNldFBhcmVudChyb290LmdldFBhcmVudCgpKTtcclxuXHJcbiAgICByb290LnNldExlZnQocGl2b3QuZ2V0UmlnaHQoKSk7XHJcbiAgICBpZiAocm9vdC5oYXNMZWZ0KCkpIHtcclxuICAgICAgcm9vdC5nZXRMZWZ0KCkhLnNldFBhcmVudChyb290KTtcclxuICAgIH1cclxuXHJcbiAgICBwaXZvdC5zZXRSaWdodChyb290KTtcclxuICAgIHBpdm90LmdldFJpZ2h0KCkhLnNldFBhcmVudChwaXZvdCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVTdWJ0cmVlKHJvb3QpO1xyXG4gICAgdGhpcy51cGRhdGVTdWJ0cmVlKHBpdm90KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNMZWZ0Q2hpbGQobm9kZT86IFNwbGF5Tm9kZTxWPik6IGJvb2xlYW4ge1xyXG4gICAgaWYgKG5vZGUgJiYgbm9kZS5oYXNQYXJlbnQoKSkge1xyXG4gICAgICByZXR1cm4gbm9kZS5nZXRQYXJlbnQoKSEuZ2V0TGVmdCgpID09PSBub2RlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1JpZ2h0Q2hpbGQobm9kZT86IFNwbGF5Tm9kZTxWPik6IGJvb2xlYW4ge1xyXG4gICAgaWYgKG5vZGUgJiYgbm9kZS5oYXNQYXJlbnQoKSkge1xyXG4gICAgICByZXR1cm4gbm9kZS5nZXRQYXJlbnQoKSEuZ2V0UmlnaHQoKSA9PT0gbm9kZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IDIwMjAgVGhlIFlvcmtpZSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5leHBvcnQgdHlwZSBVVUlEID0gc3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIGB1dWlkYCBnZW5lcmF0ZXMgdXVpZCBzdHJpbmdcclxuICogQHNlZSBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHV1aWQoKTogVVVJRCB7XHJcbiAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHh5LXh4eHgteHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgKGMpID0+IHtcclxuICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XHJcbiAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcclxuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICB9KTtcclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC91dGlsL3R5cGVzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzExMmNjN2MyNzU1MTI1NGFhMmIxNzA5OGZiNzc0ODY3ZjA1ZWQwZDlcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcmd1bWVudHNPYmplY3QgPSByZXF1aXJlKCdpcy1hcmd1bWVudHMnKTtcbnZhciBpc0dlbmVyYXRvckZ1bmN0aW9uID0gcmVxdWlyZSgnaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uJyk7XG52YXIgd2hpY2hUeXBlZEFycmF5ID0gcmVxdWlyZSgnd2hpY2gtdHlwZWQtYXJyYXknKTtcbnZhciBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCdpcy10eXBlZC1hcnJheScpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIEJpZ0ludFN1cHBvcnRlZCA9IHR5cGVvZiBCaWdJbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIFN5bWJvbFN1cHBvcnRlZCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgT2JqZWN0VG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyIG51bWJlclZhbHVlID0gdW5jdXJyeVRoaXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mKTtcbnZhciBzdHJpbmdWYWx1ZSA9IHVuY3VycnlUaGlzKFN0cmluZy5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgYm9vbGVhblZhbHVlID0gdW5jdXJyeVRoaXMoQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZik7XG5cbmlmIChCaWdJbnRTdXBwb3J0ZWQpIHtcbiAgdmFyIGJpZ0ludFZhbHVlID0gdW5jdXJyeVRoaXMoQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mKTtcbn1cblxuaWYgKFN5bWJvbFN1cHBvcnRlZCkge1xuICB2YXIgc3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YpO1xufVxuXG5mdW5jdGlvbiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBwcm90b3R5cGVWYWx1ZU9mKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgcHJvdG90eXBlVmFsdWVPZih2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzLmlzQXJndW1lbnRzT2JqZWN0ID0gaXNBcmd1bWVudHNPYmplY3Q7XG5leHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBpc0dlbmVyYXRvckZ1bmN0aW9uO1xuZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG5cbi8vIFRha2VuIGZyb20gaGVyZSBhbmQgbW9kaWZpZWQgZm9yIGJldHRlciBicm93c2VyIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1pcy1wcm9taXNlL2Jsb2IvY2RhMzVhNTEzYmRhMDNmOTc3YWQ1Y2RlM2EwNzlkMjM3ZTgyZDdlZi9pbmRleC5qc1xuZnVuY3Rpb24gaXNQcm9taXNlKGlucHV0KSB7XG5cdHJldHVybiAoXG5cdFx0KFxuXHRcdFx0dHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0XHRpbnB1dCBpbnN0YW5jZW9mIFByb21pc2Vcblx0XHQpIHx8XG5cdFx0KFxuXHRcdFx0aW5wdXQgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiBpbnB1dC50aGVuID09PSAnZnVuY3Rpb24nICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQuY2F0Y2ggPT09ICdmdW5jdGlvbidcblx0XHQpXG5cdCk7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KSB7XG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGlzVHlwZWRBcnJheSh2YWx1ZSkgfHxcbiAgICBpc0RhdGFWaWV3KHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyVmlldyA9IGlzQXJyYXlCdWZmZXJWaWV3O1xuXG5cbmZ1bmN0aW9uIGlzVWludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQ4QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQ4QXJyYXkgPSBpc1VpbnQ4QXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDhDbGFtcGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50OENsYW1wZWRBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDhDbGFtcGVkQXJyYXkgPSBpc1VpbnQ4Q2xhbXBlZEFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDE2QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQxNkFycmF5ID0gaXNVaW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50MzJBcnJheSA9IGlzVWludDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50OEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50OEFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQ4QXJyYXkgPSBpc0ludDhBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MTZBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MTZBcnJheSA9IGlzSW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MzJBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MzJBcnJheSA9IGlzSW50MzJBcnJheTtcblxuZnVuY3Rpb24gaXNGbG9hdDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdGbG9hdDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc0Zsb2F0MzJBcnJheSA9IGlzRmxvYXQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0Zsb2F0NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0Zsb2F0NjRBcnJheSc7XG59XG5leHBvcnRzLmlzRmxvYXQ2NEFycmF5ID0gaXNGbG9hdDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnSW50NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0JpZ0ludDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0JpZ0ludDY0QXJyYXkgPSBpc0JpZ0ludDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnVWludDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdCaWdVaW50NjRBcnJheSc7XG59XG5leHBvcnRzLmlzQmlnVWludDY0QXJyYXkgPSBpc0JpZ1VpbnQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcF0nO1xufVxuaXNNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc01hcFRvU3RyaW5nKG5ldyBNYXAoKSlcbik7XG5cbmZ1bmN0aW9uIGlzTWFwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc01hcFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzTWFwVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIE1hcDtcbn1cbmV4cG9ydHMuaXNNYXAgPSBpc01hcDtcblxuZnVuY3Rpb24gaXNTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXRdJztcbn1cbmlzU2V0VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNTZXRUb1N0cmluZyhuZXcgU2V0KCkpXG4pO1xuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzU2V0VG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNTZXRUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2V0O1xufVxuZXhwb3J0cy5pc1NldCA9IGlzU2V0O1xuXG5mdW5jdGlvbiBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrTWFwXSc7XG59XG5pc1dlYWtNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrTWFwVG9TdHJpbmcobmV3IFdlYWtNYXAoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1dlYWtNYXBUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgV2Vha01hcDtcbn1cbmV4cG9ydHMuaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuXG5mdW5jdGlvbiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrU2V0XSc7XG59XG5pc1dlYWtTZXRUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrU2V0VG9TdHJpbmcobmV3IFdlYWtTZXQoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cbmlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgQXJyYXlCdWZmZXIoKSlcbik7XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGFWaWV3XSc7XG59XG5pc0RhdGFWaWV3VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzRGF0YVZpZXdUb1N0cmluZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpLCAwLCAxKSlcbik7XG5mdW5jdGlvbiBpc0RhdGFWaWV3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGFWaWV3O1xufVxuZXhwb3J0cy5pc0RhdGFWaWV3ID0gaXNEYXRhVmlldztcblxuLy8gU3RvcmUgYSBjb3B5IG9mIFNoYXJlZEFycmF5QnVmZmVyIGluIGNhc2UgaXQncyBkZWxldGVkIGVsc2V3aGVyZVxudmFyIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgPyBTaGFyZWRBcnJheUJ1ZmZlciA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTaGFyZWRBcnJheUJ1ZmZlcl0nO1xufVxuZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKG5ldyBTaGFyZWRBcnJheUJ1ZmZlckNvcHkoKSk7XG4gIH1cblxuICByZXR1cm4gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5O1xufVxuZXhwb3J0cy5pc1NoYXJlZEFycmF5QnVmZmVyID0gaXNTaGFyZWRBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNBc3luY0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJztcbn1cbmV4cG9ydHMuaXNBc3luY0Z1bmN0aW9uID0gaXNBc3luY0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc01hcEl0ZXJhdG9yKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcCBJdGVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc01hcEl0ZXJhdG9yID0gaXNNYXBJdGVyYXRvcjtcblxuZnVuY3Rpb24gaXNTZXRJdGVyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXQgSXRlcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNTZXRJdGVyYXRvciA9IGlzU2V0SXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEdlbmVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc0dlbmVyYXRvck9iamVjdCA9IGlzR2VuZXJhdG9yT2JqZWN0O1xuXG5mdW5jdGlvbiBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2ViQXNzZW1ibHkuTW9kdWxlXSc7XG59XG5leHBvcnRzLmlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSA9IGlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZTtcblxuZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIG51bWJlclZhbHVlKTtcbn1cbmV4cG9ydHMuaXNOdW1iZXJPYmplY3QgPSBpc051bWJlck9iamVjdDtcblxuZnVuY3Rpb24gaXNTdHJpbmdPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN0cmluZ1ZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTdHJpbmdPYmplY3QgPSBpc1N0cmluZ09iamVjdDtcblxuZnVuY3Rpb24gaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBib29sZWFuVmFsdWUpO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW5PYmplY3QgPSBpc0Jvb2xlYW5PYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBCaWdJbnRTdXBwb3J0ZWQgJiYgY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYmlnSW50VmFsdWUpO1xufVxuZXhwb3J0cy5pc0JpZ0ludE9iamVjdCA9IGlzQmlnSW50T2JqZWN0O1xuXG5mdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gU3ltYm9sU3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN5bWJvbFZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTeW1ib2xPYmplY3QgPSBpc1N5bWJvbE9iamVjdDtcblxuZnVuY3Rpb24gaXNCb3hlZFByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0JpZ0ludE9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N5bWJvbE9iamVjdCh2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNCb3hlZFByaW1pdGl2ZSA9IGlzQm94ZWRQcmltaXRpdmU7XG5cbmZ1bmN0aW9uIGlzQW55QXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHxcbiAgICBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FueUFycmF5QnVmZmVyID0gaXNBbnlBcnJheUJ1ZmZlcjtcblxuWydpc1Byb3h5JywgJ2lzRXh0ZXJuYWwnLCAnaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbWV0aG9kLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgaXMgbm90IHN1cHBvcnRlZCBpbiB1c2VybGFuZCcpO1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZSZWdleCA9IC9eJC87XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKSB7XG4gIHZhciBkZWJ1Z0VudiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUc7XG4gIGRlYnVnRW52ID0gZGVidWdFbnYucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCs/Ll0vZywgJ1xcXFwkJicpXG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnLionKVxuICAgIC5yZXBsYWNlKC8sL2csICckfF4nKVxuICAgIC50b1VwcGVyQ2FzZSgpO1xuICBkZWJ1Z0VudlJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBkZWJ1Z0VudiArICckJywgJ2knKTtcbn1cbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAoZGVidWdFbnZSZWdleC50ZXN0KHNldCkpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0cy50eXBlcyA9IHJlcXVpcmUoJy4vc3VwcG9ydC90eXBlcycpO1xuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuZXhwb3J0cy50eXBlcy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcbmV4cG9ydHMudHlwZXMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5leHBvcnRzLnR5cGVzLmlzTmF0aXZlRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IuYmluZChudWxsLCBudWxsLCByZXQpKSB9LFxuICAgICAgICAgICAgZnVuY3Rpb24ocmVqKSB7IHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2tpZnlPblJlamVjdGVkLmJpbmQobnVsbCwgcmVqLCBjYikpIH0pO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYWxsYmFja2lmaWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XG4gIHJldHVybiBjYWxsYmFja2lmaWVkO1xufVxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJ2ZvcmVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZ2xvYmFsVGhpcztcbnZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0aWYgKHR5cGVvZiBnW3R5cGVkQXJyYXldID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHRcdGlmIChTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSB7XG5cdFx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdFx0aWYgKCFkZXNjcmlwdG9yKSB7XG5cdFx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdFx0ZGVzY3JpcHRvciA9IGdPUEQoc3VwZXJQcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0b1N0clRhZ3NbdHlwZWRBcnJheV0gPSBkZXNjcmlwdG9yLmdldDtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgZm91bmROYW1lID0gZmFsc2U7XG5cdGZvckVhY2godG9TdHJUYWdzLCBmdW5jdGlvbiAoZ2V0dGVyLCB0eXBlZEFycmF5KSB7XG5cdFx0aWYgKCFmb3VuZE5hbWUpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBuYW1lID0gZ2V0dGVyLmNhbGwodmFsdWUpO1xuXHRcdFx0XHRpZiAobmFtZSA9PT0gdHlwZWRBcnJheSkge1xuXHRcdFx0XHRcdGZvdW5kTmFtZSA9IG5hbWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGZvdW5kTmFtZTtcbn07XG5cbnZhciBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCdpcy10eXBlZC1hcnJheScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIWlzVHlwZWRBcnJheSh2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpKSB7IHJldHVybiAkc2xpY2UoJHRvU3RyaW5nKHZhbHVlKSwgOCwgLTEpOyB9XG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuIiwiLy8gc291cmNlOiByZXNvdXJjZXMucHJvdG9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXdcclxuICogQGVuaGFuY2VhYmxlXHJcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXHJcbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXHJcbi8qIGVzbGludC1kaXNhYmxlICovXHJcbi8vIEB0cy1ub2NoZWNrXHJcblxyXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xyXG52YXIgZ29vZyA9IGpzcGI7XHJcbnZhciBnbG9iYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xyXG5cclxudmFyIGdvb2dsZV9wcm90b2J1Zl90aW1lc3RhbXBfcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYvZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcF9wYi5qcycpO1xyXG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIGdvb2dsZV9wcm90b2J1Zl90aW1lc3RhbXBfcGIpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkNoYW5nZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuQ2hhbmdlSUQnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkNoYW5nZVBhY2snLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkNoZWNrcG9pbnQnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkNsaWVudCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuQ2xpZW50cycsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuRG9jRXZlbnQnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkRvY0V2ZW50VHlwZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5KU09ORWxlbWVudCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuSlNPTkVsZW1lbnQuQm9keUNhc2UnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXInLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLk9wZXJhdGlvbicsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuT3BlcmF0aW9uLkFkZCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuT3BlcmF0aW9uLkJvZHlDYXNlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5PcGVyYXRpb24uRWRpdCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5PcGVyYXRpb24uTW92ZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5PcGVyYXRpb24uU2V0JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLlByZXNlbmNlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5Qcm9qZWN0JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5SR0FOb2RlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5SSFROb2RlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5SaWNoVGV4dE5vZGUnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHInLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLlRleHROb2RlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5UZXh0Tm9kZUlEJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5UZXh0Tm9kZVBvcycsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuVGltZVRpY2tldCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuVmFsdWVUeXBlJywgbnVsbCwgZ2xvYmFsKTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8uYXBpLkNoYW5nZVBhY2sucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuQ2hhbmdlUGFjaywganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5DaGFuZ2VQYWNrLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5DaGFuZ2VQYWNrJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLmFwaS5DaGFuZ2UucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuQ2hhbmdlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkNoYW5nZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuQ2hhbmdlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkNoYW5nZUlELCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkNoYW5nZUlELmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5DaGFuZ2VJRCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbiA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBwcm90by5hcGkuT3BlcmF0aW9uLm9uZW9mR3JvdXBzXyk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLk9wZXJhdGlvbiwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLk9wZXJhdGlvbic7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuT3BlcmF0aW9uLlNldC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuT3BlcmF0aW9uLlNldCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuT3BlcmF0aW9uLkFkZC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuT3BlcmF0aW9uLkFkZCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5PcGVyYXRpb24uTW92ZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuT3BlcmF0aW9uLk1vdmUnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuT3BlcmF0aW9uLkVkaXQsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuT3BlcmF0aW9uLkVkaXQuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIHByb3RvLmFwaS5KU09ORWxlbWVudC5vbmVvZkdyb3Vwc18pO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5KU09ORWxlbWVudCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuSlNPTkVsZW1lbnQnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlciA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlciwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuUkhUTm9kZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuUkhUTm9kZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5SSFROb2RlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5SSFROb2RlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuUkdBTm9kZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuUkdBTm9kZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5SR0FOb2RlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5SR0FOb2RlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGUgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLlRleHROb2RlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLlRleHROb2RlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5UZXh0Tm9kZSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuUmljaFRleHROb2RlQXR0cic7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuUmljaFRleHROb2RlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuUmljaFRleHROb2RlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVJRCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuVGV4dE5vZGVJRCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5UZXh0Tm9kZUlELmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5UZXh0Tm9kZUlEJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5hcGkuUHJvamVjdC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5Qcm9qZWN0LCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLlByb2plY3QuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLlByb2plY3QnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5Eb2N1bWVudFN1bW1hcnkgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5Eb2N1bWVudFN1bW1hcnkuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLlByZXNlbmNlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5QcmVzZW5jZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5QcmVzZW5jZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuUHJlc2VuY2UnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5DbGllbnQgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkNsaWVudCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5DbGllbnQuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkNsaWVudCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudHMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8uYXBpLkNsaWVudHMucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuQ2xpZW50cywganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5DbGllbnRzLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5DbGllbnRzJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hlY2twb2ludCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuQ2hlY2twb2ludCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5DaGVja3BvaW50LmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5DaGVja3BvaW50JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVQb3MgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLlRleHROb2RlUG9zLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLlRleHROb2RlUG9zLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5UZXh0Tm9kZVBvcyc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLlRpbWVUaWNrZXQsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuVGltZVRpY2tldC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuVGltZVRpY2tldCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLmFwaS5Eb2NFdmVudC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5Eb2NFdmVudCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5Eb2NFdmVudC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuRG9jRXZlbnQnO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxyXG4gKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59XHJcbiAqIEBjb25zdFxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucmVwZWF0ZWRGaWVsZHNfID0gWzRdO1xyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuQ2hhbmdlUGFjay50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DaGFuZ2VQYWNrfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgZG9jdW1lbnRLZXk6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgXCJcIiksXHJcbiAgICBjaGVja3BvaW50OiAoZiA9IG1zZy5nZXRDaGVja3BvaW50KCkpICYmIHByb3RvLmFwaS5DaGVja3BvaW50LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBzbmFwc2hvdDogbXNnLmdldFNuYXBzaG90X2FzQjY0KCksXHJcbiAgICBjaGFuZ2VzTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q2hhbmdlc0xpc3QoKSxcclxuICAgIHByb3RvLmFwaS5DaGFuZ2UudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSksXHJcbiAgICBtaW5TeW5jZWRUaWNrZXQ6IChmID0gbXNnLmdldE1pblN5bmNlZFRpY2tldCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuQ2hhbmdlUGFjaztcclxuICByZXR1cm4gcHJvdG8uYXBpLkNoYW5nZVBhY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQ2hhbmdlUGFja30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXREb2N1bWVudEtleSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkNoZWNrcG9pbnQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuQ2hlY2twb2ludC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q2hlY2twb2ludCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAocmVhZGVyLnJlYWRCeXRlcygpKTtcclxuICAgICAgbXNnLnNldFNuYXBzaG90KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDQ6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuQ2hhbmdlO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLkNoYW5nZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuYWRkQ2hhbmdlcyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0TWluU3luY2VkVGlja2V0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuQ2hhbmdlUGFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQ2hhbmdlUGFja30gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RG9jdW1lbnRLZXkoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldENoZWNrcG9pbnQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuQ2hlY2twb2ludC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0U25hcHNob3RfYXNVOCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxyXG4gICAgICAzLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDaGFuZ2VzTGlzdCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcclxuICAgICAgNCxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLkNoYW5nZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TWluU3luY2VkVGlja2V0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgZG9jdW1lbnRfa2V5ID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucHJvdG90eXBlLmdldERvY3VtZW50S2V5ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DaGFuZ2VQYWNrfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5zZXREb2N1bWVudEtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIENoZWNrcG9pbnQgY2hlY2twb2ludCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuQ2hlY2twb2ludH1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5nZXRDaGVja3BvaW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkNoZWNrcG9pbnR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkNoZWNrcG9pbnQsIDIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkNoZWNrcG9pbnR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuc2V0Q2hlY2twb2ludCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DaGFuZ2VQYWNrfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5jbGVhckNoZWNrcG9pbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDaGVja3BvaW50KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5oYXNDaGVja3BvaW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBzbmFwc2hvdCA9IDM7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5nZXRTbmFwc2hvdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgc25hcHNob3QgPSAzO1xyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRTbmFwc2hvdCgpYFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuZ2V0U25hcHNob3RfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRTbmFwc2hvdCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIHNuYXBzaG90ID0gMztcclxuICogTm90ZSB0aGF0IFVpbnQ4QXJyYXkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXHJcbiAqIEBzZWUgaHR0cDovL2Nhbml1c2UuY29tL1VpbnQ4QXJyYXlcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0U25hcHNob3QoKWBcclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuZ2V0U25hcHNob3RfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRTbmFwc2hvdCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlUGFja30gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuc2V0U25hcHNob3QgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHJlcGVhdGVkIENoYW5nZSBjaGFuZ2VzID0gNDtcclxuICogQHJldHVybiB7IUFycmF5PCFwcm90by5hcGkuQ2hhbmdlPn1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5nZXRDaGFuZ2VzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5hcGkuQ2hhbmdlPn0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5DaGFuZ2UsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLmFwaS5DaGFuZ2U+fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuc2V0Q2hhbmdlc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQ2hhbmdlPX0gb3B0X3ZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucHJvdG90eXBlLmFkZENoYW5nZXMgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA0LCBvcHRfdmFsdWUsIHByb3RvLmFwaS5DaGFuZ2UsIG9wdF9pbmRleCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucHJvdG90eXBlLmNsZWFyQ2hhbmdlc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDaGFuZ2VzTGlzdChbXSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgbWluX3N5bmNlZF90aWNrZXQgPSA1O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuZ2V0TWluU3luY2VkVGlja2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDUpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuQ2hhbmdlUGFjay5wcm90b3R5cGUuc2V0TWluU3luY2VkVGlja2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZVBhY2t9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZVBhY2sucHJvdG90eXBlLmNsZWFyTWluU3luY2VkVGlja2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0TWluU3luY2VkVGlja2V0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VQYWNrLnByb3RvdHlwZS5oYXNNaW5TeW5jZWRUaWNrZXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDUpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlLnJlcGVhdGVkRmllbGRzXyA9IFszXTtcclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2UucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuQ2hhbmdlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNoYW5nZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgaWQ6IChmID0gbXNnLmdldElkKCkpICYmIHByb3RvLmFwaS5DaGFuZ2VJRC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgbWVzc2FnZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCBcIlwiKSxcclxuICAgIG9wZXJhdGlvbnNMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRPcGVyYXRpb25zTGlzdCgpLFxyXG4gICAgcHJvdG8uYXBpLk9wZXJhdGlvbi50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DaGFuZ2V9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5DaGFuZ2U7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5DaGFuZ2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQ2hhbmdlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuQ2hhbmdlSUQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuQ2hhbmdlSUQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldElkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRNZXNzYWdlKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLk9wZXJhdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuYWRkT3BlcmF0aW9ucyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2UucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuQ2hhbmdlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DaGFuZ2V9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0SWQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuQ2hhbmdlSUQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE1lc3NhZ2UoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDIsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE9wZXJhdGlvbnNMaXN0KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuT3BlcmF0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgQ2hhbmdlSUQgaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkNoYW5nZUlEfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZS5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuQ2hhbmdlSUR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkNoYW5nZUlELCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DaGFuZ2VJRHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkNoYW5nZS5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2UucHJvdG90eXBlLmNsZWFySWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRJZCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlLnByb3RvdHlwZS5oYXNJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgc3RyaW5nIG1lc3NhZ2UgPSAyO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlLnByb3RvdHlwZS5nZXRNZXNzYWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DaGFuZ2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZS5wcm90b3R5cGUuc2V0TWVzc2FnZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHJlcGVhdGVkIE9wZXJhdGlvbiBvcGVyYXRpb25zID0gMztcclxuICogQHJldHVybiB7IUFycmF5PCFwcm90by5hcGkuT3BlcmF0aW9uPn1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2UucHJvdG90eXBlLmdldE9wZXJhdGlvbnNMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLmFwaS5PcGVyYXRpb24+fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLk9wZXJhdGlvbiwgMykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8uYXBpLk9wZXJhdGlvbj59IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkNoYW5nZS5wcm90b3R5cGUuc2V0T3BlcmF0aW9uc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uPX0gb3B0X3ZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZS5wcm90b3R5cGUuYWRkT3BlcmF0aW9ucyA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDMsIG9wdF92YWx1ZSwgcHJvdG8uYXBpLk9wZXJhdGlvbiwgb3B0X2luZGV4KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2UucHJvdG90eXBlLmNsZWFyT3BlcmF0aW9uc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRPcGVyYXRpb25zTGlzdChbXSk7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VJRC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5DaGFuZ2VJRC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DaGFuZ2VJRH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnRTZXE6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgMCksXHJcbiAgICBzZXJ2ZXJTZXE6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgXCIwXCIpLFxyXG4gICAgbGFtcG9ydDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCBcIjBcIiksXHJcbiAgICBhY3RvcklkOiBtc2cuZ2V0QWN0b3JJZF9hc0I2NCgpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZUlEfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5DaGFuZ2VJRDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkNoYW5nZUlELmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNoYW5nZUlEfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlSUR9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkVWludDMyKCkpO1xyXG4gICAgICBtc2cuc2V0Q2xpZW50U2VxKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRVaW50NjRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRTZXJ2ZXJTZXEodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFVpbnQ2NFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldExhbXBvcnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRBY3RvcklkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkNoYW5nZUlELnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DaGFuZ2VJRH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VJRC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldENsaWVudFNlcSgpO1xyXG4gIGlmIChmICE9PSAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVVaW50MzIoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFNlcnZlclNlcSgpO1xyXG4gIGlmIChwYXJzZUludChmLCAxMCkgIT09IDApIHtcclxuICAgIHdyaXRlci53cml0ZVVpbnQ2NFN0cmluZyhcclxuICAgICAgMixcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TGFtcG9ydCgpO1xyXG4gIGlmIChwYXJzZUludChmLCAxMCkgIT09IDApIHtcclxuICAgIHdyaXRlci53cml0ZVVpbnQ2NFN0cmluZyhcclxuICAgICAgMyxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0QWN0b3JJZF9hc1U4KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlQnl0ZXMoXHJcbiAgICAgIDQsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCB1aW50MzIgY2xpZW50X3NlcSA9IDE7XHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbnByb3RvLmFwaS5DaGFuZ2VJRC5wcm90b3R5cGUuZ2V0Q2xpZW50U2VxID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DaGFuZ2VJRH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQucHJvdG90eXBlLnNldENsaWVudFNlcSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHVpbnQ2NCBzZXJ2ZXJfc2VxID0gMjtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELnByb3RvdHlwZS5nZXRTZXJ2ZXJTZXEgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIjBcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DaGFuZ2VJRH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQucHJvdG90eXBlLnNldFNlcnZlclNlcSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHVpbnQ2NCBsYW1wb3J0ID0gMztcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELnByb3RvdHlwZS5nZXRMYW1wb3J0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgXCIwXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlSUR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELnByb3RvdHlwZS5zZXRMYW1wb3J0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgYWN0b3JfaWQgPSA0O1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQucHJvdG90eXBlLmdldEFjdG9ySWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA0LCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGFjdG9yX2lkID0gNDtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0QWN0b3JJZCgpYFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hhbmdlSUQucHJvdG90eXBlLmdldEFjdG9ySWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRBY3RvcklkKCkpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgYWN0b3JfaWQgPSA0O1xyXG4gKiBOb3RlIHRoYXQgVWludDhBcnJheSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cclxuICogQHNlZSBodHRwOi8vY2FuaXVzZS5jb20vVWludDhBcnJheVxyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRBY3RvcklkKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELnByb3RvdHlwZS5nZXRBY3RvcklkX2FzVTggPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgoXHJcbiAgICAgIHRoaXMuZ2V0QWN0b3JJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hhbmdlSUR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoYW5nZUlELnByb3RvdHlwZS5zZXRBY3RvcklkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogT25lb2YgZ3JvdXAgZGVmaW5pdGlvbnMgZm9yIHRoaXMgbWVzc2FnZS4gRWFjaCBncm91cCBkZWZpbmVzIHRoZSBmaWVsZFxyXG4gKiBudW1iZXJzIGJlbG9uZ2luZyB0byB0aGF0IGdyb3VwLiBXaGVuIG9mIHRoZXNlIGZpZWxkcycgdmFsdWUgaXMgc2V0LCBhbGxcclxuICogb3RoZXIgZmllbGRzIGluIHRoZSBncm91cCBhcmUgY2xlYXJlZC4gRHVyaW5nIGRlc2VyaWFsaXphdGlvbiwgaWYgbXVsdGlwbGVcclxuICogZmllbGRzIGFyZSBlbmNvdW50ZXJlZCBmb3IgYSBncm91cCwgb25seSB0aGUgbGFzdCB2YWx1ZSBzZWVuIHdpbGwgYmUga2VwdC5cclxuICogQHByaXZhdGUgeyFBcnJheTwhQXJyYXk8bnVtYmVyPj59XHJcbiAqIEBjb25zdFxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5vbmVvZkdyb3Vwc18gPSBbWzEsMiwzLDQsNSw2LDcsOCw5XV07XHJcblxyXG4vKipcclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uQm9keUNhc2UgPSB7XHJcbiAgQk9EWV9OT1RfU0VUOiAwLFxyXG4gIFNFVDogMSxcclxuICBBREQ6IDIsXHJcbiAgTU9WRTogMyxcclxuICBSRU1PVkU6IDQsXHJcbiAgRURJVDogNSxcclxuICBTRUxFQ1Q6IDYsXHJcbiAgUklDSF9FRElUOiA3LFxyXG4gIFNUWUxFOiA4LFxyXG4gIElOQ1JFQVNFOiA5XHJcbn07XHJcblxyXG4vKipcclxuICogQHJldHVybiB7cHJvdG8uYXBpLk9wZXJhdGlvbi5Cb2R5Q2FzZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmdldEJvZHlDYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7cHJvdG8uYXBpLk9wZXJhdGlvbi5Cb2R5Q2FzZX0gKi8oanNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2UodGhpcywgcHJvdG8uYXBpLk9wZXJhdGlvbi5vbmVvZkdyb3Vwc19bMF0pKTtcclxufTtcclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuT3BlcmF0aW9uLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgc2V0OiAoZiA9IG1zZy5nZXRTZXQoKSkgJiYgcHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGFkZDogKGYgPSBtc2cuZ2V0QWRkKCkpICYmIHByb3RvLmFwaS5PcGVyYXRpb24uQWRkLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBtb3ZlOiAoZiA9IG1zZy5nZXRNb3ZlKCkpICYmIHByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgcmVtb3ZlOiAoZiA9IG1zZy5nZXRSZW1vdmUoKSkgJiYgcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGVkaXQ6IChmID0gbXNnLmdldEVkaXQoKSkgJiYgcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBzZWxlY3Q6IChmID0gbXNnLmdldFNlbGVjdCgpKSAmJiBwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgcmljaEVkaXQ6IChmID0gbXNnLmdldFJpY2hFZGl0KCkpICYmIHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHN0eWxlOiAoZiA9IG1zZy5nZXRTdHlsZSgpKSAmJiBwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBpbmNyZWFzZTogKGYgPSBtc2cuZ2V0SW5jcmVhc2UoKSkgJiYgcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbjtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb259IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5PcGVyYXRpb24uU2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFNldCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuT3BlcmF0aW9uLkFkZC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0QWRkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uLk1vdmU7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuT3BlcmF0aW9uLk1vdmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldE1vdmUodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFJlbW92ZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRFZGl0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDY6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRTZWxlY3QodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNzpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRSaWNoRWRpdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA4OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFN0eWxlKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDk6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0SW5jcmVhc2UodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLk9wZXJhdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9ufSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldFNldCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRBZGQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuT3BlcmF0aW9uLkFkZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TW92ZSgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDMsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UmVtb3ZlKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNCxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEVkaXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA1LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuT3BlcmF0aW9uLkVkaXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFNlbGVjdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDYsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRSaWNoRWRpdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDcsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFN0eWxlKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgOCxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0SW5jcmVhc2UoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA5LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuT3BlcmF0aW9uLlNldC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2V0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRQYXJlbnRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGtleToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCBcIlwiKSxcclxuICAgIHZhbHVlOiAoZiA9IG1zZy5nZXRWYWx1ZSgpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGV4ZWN1dGVkQXQ6IChmID0gbXNnLmdldEV4ZWN1dGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQ7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uU2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZXR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UGFyZW50Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRLZXkodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldEV4ZWN1dGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNldC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2V0fSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0S2V5KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRWYWx1ZSgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDMsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RXhlY3V0ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDQsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBwYXJlbnRfY3JlYXRlZF9hdCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnByb3RvdHlwZS5nZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNldH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnByb3RvdHlwZS5zZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNldH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNldC5wcm90b3R5cGUuY2xlYXJQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRQYXJlbnRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQucHJvdG90eXBlLmhhc1BhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgc3RyaW5nIGtleSA9IDI7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZXR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQucHJvdG90eXBlLnNldEtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIEpTT05FbGVtZW50U2ltcGxlIHZhbHVlID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2V0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2V0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZXR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQucHJvdG90eXBlLmNsZWFyVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRWYWx1ZSh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNldC5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgZXhlY3V0ZWRfYXQgPSA0O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNldC5wcm90b3R5cGUuZ2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA0KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2V0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZXQucHJvdG90eXBlLnNldEV4ZWN1dGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNldH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNldC5wcm90b3R5cGUuY2xlYXJFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RXhlY3V0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNldC5wcm90b3R5cGUuaGFzRXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuT3BlcmF0aW9uLkFkZC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uQWRkfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uQWRkLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRQYXJlbnRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHByZXZDcmVhdGVkQXQ6IChmID0gbXNnLmdldFByZXZDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHZhbHVlOiAoZiA9IG1zZy5nZXRWYWx1ZSgpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGV4ZWN1dGVkQXQ6IChmID0gbXNnLmdldEV4ZWN1dGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uQWRkfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQ7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uQWRkLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uQWRkfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UGFyZW50Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRQcmV2Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGU7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDQ6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRFeGVjdXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuT3BlcmF0aW9uLkFkZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLkFkZH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uQWRkLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UGFyZW50Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFByZXZDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0VmFsdWUoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA0LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcGFyZW50X2NyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkFkZC5wcm90b3R5cGUuZ2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDEpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkFkZC5wcm90b3R5cGUuc2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLmNsZWFyUGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UGFyZW50Q3JlYXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uQWRkLnByb3RvdHlwZS5oYXNQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcHJldl9jcmVhdGVkX2F0ID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLmdldFByZXZDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkFkZH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uQWRkLnByb3RvdHlwZS5zZXRQcmV2Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLmNsZWFyUHJldkNyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFByZXZDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLmhhc1ByZXZDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIEpTT05FbGVtZW50U2ltcGxlIHZhbHVlID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uQWRkLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uQWRkfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5BZGR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLmNsZWFyVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRWYWx1ZSh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkFkZC5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgZXhlY3V0ZWRfYXQgPSA0O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkFkZC5wcm90b3R5cGUuZ2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA0KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uQWRkfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5BZGQucHJvdG90eXBlLnNldEV4ZWN1dGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkFkZH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkFkZC5wcm90b3R5cGUuY2xlYXJFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RXhlY3V0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkFkZC5wcm90b3R5cGUuaGFzRXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIHBhcmVudENyZWF0ZWRBdDogKGYgPSBtc2cuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBwcmV2Q3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRQcmV2Q3JlYXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBjcmVhdGVkQXQ6IChmID0gbXNnLmdldENyZWF0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgZXhlY3V0ZWRBdDogKGYgPSBtc2cuZ2V0RXhlY3V0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5PcGVyYXRpb24uTW92ZTtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLk1vdmV9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLk1vdmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UGFyZW50Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRQcmV2Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldEV4ZWN1dGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLk1vdmUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuT3BlcmF0aW9uLk1vdmUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UGFyZW50Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFByZXZDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMyxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA0LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcGFyZW50X2NyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLk1vdmUucHJvdG90eXBlLmdldFBhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uTW92ZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5wcm90b3R5cGUuc2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5wcm90b3R5cGUuY2xlYXJQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRQYXJlbnRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS5oYXNQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcHJldl9jcmVhdGVkX2F0ID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS5nZXRQcmV2Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS5zZXRQcmV2Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5wcm90b3R5cGUuY2xlYXJQcmV2Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UHJldkNyZWF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLk1vdmUucHJvdG90eXBlLmhhc1ByZXZDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDM7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5wcm90b3R5cGUuZ2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLk1vdmV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS5jbGVhckNyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldENyZWF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLk1vdmUucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBleGVjdXRlZF9hdCA9IDQ7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5wcm90b3R5cGUuZ2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA0KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uTW92ZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uTW92ZS5wcm90b3R5cGUuc2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uTW92ZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLk1vdmUucHJvdG90eXBlLmNsZWFyRXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEV4ZWN1dGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLnByb3RvdHlwZS5oYXNFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBwYXJlbnRDcmVhdGVkQXQ6IChmID0gbXNnLmdldFBhcmVudENyZWF0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGV4ZWN1dGVkQXQ6IChmID0gbXNnLmdldEV4ZWN1dGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmU7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UGFyZW50Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldEV4ZWN1dGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcGFyZW50X2NyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZS5wcm90b3R5cGUuZ2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDEpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZS5wcm90b3R5cGUuc2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUucHJvdG90eXBlLmNsZWFyUGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UGFyZW50Q3JlYXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnByb3RvdHlwZS5oYXNQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnByb3RvdHlwZS5nZXRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZS5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBleGVjdXRlZF9hdCA9IDM7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnByb3RvdHlwZS5nZXRFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJlbW92ZS5wcm90b3R5cGUuc2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnByb3RvdHlwZS5jbGVhckV4ZWN1dGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRFeGVjdXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlLnByb3RvdHlwZS5oYXNFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuT3BlcmF0aW9uLkVkaXQudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLkVkaXR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRQYXJlbnRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGZyb206IChmID0gbXNnLmdldEZyb20oKSkgJiYgcHJvdG8uYXBpLlRleHROb2RlUG9zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICB0bzogKGYgPSBtc2cuZ2V0VG8oKSkgJiYgcHJvdG8uYXBpLlRleHROb2RlUG9zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBjcmVhdGVkQXRNYXBCeUFjdG9yTWFwOiAoZiA9IG1zZy5nZXRDcmVhdGVkQXRNYXBCeUFjdG9yTWFwKCkpID8gZi50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KSA6IFtdLFxyXG4gICAgY29udGVudDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA1LCBcIlwiKSxcclxuICAgIGV4ZWN1dGVkQXQ6IChmID0gbXNnLmdldEV4ZWN1dGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uRWRpdH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uLkVkaXQ7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uRWRpdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFBhcmVudENyZWF0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlUG9zO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRleHROb2RlUG9zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRGcm9tKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGV4dE5vZGVQb3M7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGV4dE5vZGVQb3MuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFRvKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDQ6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG1zZy5nZXRDcmVhdGVkQXRNYXBCeUFjdG9yTWFwKCk7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSwgZnVuY3Rpb24obWVzc2FnZSwgcmVhZGVyKSB7XHJcbiAgICAgICAganNwYi5NYXAuZGVzZXJpYWxpemVCaW5hcnkobWVzc2FnZSwgcmVhZGVyLCBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFN0cmluZywganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLCBwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIsIFwiXCIsIG5ldyBwcm90by5hcGkuVGltZVRpY2tldCgpKTtcclxuICAgICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0Q29udGVudCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA2OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RXhlY3V0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLkVkaXR9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RnJvbSgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0VG8oKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGV4dE5vZGVQb3Muc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldENyZWF0ZWRBdE1hcEJ5QWN0b3JNYXAodHJ1ZSk7XHJcbiAgaWYgKGYgJiYgZi5nZXRMZW5ndGgoKSA+IDApIHtcclxuICAgIGYuc2VyaWFsaXplQmluYXJ5KDQsIHdyaXRlciwganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nLCBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLCBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldENvbnRlbnQoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDUsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA2LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcGFyZW50X2NyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQucHJvdG90eXBlLmdldFBhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uRWRpdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuc2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuY2xlYXJQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRQYXJlbnRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5oYXNQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRleHROb2RlUG9zIGZyb20gPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRleHROb2RlUG9zfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5nZXRGcm9tID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRleHROb2RlUG9zfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UZXh0Tm9kZVBvcywgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGV4dE5vZGVQb3N8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5zZXRGcm9tID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuY2xlYXJGcm9tID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RnJvbSh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQucHJvdG90eXBlLmhhc0Zyb20gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRleHROb2RlUG9zIHRvID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UZXh0Tm9kZVBvc31cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuZ2V0VG8gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGV4dE5vZGVQb3N9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRleHROb2RlUG9zLCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UZXh0Tm9kZVBvc3x1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkVkaXR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQucHJvdG90eXBlLnNldFRvID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuY2xlYXJUbyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFRvKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuaGFzVG8gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG1hcDxzdHJpbmcsIFRpbWVUaWNrZXQ+IGNyZWF0ZWRfYXRfbWFwX2J5X2FjdG9yID0gNDtcclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X25vTGF6eUNyZWF0ZSBEbyBub3QgY3JlYXRlIHRoZSBtYXAgaWZcclxuICogZW1wdHksIGluc3RlYWQgcmV0dXJuaW5nIGB1bmRlZmluZWRgXHJcbiAqIEByZXR1cm4geyFqc3BiLk1hcDxzdHJpbmcsIXByb3RvLmFwaS5UaW1lVGlja2V0Pn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZEF0TWFwQnlBY3Rvck1hcCA9IGZ1bmN0aW9uKG9wdF9ub0xhenlDcmVhdGUpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshanNwYi5NYXA8c3RyaW5nLCFwcm90by5hcGkuVGltZVRpY2tldD59ICovIChcclxuICAgICAganNwYi5NZXNzYWdlLmdldE1hcEZpZWxkKHRoaXMsIDQsIG9wdF9ub0xhenlDcmVhdGUsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB2YWx1ZXMgZnJvbSB0aGUgbWFwLiBUaGUgbWFwIHdpbGwgYmUgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkVkaXR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5jbGVhckNyZWF0ZWRBdE1hcEJ5QWN0b3JNYXAgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmdldENyZWF0ZWRBdE1hcEJ5QWN0b3JNYXAoKS5jbGVhcigpO1xyXG4gIHJldHVybiB0aGlzO307XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHN0cmluZyBjb250ZW50ID0gNTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5nZXRDb250ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uRWRpdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgNSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IGV4ZWN1dGVkX2F0ID0gNjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5nZXRFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDYpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0LnByb3RvdHlwZS5zZXRFeGVjdXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA2LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uRWRpdC5wcm90b3R5cGUuY2xlYXJFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RXhlY3V0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkVkaXQucHJvdG90eXBlLmhhc0V4ZWN1dGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDYpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIHBhcmVudENyZWF0ZWRBdDogKGYgPSBtc2cuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBmcm9tOiAoZiA9IG1zZy5nZXRGcm9tKCkpICYmIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgdG86IChmID0gbXNnLmdldFRvKCkpICYmIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgZXhlY3V0ZWRBdDogKGYgPSBtc2cuZ2V0RXhlY3V0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRQYXJlbnRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UZXh0Tm9kZVBvcztcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RnJvbSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlUG9zO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRleHROb2RlUG9zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRUbyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RXhlY3V0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldFBhcmVudENyZWF0ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRGcm9tKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlUG9zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRUbygpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDMsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RXhlY3V0ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDQsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBwYXJlbnRfY3JlYXRlZF9hdCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5nZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5zZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuY2xlYXJQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRQYXJlbnRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3QucHJvdG90eXBlLmhhc1BhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGV4dE5vZGVQb3MgZnJvbSA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGV4dE5vZGVQb3N9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuZ2V0RnJvbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UZXh0Tm9kZVBvc30gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGV4dE5vZGVQb3MsIDIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRleHROb2RlUG9zfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3QucHJvdG90eXBlLnNldEZyb20gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuY2xlYXJGcm9tID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RnJvbSh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuaGFzRnJvbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGV4dE5vZGVQb3MgdG8gPSAzO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRleHROb2RlUG9zfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3QucHJvdG90eXBlLmdldFRvID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRleHROb2RlUG9zfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UZXh0Tm9kZVBvcywgMykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGV4dE5vZGVQb3N8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3R9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuc2V0VG8gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuY2xlYXJUbyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFRvKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5oYXNUbyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBleGVjdXRlZF9hdCA9IDQ7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5nZXRFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3R9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdC5wcm90b3R5cGUuc2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5jbGVhckV4ZWN1dGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRFeGVjdXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU2VsZWN0LnByb3RvdHlwZS5oYXNFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIHBhcmVudENyZWF0ZWRBdDogKGYgPSBtc2cuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBmcm9tOiAoZiA9IG1zZy5nZXRGcm9tKCkpICYmIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgdG86IChmID0gbXNnLmdldFRvKCkpICYmIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgY3JlYXRlZEF0TWFwQnlBY3Rvck1hcDogKGYgPSBtc2cuZ2V0Q3JlYXRlZEF0TWFwQnlBY3Rvck1hcCgpKSA/IGYudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdCkgOiBbXSxcclxuICAgIGNvbnRlbnQ6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgNSwgXCJcIiksXHJcbiAgICBhdHRyaWJ1dGVzTWFwOiAoZiA9IG1zZy5nZXRBdHRyaWJ1dGVzTWFwKCkpID8gZi50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIHVuZGVmaW5lZCkgOiBbXSxcclxuICAgIGV4ZWN1dGVkQXQ6IChmID0gbXNnLmdldEV4ZWN1dGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQ7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRQYXJlbnRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UZXh0Tm9kZVBvcztcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RnJvbSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlUG9zO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRleHROb2RlUG9zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRUbyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBtc2cuZ2V0Q3JlYXRlZEF0TWFwQnlBY3Rvck1hcCgpO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsIGZ1bmN0aW9uKG1lc3NhZ2UsIHJlYWRlcikge1xyXG4gICAgICAgIGpzcGIuTWFwLmRlc2VyaWFsaXplQmluYXJ5KG1lc3NhZ2UsIHJlYWRlciwganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTdHJpbmcsIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSwgcHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLCBcIlwiLCBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQoKSk7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldENvbnRlbnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNjpcclxuICAgICAgdmFyIHZhbHVlID0gbXNnLmdldEF0dHJpYnV0ZXNNYXAoKTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLCBmdW5jdGlvbihtZXNzYWdlLCByZWFkZXIpIHtcclxuICAgICAgICBqc3BiLk1hcC5kZXNlcmlhbGl6ZUJpbmFyeShtZXNzYWdlLCByZWFkZXIsIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nLCBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFN0cmluZywgbnVsbCwgXCJcIiwgXCJcIik7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNzpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldEV4ZWN1dGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldFBhcmVudENyZWF0ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRGcm9tKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlUG9zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRUbygpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDMsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0TWFwQnlBY3Rvck1hcCh0cnVlKTtcclxuICBpZiAoZiAmJiBmLmdldExlbmd0aCgpID4gMCkge1xyXG4gICAgZi5zZXJpYWxpemVCaW5hcnkoNCwgd3JpdGVyLCBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTdHJpbmcsIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q29udGVudCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVN0cmluZyhcclxuICAgICAgNSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0QXR0cmlidXRlc01hcCh0cnVlKTtcclxuICBpZiAoZiAmJiBmLmdldExlbmd0aCgpID4gMCkge1xyXG4gICAgZi5zZXJpYWxpemVCaW5hcnkoNiwgd3JpdGVyLCBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTdHJpbmcsIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZyk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA3LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcGFyZW50X2NyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5nZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuc2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5jbGVhclBhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFBhcmVudENyZWF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5oYXNQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRleHROb2RlUG9zIGZyb20gPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRleHROb2RlUG9zfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuZ2V0RnJvbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UZXh0Tm9kZVBvc30gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGV4dE5vZGVQb3MsIDIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRleHROb2RlUG9zfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5zZXRGcm9tID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5jbGVhckZyb20gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRGcm9tKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQucHJvdG90eXBlLmhhc0Zyb20gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRleHROb2RlUG9zIHRvID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UZXh0Tm9kZVBvc31cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQucHJvdG90eXBlLmdldFRvID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRleHROb2RlUG9zfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UZXh0Tm9kZVBvcywgMykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGV4dE5vZGVQb3N8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQucHJvdG90eXBlLnNldFRvID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5jbGVhclRvID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0VG8odW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuaGFzVG8gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG1hcDxzdHJpbmcsIFRpbWVUaWNrZXQ+IGNyZWF0ZWRfYXRfbWFwX2J5X2FjdG9yID0gNDtcclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X25vTGF6eUNyZWF0ZSBEbyBub3QgY3JlYXRlIHRoZSBtYXAgaWZcclxuICogZW1wdHksIGluc3RlYWQgcmV0dXJuaW5nIGB1bmRlZmluZWRgXHJcbiAqIEByZXR1cm4geyFqc3BiLk1hcDxzdHJpbmcsIXByb3RvLmFwaS5UaW1lVGlja2V0Pn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQucHJvdG90eXBlLmdldENyZWF0ZWRBdE1hcEJ5QWN0b3JNYXAgPSBmdW5jdGlvbihvcHRfbm9MYXp5Q3JlYXRlKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IWpzcGIuTWFwPHN0cmluZywhcHJvdG8uYXBpLlRpbWVUaWNrZXQ+fSAqLyAoXHJcbiAgICAgIGpzcGIuTWVzc2FnZS5nZXRNYXBGaWVsZCh0aGlzLCA0LCBvcHRfbm9MYXp5Q3JlYXRlLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdmFsdWVzIGZyb20gdGhlIG1hcC4gVGhlIG1hcCB3aWxsIGJlIG5vbi1udWxsLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5jbGVhckNyZWF0ZWRBdE1hcEJ5QWN0b3JNYXAgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmdldENyZWF0ZWRBdE1hcEJ5QWN0b3JNYXAoKS5jbGVhcigpO1xyXG4gIHJldHVybiB0aGlzO307XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHN0cmluZyBjb250ZW50ID0gNTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDUsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgNSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBtYXA8c3RyaW5nLCBzdHJpbmc+IGF0dHJpYnV0ZXMgPSA2O1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9MYXp5Q3JlYXRlIERvIG5vdCBjcmVhdGUgdGhlIG1hcCBpZlxyXG4gKiBlbXB0eSwgaW5zdGVhZCByZXR1cm5pbmcgYHVuZGVmaW5lZGBcclxuICogQHJldHVybiB7IWpzcGIuTWFwPHN0cmluZyxzdHJpbmc+fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlc01hcCA9IGZ1bmN0aW9uKG9wdF9ub0xhenlDcmVhdGUpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshanNwYi5NYXA8c3RyaW5nLHN0cmluZz59ICovIChcclxuICAgICAganNwYi5NZXNzYWdlLmdldE1hcEZpZWxkKHRoaXMsIDYsIG9wdF9ub0xhenlDcmVhdGUsXHJcbiAgICAgIG51bGwpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHZhbHVlcyBmcm9tIHRoZSBtYXAuIFRoZSBtYXAgd2lsbCBiZSBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuY2xlYXJBdHRyaWJ1dGVzTWFwID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5nZXRBdHRyaWJ1dGVzTWFwKCkuY2xlYXIoKTtcclxuICByZXR1cm4gdGhpczt9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IGV4ZWN1dGVkX2F0ID0gNztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdC5wcm90b3R5cGUuZ2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA3KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5zZXRFeGVjdXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA3LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0LnByb3RvdHlwZS5jbGVhckV4ZWN1dGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRFeGVjdXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQucHJvdG90eXBlLmhhc0V4ZWN1dGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDcpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgcGFyZW50Q3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRQYXJlbnRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGZyb206IChmID0gbXNnLmdldEZyb20oKSkgJiYgcHJvdG8uYXBpLlRleHROb2RlUG9zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICB0bzogKGYgPSBtc2cuZ2V0VG8oKSkgJiYgcHJvdG8uYXBpLlRleHROb2RlUG9zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBhdHRyaWJ1dGVzTWFwOiAoZiA9IG1zZy5nZXRBdHRyaWJ1dGVzTWFwKCkpID8gZi50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIHVuZGVmaW5lZCkgOiBbXSxcclxuICAgIGV4ZWN1dGVkQXQ6IChmID0gbXNnLmdldEV4ZWN1dGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGV9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGU7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRQYXJlbnRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UZXh0Tm9kZVBvcztcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RnJvbSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlUG9zO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRleHROb2RlUG9zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRUbyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBtc2cuZ2V0QXR0cmlidXRlc01hcCgpO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsIGZ1bmN0aW9uKG1lc3NhZ2UsIHJlYWRlcikge1xyXG4gICAgICAgIGpzcGIuTWFwLmRlc2VyaWFsaXplQmluYXJ5KG1lc3NhZ2UsIHJlYWRlciwganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTdHJpbmcsIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nLCBudWxsLCBcIlwiLCBcIlwiKTtcclxuICAgICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RXhlY3V0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGV9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UGFyZW50Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEZyb20oKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGV4dE5vZGVQb3Muc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFRvKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMyxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlUG9zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRBdHRyaWJ1dGVzTWFwKHRydWUpO1xyXG4gIGlmIChmICYmIGYuZ2V0TGVuZ3RoKCkgPiAwKSB7XHJcbiAgICBmLnNlcmlhbGl6ZUJpbmFyeSg0LCB3cml0ZXIsIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZywganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RXhlY3V0ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDUsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBwYXJlbnRfY3JlYXRlZF9hdCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmdldFBhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGV9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnByb3RvdHlwZS5zZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmNsZWFyUGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UGFyZW50Q3JlYXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmhhc1BhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGV4dE5vZGVQb3MgZnJvbSA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGV4dE5vZGVQb3N9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnByb3RvdHlwZS5nZXRGcm9tID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRleHROb2RlUG9zfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UZXh0Tm9kZVBvcywgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGV4dE5vZGVQb3N8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLnNldEZyb20gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmNsZWFyRnJvbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEZyb20odW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5wcm90b3R5cGUuaGFzRnJvbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGV4dE5vZGVQb3MgdG8gPSAzO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRleHROb2RlUG9zfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5wcm90b3R5cGUuZ2V0VG8gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGV4dE5vZGVQb3N9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRleHROb2RlUG9zLCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UZXh0Tm9kZVBvc3x1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5wcm90b3R5cGUuc2V0VG8gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmNsZWFyVG8gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRUbyh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnByb3RvdHlwZS5oYXNUbyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogbWFwPHN0cmluZywgc3RyaW5nPiBhdHRyaWJ1dGVzID0gNDtcclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X25vTGF6eUNyZWF0ZSBEbyBub3QgY3JlYXRlIHRoZSBtYXAgaWZcclxuICogZW1wdHksIGluc3RlYWQgcmV0dXJuaW5nIGB1bmRlZmluZWRgXHJcbiAqIEByZXR1cm4geyFqc3BiLk1hcDxzdHJpbmcsc3RyaW5nPn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmdldEF0dHJpYnV0ZXNNYXAgPSBmdW5jdGlvbihvcHRfbm9MYXp5Q3JlYXRlKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IWpzcGIuTWFwPHN0cmluZyxzdHJpbmc+fSAqLyAoXHJcbiAgICAgIGpzcGIuTWVzc2FnZS5nZXRNYXBGaWVsZCh0aGlzLCA0LCBvcHRfbm9MYXp5Q3JlYXRlLFxyXG4gICAgICBudWxsKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB2YWx1ZXMgZnJvbSB0aGUgbWFwLiBUaGUgbWFwIHdpbGwgYmUgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmNsZWFyQXR0cmlidXRlc01hcCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZ2V0QXR0cmlidXRlc01hcCgpLmNsZWFyKCk7XHJcbiAgcmV0dXJuIHRoaXM7fTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBleGVjdXRlZF9hdCA9IDU7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGUucHJvdG90eXBlLmdldEV4ZWN1dGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgNSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5wcm90b3R5cGUuc2V0RXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb24uU3R5bGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZS5wcm90b3R5cGUuY2xlYXJFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RXhlY3V0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLnByb3RvdHlwZS5oYXNFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2V9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIHBhcmVudENyZWF0ZWRBdDogKGYgPSBtc2cuZ2V0UGFyZW50Q3JlYXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICB2YWx1ZTogKGYgPSBtc2cuZ2V0VmFsdWUoKSkgJiYgcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBleGVjdXRlZEF0OiAoZiA9IG1zZy5nZXRFeGVjdXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlO1xyXG4gIHJldHVybiBwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UGFyZW50Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGU7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRFeGVjdXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRQYXJlbnRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0VmFsdWUoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcGFyZW50X2NyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnByb3RvdHlwZS5nZXRQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5wcm90b3R5cGUuc2V0UGFyZW50Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnByb3RvdHlwZS5jbGVhclBhcmVudENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFBhcmVudENyZWF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnByb3RvdHlwZS5oYXNQYXJlbnRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIEpTT05FbGVtZW50U2ltcGxlIHZhbHVlID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2UucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZSwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGV8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2UucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnByb3RvdHlwZS5jbGVhclZhbHVlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0VmFsdWUodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgZXhlY3V0ZWRfYXQgPSAzO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlLnByb3RvdHlwZS5nZXRFeGVjdXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2UucHJvdG90eXBlLnNldEV4ZWN1dGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2UucHJvdG90eXBlLmNsZWFyRXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEV4ZWN1dGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZS5wcm90b3R5cGUuaGFzRXhlY3V0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgU2V0IHNldCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuT3BlcmF0aW9uLlNldH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmdldFNldCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5PcGVyYXRpb24uU2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5PcGVyYXRpb24uU2V0LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5PcGVyYXRpb24uU2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5zZXRTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgMSwgcHJvdG8uYXBpLk9wZXJhdGlvbi5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmNsZWFyU2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0U2V0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmhhc1NldCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgQWRkIGFkZCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuT3BlcmF0aW9uLkFkZH1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmdldEFkZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5PcGVyYXRpb24uQWRkfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5PcGVyYXRpb24uQWRkLCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5PcGVyYXRpb24uQWRkfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5zZXRBZGQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgMiwgcHJvdG8uYXBpLk9wZXJhdGlvbi5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmNsZWFyQWRkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0QWRkKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmhhc0FkZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgTW92ZSBtb3ZlID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5PcGVyYXRpb24uTW92ZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmdldE1vdmUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuT3BlcmF0aW9uLk1vdmV9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLk9wZXJhdGlvbi5Nb3ZlLCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5PcGVyYXRpb24uTW92ZXx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuc2V0TW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCAzLCBwcm90by5hcGkuT3BlcmF0aW9uLm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuY2xlYXJNb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0TW92ZSh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5oYXNNb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBSZW1vdmUgcmVtb3ZlID0gNDtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5PcGVyYXRpb24uUmVtb3ZlfVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuZ2V0UmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmUsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLk9wZXJhdGlvbi5SZW1vdmV8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbn0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLnNldFJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCA0LCBwcm90by5hcGkuT3BlcmF0aW9uLm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuY2xlYXJSZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRSZW1vdmUodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuaGFzUmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBFZGl0IGVkaXQgPSA1O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuZ2V0RWRpdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5PcGVyYXRpb24uRWRpdH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuT3BlcmF0aW9uLkVkaXQsIDUpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLk9wZXJhdGlvbi5FZGl0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5zZXRFZGl0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDUsIHByb3RvLmFwaS5PcGVyYXRpb24ub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbn0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5jbGVhckVkaXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRFZGl0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmhhc0VkaXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDUpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFNlbGVjdCBzZWxlY3QgPSA2O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLk9wZXJhdGlvbi5TZWxlY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5nZXRTZWxlY3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdCwgNikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuT3BlcmF0aW9uLlNlbGVjdHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuc2V0U2VsZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDYsIHByb3RvLmFwaS5PcGVyYXRpb24ub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbn0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5jbGVhclNlbGVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFNlbGVjdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5oYXNTZWxlY3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDYpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFJpY2hFZGl0IHJpY2hfZWRpdCA9IDc7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuZ2V0UmljaEVkaXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuT3BlcmF0aW9uLlJpY2hFZGl0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5PcGVyYXRpb24uUmljaEVkaXQsIDcpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLk9wZXJhdGlvbi5SaWNoRWRpdHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuc2V0UmljaEVkaXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgNywgcHJvdG8uYXBpLk9wZXJhdGlvbi5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuT3BlcmF0aW9ufSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmNsZWFyUmljaEVkaXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRSaWNoRWRpdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5oYXNSaWNoRWRpdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgU3R5bGUgc3R5bGUgPSA4O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZX1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmdldFN0eWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLk9wZXJhdGlvbi5TdHlsZX0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuT3BlcmF0aW9uLlN0eWxlLCA4KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5PcGVyYXRpb24uU3R5bGV8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbn0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDgsIHByb3RvLmFwaS5PcGVyYXRpb24ub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLk9wZXJhdGlvbn0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5jbGVhclN0eWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0U3R5bGUodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuaGFzU3R5bGUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDgpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIEluY3JlYXNlIGluY3JlYXNlID0gOTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2V9XHJcbiAqL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5nZXRJbmNyZWFzZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5PcGVyYXRpb24uSW5jcmVhc2V9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLk9wZXJhdGlvbi5JbmNyZWFzZSwgOSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuT3BlcmF0aW9uLkluY3JlYXNlfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuT3BlcmF0aW9uLnByb3RvdHlwZS5zZXRJbmNyZWFzZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCA5LCBwcm90by5hcGkuT3BlcmF0aW9uLm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5PcGVyYXRpb259IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLk9wZXJhdGlvbi5wcm90b3R5cGUuY2xlYXJJbmNyZWFzZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEluY3JlYXNlKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5PcGVyYXRpb24ucHJvdG90eXBlLmhhc0luY3JlYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA5KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGV9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIG1vdmVkQXQ6IChmID0gbXNnLmdldE1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHJlbW92ZWRBdDogKGYgPSBtc2cuZ2V0UmVtb3ZlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICB0eXBlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDQsIDApLFxyXG4gICAgdmFsdWU6IG1zZy5nZXRWYWx1ZV9hc0I2NCgpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZTtcclxuICByZXR1cm4gcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGV9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRNb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRSZW1vdmVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshcHJvdG8uYXBpLlZhbHVlVHlwZX0gKi8gKHJlYWRlci5yZWFkRW51bSgpKTtcclxuICAgICAgbXNnLnNldFR5cGUodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGV9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TW92ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRSZW1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0VHlwZSgpO1xyXG4gIGlmIChmICE9PSAwLjApIHtcclxuICAgIHdyaXRlci53cml0ZUVudW0oXHJcbiAgICAgIDQsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFZhbHVlX2FzVTgoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVCeXRlcyhcclxuICAgICAgNSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuZ2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDEpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLnByb3RvdHlwZS5jbGVhckNyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldENyZWF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBtb3ZlZF9hdCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuZ2V0TW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuc2V0TW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLmNsZWFyTW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldE1vdmVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLnByb3RvdHlwZS5oYXNNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IHJlbW92ZWRfYXQgPSAzO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLmdldFJlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuc2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuY2xlYXJSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRSZW1vdmVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlLnByb3RvdHlwZS5oYXNSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFZhbHVlVHlwZSB0eXBlID0gNDtcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5WYWx1ZVR5cGV9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshcHJvdG8uYXBpLlZhbHVlVHlwZX0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDApKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlZhbHVlVHlwZX0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLnNldFR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgdmFsdWUgPSA1O1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyB2YWx1ZSA9IDU7XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldFZhbHVlKClgXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuZ2V0VmFsdWVfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRWYWx1ZSgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIHZhbHVlID0gNTtcclxuICogTm90ZSB0aGF0IFVpbnQ4QXJyYXkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXHJcbiAqIEBzZWUgaHR0cDovL2Nhbml1c2UuY29tL1VpbnQ4QXJyYXlcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0VmFsdWUoKWBcclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnRTaW1wbGUucHJvdG90eXBlLmdldFZhbHVlX2FzVTggPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgoXHJcbiAgICAgIHRoaXMuZ2V0VmFsdWUoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoc3RyaW5nfFVpbnQ4QXJyYXkpfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50U2ltcGxlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudFNpbXBsZS5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBPbmVvZiBncm91cCBkZWZpbml0aW9ucyBmb3IgdGhpcyBtZXNzYWdlLiBFYWNoIGdyb3VwIGRlZmluZXMgdGhlIGZpZWxkXHJcbiAqIG51bWJlcnMgYmVsb25naW5nIHRvIHRoYXQgZ3JvdXAuIFdoZW4gb2YgdGhlc2UgZmllbGRzJyB2YWx1ZSBpcyBzZXQsIGFsbFxyXG4gKiBvdGhlciBmaWVsZHMgaW4gdGhlIGdyb3VwIGFyZSBjbGVhcmVkLiBEdXJpbmcgZGVzZXJpYWxpemF0aW9uLCBpZiBtdWx0aXBsZVxyXG4gKiBmaWVsZHMgYXJlIGVuY291bnRlcmVkIGZvciBhIGdyb3VwLCBvbmx5IHRoZSBsYXN0IHZhbHVlIHNlZW4gd2lsbCBiZSBrZXB0LlxyXG4gKiBAcHJpdmF0ZSB7IUFycmF5PCFBcnJheTxudW1iZXI+Pn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQub25lb2ZHcm91cHNfID0gW1sxLDIsMyw0LDUsNl1dO1xyXG5cclxuLyoqXHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQm9keUNhc2UgPSB7XHJcbiAgQk9EWV9OT1RfU0VUOiAwLFxyXG4gIEpTT05fT0JKRUNUOiAxLFxyXG4gIEpTT05fQVJSQVk6IDIsXHJcbiAgUFJJTUlUSVZFOiAzLFxyXG4gIFRFWFQ6IDQsXHJcbiAgUklDSF9URVhUOiA1LFxyXG4gIENPVU5URVI6IDZcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcmV0dXJuIHtwcm90by5hcGkuSlNPTkVsZW1lbnQuQm9keUNhc2V9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQucHJvdG90eXBlLmdldEJvZHlDYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7cHJvdG8uYXBpLkpTT05FbGVtZW50LkJvZHlDYXNlfSAqLyhqc3BiLk1lc3NhZ2UuY29tcHV0ZU9uZW9mQ2FzZSh0aGlzLCBwcm90by5hcGkuSlNPTkVsZW1lbnQub25lb2ZHcm91cHNfWzBdKSk7XHJcbn07XHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAganNvbk9iamVjdDogKGYgPSBtc2cuZ2V0SnNvbk9iamVjdCgpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAganNvbkFycmF5OiAoZiA9IG1zZy5nZXRKc29uQXJyYXkoKSkgJiYgcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgcHJpbWl0aXZlOiAoZiA9IG1zZy5nZXRQcmltaXRpdmUoKSkgJiYgcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgdGV4dDogKGYgPSBtc2cuZ2V0VGV4dCgpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgcmljaFRleHQ6IChmID0gbXNnLmdldFJpY2hUZXh0KCkpICYmIHByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgY291bnRlcjogKGYgPSBtc2cuZ2V0Q291bnRlcigpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5KU09ORWxlbWVudDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkpTT05FbGVtZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3Q7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0SnNvbk9iamVjdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldEpzb25BcnJheSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFByaW1pdGl2ZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0VGV4dCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRSaWNoVGV4dCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA2OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXI7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q291bnRlcih2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRKc29uT2JqZWN0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEpzb25BcnJheSgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFByaW1pdGl2ZSgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDMsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFRleHQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA0LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UmljaFRleHQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA1LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldENvdW50ZXIoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA2LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5yZXBlYXRlZEZpZWxkc18gPSBbMV07XHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBub2Rlc0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldE5vZGVzTGlzdCgpLFxyXG4gICAgcHJvdG8uYXBpLlJIVE5vZGUudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSksXHJcbiAgICBjcmVhdGVkQXQ6IChmID0gbXNnLmdldENyZWF0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgbW92ZWRBdDogKGYgPSBtc2cuZ2V0TW92ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgcmVtb3ZlZEF0OiAoZiA9IG1zZy5nZXRSZW1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3Q7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlJIVE5vZGU7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuUkhUTm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuYWRkTm9kZXModmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldENyZWF0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0TW92ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UmVtb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Tm9kZXNMaXN0KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuUkhUTm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UmVtb3ZlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNCxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiByZXBlYXRlZCBSSFROb2RlIG5vZGVzID0gMTtcclxuICogQHJldHVybiB7IUFycmF5PCFwcm90by5hcGkuUkhUTm9kZT59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUuZ2V0Tm9kZXNMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLmFwaS5SSFROb2RlPn0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5SSFROb2RlLCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5hcGkuUkhUTm9kZT59IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5zZXROb2Rlc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUkhUTm9kZT19IG9wdF92YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJIVE5vZGV9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUuYWRkTm9kZXMgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLmFwaS5SSFROb2RlLCBvcHRfaW5kZXgpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5jbGVhck5vZGVzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldE5vZGVzTGlzdChbXSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5nZXRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBtb3ZlZF9hdCA9IDM7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5nZXRNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUuc2V0TW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5jbGVhck1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRNb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5oYXNNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IHJlbW92ZWRfYXQgPSA0O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUuZ2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTk9iamVjdC5wcm90b3R5cGUuc2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QucHJvdG90eXBlLmNsZWFyUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UmVtb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0LnByb3RvdHlwZS5oYXNSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDQpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnJlcGVhdGVkRmllbGRzXyA9IFsxXTtcclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgbm9kZXNMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXROb2Rlc0xpc3QoKSxcclxuICAgIHByb3RvLmFwaS5SR0FOb2RlLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIG1vdmVkQXQ6IChmID0gbXNnLmdldE1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHJlbW92ZWRBdDogKGYgPSBtc2cuZ2V0UmVtb3ZlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5O1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlJHQU5vZGU7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuUkdBTm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuYWRkTm9kZXModmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldENyZWF0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0TW92ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UmVtb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXROb2Rlc0xpc3QoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5SR0FOb2RlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TW92ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDMsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRSZW1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA0LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHJlcGVhdGVkIFJHQU5vZGUgbm9kZXMgPSAxO1xyXG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLmFwaS5SR0FOb2RlPn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmdldE5vZGVzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5hcGkuUkdBTm9kZT59ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuUkdBTm9kZSwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8uYXBpLlJHQU5vZGU+fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLnNldE5vZGVzTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SR0FOb2RlPX0gb3B0X3ZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUkdBTm9kZX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmFkZE5vZGVzID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5hcGkuUkdBTm9kZSwgb3B0X2luZGV4KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmNsZWFyTm9kZXNMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Tm9kZXNMaXN0KFtdKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBjcmVhdGVkX2F0ID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS5wcm90b3R5cGUuZ2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLnNldENyZWF0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXl9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS5wcm90b3R5cGUuaGFzQ3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IG1vdmVkX2F0ID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheS5wcm90b3R5cGUuZ2V0TW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXl9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnByb3RvdHlwZS5zZXRNb3ZlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnByb3RvdHlwZS5jbGVhck1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRNb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmhhc01vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcmVtb3ZlZF9hdCA9IDQ7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmdldFJlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA0KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXl9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LnByb3RvdHlwZS5zZXRSZW1vdmVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmNsZWFyUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UmVtb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXkucHJvdG90eXBlLmhhc1JlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICB0eXBlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIDApLFxyXG4gICAgdmFsdWU6IG1zZy5nZXRWYWx1ZV9hc0I2NCgpLFxyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIG1vdmVkQXQ6IChmID0gbXNnLmdldE1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHJlbW92ZWRBdDogKGYgPSBtc2cuZ2V0UmVtb3ZlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlO1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFwcm90by5hcGkuVmFsdWVUeXBlfSAqLyAocmVhZGVyLnJlYWRFbnVtKCkpO1xyXG4gICAgICBtc2cuc2V0VHlwZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAocmVhZGVyLnJlYWRCeXRlcygpKTtcclxuICAgICAgbXNnLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldE1vdmVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFJlbW92ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmV9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0VHlwZSgpO1xyXG4gIGlmIChmICE9PSAwLjApIHtcclxuICAgIHdyaXRlci53cml0ZUVudW0oXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFZhbHVlX2FzVTgoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVCeXRlcyhcclxuICAgICAgMixcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMyxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA0LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UmVtb3ZlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBWYWx1ZVR5cGUgdHlwZSA9IDE7XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVmFsdWVUeXBlfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFwcm90by5hcGkuVmFsdWVUeXBlfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVmFsdWVUeXBlfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5zZXRUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIHZhbHVlID0gMjtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIHZhbHVlID0gMjtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0VmFsdWUoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuZ2V0VmFsdWVfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRWYWx1ZSgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIHZhbHVlID0gMjtcclxuICogTm90ZSB0aGF0IFVpbnQ4QXJyYXkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXHJcbiAqIEBzZWUgaHR0cDovL2Nhbml1c2UuY29tL1VpbnQ4QXJyYXlcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0VmFsdWUoKWBcclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5nZXRWYWx1ZV9hc1U4ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVVpbnQ4QXJyYXl9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc1U4KFxyXG4gICAgICB0aGlzLmdldFZhbHVlKCkpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshKHN0cmluZ3xVaW50OEFycmF5KX0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDM7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUucHJvdG90eXBlLmdldENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmV9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUucHJvdG90eXBlLmNsZWFyQ3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q3JlYXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBtb3ZlZF9hdCA9IDQ7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmUucHJvdG90eXBlLmdldE1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgNCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuc2V0TW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuY2xlYXJNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0TW92ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5oYXNNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IHJlbW92ZWRfYXQgPSA1O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5nZXRSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgNSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZS5wcm90b3R5cGUuc2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5jbGVhclJlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFJlbW92ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlLnByb3RvdHlwZS5oYXNSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDUpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5yZXBlYXRlZEZpZWxkc18gPSBbMV07XHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBub2Rlc0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldE5vZGVzTGlzdCgpLFxyXG4gICAgcHJvdG8uYXBpLlRleHROb2RlLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIG1vdmVkQXQ6IChmID0gbXNnLmdldE1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHJlbW92ZWRBdDogKGYgPSBtc2cuZ2V0UmVtb3ZlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0O1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UZXh0Tm9kZTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UZXh0Tm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuYWRkTm9kZXModmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldENyZWF0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0TW92ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UmVtb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Tm9kZXNMaXN0KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxyXG4gICAgICAxLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGV4dE5vZGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldENyZWF0ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRNb3ZlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMyxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFJlbW92ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDQsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogcmVwZWF0ZWQgVGV4dE5vZGUgbm9kZXMgPSAxO1xyXG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLmFwaS5UZXh0Tm9kZT59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5wcm90b3R5cGUuZ2V0Tm9kZXNMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLmFwaS5UZXh0Tm9kZT59ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGV4dE5vZGUsIDEpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLmFwaS5UZXh0Tm9kZT59IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5zZXROb2Rlc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVGV4dE5vZGU9fSBvcHRfdmFsdWVcclxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UZXh0Tm9kZX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5hZGROb2RlcyA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIG9wdF92YWx1ZSwgcHJvdG8uYXBpLlRleHROb2RlLCBvcHRfaW5kZXgpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5jbGVhck5vZGVzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldE5vZGVzTGlzdChbXSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5nZXRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCBtb3ZlZF9hdCA9IDM7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5nZXRNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5wcm90b3R5cGUuc2V0TW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5jbGVhck1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRNb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5oYXNNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IHJlbW92ZWRfYXQgPSA0O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5wcm90b3R5cGUuZ2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuVGV4dC5wcm90b3R5cGUuc2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQucHJvdG90eXBlLmNsZWFyUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UmVtb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0LnByb3RvdHlwZS5oYXNSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDQpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucmVwZWF0ZWRGaWVsZHNfID0gWzFdO1xyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIG5vZGVzTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Tm9kZXNMaXN0KCksXHJcbiAgICBwcm90by5hcGkuUmljaFRleHROb2RlLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIG1vdmVkQXQ6IChmID0gbXNnLmdldE1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHJlbW92ZWRBdDogKGYgPSBtc2cuZ2V0UmVtb3ZlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0O1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuUmljaFRleHROb2RlO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuYWRkTm9kZXModmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldENyZWF0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0TW92ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UmVtb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldE5vZGVzTGlzdCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UmVtb3ZlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNCxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiByZXBlYXRlZCBSaWNoVGV4dE5vZGUgbm9kZXMgPSAxO1xyXG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLmFwaS5SaWNoVGV4dE5vZGU+fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnByb3RvdHlwZS5nZXROb2Rlc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZT59ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuUmljaFRleHROb2RlLCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5hcGkuUmljaFRleHROb2RlPn0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuc2V0Tm9kZXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZT19IG9wdF92YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuYWRkTm9kZXMgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLmFwaS5SaWNoVGV4dE5vZGUsIG9wdF9pbmRleCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuY2xlYXJOb2Rlc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXROb2Rlc0xpc3QoW10pO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IGNyZWF0ZWRfYXQgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucHJvdG90eXBlLmdldENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuc2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnByb3RvdHlwZS5oYXNDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgbW92ZWRfYXQgPSAzO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucHJvdG90eXBlLmdldE1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucHJvdG90eXBlLnNldE1vdmVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnByb3RvdHlwZS5jbGVhck1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRNb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuaGFzTW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCByZW1vdmVkX2F0ID0gNDtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LnByb3RvdHlwZS5nZXRSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgNCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucHJvdG90eXBlLnNldFJlbW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHQucHJvdG90eXBlLmNsZWFyUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UmVtb3ZlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dC5wcm90b3R5cGUuaGFzUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICB0eXBlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIDApLFxyXG4gICAgdmFsdWU6IG1zZy5nZXRWYWx1ZV9hc0I2NCgpLFxyXG4gICAgY3JlYXRlZEF0OiAoZiA9IG1zZy5nZXRDcmVhdGVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIG1vdmVkQXQ6IChmID0gbXNnLmdldE1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHJlbW92ZWRBdDogKGYgPSBtc2cuZ2V0UmVtb3ZlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlcn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyO1xyXG4gIHJldHVybiBwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlcn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshcHJvdG8uYXBpLlZhbHVlVHlwZX0gKi8gKHJlYWRlci5yZWFkRW51bSgpKTtcclxuICAgICAgbXNnLnNldFR5cGUodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDQ6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRNb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDU6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRSZW1vdmVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRUeXBlKCk7XHJcbiAgaWYgKGYgIT09IDAuMCkge1xyXG4gICAgd3JpdGVyLndyaXRlRW51bShcclxuICAgICAgMSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0VmFsdWVfYXNVOCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TW92ZWRBdCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDQsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRSZW1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA1LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFZhbHVlVHlwZSB0eXBlID0gMTtcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5WYWx1ZVR5cGV9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFwcm90by5hcGkuVmFsdWVUeXBlfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVmFsdWVUeXBlfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLnNldFR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgdmFsdWUgPSAyO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIHZhbHVlID0gMjtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0VmFsdWUoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLmdldFZhbHVlX2FzQjY0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNCNjQoXHJcbiAgICAgIHRoaXMuZ2V0VmFsdWUoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyB2YWx1ZSA9IDI7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldFZhbHVlKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLmdldFZhbHVlX2FzVTggPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgoXHJcbiAgICAgIHRoaXMuZ2V0VmFsdWUoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoc3RyaW5nfFVpbnQ4QXJyYXkpfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgMiwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IGNyZWF0ZWRfYXQgPSAzO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuZ2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuc2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLmNsZWFyQ3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q3JlYXRlZEF0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLnByb3RvdHlwZS5oYXNDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgbW92ZWRfYXQgPSA0O1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuZ2V0TW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA0KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLnNldE1vdmVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlcn0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuY2xlYXJNb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0TW92ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuaGFzTW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCByZW1vdmVkX2F0ID0gNTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLmdldFJlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCA1KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIucHJvdG90eXBlLnNldFJlbW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyLnByb3RvdHlwZS5jbGVhclJlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFJlbW92ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQuQ291bnRlci5wcm90b3R5cGUuaGFzUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBKU09OT2JqZWN0IGpzb25fb2JqZWN0ID0gMTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5KU09OT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5nZXRKc29uT2JqZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3QsIDEpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05PYmplY3R8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5zZXRKc29uT2JqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDEsIHByb3RvLmFwaS5KU09ORWxlbWVudC5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5jbGVhckpzb25PYmplY3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRKc29uT2JqZWN0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuaGFzSnNvbk9iamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgSlNPTkFycmF5IGpzb25fYXJyYXkgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuZ2V0SnNvbkFycmF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkpTT05FbGVtZW50LkpTT05BcnJheX0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuSlNPTkVsZW1lbnQuSlNPTkFycmF5LCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5KU09OQXJyYXl8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5zZXRKc29uQXJyYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgMiwgcHJvdG8uYXBpLkpTT05FbGVtZW50Lm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQucHJvdG90eXBlLmNsZWFySnNvbkFycmF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0SnNvbkFycmF5KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuaGFzSnNvbkFycmF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBQcmltaXRpdmUgcHJpbWl0aXZlID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmV9XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQucHJvdG90eXBlLmdldFByaW1pdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5QcmltaXRpdmV9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkpTT05FbGVtZW50LlByaW1pdGl2ZSwgMykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuSlNPTkVsZW1lbnQuUHJpbWl0aXZlfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5KU09ORWxlbWVudH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuc2V0UHJpbWl0aXZlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDMsIHByb3RvLmFwaS5KU09ORWxlbWVudC5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5jbGVhclByaW1pdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFByaW1pdGl2ZSh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQucHJvdG90eXBlLmhhc1ByaW1pdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGV4dCB0ZXh0ID0gNDtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5UZXh0fVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHQsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50LlRleHR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDQsIHByb3RvLmFwaS5KU09ORWxlbWVudC5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5jbGVhclRleHQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRUZXh0KHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuaGFzVGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgUmljaFRleHQgcmljaF90ZXh0ID0gNTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dH1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuZ2V0UmljaFRleHQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuSlNPTkVsZW1lbnQuUmljaFRleHR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkpTT05FbGVtZW50LlJpY2hUZXh0LCA1KSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5SaWNoVGV4dHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuSlNPTkVsZW1lbnQucHJvdG90eXBlLnNldFJpY2hUZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDUsIHByb3RvLmFwaS5KU09ORWxlbWVudC5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5jbGVhclJpY2hUZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UmljaFRleHQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5oYXNSaWNoVGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgQ291bnRlciBjb3VudGVyID0gNjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5KU09ORWxlbWVudC5Db3VudGVyfVxyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5nZXRDb3VudGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXIsIDYpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50LkNvdW50ZXJ8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkpTT05FbGVtZW50fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5zZXRDb3VudGVyID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDYsIHByb3RvLmFwaS5KU09ORWxlbWVudC5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuSlNPTkVsZW1lbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkpTT05FbGVtZW50LnByb3RvdHlwZS5jbGVhckNvdW50ZXIgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDb3VudGVyKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5KU09ORWxlbWVudC5wcm90b3R5cGUuaGFzQ291bnRlciA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLlJIVE5vZGUucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuUkhUTm9kZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SSFROb2RlfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5SSFROb2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAga2V5OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpLFxyXG4gICAgZWxlbWVudDogKGYgPSBtc2cuZ2V0RWxlbWVudCgpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SSFROb2RlfVxyXG4gKi9cclxucHJvdG8uYXBpLlJIVE5vZGUuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlJIVE5vZGU7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5SSFROb2RlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlJIVE5vZGV9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SSFROb2RlfVxyXG4gKi9cclxucHJvdG8uYXBpLlJIVE5vZGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0S2V5KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuSlNPTkVsZW1lbnQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuSlNPTkVsZW1lbnQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldEVsZW1lbnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuUkhUTm9kZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5SSFROb2RlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SSFROb2RlfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlJIVE5vZGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRLZXkoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEVsZW1lbnQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuSlNPTkVsZW1lbnQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcga2V5ID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLlJIVE5vZGUucHJvdG90eXBlLmdldEtleSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUkhUTm9kZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUkhUTm9kZS5wcm90b3R5cGUuc2V0S2V5ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgSlNPTkVsZW1lbnQgZWxlbWVudCA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuSlNPTkVsZW1lbnR9XHJcbiAqL1xyXG5wcm90by5hcGkuUkhUTm9kZS5wcm90b3R5cGUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5KU09ORWxlbWVudH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuSlNPTkVsZW1lbnQsIDIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SSFROb2RlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlJIVE5vZGUucHJvdG90eXBlLnNldEVsZW1lbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUkhUTm9kZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUkhUTm9kZS5wcm90b3R5cGUuY2xlYXJFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0RWxlbWVudCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuUkhUTm9kZS5wcm90b3R5cGUuaGFzRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuUkdBTm9kZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SR0FOb2RlfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5SR0FOb2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgbmV4dDogKGYgPSBtc2cuZ2V0TmV4dCgpKSAmJiBwcm90by5hcGkuUkdBTm9kZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgZWxlbWVudDogKGYgPSBtc2cuZ2V0RWxlbWVudCgpKSAmJiBwcm90by5hcGkuSlNPTkVsZW1lbnQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SR0FOb2RlfVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlJHQU5vZGU7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5SR0FOb2RlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlJHQU5vZGV9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SR0FOb2RlfVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlJHQU5vZGU7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuUkdBTm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0TmV4dCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkpTT05FbGVtZW50O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLkpTT05FbGVtZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRFbGVtZW50KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuUkdBTm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUkdBTm9kZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5SR0FOb2RlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0TmV4dCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5SR0FOb2RlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRFbGVtZW50KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLkpTT05FbGVtZW50LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgUkdBTm9kZSBuZXh0ID0gMTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5SR0FOb2RlfVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLmdldE5leHQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuUkdBTm9kZX0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuUkdBTm9kZSwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuUkdBTm9kZXx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUkdBTm9kZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5SR0FOb2RlLnByb3RvdHlwZS5zZXROZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJHQU5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLmNsZWFyTmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldE5leHQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIEpTT05FbGVtZW50IGVsZW1lbnQgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkpTT05FbGVtZW50fVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuSlNPTkVsZW1lbnR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLkpTT05FbGVtZW50LCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5KU09ORWxlbWVudHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUkdBTm9kZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5SR0FOb2RlLnByb3RvdHlwZS5zZXRFbGVtZW50ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJHQU5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLmNsZWFyRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEVsZW1lbnQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlJHQU5vZGUucHJvdG90eXBlLmhhc0VsZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5UZXh0Tm9kZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5UZXh0Tm9kZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGUudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBpZDogKGYgPSBtc2cuZ2V0SWQoKSkgJiYgcHJvdG8uYXBpLlRleHROb2RlSUQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIHZhbHVlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIFwiXCIpLFxyXG4gICAgcmVtb3ZlZEF0OiAoZiA9IG1zZy5nZXRSZW1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGluc1ByZXZJZDogKGYgPSBtc2cuZ2V0SW5zUHJldklkKCkpICYmIHByb3RvLmFwaS5UZXh0Tm9kZUlELnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGV9XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGUuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlO1xyXG4gIHJldHVybiBwcm90by5hcGkuVGV4dE5vZGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVGV4dE5vZGV9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UZXh0Tm9kZX1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGV4dE5vZGVJRDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UZXh0Tm9kZUlELmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFJlbW92ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlSUQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGV4dE5vZGVJRC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0SW5zUHJldklkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLlRleHROb2RlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5UZXh0Tm9kZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldElkKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlSUQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFZhbHVlKCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRSZW1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0SW5zUHJldklkKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNCxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlSUQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUZXh0Tm9kZUlEIGlkID0gMTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UZXh0Tm9kZUlEfVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UZXh0Tm9kZUlEfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UZXh0Tm9kZUlELCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UZXh0Tm9kZUlEfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UZXh0Tm9kZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZS5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5jbGVhcklkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0SWQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5oYXNJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgc3RyaW5nIHZhbHVlID0gMjtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgcmVtb3ZlZF9hdCA9IDM7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZS5wcm90b3R5cGUuZ2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5zZXRSZW1vdmVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5jbGVhclJlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFJlbW92ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGUucHJvdG90eXBlLmhhc1JlbW92ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGV4dE5vZGVJRCBpbnNfcHJldl9pZCA9IDQ7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGV4dE5vZGVJRH1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZS5wcm90b3R5cGUuZ2V0SW5zUHJldklkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRleHROb2RlSUR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRleHROb2RlSUQsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRleHROb2RlSUR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5zZXRJbnNQcmV2SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlLnByb3RvdHlwZS5jbGVhckluc1ByZXZJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEluc1ByZXZJZCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGUucHJvdG90eXBlLmhhc0luc1ByZXZJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuUmljaFRleHROb2RlQXR0ci50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAga2V5OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpLFxyXG4gICAgdmFsdWU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgXCJcIiksXHJcbiAgICB1cGRhdGVkQXQ6IChmID0gbXNnLmdldFVwZGF0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHJ9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuUmljaFRleHROb2RlQXR0cjtcclxuICByZXR1cm4gcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUmljaFRleHROb2RlQXR0cn0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHJ9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRLZXkodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRVcGRhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRLZXkoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFZhbHVlKCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRVcGRhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAzLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHN0cmluZyBrZXkgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5wcm90b3R5cGUuZ2V0S2V5ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyLnByb3RvdHlwZS5zZXRLZXkgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgdmFsdWUgPSAyO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHJ9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCB1cGRhdGVkX2F0ID0gMztcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIucHJvdG90eXBlLmdldFVwZGF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAzKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIucHJvdG90eXBlLnNldFVwZGF0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyLnByb3RvdHlwZS5jbGVhclVwZGF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFVwZGF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5wcm90b3R5cGUuaGFzVXBkYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGV9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGlkOiAoZiA9IG1zZy5nZXRJZCgpKSAmJiBwcm90by5hcGkuVGV4dE5vZGVJRC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgYXR0cmlidXRlc01hcDogKGYgPSBtc2cuZ2V0QXR0cmlidXRlc01hcCgpKSA/IGYudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBwcm90by5hcGkuUmljaFRleHROb2RlQXR0ci50b09iamVjdCkgOiBbXSxcclxuICAgIHZhbHVlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDMsIFwiXCIpLFxyXG4gICAgcmVtb3ZlZEF0OiAoZiA9IG1zZy5nZXRSZW1vdmVkQXQoKSkgJiYgcHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGluc1ByZXZJZDogKGYgPSBtc2cuZ2V0SW5zUHJldklkKCkpICYmIHByb3RvLmFwaS5UZXh0Tm9kZUlELnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUmljaFRleHROb2RlfVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuUmljaFRleHROb2RlO1xyXG4gIHJldHVybiBwcm90by5hcGkuUmljaFRleHROb2RlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZX1cclxuICovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRleHROb2RlSUQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGV4dE5vZGVJRC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0SWQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbXNnLmdldEF0dHJpYnV0ZXNNYXAoKTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLCBmdW5jdGlvbihtZXNzYWdlLCByZWFkZXIpIHtcclxuICAgICAgICBqc3BiLk1hcC5kZXNlcmlhbGl6ZUJpbmFyeShtZXNzYWdlLCByZWFkZXIsIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nLCBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsIHByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciwgXCJcIiwgbmV3IHByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyKCkpO1xyXG4gICAgICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlRpbWVUaWNrZXQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0UmVtb3ZlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDU6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGV4dE5vZGVJRDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UZXh0Tm9kZUlELmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRJbnNQcmV2SWQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUmljaFRleHROb2RlfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldElkKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlSUQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldEF0dHJpYnV0ZXNNYXAodHJ1ZSk7XHJcbiAgaWYgKGYgJiYgZi5nZXRMZW5ndGgoKSA+IDApIHtcclxuICAgIGYuc2VyaWFsaXplQmluYXJ5KDIsIHdyaXRlciwganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nLCBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLCBwcm90by5hcGkuUmljaFRleHROb2RlQXR0ci5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcik7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFZhbHVlKCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAzLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRSZW1vdmVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA0LFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuVGltZVRpY2tldC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0SW5zUHJldklkKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgNSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRleHROb2RlSUQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUZXh0Tm9kZUlEIGlkID0gMTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UZXh0Tm9kZUlEfVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGV4dE5vZGVJRH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGV4dE5vZGVJRCwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGV4dE5vZGVJRHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUmljaFRleHROb2RlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUmljaFRleHROb2RlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGUucHJvdG90eXBlLmNsZWFySWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRJZCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlLnByb3RvdHlwZS5oYXNJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogbWFwPHN0cmluZywgUmljaFRleHROb2RlQXR0cj4gYXR0cmlidXRlcyA9IDI7XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub0xhenlDcmVhdGUgRG8gbm90IGNyZWF0ZSB0aGUgbWFwIGlmXHJcbiAqIGVtcHR5LCBpbnN0ZWFkIHJldHVybmluZyBgdW5kZWZpbmVkYFxyXG4gKiBAcmV0dXJuIHshanNwYi5NYXA8c3RyaW5nLCFwcm90by5hcGkuUmljaFRleHROb2RlQXR0cj59XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVzTWFwID0gZnVuY3Rpb24ob3B0X25vTGF6eUNyZWF0ZSkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFqc3BiLk1hcDxzdHJpbmcsIXByb3RvLmFwaS5SaWNoVGV4dE5vZGVBdHRyPn0gKi8gKFxyXG4gICAgICBqc3BiLk1lc3NhZ2UuZ2V0TWFwRmllbGQodGhpcywgMiwgb3B0X25vTGF6eUNyZWF0ZSxcclxuICAgICAgcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZUF0dHIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHZhbHVlcyBmcm9tIHRoZSBtYXAuIFRoZSBtYXAgd2lsbCBiZSBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuY2xlYXJBdHRyaWJ1dGVzTWFwID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5nZXRBdHRyaWJ1dGVzTWFwKCkuY2xlYXIoKTtcclxuICByZXR1cm4gdGhpczt9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgdmFsdWUgPSAzO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuUmljaFRleHROb2RlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUmljaFRleHROb2RlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGUucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgVGltZVRpY2tldCByZW1vdmVkX2F0ID0gNDtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuZ2V0UmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRpbWVUaWNrZXQsIDQpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGUucHJvdG90eXBlLnNldFJlbW92ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuY2xlYXJSZW1vdmVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRSZW1vdmVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuaGFzUmVtb3ZlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUZXh0Tm9kZUlEIGluc19wcmV2X2lkID0gNTtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5UZXh0Tm9kZUlEfVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuZ2V0SW5zUHJldklkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlRleHROb2RlSUR9ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8uYXBpLlRleHROb2RlSUQsIDUpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHs/cHJvdG8uYXBpLlRleHROb2RlSUR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlJpY2hUZXh0Tm9kZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5SaWNoVGV4dE5vZGUucHJvdG90eXBlLnNldEluc1ByZXZJZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5SaWNoVGV4dE5vZGV9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuY2xlYXJJbnNQcmV2SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRJbnNQcmV2SWQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlJpY2hUZXh0Tm9kZS5wcm90b3R5cGUuaGFzSW5zUHJldklkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVJRC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5UZXh0Tm9kZUlELnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlRleHROb2RlSUR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlSUQudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjcmVhdGVkQXQ6IChmID0gbXNnLmdldENyZWF0ZWRBdCgpKSAmJiBwcm90by5hcGkuVGltZVRpY2tldC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxyXG4gICAgb2Zmc2V0OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIDApXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlSUR9XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVJRC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuVGV4dE5vZGVJRDtcclxuICByZXR1cm4gcHJvdG8uYXBpLlRleHROb2RlSUQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVGV4dE5vZGVJRH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlSUR9XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVJRC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5hcGkuVGltZVRpY2tldDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDcmVhdGVkQXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xyXG4gICAgICBtc2cuc2V0T2Zmc2V0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlSUQucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuVGV4dE5vZGVJRC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVGV4dE5vZGVJRH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZUlELnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE9mZnNldCgpO1xyXG4gIGlmIChmICE9PSAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcclxuICAgICAgMixcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFRpbWVUaWNrZXQgY3JlYXRlZF9hdCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZUlELnByb3RvdHlwZS5nZXRDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuVGltZVRpY2tldH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuVGltZVRpY2tldCwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuVGltZVRpY2tldHx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGVJRH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZUlELnByb3RvdHlwZS5zZXRDcmVhdGVkQXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGVJRH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVJRC5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlSUQucHJvdG90eXBlLmhhc0NyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgaW50MzIgb2Zmc2V0ID0gMjtcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlSUQucHJvdG90eXBlLmdldE9mZnNldCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDApKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGV4dE5vZGVJRH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVJRC5wcm90b3R5cGUuc2V0T2Zmc2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cclxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnJlcGVhdGVkRmllbGRzXyA9IFs2XTtcclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLlByb2plY3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUHJvamVjdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGlkOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpLFxyXG4gICAgbmFtZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCBcIlwiKSxcclxuICAgIHB1YmxpY0tleToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCBcIlwiKSxcclxuICAgIHNlY3JldEtleToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA0LCBcIlwiKSxcclxuICAgIGF1dGhXZWJob29rVXJsOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDUsIFwiXCIpLFxyXG4gICAgYXV0aFdlYmhvb2tNZXRob2RzTGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDYpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcclxuICAgIGNyZWF0ZWRBdDogKGYgPSBtc2cuZ2V0Q3JlYXRlZEF0KCkpICYmIGdvb2dsZV9wcm90b2J1Zl90aW1lc3RhbXBfcGIuVGltZXN0YW1wLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJvamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5Qcm9qZWN0O1xyXG4gIHJldHVybiBwcm90by5hcGkuUHJvamVjdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5Qcm9qZWN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJvamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldElkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXROYW1lKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRQdWJsaWNLZXkodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldFNlY3JldEtleSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1OlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0QXV0aFdlYmhvb2tVcmwodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLmFkZEF1dGhXZWJob29rTWV0aG9kcyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA3OlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgZ29vZ2xlX3Byb3RvYnVmX3RpbWVzdGFtcF9wYi5UaW1lc3RhbXA7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxnb29nbGVfcHJvdG9idWZfdGltZXN0YW1wX3BiLlRpbWVzdGFtcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q3JlYXRlZEF0KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlByb2plY3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuUHJvamVjdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUHJvamVjdH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0SWQoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE5hbWUoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDIsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFB1YmxpY0tleSgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVN0cmluZyhcclxuICAgICAgMyxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0U2VjcmV0S2V5KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICA0LFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRBdXRoV2ViaG9va1VybCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVN0cmluZyhcclxuICAgICAgNSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0QXV0aFdlYmhvb2tNZXRob2RzTGlzdCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxyXG4gICAgICA2LFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDcmVhdGVkQXQoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICA3LFxyXG4gICAgICBmLFxyXG4gICAgICBnb29nbGVfcHJvdG9idWZfdGltZXN0YW1wX3BiLlRpbWVzdGFtcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHN0cmluZyBpZCA9IDE7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJvamVjdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdC5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgbmFtZSA9IDI7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5zZXROYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgc3RyaW5nIHB1YmxpY19rZXkgPSAzO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgc2VjcmV0X2tleSA9IDQ7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5nZXRTZWNyZXRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA0LCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlByb2plY3R9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlByb2plY3QucHJvdG90eXBlLnNldFNlY3JldEtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHN0cmluZyBhdXRoX3dlYmhvb2tfdXJsID0gNTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLlByb2plY3QucHJvdG90eXBlLmdldEF1dGhXZWJob29rVXJsID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5zZXRBdXRoV2ViaG9va1VybCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHJlcGVhdGVkIHN0cmluZyBhdXRoX3dlYmhvb2tfbWV0aG9kcyA9IDY7XHJcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxyXG4gKi9cclxucHJvdG8uYXBpLlByb2plY3QucHJvdG90eXBlLmdldEF1dGhXZWJob29rTWV0aG9kc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDYpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5zZXRBdXRoV2ViaG9va01ldGhvZHNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDYsIHZhbHVlIHx8IFtdKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJvamVjdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdC5wcm90b3R5cGUuYWRkQXV0aFdlYmhvb2tNZXRob2RzID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDYsIHZhbHVlLCBvcHRfaW5kZXgpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5jbGVhckF1dGhXZWJob29rTWV0aG9kc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRBdXRoV2ViaG9va01ldGhvZHNMaXN0KFtdKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCBjcmVhdGVkX2F0ID0gNztcclxuICogQHJldHVybiB7P3Byb3RvLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9XHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdC5wcm90b3R5cGUuZ2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBnb29nbGVfcHJvdG9idWZfdGltZXN0YW1wX3BiLlRpbWVzdGFtcCwgNykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlByb2plY3QucHJvdG90eXBlLnNldENyZWF0ZWRBdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Qcm9qZWN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Qcm9qZWN0LnByb3RvdHlwZS5jbGVhckNyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldENyZWF0ZWRBdCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuUHJvamVjdC5wcm90b3R5cGUuaGFzQ3JlYXRlZEF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA3KSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5Eb2N1bWVudFN1bW1hcnl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGlkOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpLFxyXG4gICAga2V5OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIFwiXCIpLFxyXG4gICAgc25hcHNob3Q6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMywgXCJcIilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5fVxyXG4gKi9cclxucHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5O1xyXG4gIHJldHVybiBwcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeX1cclxuICovXHJcbnByb3RvLmFwaS5Eb2N1bWVudFN1bW1hcnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0SWQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldEtleSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0U25hcHNob3QodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5fSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldElkKCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRLZXkoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDIsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldFNuYXBzaG90KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAzLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgc3RyaW5nIGlkID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeS5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LnByb3RvdHlwZS5zZXRJZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHN0cmluZyBrZXkgPSAyO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY3VtZW50U3VtbWFyeX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LnByb3RvdHlwZS5zZXRLZXkgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMiwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgc25hcHNob3QgPSAzO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5LnByb3RvdHlwZS5nZXRTbmFwc2hvdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRG9jdW1lbnRTdW1tYXJ5fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Eb2N1bWVudFN1bW1hcnkucHJvdG90eXBlLnNldFNuYXBzaG90ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLlByZXNlbmNlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLlByZXNlbmNlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlByZXNlbmNlfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5QcmVzZW5jZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNsb2NrOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIDApLFxyXG4gICAgZGF0YU1hcDogKGYgPSBtc2cuZ2V0RGF0YU1hcCgpKSA/IGYudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCB1bmRlZmluZWQpIDogW11cclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJlc2VuY2V9XHJcbiAqL1xyXG5wcm90by5hcGkuUHJlc2VuY2UuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlByZXNlbmNlO1xyXG4gIHJldHVybiBwcm90by5hcGkuUHJlc2VuY2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUHJlc2VuY2V9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5QcmVzZW5jZX1cclxuICovXHJcbnByb3RvLmFwaS5QcmVzZW5jZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcclxuICAgICAgbXNnLnNldENsb2NrKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG1zZy5nZXREYXRhTWFwKCk7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSwgZnVuY3Rpb24obWVzc2FnZSwgcmVhZGVyKSB7XHJcbiAgICAgICAganNwYi5NYXAuZGVzZXJpYWxpemVCaW5hcnkobWVzc2FnZSwgcmVhZGVyLCBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFN0cmluZywganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTdHJpbmcsIG51bGwsIFwiXCIsIFwiXCIpO1xyXG4gICAgICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlByZXNlbmNlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLlByZXNlbmNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5QcmVzZW5jZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5QcmVzZW5jZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldENsb2NrKCk7XHJcbiAgaWYgKGYgIT09IDApIHtcclxuICAgIHdyaXRlci53cml0ZUludDMyKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXREYXRhTWFwKHRydWUpO1xyXG4gIGlmIChmICYmIGYuZ2V0TGVuZ3RoKCkgPiAwKSB7XHJcbiAgICBmLnNlcmlhbGl6ZUJpbmFyeSgyLCB3cml0ZXIsIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVN0cmluZywganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGludDMyIGNsb2NrID0gMTtcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxucHJvdG8uYXBpLlByZXNlbmNlLnByb3RvdHlwZS5nZXRDbG9jayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJlc2VuY2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlByZXNlbmNlLnByb3RvdHlwZS5zZXRDbG9jayA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG1hcDxzdHJpbmcsIHN0cmluZz4gZGF0YSA9IDI7XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub0xhenlDcmVhdGUgRG8gbm90IGNyZWF0ZSB0aGUgbWFwIGlmXHJcbiAqIGVtcHR5LCBpbnN0ZWFkIHJldHVybmluZyBgdW5kZWZpbmVkYFxyXG4gKiBAcmV0dXJuIHshanNwYi5NYXA8c3RyaW5nLHN0cmluZz59XHJcbiAqL1xyXG5wcm90by5hcGkuUHJlc2VuY2UucHJvdG90eXBlLmdldERhdGFNYXAgPSBmdW5jdGlvbihvcHRfbm9MYXp5Q3JlYXRlKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IWpzcGIuTWFwPHN0cmluZyxzdHJpbmc+fSAqLyAoXHJcbiAgICAgIGpzcGIuTWVzc2FnZS5nZXRNYXBGaWVsZCh0aGlzLCAyLCBvcHRfbm9MYXp5Q3JlYXRlLFxyXG4gICAgICBudWxsKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB2YWx1ZXMgZnJvbSB0aGUgbWFwLiBUaGUgbWFwIHdpbGwgYmUgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHJlc2VuY2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlByZXNlbmNlLnByb3RvdHlwZS5jbGVhckRhdGFNYXAgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmdldERhdGFNYXAoKS5jbGVhcigpO1xyXG4gIHJldHVybiB0aGlzO307XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuQ2xpZW50LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNsaWVudH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgaWQ6IG1zZy5nZXRJZF9hc0I2NCgpLFxyXG4gICAgcHJlc2VuY2U6IChmID0gbXNnLmdldFByZXNlbmNlKCkpICYmIHByb3RvLmFwaS5QcmVzZW5jZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNsaWVudH1cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnQuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkNsaWVudDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkNsaWVudC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DbGllbnR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DbGllbnR9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLlByZXNlbmNlO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlByZXNlbmNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRQcmVzZW5jZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnQucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuQ2xpZW50LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DbGllbnR9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0SWRfYXNVOCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRQcmVzZW5jZSgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5QcmVzZW5jZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGlkID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudC5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGlkID0gMTtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0SWQoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudC5wcm90b3R5cGUuZ2V0SWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGlkID0gMTtcclxuICogTm90ZSB0aGF0IFVpbnQ4QXJyYXkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXHJcbiAqIEBzZWUgaHR0cDovL2Nhbml1c2UuY29tL1VpbnQ4QXJyYXlcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0SWQoKWBcclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50LnByb3RvdHlwZS5nZXRJZF9hc1U4ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVVpbnQ4QXJyYXl9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc1U4KFxyXG4gICAgICB0aGlzLmdldElkKCkpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshKHN0cmluZ3xVaW50OEFycmF5KX0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DbGllbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudC5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIFByZXNlbmNlIHByZXNlbmNlID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5QcmVzZW5jZX1cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnQucHJvdG90eXBlLmdldFByZXNlbmNlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLlByZXNlbmNlfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5QcmVzZW5jZSwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuUHJlc2VuY2V8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNsaWVudH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5DbGllbnQucHJvdG90eXBlLnNldFByZXNlbmNlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNsaWVudH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50LnByb3RvdHlwZS5jbGVhclByZXNlbmNlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0UHJlc2VuY2UodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudC5wcm90b3R5cGUuaGFzUHJlc2VuY2UgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50cy5yZXBlYXRlZEZpZWxkc18gPSBbMV07XHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50cy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5DbGllbnRzLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNsaWVudHN9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudHMudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnRzTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q2xpZW50c0xpc3QoKSxcclxuICAgIHByb3RvLmFwaS5DbGllbnQudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSlcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2xpZW50c31cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnRzLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5DbGllbnRzO1xyXG4gIHJldHVybiBwcm90by5hcGkuQ2xpZW50cy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5DbGllbnRzfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2xpZW50c31cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnRzLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5DbGllbnQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuQ2xpZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5hZGRDbGllbnRzKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkNsaWVudHMucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuQ2xpZW50cy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQ2xpZW50c30gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5DbGllbnRzLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50c0xpc3QoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5DbGllbnQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiByZXBlYXRlZCBDbGllbnQgY2xpZW50cyA9IDE7XHJcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8uYXBpLkNsaWVudD59XHJcbiAqL1xyXG5wcm90by5hcGkuQ2xpZW50cy5wcm90b3R5cGUuZ2V0Q2xpZW50c0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8uYXBpLkNsaWVudD59ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuQ2xpZW50LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5hcGkuQ2xpZW50Pn0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DbGllbnRzfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkNsaWVudHMucHJvdG90eXBlLnNldENsaWVudHNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNsaWVudD19IG9wdF92YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNsaWVudH1cclxuICovXHJcbnByb3RvLmFwaS5DbGllbnRzLnByb3RvdHlwZS5hZGRDbGllbnRzID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5hcGkuQ2xpZW50LCBvcHRfaW5kZXgpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5DbGllbnRzfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5DbGllbnRzLnByb3RvdHlwZS5jbGVhckNsaWVudHNMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q2xpZW50c0xpc3QoW10pO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hlY2twb2ludC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5DaGVja3BvaW50LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNoZWNrcG9pbnR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoZWNrcG9pbnQudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBzZXJ2ZXJTZXE6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgXCIwXCIpLFxyXG4gICAgY2xpZW50U2VxOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIDApXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoZWNrcG9pbnR9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hlY2twb2ludC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuQ2hlY2twb2ludDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkNoZWNrcG9pbnQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQ2hlY2twb2ludH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoZWNrcG9pbnR9XHJcbiAqL1xyXG5wcm90by5hcGkuQ2hlY2twb2ludC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRVaW50NjRTdHJpbmcoKSk7XHJcbiAgICAgIG1zZy5zZXRTZXJ2ZXJTZXEodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZFVpbnQzMigpKTtcclxuICAgICAgbXNnLnNldENsaWVudFNlcSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5DaGVja3BvaW50LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkNoZWNrcG9pbnQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNoZWNrcG9pbnR9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hlY2twb2ludC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldFNlcnZlclNlcSgpO1xyXG4gIGlmIChwYXJzZUludChmLCAxMCkgIT09IDApIHtcclxuICAgIHdyaXRlci53cml0ZVVpbnQ2NFN0cmluZyhcclxuICAgICAgMSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50U2VxKCk7XHJcbiAgaWYgKGYgIT09IDApIHtcclxuICAgIHdyaXRlci53cml0ZVVpbnQzMihcclxuICAgICAgMixcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHVpbnQ2NCBzZXJ2ZXJfc2VxID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoZWNrcG9pbnQucHJvdG90eXBlLmdldFNlcnZlclNlcSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiMFwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoZWNrcG9pbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkNoZWNrcG9pbnQucHJvdG90eXBlLnNldFNlcnZlclNlcSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHVpbnQzMiBjbGllbnRfc2VxID0gMjtcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxucHJvdG8uYXBpLkNoZWNrcG9pbnQucHJvdG90eXBlLmdldENsaWVudFNlcSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDApKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQ2hlY2twb2ludH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQ2hlY2twb2ludC5wcm90b3R5cGUuc2V0Q2xpZW50U2VxID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlUG9zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLlRleHROb2RlUG9zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlRleHROb2RlUG9zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNyZWF0ZWRBdDogKGYgPSBtc2cuZ2V0Q3JlYXRlZEF0KCkpICYmIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBvZmZzZXQ6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgMCksXHJcbiAgICByZWxhdGl2ZU9mZnNldDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCAwKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UZXh0Tm9kZVBvc31cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuVGV4dE5vZGVQb3M7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5UZXh0Tm9kZVBvcy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5UZXh0Tm9kZVBvc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlUG9zfVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlUG9zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uYXBpLlRpbWVUaWNrZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldENyZWF0ZWRBdCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XHJcbiAgICAgIG1zZy5zZXRPZmZzZXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xyXG4gICAgICBtc2cuc2V0UmVsYXRpdmVPZmZzZXQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVQb3MucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuVGV4dE5vZGVQb3Muc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlRleHROb2RlUG9zfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlUG9zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q3JlYXRlZEF0KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG4gIGYgPSBtZXNzYWdlLmdldE9mZnNldCgpO1xyXG4gIGlmIChmICE9PSAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcclxuICAgICAgMixcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UmVsYXRpdmVPZmZzZXQoKTtcclxuICBpZiAoZiAhPT0gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlSW50MzIoXHJcbiAgICAgIDMsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBUaW1lVGlja2V0IGNyZWF0ZWRfYXQgPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLlRpbWVUaWNrZXR9XHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVQb3MucHJvdG90eXBlLmdldENyZWF0ZWRBdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5UaW1lVGlja2V0fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLmFwaS5UaW1lVGlja2V0LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5UaW1lVGlja2V0fHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UZXh0Tm9kZVBvc30gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy5wcm90b3R5cGUuc2V0Q3JlYXRlZEF0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlUG9zfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy5wcm90b3R5cGUuY2xlYXJDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDcmVhdGVkQXQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlRleHROb2RlUG9zLnByb3RvdHlwZS5oYXNDcmVhdGVkQXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGludDMyIG9mZnNldCA9IDI7XHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy5wcm90b3R5cGUuZ2V0T2Zmc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMCkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UZXh0Tm9kZVBvc30gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuVGV4dE5vZGVQb3MucHJvdG90eXBlLnNldE9mZnNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGludDMyIHJlbGF0aXZlX29mZnNldCA9IDM7XHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy5wcm90b3R5cGUuZ2V0UmVsYXRpdmVPZmZzZXQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCAwKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRleHROb2RlUG9zfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5UZXh0Tm9kZVBvcy5wcm90b3R5cGUuc2V0UmVsYXRpdmVPZmZzZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgMywgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuVGltZVRpY2tldC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5UaW1lVGlja2V0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlRpbWVUaWNrZXR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBsYW1wb3J0OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiMFwiKSxcclxuICAgIGRlbGltaXRlcjoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCAwKSxcclxuICAgIGFjdG9ySWQ6IG1zZy5nZXRBY3RvcklkX2FzQjY0KClcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5UaW1lVGlja2V0O1xyXG4gIHJldHVybiBwcm90by5hcGkuVGltZVRpY2tldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5UaW1lVGlja2V0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVGltZVRpY2tldH1cclxuICovXHJcbnByb3RvLmFwaS5UaW1lVGlja2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFVpbnQ2NFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldExhbXBvcnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZFVpbnQzMigpKTtcclxuICAgICAgbXNnLnNldERlbGltaXRlcih2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAocmVhZGVyLnJlYWRCeXRlcygpKTtcclxuICAgICAgbXNnLnNldEFjdG9ySWQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuVGltZVRpY2tldC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5UaW1lVGlja2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5UaW1lVGlja2V0fSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRMYW1wb3J0KCk7XHJcbiAgaWYgKHBhcnNlSW50KGYsIDEwKSAhPT0gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlVWludDY0U3RyaW5nKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXREZWxpbWl0ZXIoKTtcclxuICBpZiAoZiAhPT0gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlVWludDMyKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRBY3RvcklkX2FzVTgoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVCeXRlcyhcclxuICAgICAgMyxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIHVpbnQ2NCBsYW1wb3J0ID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQucHJvdG90eXBlLmdldExhbXBvcnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIjBcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5UaW1lVGlja2V0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5UaW1lVGlja2V0LnByb3RvdHlwZS5zZXRMYW1wb3J0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgdWludDMyIGRlbGltaXRlciA9IDI7XHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbnByb3RvLmFwaS5UaW1lVGlja2V0LnByb3RvdHlwZS5nZXREZWxpbWl0ZXIgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRpbWVUaWNrZXR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQucHJvdG90eXBlLnNldERlbGltaXRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGFjdG9yX2lkID0gMztcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQucHJvdG90eXBlLmdldEFjdG9ySWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGFjdG9yX2lkID0gMztcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0QWN0b3JJZCgpYFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuVGltZVRpY2tldC5wcm90b3R5cGUuZ2V0QWN0b3JJZF9hc0I2NCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzQjY0KFxyXG4gICAgICB0aGlzLmdldEFjdG9ySWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBhY3Rvcl9pZCA9IDM7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldEFjdG9ySWQoKWBcclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuVGltZVRpY2tldC5wcm90b3R5cGUuZ2V0QWN0b3JJZF9hc1U4ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVVpbnQ4QXJyYXl9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc1U4KFxyXG4gICAgICB0aGlzLmdldEFjdG9ySWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoc3RyaW5nfFVpbnQ4QXJyYXkpfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlRpbWVUaWNrZXR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlRpbWVUaWNrZXQucHJvdG90eXBlLnNldEFjdG9ySWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jRXZlbnQucmVwZWF0ZWRGaWVsZHNfID0gWzNdO1xyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkRvY0V2ZW50LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRvY0V2ZW50fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5Eb2NFdmVudC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIHR5cGU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgMCksXHJcbiAgICBwdWJsaXNoZXI6IChmID0gbXNnLmdldFB1Ymxpc2hlcigpKSAmJiBwcm90by5hcGkuQ2xpZW50LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBkb2N1bWVudEtleXNMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY0V2ZW50fVxyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5Eb2NFdmVudDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkRvY0V2ZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRvY0V2ZW50fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRG9jRXZlbnR9XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jRXZlbnQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFwcm90by5hcGkuRG9jRXZlbnRUeXBlfSAqLyAocmVhZGVyLnJlYWRFbnVtKCkpO1xyXG4gICAgICBtc2cuc2V0VHlwZSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLkNsaWVudDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLmFwaS5DbGllbnQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldFB1Ymxpc2hlcih2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAzOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuYWRkRG9jdW1lbnRLZXlzKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkRvY0V2ZW50LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5Eb2NFdmVudH0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5Eb2NFdmVudC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldFR5cGUoKTtcclxuICBpZiAoZiAhPT0gMC4wKSB7XHJcbiAgICB3cml0ZXIud3JpdGVFbnVtKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRQdWJsaXNoZXIoKTtcclxuICBpZiAoZiAhPSBudWxsKSB7XHJcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxyXG4gICAgICAyLFxyXG4gICAgICBmLFxyXG4gICAgICBwcm90by5hcGkuQ2xpZW50LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXREb2N1bWVudEtleXNMaXN0KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXHJcbiAgICAgIDMsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBEb2NFdmVudFR5cGUgdHlwZSA9IDE7XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRG9jRXZlbnRUeXBlfVxyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IXByb3RvLmFwaS5Eb2NFdmVudFR5cGV9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCAwKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5Eb2NFdmVudFR5cGV9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRG9jRXZlbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LnByb3RvdHlwZS5zZXRUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIENsaWVudCBwdWJsaXNoZXIgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkNsaWVudH1cclxuICovXHJcbnByb3RvLmFwaS5Eb2NFdmVudC5wcm90b3R5cGUuZ2V0UHVibGlzaGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkNsaWVudH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuQ2xpZW50LCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DbGllbnR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY0V2ZW50fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LnByb3RvdHlwZS5zZXRQdWJsaXNoZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRG9jRXZlbnR9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkRvY0V2ZW50LnByb3RvdHlwZS5jbGVhclB1Ymxpc2hlciA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldFB1Ymxpc2hlcih1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jRXZlbnQucHJvdG90eXBlLmhhc1B1Ymxpc2hlciA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogcmVwZWF0ZWQgc3RyaW5nIGRvY3VtZW50X2tleXMgPSAzO1xyXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cclxuICovXHJcbnByb3RvLmFwaS5Eb2NFdmVudC5wcm90b3R5cGUuZ2V0RG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY0V2ZW50fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Eb2NFdmVudC5wcm90b3R5cGUuc2V0RG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSB8fCBbXSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRvY0V2ZW50fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5Eb2NFdmVudC5wcm90b3R5cGUuYWRkRG9jdW1lbnRLZXlzID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDMsIHZhbHVlLCBvcHRfaW5kZXgpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5Eb2NFdmVudH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuRG9jRXZlbnQucHJvdG90eXBlLmNsZWFyRG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldERvY3VtZW50S2V5c0xpc3QoW10pO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAZW51bSB7bnVtYmVyfVxyXG4gKi9cclxucHJvdG8uYXBpLlZhbHVlVHlwZSA9IHtcclxuICBOVUxMOiAwLFxyXG4gIEJPT0xFQU46IDEsXHJcbiAgSU5URUdFUjogMixcclxuICBMT05HOiAzLFxyXG4gIERPVUJMRTogNCxcclxuICBTVFJJTkc6IDUsXHJcbiAgQllURVM6IDYsXHJcbiAgREFURTogNyxcclxuICBKU09OX09CSkVDVDogOCxcclxuICBKU09OX0FSUkFZOiA5LFxyXG4gIFRFWFQ6IDEwLFxyXG4gIFJJQ0hfVEVYVDogMTEsXHJcbiAgSU5URUdFUl9DTlQ6IDEyLFxyXG4gIExPTkdfQ05UOiAxMyxcclxuICBET1VCTEVfQ05UOiAxNFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG5wcm90by5hcGkuRG9jRXZlbnRUeXBlID0ge1xyXG4gIERPQ1VNRU5UU19DSEFOR0VEOiAwLFxyXG4gIERPQ1VNRU5UU19XQVRDSEVEOiAxLFxyXG4gIERPQ1VNRU5UU19VTldBVENIRUQ6IDIsXHJcbiAgUFJFU0VOQ0VfQ0hBTkdFRDogM1xyXG59O1xyXG5cclxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLmFwaSk7XHJcbiIsIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGdSUEMtV2ViIGdlbmVyYXRlZCBjbGllbnQgc3R1YiBmb3IgYXBpXHJcbiAqIEBlbmhhbmNlYWJsZVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5cclxuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXHJcblxyXG5cclxuLyogZXNsaW50LWRpc2FibGUgKi9cclxuLy8gQHRzLW5vY2hlY2tcclxuXHJcblxyXG5cclxuY29uc3QgZ3JwYyA9IHt9O1xyXG5ncnBjLndlYiA9IHJlcXVpcmUoJ2dycGMtd2ViJyk7XHJcblxyXG5cclxudmFyIHJlc291cmNlc19wYiA9IHJlcXVpcmUoJy4vcmVzb3VyY2VzX3BiLmpzJylcclxuY29uc3QgcHJvdG8gPSB7fTtcclxucHJvdG8uYXBpID0gcmVxdWlyZSgnLi95b3JraWVfcGIuanMnKTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9zdG5hbWVcclxuICogQHBhcmFtIHs/T2JqZWN0fSBjcmVkZW50aWFsc1xyXG4gKiBAcGFyYW0gez9ncnBjLndlYi5DbGllbnRPcHRpb25zfSBvcHRpb25zXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAc3RydWN0XHJcbiAqIEBmaW5hbFxyXG4gKi9cclxucHJvdG8uYXBpLllvcmtpZUNsaWVudCA9XHJcbiAgICBmdW5jdGlvbihob3N0bmFtZSwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcclxuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcclxuICBvcHRpb25zLmZvcm1hdCA9ICd0ZXh0JztcclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGUgQGNvbnN0IHshZ3JwYy53ZWIuR3JwY1dlYkNsaWVudEJhc2V9IFRoZSBjbGllbnRcclxuICAgKi9cclxuICB0aGlzLmNsaWVudF8gPSBuZXcgZ3JwYy53ZWIuR3JwY1dlYkNsaWVudEJhc2Uob3B0aW9ucyk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSBUaGUgaG9zdG5hbWVcclxuICAgKi9cclxuICB0aGlzLmhvc3RuYW1lXyA9IGhvc3RuYW1lO1xyXG5cclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lXHJcbiAqIEBwYXJhbSB7P09iamVjdH0gY3JlZGVudGlhbHNcclxuICogQHBhcmFtIHs/Z3JwYy53ZWIuQ2xpZW50T3B0aW9uc30gb3B0aW9uc1xyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHN0cnVjdFxyXG4gKiBAZmluYWxcclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVQcm9taXNlQ2xpZW50ID1cclxuICAgIGZ1bmN0aW9uKGhvc3RuYW1lLCBjcmVkZW50aWFscywgb3B0aW9ucykge1xyXG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xyXG4gIG9wdGlvbnMuZm9ybWF0ID0gJ3RleHQnO1xyXG5cclxuICAvKipcclxuICAgKiBAcHJpdmF0ZSBAY29uc3QgeyFncnBjLndlYi5HcnBjV2ViQ2xpZW50QmFzZX0gVGhlIGNsaWVudFxyXG4gICAqL1xyXG4gIHRoaXMuY2xpZW50XyA9IG5ldyBncnBjLndlYi5HcnBjV2ViQ2xpZW50QmFzZShvcHRpb25zKTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9IFRoZSBob3N0bmFtZVxyXG4gICAqL1xyXG4gIHRoaXMuaG9zdG5hbWVfID0gaG9zdG5hbWU7XHJcblxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyFncnBjLndlYi5NZXRob2REZXNjcmlwdG9yPFxyXG4gKiAgICFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LFxyXG4gKiAgICFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZT59XHJcbiAqL1xyXG5jb25zdCBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9BY3RpdmF0ZUNsaWVudCA9IG5ldyBncnBjLndlYi5NZXRob2REZXNjcmlwdG9yKFxyXG4gICcvYXBpLllvcmtpZS9BY3RpdmF0ZUNsaWVudCcsXHJcbiAgZ3JwYy53ZWIuTWV0aG9kVHlwZS5VTkFSWSxcclxuICBwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LFxyXG4gIHByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLFxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3R9IHJlcXVlc3RcclxuICAgKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICAgKi9cclxuICBmdW5jdGlvbihyZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gcmVxdWVzdC5zZXJpYWxpemVCaW5hcnkoKTtcclxuICB9LFxyXG4gIHByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5XHJcbik7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3R9IHJlcXVlc3QgVGhlXHJcbiAqICAgICByZXF1ZXN0IHByb3RvXHJcbiAqIEBwYXJhbSB7P09iamVjdDxzdHJpbmcsIHN0cmluZz59IG1ldGFkYXRhIFVzZXIgZGVmaW5lZFxyXG4gKiAgICAgY2FsbCBtZXRhZGF0YVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD9ncnBjLndlYi5ScGNFcnJvciwgP3Byb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlKX1cclxuICogICAgIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UpXHJcbiAqIEByZXR1cm4geyFncnBjLndlYi5DbGllbnRSZWFkYWJsZVN0cmVhbTwhcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2U+fHVuZGVmaW5lZH1cclxuICogICAgIFRoZSBYSFIgTm9kZSBSZWFkYWJsZSBTdHJlYW1cclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVDbGllbnQucHJvdG90eXBlLmFjdGl2YXRlQ2xpZW50ID1cclxuICAgIGZ1bmN0aW9uKHJlcXVlc3QsIG1ldGFkYXRhLCBjYWxsYmFjaykge1xyXG4gIHJldHVybiB0aGlzLmNsaWVudF8ucnBjQ2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9BY3RpdmF0ZUNsaWVudCcsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9BY3RpdmF0ZUNsaWVudCxcclxuICAgICAgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0fSByZXF1ZXN0IFRoZVxyXG4gKiAgICAgcmVxdWVzdCBwcm90b1xyXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+PX0gbWV0YWRhdGEgVXNlciBkZWZpbmVkXHJcbiAqICAgICBjYWxsIG1ldGFkYXRhXHJcbiAqIEByZXR1cm4geyFQcm9taXNlPCFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZT59XHJcbiAqICAgICBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3BvbnNlXHJcbiAqL1xyXG5wcm90by5hcGkuWW9ya2llUHJvbWlzZUNsaWVudC5wcm90b3R5cGUuYWN0aXZhdGVDbGllbnQgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEpIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnVuYXJ5Q2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9BY3RpdmF0ZUNsaWVudCcsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9BY3RpdmF0ZUNsaWVudCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7IWdycGMud2ViLk1ldGhvZERlc2NyaXB0b3I8XHJcbiAqICAgIXByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdCxcclxuICogICAhcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZT59XHJcbiAqL1xyXG5jb25zdCBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9EZWFjdGl2YXRlQ2xpZW50ID0gbmV3IGdycGMud2ViLk1ldGhvZERlc2NyaXB0b3IoXHJcbiAgJy9hcGkuWW9ya2llL0RlYWN0aXZhdGVDbGllbnQnLFxyXG4gIGdycGMud2ViLk1ldGhvZFR5cGUuVU5BUlksXHJcbiAgcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0LFxyXG4gIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UsXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHshcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0fSByZXF1ZXN0XHJcbiAgICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24ocmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIHJlcXVlc3Quc2VyaWFsaXplQmluYXJ5KCk7XHJcbiAgfSxcclxuICBwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5XHJcbik7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdH0gcmVxdWVzdCBUaGVcclxuICogICAgIHJlcXVlc3QgcHJvdG9cclxuICogQHBhcmFtIHs/T2JqZWN0PHN0cmluZywgc3RyaW5nPn0gbWV0YWRhdGEgVXNlciBkZWZpbmVkXHJcbiAqICAgICBjYWxsIG1ldGFkYXRhXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oP2dycGMud2ViLlJwY0Vycm9yLCA/cHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZSl9XHJcbiAqICAgICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlKVxyXG4gKiBAcmV0dXJuIHshZ3JwYy53ZWIuQ2xpZW50UmVhZGFibGVTdHJlYW08IXByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2U+fHVuZGVmaW5lZH1cclxuICogICAgIFRoZSBYSFIgTm9kZSBSZWFkYWJsZSBTdHJlYW1cclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVDbGllbnQucHJvdG90eXBlLmRlYWN0aXZhdGVDbGllbnQgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2xpZW50Xy5ycGNDYWxsKHRoaXMuaG9zdG5hbWVfICtcclxuICAgICAgJy9hcGkuWW9ya2llL0RlYWN0aXZhdGVDbGllbnQnLFxyXG4gICAgICByZXF1ZXN0LFxyXG4gICAgICBtZXRhZGF0YSB8fCB7fSxcclxuICAgICAgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfRGVhY3RpdmF0ZUNsaWVudCxcclxuICAgICAgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3R9IHJlcXVlc3QgVGhlXHJcbiAqICAgICByZXF1ZXN0IHByb3RvXHJcbiAqIEBwYXJhbSB7P09iamVjdDxzdHJpbmcsIHN0cmluZz49fSBtZXRhZGF0YSBVc2VyIGRlZmluZWRcclxuICogICAgIGNhbGwgbWV0YWRhdGFcclxuICogQHJldHVybiB7IVByb21pc2U8IXByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2U+fVxyXG4gKiAgICAgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXNwb25zZVxyXG4gKi9cclxucHJvdG8uYXBpLllvcmtpZVByb21pc2VDbGllbnQucHJvdG90eXBlLmRlYWN0aXZhdGVDbGllbnQgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEpIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnVuYXJ5Q2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9EZWFjdGl2YXRlQ2xpZW50JyxcclxuICAgICAgcmVxdWVzdCxcclxuICAgICAgbWV0YWRhdGEgfHwge30sXHJcbiAgICAgIG1ldGhvZERlc2NyaXB0b3JfWW9ya2llX0RlYWN0aXZhdGVDbGllbnQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyFncnBjLndlYi5NZXRob2REZXNjcmlwdG9yPFxyXG4gKiAgICFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LFxyXG4gKiAgICFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXNwb25zZT59XHJcbiAqL1xyXG5jb25zdCBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9VcGRhdGVQcmVzZW5jZSA9IG5ldyBncnBjLndlYi5NZXRob2REZXNjcmlwdG9yKFxyXG4gICcvYXBpLllvcmtpZS9VcGRhdGVQcmVzZW5jZScsXHJcbiAgZ3JwYy53ZWIuTWV0aG9kVHlwZS5VTkFSWSxcclxuICBwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LFxyXG4gIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlLFxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3R9IHJlcXVlc3RcclxuICAgKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICAgKi9cclxuICBmdW5jdGlvbihyZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gcmVxdWVzdC5zZXJpYWxpemVCaW5hcnkoKTtcclxuICB9LFxyXG4gIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5XHJcbik7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3R9IHJlcXVlc3QgVGhlXHJcbiAqICAgICByZXF1ZXN0IHByb3RvXHJcbiAqIEBwYXJhbSB7P09iamVjdDxzdHJpbmcsIHN0cmluZz59IG1ldGFkYXRhIFVzZXIgZGVmaW5lZFxyXG4gKiAgICAgY2FsbCBtZXRhZGF0YVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD9ncnBjLndlYi5ScGNFcnJvciwgP3Byb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlKX1cclxuICogICAgIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UpXHJcbiAqIEByZXR1cm4geyFncnBjLndlYi5DbGllbnRSZWFkYWJsZVN0cmVhbTwhcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2U+fHVuZGVmaW5lZH1cclxuICogICAgIFRoZSBYSFIgTm9kZSBSZWFkYWJsZSBTdHJlYW1cclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVDbGllbnQucHJvdG90eXBlLnVwZGF0ZVByZXNlbmNlID1cclxuICAgIGZ1bmN0aW9uKHJlcXVlc3QsIG1ldGFkYXRhLCBjYWxsYmFjaykge1xyXG4gIHJldHVybiB0aGlzLmNsaWVudF8ucnBjQ2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9VcGRhdGVQcmVzZW5jZScsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9VcGRhdGVQcmVzZW5jZSxcclxuICAgICAgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0fSByZXF1ZXN0IFRoZVxyXG4gKiAgICAgcmVxdWVzdCBwcm90b1xyXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+PX0gbWV0YWRhdGEgVXNlciBkZWZpbmVkXHJcbiAqICAgICBjYWxsIG1ldGFkYXRhXHJcbiAqIEByZXR1cm4geyFQcm9taXNlPCFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXNwb25zZT59XHJcbiAqICAgICBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3BvbnNlXHJcbiAqL1xyXG5wcm90by5hcGkuWW9ya2llUHJvbWlzZUNsaWVudC5wcm90b3R5cGUudXBkYXRlUHJlc2VuY2UgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEpIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnVuYXJ5Q2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9VcGRhdGVQcmVzZW5jZScsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9VcGRhdGVQcmVzZW5jZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7IWdycGMud2ViLk1ldGhvZERlc2NyaXB0b3I8XHJcbiAqICAgIXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3QsXHJcbiAqICAgIXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlPn1cclxuICovXHJcbmNvbnN0IG1ldGhvZERlc2NyaXB0b3JfWW9ya2llX0F0dGFjaERvY3VtZW50ID0gbmV3IGdycGMud2ViLk1ldGhvZERlc2NyaXB0b3IoXHJcbiAgJy9hcGkuWW9ya2llL0F0dGFjaERvY3VtZW50JyxcclxuICBncnBjLndlYi5NZXRob2RUeXBlLlVOQVJZLFxyXG4gIHByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3QsXHJcbiAgcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UsXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdH0gcmVxdWVzdFxyXG4gICAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uKHJlcXVlc3QpIHtcclxuICAgIHJldHVybiByZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeSgpO1xyXG4gIH0sXHJcbiAgcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlcclxuKTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdH0gcmVxdWVzdCBUaGVcclxuICogICAgIHJlcXVlc3QgcHJvdG9cclxuICogQHBhcmFtIHs/T2JqZWN0PHN0cmluZywgc3RyaW5nPn0gbWV0YWRhdGEgVXNlciBkZWZpbmVkXHJcbiAqICAgICBjYWxsIG1ldGFkYXRhXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oP2dycGMud2ViLlJwY0Vycm9yLCA/cHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UpfVxyXG4gKiAgICAgY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSlcclxuICogQHJldHVybiB7IWdycGMud2ViLkNsaWVudFJlYWRhYmxlU3RyZWFtPCFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZT58dW5kZWZpbmVkfVxyXG4gKiAgICAgVGhlIFhIUiBOb2RlIFJlYWRhYmxlIFN0cmVhbVxyXG4gKi9cclxucHJvdG8uYXBpLllvcmtpZUNsaWVudC5wcm90b3R5cGUuYXR0YWNoRG9jdW1lbnQgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2xpZW50Xy5ycGNDYWxsKHRoaXMuaG9zdG5hbWVfICtcclxuICAgICAgJy9hcGkuWW9ya2llL0F0dGFjaERvY3VtZW50JyxcclxuICAgICAgcmVxdWVzdCxcclxuICAgICAgbWV0YWRhdGEgfHwge30sXHJcbiAgICAgIG1ldGhvZERlc2NyaXB0b3JfWW9ya2llX0F0dGFjaERvY3VtZW50LFxyXG4gICAgICBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3R9IHJlcXVlc3QgVGhlXHJcbiAqICAgICByZXF1ZXN0IHByb3RvXHJcbiAqIEBwYXJhbSB7P09iamVjdDxzdHJpbmcsIHN0cmluZz49fSBtZXRhZGF0YSBVc2VyIGRlZmluZWRcclxuICogICAgIGNhbGwgbWV0YWRhdGFcclxuICogQHJldHVybiB7IVByb21pc2U8IXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlPn1cclxuICogICAgIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcmVzcG9uc2VcclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVQcm9taXNlQ2xpZW50LnByb3RvdHlwZS5hdHRhY2hEb2N1bWVudCA9XHJcbiAgICBmdW5jdGlvbihyZXF1ZXN0LCBtZXRhZGF0YSkge1xyXG4gIHJldHVybiB0aGlzLmNsaWVudF8udW5hcnlDYWxsKHRoaXMuaG9zdG5hbWVfICtcclxuICAgICAgJy9hcGkuWW9ya2llL0F0dGFjaERvY3VtZW50JyxcclxuICAgICAgcmVxdWVzdCxcclxuICAgICAgbWV0YWRhdGEgfHwge30sXHJcbiAgICAgIG1ldGhvZERlc2NyaXB0b3JfWW9ya2llX0F0dGFjaERvY3VtZW50KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshZ3JwYy53ZWIuTWV0aG9kRGVzY3JpcHRvcjxcclxuICogICAhcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdCxcclxuICogICAhcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2U+fVxyXG4gKi9cclxuY29uc3QgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfRGV0YWNoRG9jdW1lbnQgPSBuZXcgZ3JwYy53ZWIuTWV0aG9kRGVzY3JpcHRvcihcclxuICAnL2FwaS5Zb3JraWUvRGV0YWNoRG9jdW1lbnQnLFxyXG4gIGdycGMud2ViLk1ldGhvZFR5cGUuVU5BUlksXHJcbiAgcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdCxcclxuICBwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZSxcclxuICAvKipcclxuICAgKiBAcGFyYW0geyFwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0fSByZXF1ZXN0XHJcbiAgICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24ocmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIHJlcXVlc3Quc2VyaWFsaXplQmluYXJ5KCk7XHJcbiAgfSxcclxuICBwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeVxyXG4pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0fSByZXF1ZXN0IFRoZVxyXG4gKiAgICAgcmVxdWVzdCBwcm90b1xyXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBtZXRhZGF0YSBVc2VyIGRlZmluZWRcclxuICogICAgIGNhbGwgbWV0YWRhdGFcclxuICogQHBhcmFtIHtmdW5jdGlvbig/Z3JwYy53ZWIuUnBjRXJyb3IsID9wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZSl9XHJcbiAqICAgICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlKVxyXG4gKiBAcmV0dXJuIHshZ3JwYy53ZWIuQ2xpZW50UmVhZGFibGVTdHJlYW08IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlPnx1bmRlZmluZWR9XHJcbiAqICAgICBUaGUgWEhSIE5vZGUgUmVhZGFibGUgU3RyZWFtXHJcbiAqL1xyXG5wcm90by5hcGkuWW9ya2llQ2xpZW50LnByb3RvdHlwZS5kZXRhY2hEb2N1bWVudCA9XHJcbiAgICBmdW5jdGlvbihyZXF1ZXN0LCBtZXRhZGF0YSwgY2FsbGJhY2spIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnJwY0NhbGwodGhpcy5ob3N0bmFtZV8gK1xyXG4gICAgICAnL2FwaS5Zb3JraWUvRGV0YWNoRG9jdW1lbnQnLFxyXG4gICAgICByZXF1ZXN0LFxyXG4gICAgICBtZXRhZGF0YSB8fCB7fSxcclxuICAgICAgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfRGV0YWNoRG9jdW1lbnQsXHJcbiAgICAgIGNhbGxiYWNrKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdH0gcmVxdWVzdCBUaGVcclxuICogICAgIHJlcXVlc3QgcHJvdG9cclxuICogQHBhcmFtIHs/T2JqZWN0PHN0cmluZywgc3RyaW5nPj19IG1ldGFkYXRhIFVzZXIgZGVmaW5lZFxyXG4gKiAgICAgY2FsbCBtZXRhZGF0YVxyXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2U+fVxyXG4gKiAgICAgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXNwb25zZVxyXG4gKi9cclxucHJvdG8uYXBpLllvcmtpZVByb21pc2VDbGllbnQucHJvdG90eXBlLmRldGFjaERvY3VtZW50ID1cclxuICAgIGZ1bmN0aW9uKHJlcXVlc3QsIG1ldGFkYXRhKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2xpZW50Xy51bmFyeUNhbGwodGhpcy5ob3N0bmFtZV8gK1xyXG4gICAgICAnL2FwaS5Zb3JraWUvRGV0YWNoRG9jdW1lbnQnLFxyXG4gICAgICByZXF1ZXN0LFxyXG4gICAgICBtZXRhZGF0YSB8fCB7fSxcclxuICAgICAgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfRGV0YWNoRG9jdW1lbnQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyFncnBjLndlYi5NZXRob2REZXNjcmlwdG9yPFxyXG4gKiAgICFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0LFxyXG4gKiAgICFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZT59XHJcbiAqL1xyXG5jb25zdCBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9XYXRjaERvY3VtZW50cyA9IG5ldyBncnBjLndlYi5NZXRob2REZXNjcmlwdG9yKFxyXG4gICcvYXBpLllvcmtpZS9XYXRjaERvY3VtZW50cycsXHJcbiAgZ3JwYy53ZWIuTWV0aG9kVHlwZS5TRVJWRVJfU1RSRUFNSU5HLFxyXG4gIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QsXHJcbiAgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UsXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdH0gcmVxdWVzdFxyXG4gICAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uKHJlcXVlc3QpIHtcclxuICAgIHJldHVybiByZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeSgpO1xyXG4gIH0sXHJcbiAgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlcclxuKTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdH0gcmVxdWVzdCBUaGUgcmVxdWVzdCBwcm90b1xyXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+PX0gbWV0YWRhdGEgVXNlciBkZWZpbmVkXHJcbiAqICAgICBjYWxsIG1ldGFkYXRhXHJcbiAqIEByZXR1cm4geyFncnBjLndlYi5DbGllbnRSZWFkYWJsZVN0cmVhbTwhcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2U+fVxyXG4gKiAgICAgVGhlIFhIUiBOb2RlIFJlYWRhYmxlIFN0cmVhbVxyXG4gKi9cclxucHJvdG8uYXBpLllvcmtpZUNsaWVudC5wcm90b3R5cGUud2F0Y2hEb2N1bWVudHMgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEpIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnNlcnZlclN0cmVhbWluZyh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9XYXRjaERvY3VtZW50cycsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9XYXRjaERvY3VtZW50cyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3R9IHJlcXVlc3QgVGhlIHJlcXVlc3QgcHJvdG9cclxuICogQHBhcmFtIHs/T2JqZWN0PHN0cmluZywgc3RyaW5nPj19IG1ldGFkYXRhIFVzZXIgZGVmaW5lZFxyXG4gKiAgICAgY2FsbCBtZXRhZGF0YVxyXG4gKiBAcmV0dXJuIHshZ3JwYy53ZWIuQ2xpZW50UmVhZGFibGVTdHJlYW08IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlPn1cclxuICogICAgIFRoZSBYSFIgTm9kZSBSZWFkYWJsZSBTdHJlYW1cclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVQcm9taXNlQ2xpZW50LnByb3RvdHlwZS53YXRjaERvY3VtZW50cyA9XHJcbiAgICBmdW5jdGlvbihyZXF1ZXN0LCBtZXRhZGF0YSkge1xyXG4gIHJldHVybiB0aGlzLmNsaWVudF8uc2VydmVyU3RyZWFtaW5nKHRoaXMuaG9zdG5hbWVfICtcclxuICAgICAgJy9hcGkuWW9ya2llL1dhdGNoRG9jdW1lbnRzJyxcclxuICAgICAgcmVxdWVzdCxcclxuICAgICAgbWV0YWRhdGEgfHwge30sXHJcbiAgICAgIG1ldGhvZERlc2NyaXB0b3JfWW9ya2llX1dhdGNoRG9jdW1lbnRzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshZ3JwYy53ZWIuTWV0aG9kRGVzY3JpcHRvcjxcclxuICogICAhcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdCxcclxuICogICAhcHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2U+fVxyXG4gKi9cclxuY29uc3QgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfUHVzaFB1bGwgPSBuZXcgZ3JwYy53ZWIuTWV0aG9kRGVzY3JpcHRvcihcclxuICAnL2FwaS5Zb3JraWUvUHVzaFB1bGwnLFxyXG4gIGdycGMud2ViLk1ldGhvZFR5cGUuVU5BUlksXHJcbiAgcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdCxcclxuICBwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZSxcclxuICAvKipcclxuICAgKiBAcGFyYW0geyFwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0fSByZXF1ZXN0XHJcbiAgICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24ocmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIHJlcXVlc3Quc2VyaWFsaXplQmluYXJ5KCk7XHJcbiAgfSxcclxuICBwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeVxyXG4pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0fSByZXF1ZXN0IFRoZVxyXG4gKiAgICAgcmVxdWVzdCBwcm90b1xyXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBtZXRhZGF0YSBVc2VyIGRlZmluZWRcclxuICogICAgIGNhbGwgbWV0YWRhdGFcclxuICogQHBhcmFtIHtmdW5jdGlvbig/Z3JwYy53ZWIuUnBjRXJyb3IsID9wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZSl9XHJcbiAqICAgICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlKVxyXG4gKiBAcmV0dXJuIHshZ3JwYy53ZWIuQ2xpZW50UmVhZGFibGVTdHJlYW08IXByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlPnx1bmRlZmluZWR9XHJcbiAqICAgICBUaGUgWEhSIE5vZGUgUmVhZGFibGUgU3RyZWFtXHJcbiAqL1xyXG5wcm90by5hcGkuWW9ya2llQ2xpZW50LnByb3RvdHlwZS5wdXNoUHVsbCA9XHJcbiAgICBmdW5jdGlvbihyZXF1ZXN0LCBtZXRhZGF0YSwgY2FsbGJhY2spIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnJwY0NhbGwodGhpcy5ob3N0bmFtZV8gK1xyXG4gICAgICAnL2FwaS5Zb3JraWUvUHVzaFB1bGwnLFxyXG4gICAgICByZXF1ZXN0LFxyXG4gICAgICBtZXRhZGF0YSB8fCB7fSxcclxuICAgICAgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfUHVzaFB1bGwsXHJcbiAgICAgIGNhbGxiYWNrKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdH0gcmVxdWVzdCBUaGVcclxuICogICAgIHJlcXVlc3QgcHJvdG9cclxuICogQHBhcmFtIHs/T2JqZWN0PHN0cmluZywgc3RyaW5nPj19IG1ldGFkYXRhIFVzZXIgZGVmaW5lZFxyXG4gKiAgICAgY2FsbCBtZXRhZGF0YVxyXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhcHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2U+fVxyXG4gKiAgICAgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXNwb25zZVxyXG4gKi9cclxucHJvdG8uYXBpLllvcmtpZVByb21pc2VDbGllbnQucHJvdG90eXBlLnB1c2hQdWxsID1cclxuICAgIGZ1bmN0aW9uKHJlcXVlc3QsIG1ldGFkYXRhKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2xpZW50Xy51bmFyeUNhbGwodGhpcy5ob3N0bmFtZV8gK1xyXG4gICAgICAnL2FwaS5Zb3JraWUvUHVzaFB1bGwnLFxyXG4gICAgICByZXF1ZXN0LFxyXG4gICAgICBtZXRhZGF0YSB8fCB7fSxcclxuICAgICAgbWV0aG9kRGVzY3JpcHRvcl9Zb3JraWVfUHVzaFB1bGwpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyFncnBjLndlYi5NZXRob2REZXNjcmlwdG9yPFxyXG4gKiAgICFwcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LFxyXG4gKiAgICFwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZT59XHJcbiAqL1xyXG5jb25zdCBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9MaXN0Q2hhbmdlcyA9IG5ldyBncnBjLndlYi5NZXRob2REZXNjcmlwdG9yKFxyXG4gICcvYXBpLllvcmtpZS9MaXN0Q2hhbmdlcycsXHJcbiAgZ3JwYy53ZWIuTWV0aG9kVHlwZS5VTkFSWSxcclxuICBwcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LFxyXG4gIHByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLFxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3R9IHJlcXVlc3RcclxuICAgKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICAgKi9cclxuICBmdW5jdGlvbihyZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gcmVxdWVzdC5zZXJpYWxpemVCaW5hcnkoKTtcclxuICB9LFxyXG4gIHByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5XHJcbik7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3R9IHJlcXVlc3QgVGhlXHJcbiAqICAgICByZXF1ZXN0IHByb3RvXHJcbiAqIEBwYXJhbSB7P09iamVjdDxzdHJpbmcsIHN0cmluZz59IG1ldGFkYXRhIFVzZXIgZGVmaW5lZFxyXG4gKiAgICAgY2FsbCBtZXRhZGF0YVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD9ncnBjLndlYi5ScGNFcnJvciwgP3Byb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlKX1cclxuICogICAgIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UpXHJcbiAqIEByZXR1cm4geyFncnBjLndlYi5DbGllbnRSZWFkYWJsZVN0cmVhbTwhcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVzcG9uc2U+fHVuZGVmaW5lZH1cclxuICogICAgIFRoZSBYSFIgTm9kZSBSZWFkYWJsZSBTdHJlYW1cclxuICovXHJcbnByb3RvLmFwaS5Zb3JraWVDbGllbnQucHJvdG90eXBlLmxpc3RDaGFuZ2VzID1cclxuICAgIGZ1bmN0aW9uKHJlcXVlc3QsIG1ldGFkYXRhLCBjYWxsYmFjaykge1xyXG4gIHJldHVybiB0aGlzLmNsaWVudF8ucnBjQ2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9MaXN0Q2hhbmdlcycsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9MaXN0Q2hhbmdlcyxcclxuICAgICAgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0fSByZXF1ZXN0IFRoZVxyXG4gKiAgICAgcmVxdWVzdCBwcm90b1xyXG4gKiBAcGFyYW0gez9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+PX0gbWV0YWRhdGEgVXNlciBkZWZpbmVkXHJcbiAqICAgICBjYWxsIG1ldGFkYXRhXHJcbiAqIEByZXR1cm4geyFQcm9taXNlPCFwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZT59XHJcbiAqICAgICBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3BvbnNlXHJcbiAqL1xyXG5wcm90by5hcGkuWW9ya2llUHJvbWlzZUNsaWVudC5wcm90b3R5cGUubGlzdENoYW5nZXMgPVxyXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgbWV0YWRhdGEpIHtcclxuICByZXR1cm4gdGhpcy5jbGllbnRfLnVuYXJ5Q2FsbCh0aGlzLmhvc3RuYW1lXyArXHJcbiAgICAgICcvYXBpLllvcmtpZS9MaXN0Q2hhbmdlcycsXHJcbiAgICAgIHJlcXVlc3QsXHJcbiAgICAgIG1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBtZXRob2REZXNjcmlwdG9yX1lvcmtpZV9MaXN0Q2hhbmdlcyk7XHJcbn07XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBwcm90by5hcGk7XHJcblxyXG4iLCIvLyBzb3VyY2U6IHlvcmtpZS5wcm90b1xyXG4vKipcclxuICogQGZpbGVvdmVydmlld1xyXG4gKiBAZW5oYW5jZWFibGVcclxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cclxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxyXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcclxuLyogZXNsaW50LWRpc2FibGUgKi9cclxuLy8gQHRzLW5vY2hlY2tcclxuXHJcbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XHJcbnZhciBnb29nID0ganNwYjtcclxudmFyIGdsb2JhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XHJcblxyXG52YXIgcmVzb3VyY2VzX3BiID0gcmVxdWlyZSgnLi9yZXNvdXJjZXNfcGIuanMnKTtcclxuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCByZXNvdXJjZXNfcGIpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0JywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlJywgbnVsbCwgZ2xvYmFsKTtcclxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2UnLCBudWxsLCBnbG9iYWwpO1xyXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdCcsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Cb2R5Q2FzZScsIG51bGwsIGdsb2JhbCk7XHJcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbicsIG51bGwsIGdsb2JhbCk7XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3QgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3QuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdCc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2UgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2UsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdCwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3QnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0LCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlLCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UuZGlzcGxheU5hbWUgPSAncHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLm9uZW9mR3JvdXBzXyk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZSc7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24gPSBmdW5jdGlvbihvcHRfZGF0YSkge1xyXG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24sIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbi5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbic7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cclxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxyXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXHJcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cclxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcclxuICogdmFsaWQuXHJcbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LCBqc3BiLk1lc3NhZ2UpO1xyXG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0JztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXNwb25zZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XHJcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcclxufTtcclxuZ29vZy5pbmhlcml0cyhwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXNwb25zZSwganNwYi5NZXNzYWdlKTtcclxuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlJztcclxufVxyXG4vKipcclxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxyXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXHJcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcclxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxyXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxyXG4gKiB2YWxpZC5cclxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xyXG59O1xyXG5nb29nLmluaGVyaXRzKHByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3QsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3QnO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXHJcbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcclxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxyXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXHJcbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXHJcbiAqIHZhbGlkLlxyXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcclxuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XHJcbn07XHJcbmdvb2cuaW5oZXJpdHMocHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVzcG9uc2UsIGpzcGIuTWVzc2FnZSk7XHJcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZS5kaXNwbGF5TmFtZSA9ICdwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZSc7XHJcbn1cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgY2xpZW50S2V5OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldENsaWVudEtleSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlcXVlc3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50S2V5KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgc3RyaW5nIGNsaWVudF9rZXkgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRDbGllbnRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRDbGllbnRLZXkgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2V9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnRLZXk6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgXCJcIiksXHJcbiAgICBjbGllbnRJZDogbXNnLmdldENsaWVudElkX2FzQjY0KClcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlO1xyXG4gIHJldHVybiBwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLnNldENsaWVudEtleSh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAocmVhZGVyLnJlYWRCeXRlcygpKTtcclxuICAgICAgbXNnLnNldENsaWVudElkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2UucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQWN0aXZhdGVDbGllbnRSZXNwb25zZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50S2V5KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDbGllbnRJZF9hc1U4KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlQnl0ZXMoXHJcbiAgICAgIDIsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgY2xpZW50X2tleSA9IDE7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnByb3RvdHlwZS5nZXRDbGllbnRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2UucHJvdG90eXBlLnNldENsaWVudEtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDI7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnByb3RvdHlwZS5nZXRDbGllbnRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMjtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q2xpZW50SWQoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkFjdGl2YXRlQ2xpZW50UmVzcG9uc2UucHJvdG90eXBlLmdldENsaWVudElkX2FzQjY0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNCNjQoXHJcbiAgICAgIHRoaXMuZ2V0Q2xpZW50SWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAyO1xyXG4gKiBOb3RlIHRoYXQgVWludDhBcnJheSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cclxuICogQHNlZSBodHRwOi8vY2FuaXVzZS5jb20vVWludDhBcnJheVxyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRDbGllbnRJZCgpYFxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnByb3RvdHlwZS5nZXRDbGllbnRJZF9hc1U4ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVVpbnQ4QXJyYXl9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc1U4KFxyXG4gICAgICB0aGlzLmdldENsaWVudElkKCkpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshKHN0cmluZ3xVaW50OEFycmF5KX0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5BY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnByb3RvdHlwZS5zZXRDbGllbnRJZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNsaWVudElkOiBtc2cuZ2V0Q2xpZW50SWRfYXNCNjQoKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3Q7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRDbGllbnRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRDbGllbnRJZF9hc1U4KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlQnl0ZXMoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3QucHJvdG90eXBlLmdldENsaWVudElkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRDbGllbnRJZCgpYFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3QucHJvdG90eXBlLmdldENsaWVudElkX2FzQjY0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNCNjQoXHJcbiAgICAgIHRoaXMuZ2V0Q2xpZW50SWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBOb3RlIHRoYXQgVWludDhBcnJheSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cclxuICogQHNlZSBodHRwOi8vY2FuaXVzZS5jb20vVWludDhBcnJheVxyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRDbGllbnRJZCgpYFxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlcXVlc3R9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRDbGllbnRJZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnRJZDogbXNnLmdldENsaWVudElkX2FzQjY0KClcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XHJcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlO1xyXG4gIHJldHVybiBwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAocmVhZGVyLnJlYWRCeXRlcygpKTtcclxuICAgICAgbXNnLnNldENsaWVudElkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRDbGllbnRJZF9hc1U4KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlQnl0ZXMoXHJcbiAgICAgIDEsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlLnByb3RvdHlwZS5nZXRDbGllbnRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q2xpZW50SWQoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkRlYWN0aXZhdGVDbGllbnRSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRGVhY3RpdmF0ZUNsaWVudFJlc3BvbnNlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5EZWFjdGl2YXRlQ2xpZW50UmVzcG9uc2UucHJvdG90eXBlLnNldENsaWVudElkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNsaWVudElkOiBtc2cuZ2V0Q2xpZW50SWRfYXNCNjQoKSxcclxuICAgIGNoYW5nZVBhY2s6IChmID0gbXNnLmdldENoYW5nZVBhY2soKSkgJiYgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2sudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3Q7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcclxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0fVxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xyXG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcclxuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XHJcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7IVVpbnQ4QXJyYXl9ICovIChyZWFkZXIucmVhZEJ5dGVzKCkpO1xyXG4gICAgICBtc2cuc2V0Q2xpZW50SWQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHJlc291cmNlc19wYi5DaGFuZ2VQYWNrO1xyXG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscmVzb3VyY2VzX3BiLkNoYW5nZVBhY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcclxuICAgICAgbXNnLnNldENoYW5nZVBhY2sodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0fSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldENsaWVudElkX2FzVTgoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVCeXRlcyhcclxuICAgICAgMSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2hhbmdlUGFjaygpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLmdldENsaWVudElkX2FzQjY0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNCNjQoXHJcbiAgICAgIHRoaXMuZ2V0Q2xpZW50SWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBOb3RlIHRoYXQgVWludDhBcnJheSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cclxuICogQHNlZSBodHRwOi8vY2FuaXVzZS5jb20vVWludDhBcnJheVxyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRDbGllbnRJZCgpYFxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLmdldENsaWVudElkX2FzVTggPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgoXHJcbiAgICAgIHRoaXMuZ2V0Q2xpZW50SWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoc3RyaW5nfFVpbnQ4QXJyYXkpfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRDbGllbnRJZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgQ2hhbmdlUGFjayBjaGFuZ2VfcGFjayA9IDI7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuQ2hhbmdlUGFja31cclxuICovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLmdldENoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuQ2hhbmdlUGFja30gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCByZXNvdXJjZXNfcGIuQ2hhbmdlUGFjaywgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuQ2hhbmdlUGFja3x1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0Q2hhbmdlUGFjayA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlcXVlc3R9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVxdWVzdC5wcm90b3R5cGUuY2xlYXJDaGFuZ2VQYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q2hhbmdlUGFjayh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS5oYXNDaGFuZ2VQYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2V9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnRJZDogbXNnLmdldENsaWVudElkX2FzQjY0KCksXHJcbiAgICBjaGFuZ2VQYWNrOiAoZiA9IG1zZy5nZXRDaGFuZ2VQYWNrKCkpICYmIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlO1xyXG4gIHJldHVybiBwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRDbGllbnRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2s7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxyZXNvdXJjZXNfcGIuQ2hhbmdlUGFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q2hhbmdlUGFjayh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2V9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldENsaWVudElkX2FzVTgoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVCeXRlcyhcclxuICAgICAgMSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2hhbmdlUGFjaygpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLmdldENsaWVudElkID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBUaGlzIGlzIGEgdHlwZS1jb252ZXJzaW9uIHdyYXBwZXIgYXJvdW5kIGBnZXRDbGllbnRJZCgpYFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLmdldENsaWVudElkX2FzVTggPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzVTgoXHJcbiAgICAgIHRoaXMuZ2V0Q2xpZW50SWQoKSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoc3RyaW5nfFVpbnQ4QXJyYXkpfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLnNldENsaWVudElkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBDaGFuZ2VQYWNrIGNoYW5nZV9wYWNrID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfVxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLmdldENoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuQ2hhbmdlUGFja30gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCByZXNvdXJjZXNfcGIuQ2hhbmdlUGFjaywgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuQ2hhbmdlUGFja3x1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuQXR0YWNoRG9jdW1lbnRSZXNwb25zZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5BdHRhY2hEb2N1bWVudFJlc3BvbnNlLnByb3RvdHlwZS5zZXRDaGFuZ2VQYWNrID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLmNsZWFyQ2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldENoYW5nZVBhY2sodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLkF0dGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLmhhc0NoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgY2xpZW50SWQ6IG1zZy5nZXRDbGllbnRJZF9hc0I2NCgpLFxyXG4gICAgY2hhbmdlUGFjazogKGYgPSBtc2cuZ2V0Q2hhbmdlUGFjaygpKSAmJiByZXNvdXJjZXNfcGIuQ2hhbmdlUGFjay50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRDbGllbnRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2s7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxyZXNvdXJjZXNfcGIuQ2hhbmdlUGFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q2hhbmdlUGFjayh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50SWRfYXNVOCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDaGFuZ2VQYWNrKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRDbGllbnRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q2xpZW50SWQoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLnNldENsaWVudElkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBDaGFuZ2VQYWNrIGNoYW5nZV9wYWNrID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfVxyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3R9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRDaGFuZ2VQYWNrID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXF1ZXN0LnByb3RvdHlwZS5jbGVhckNoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDaGFuZ2VQYWNrKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlcXVlc3QucHJvdG90eXBlLmhhc0NoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNsaWVudEtleToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCBcIlwiKSxcclxuICAgIGNoYW5nZVBhY2s6IChmID0gbXNnLmdldENoYW5nZVBhY2soKSkgJiYgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2sudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2U7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2V9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0Q2xpZW50S2V5KHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyByZXNvdXJjZXNfcGIuQ2hhbmdlUGFjaztcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDaGFuZ2VQYWNrKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50S2V5KCk7XHJcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xyXG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDaGFuZ2VQYWNrKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgY2xpZW50X2tleSA9IDE7XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlLnByb3RvdHlwZS5nZXRDbGllbnRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLnNldENsaWVudEtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIENoYW5nZVBhY2sgY2hhbmdlX3BhY2sgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkNoYW5nZVBhY2t9XHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5EZXRhY2hEb2N1bWVudFJlc3BvbnNlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkRldGFjaERvY3VtZW50UmVzcG9uc2UucHJvdG90eXBlLnNldENoYW5nZVBhY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZS5wcm90b3R5cGUuY2xlYXJDaGFuZ2VQYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q2hhbmdlUGFjayh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuRGV0YWNoRG9jdW1lbnRSZXNwb25zZS5wcm90b3R5cGUuaGFzQ2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cclxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QucmVwZWF0ZWRGaWVsZHNfID0gWzJdO1xyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnQ6IChmID0gbXNnLmdldENsaWVudCgpKSAmJiByZXNvdXJjZXNfcGIuQ2xpZW50LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBkb2N1bWVudEtleXNMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHJlc291cmNlc19wYi5DbGllbnQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxyZXNvdXJjZXNfcGIuQ2xpZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDbGllbnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLmFkZERvY3VtZW50S2V5cyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcmVzb3VyY2VzX3BiLkNsaWVudC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RG9jdW1lbnRLZXlzTGlzdCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgQ2xpZW50IGNsaWVudCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuQ2xpZW50fVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkNsaWVudH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCByZXNvdXJjZXNfcGIuQ2xpZW50LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DbGllbnR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QucHJvdG90eXBlLnNldENsaWVudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3R9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5wcm90b3R5cGUuY2xlYXJDbGllbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDbGllbnQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5wcm90b3R5cGUuaGFzQ2xpZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiByZXBlYXRlZCBzdHJpbmcgZG9jdW1lbnRfa2V5cyA9IDI7XHJcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdC5wcm90b3R5cGUuZ2V0RG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0LnByb3RvdHlwZS5zZXREb2N1bWVudEtleXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlIHx8IFtdKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QucHJvdG90eXBlLmFkZERvY3VtZW50S2V5cyA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAyLCB2YWx1ZSwgb3B0X2luZGV4KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1JlcXVlc3QucHJvdG90eXBlLmNsZWFyRG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldERvY3VtZW50S2V5c0xpc3QoW10pO1xyXG59O1xyXG5cclxuXHJcblxyXG4vKipcclxuICogT25lb2YgZ3JvdXAgZGVmaW5pdGlvbnMgZm9yIHRoaXMgbWVzc2FnZS4gRWFjaCBncm91cCBkZWZpbmVzIHRoZSBmaWVsZFxyXG4gKiBudW1iZXJzIGJlbG9uZ2luZyB0byB0aGF0IGdyb3VwLiBXaGVuIG9mIHRoZXNlIGZpZWxkcycgdmFsdWUgaXMgc2V0LCBhbGxcclxuICogb3RoZXIgZmllbGRzIGluIHRoZSBncm91cCBhcmUgY2xlYXJlZC4gRHVyaW5nIGRlc2VyaWFsaXphdGlvbiwgaWYgbXVsdGlwbGVcclxuICogZmllbGRzIGFyZSBlbmNvdW50ZXJlZCBmb3IgYSBncm91cCwgb25seSB0aGUgbGFzdCB2YWx1ZSBzZWVuIHdpbGwgYmUga2VwdC5cclxuICogQHByaXZhdGUgeyFBcnJheTwhQXJyYXk8bnVtYmVyPj59XHJcbiAqIEBjb25zdFxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2Uub25lb2ZHcm91cHNfID0gW1sxLDJdXTtcclxuXHJcbi8qKlxyXG4gKiBAZW51bSB7bnVtYmVyfVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuQm9keUNhc2UgPSB7XHJcbiAgQk9EWV9OT1RfU0VUOiAwLFxyXG4gIElOSVRJQUxJWkFUSU9OOiAxLFxyXG4gIEVWRU5UOiAyXHJcbn07XHJcblxyXG4vKipcclxuICogQHJldHVybiB7cHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuQm9keUNhc2V9XHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUuZ2V0Qm9keUNhc2UgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Cb2R5Q2FzZX0gKi8oanNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2UodGhpcywgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2Uub25lb2ZHcm91cHNfWzBdKSk7XHJcbn07XHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2V9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBpbml0aWFsaXphdGlvbjogKGYgPSBtc2cuZ2V0SW5pdGlhbGl6YXRpb24oKSkgJiYgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24udG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcclxuICAgIGV2ZW50OiAoZiA9IG1zZy5nZXRFdmVudCgpKSAmJiByZXNvdXJjZXNfcGIuRG9jRXZlbnQudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2U7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2V9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb247XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0SW5pdGlhbGl6YXRpb24odmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHJlc291cmNlc19wYi5Eb2NFdmVudDtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHJlc291cmNlc19wYi5Eb2NFdmVudC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0RXZlbnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xyXG4gIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcclxuICB2YXIgZiA9IHVuZGVmaW5lZDtcclxuICBmID0gbWVzc2FnZS5nZXRJbml0aWFsaXphdGlvbigpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRFdmVudCgpO1xyXG4gIGlmIChmICE9IG51bGwpIHtcclxuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXHJcbiAgICAgIDIsXHJcbiAgICAgIGYsXHJcbiAgICAgIHJlc291cmNlc19wYi5Eb2NFdmVudC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9uLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24udG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbi50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIHBlZXJzTWFwQnlEb2NNYXA6IChmID0gbXNnLmdldFBlZXJzTWFwQnlEb2NNYXAoKSkgPyBmLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgcHJvdG8uYXBpLkNsaWVudHMudG9PYmplY3QpIDogW11cclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbn1cclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9uLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9uO1xyXG4gIHJldHVybiBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9ufSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbn1cclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbXNnLmdldFBlZXJzTWFwQnlEb2NNYXAoKTtcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLCBmdW5jdGlvbihtZXNzYWdlLCByZWFkZXIpIHtcclxuICAgICAgICBqc3BiLk1hcC5kZXNlcmlhbGl6ZUJpbmFyeShtZXNzYWdlLCByZWFkZXIsIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nLCBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsIHByb3RvLmFwaS5DbGllbnRzLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciwgXCJcIiwgbmV3IHByb3RvLmFwaS5DbGllbnRzKCkpO1xyXG4gICAgICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbn0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLkluaXRpYWxpemF0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0UGVlcnNNYXBCeURvY01hcCh0cnVlKTtcclxuICBpZiAoZiAmJiBmLmdldExlbmd0aCgpID4gMCkge1xyXG4gICAgZi5zZXJpYWxpemVCaW5hcnkoMSwgd3JpdGVyLCBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTdHJpbmcsIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsIHByb3RvLmFwaS5DbGllbnRzLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG1hcDxzdHJpbmcsIENsaWVudHM+IHBlZXJzX21hcF9ieV9kb2MgPSAxO1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9MYXp5Q3JlYXRlIERvIG5vdCBjcmVhdGUgdGhlIG1hcCBpZlxyXG4gKiBlbXB0eSwgaW5zdGVhZCByZXR1cm5pbmcgYHVuZGVmaW5lZGBcclxuICogQHJldHVybiB7IWpzcGIuTWFwPHN0cmluZywhcHJvdG8uYXBpLkNsaWVudHM+fVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24ucHJvdG90eXBlLmdldFBlZXJzTWFwQnlEb2NNYXAgPSBmdW5jdGlvbihvcHRfbm9MYXp5Q3JlYXRlKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IWpzcGIuTWFwPHN0cmluZywhcHJvdG8uYXBpLkNsaWVudHM+fSAqLyAoXHJcbiAgICAgIGpzcGIuTWVzc2FnZS5nZXRNYXBGaWVsZCh0aGlzLCAxLCBvcHRfbm9MYXp5Q3JlYXRlLFxyXG4gICAgICBwcm90by5hcGkuQ2xpZW50cykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdmFsdWVzIGZyb20gdGhlIG1hcC4gVGhlIG1hcCB3aWxsIGJlIG5vbi1udWxsLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb259IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb24ucHJvdG90eXBlLmNsZWFyUGVlcnNNYXBCeURvY01hcCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZ2V0UGVlcnNNYXBCeURvY01hcCgpLmNsZWFyKCk7XHJcbiAgcmV0dXJuIHRoaXM7fTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgSW5pdGlhbGl6YXRpb24gaW5pdGlhbGl6YXRpb24gPSAxO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UuSW5pdGlhbGl6YXRpb259XHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUuZ2V0SW5pdGlhbGl6YXRpb24gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbn0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbiwgMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5Jbml0aWFsaXphdGlvbnx1bmRlZmluZWR9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZX0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLnByb3RvdHlwZS5zZXRJbml0aWFsaXphdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCAxLCBwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUuY2xlYXJJbml0aWFsaXphdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldEluaXRpYWxpemF0aW9uKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5XYXRjaERvY3VtZW50c1Jlc3BvbnNlLnByb3RvdHlwZS5oYXNJbml0aWFsaXphdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgRG9jRXZlbnQgZXZlbnQgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkRvY0V2ZW50fVxyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UucHJvdG90eXBlLmdldEV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkRvY0V2ZW50fSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHJlc291cmNlc19wYi5Eb2NFdmVudCwgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gez9wcm90by5hcGkuRG9jRXZlbnR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2V9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUuc2V0RXZlbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgMiwgcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2Uub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2V9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLldhdGNoRG9jdW1lbnRzUmVzcG9uc2UucHJvdG90eXBlLmNsZWFyRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRFdmVudCh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuV2F0Y2hEb2N1bWVudHNSZXNwb25zZS5wcm90b3R5cGUuaGFzRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xyXG4gIHJldHVybiBwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcclxuICB2YXIgZiwgb2JqID0ge1xyXG4gICAgY2xpZW50SWQ6IG1zZy5nZXRDbGllbnRJZF9hc0I2NCgpLFxyXG4gICAgY2hhbmdlUGFjazogKGYgPSBtc2cuZ2V0Q2hhbmdlUGFjaygpKSAmJiByZXNvdXJjZXNfcGIuQ2hhbmdlUGFjay50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRDbGllbnRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2s7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxyZXNvdXJjZXNfcGIuQ2hhbmdlUGFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xyXG4gICAgICBtc2cuc2V0Q2hhbmdlUGFjayh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50SWRfYXNVOCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDaGFuZ2VQYWNrKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnByb3RvdHlwZS5nZXRDbGllbnRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q2xpZW50SWQoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3QucHJvdG90eXBlLnNldENsaWVudElkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBDaGFuZ2VQYWNrIGNoYW5nZV9wYWNrID0gMjtcclxuICogQHJldHVybiB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfVxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3R9IHJldHVybnMgdGhpc1xyXG4qL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnByb3RvdHlwZS5zZXRDaGFuZ2VQYWNrID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlB1c2hQdWxsUmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXF1ZXN0LnByb3RvdHlwZS5jbGVhckNoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDaGFuZ2VQYWNrKHVuZGVmaW5lZCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlcXVlc3QucHJvdG90eXBlLmhhc0NoYW5nZVBhY2sgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXHJcbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxyXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXHJcbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxyXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcclxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcclxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2UudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNsaWVudElkOiBtc2cuZ2V0Q2xpZW50SWRfYXNCNjQoKSxcclxuICAgIGNoYW5nZVBhY2s6IChmID0gbXNnLmdldENoYW5nZVBhY2soKSkgJiYgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2sudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2U7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2V9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAocmVhZGVyLnJlYWRCeXRlcygpKTtcclxuICAgICAgbXNnLnNldENsaWVudElkKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyByZXNvdXJjZXNfcGIuQ2hhbmdlUGFjaztcclxuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDaGFuZ2VQYWNrKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2UucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50SWRfYXNVOCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxyXG4gICAgICAxLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxuICBmID0gbWVzc2FnZS5nZXRDaGFuZ2VQYWNrKCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMixcclxuICAgICAgZixcclxuICAgICAgcmVzb3VyY2VzX3BiLkNoYW5nZVBhY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2xpZW50SWQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlLnByb3RvdHlwZS5nZXRDbGllbnRJZF9hc0I2NCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5ieXRlc0FzQjY0KFxyXG4gICAgICB0aGlzLmdldENsaWVudElkKCkpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogTm90ZSB0aGF0IFVpbnQ4QXJyYXkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXHJcbiAqIEBzZWUgaHR0cDovL2Nhbml1c2UuY29tL1VpbnQ4QXJyYXlcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q2xpZW50SWQoKWBcclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5wcm90b3R5cGUuc2V0Q2xpZW50SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIENoYW5nZVBhY2sgY2hhbmdlX3BhY2sgPSAyO1xyXG4gKiBAcmV0dXJuIHs/cHJvdG8uYXBpLkNoYW5nZVBhY2t9XHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfSAqLyAoXHJcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHJlc291cmNlc19wYi5DaGFuZ2VQYWNrLCAyKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DaGFuZ2VQYWNrfHVuZGVmaW5lZH0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5QdXNoUHVsbFJlc3BvbnNlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLlB1c2hQdWxsUmVzcG9uc2UucHJvdG90eXBlLnNldENoYW5nZVBhY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZX0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5wcm90b3R5cGUuY2xlYXJDaGFuZ2VQYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q2hhbmdlUGFjayh1bmRlZmluZWQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5wcm90by5hcGkuUHVzaFB1bGxSZXNwb25zZS5wcm90b3R5cGUuaGFzQ2hhbmdlUGFjayA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cclxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QucmVwZWF0ZWRGaWVsZHNfID0gWzJdO1xyXG5cclxuXHJcblxyXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cclxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXHJcbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cclxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXHJcbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxyXG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxyXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXHJcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxyXG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjbGllbnQ6IChmID0gbXNnLmdldENsaWVudCgpKSAmJiByZXNvdXJjZXNfcGIuQ2xpZW50LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXHJcbiAgICBkb2N1bWVudEtleXNMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHJlc291cmNlc19wYi5DbGllbnQ7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxyZXNvdXJjZXNfcGIuQ2xpZW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5zZXRDbGllbnQodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcclxuICAgICAgbXNnLmFkZERvY3VtZW50S2V5cyh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XHJcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxyXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3R9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpZW50KCk7XHJcbiAgaWYgKGYgIT0gbnVsbCkge1xyXG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcclxuICAgICAgMSxcclxuICAgICAgZixcclxuICAgICAgcmVzb3VyY2VzX3BiLkNsaWVudC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RG9jdW1lbnRLZXlzTGlzdCgpO1xyXG4gIGlmIChmLmxlbmd0aCA+IDApIHtcclxuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxyXG4gICAgICAyLFxyXG4gICAgICBmXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgQ2xpZW50IGNsaWVudCA9IDE7XHJcbiAqIEByZXR1cm4gez9wcm90by5hcGkuQ2xpZW50fVxyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uYXBpLkNsaWVudH0gKi8gKFxyXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCByZXNvdXJjZXNfcGIuQ2xpZW50LCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7P3Byb3RvLmFwaS5DbGllbnR8dW5kZWZpbmVkfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QucHJvdG90eXBlLnNldENsaWVudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3R9IHJldHVybnMgdGhpc1xyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5wcm90b3R5cGUuY2xlYXJDbGllbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5zZXRDbGllbnQodW5kZWZpbmVkKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5wcm90b3R5cGUuaGFzQ2xpZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiByZXBlYXRlZCBzdHJpbmcgZG9jdW1lbnRfa2V5cyA9IDI7XHJcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdC5wcm90b3R5cGUuZ2V0RG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMikpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0LnByb3RvdHlwZS5zZXREb2N1bWVudEtleXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlIHx8IFtdKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QucHJvdG90eXBlLmFkZERvY3VtZW50S2V5cyA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAyLCB2YWx1ZSwgb3B0X2luZGV4KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlcXVlc3QucHJvdG90eXBlLmNsZWFyRG9jdW1lbnRLZXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNldERvY3VtZW50S2V5c0xpc3QoW10pO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXNwb25zZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2V9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcblxyXG4gIH07XHJcblxyXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcclxuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2U7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXHJcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2V9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlfVxyXG4gKi9cclxucHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcclxuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XHJcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1zZztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cclxuICovXHJcbnByb3RvLmFwaS5VcGRhdGVQcmVzZW5jZVJlc3BvbnNlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcclxuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXHJcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLlVwZGF0ZVByZXNlbmNlUmVzcG9uc2V9IG1lc3NhZ2VcclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXHJcbiAqL1xyXG5wcm90by5hcGkuVXBkYXRlUHJlc2VuY2VSZXNwb25zZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcclxuICByZXR1cm4gcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcclxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XHJcbiAgdmFyIGYsIG9iaiA9IHtcclxuICAgIGNsaWVudElkOiBtc2cuZ2V0Q2xpZW50SWRfYXNCNjQoKSxcclxuICAgIGRvY3VtZW50S2V5OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIFwiXCIpXHJcbiAgfTtcclxuXHJcbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xyXG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxyXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdH1cclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xyXG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xyXG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdDtcclxuICByZXR1cm4gcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cclxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3R9XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlYWRlci5yZWFkQnl0ZXMoKSk7XHJcbiAgICAgIG1zZy5zZXRDbGllbnRJZCh2YWx1ZSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xyXG4gICAgICBtc2cuc2V0RG9jdW1lbnRLZXkodmFsdWUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtc2c7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cclxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XHJcbiAgcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0fSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gIHZhciBmID0gdW5kZWZpbmVkO1xyXG4gIGYgPSBtZXNzYWdlLmdldENsaWVudElkX2FzVTgoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVCeXRlcyhcclxuICAgICAgMSxcclxuICAgICAgZlxyXG4gICAgKTtcclxuICB9XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0RG9jdW1lbnRLZXkoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXHJcbiAgICAgIDIsXHJcbiAgICAgIGZcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBieXRlcyBjbGllbnRfaWQgPSAxO1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LnByb3RvdHlwZS5nZXRDbGllbnRJZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogb3B0aW9uYWwgYnl0ZXMgY2xpZW50X2lkID0gMTtcclxuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0Q2xpZW50SWQoKWBcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNCNjQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIG9wdGlvbmFsIGJ5dGVzIGNsaWVudF9pZCA9IDE7XHJcbiAqIE5vdGUgdGhhdCBVaW50OEFycmF5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxyXG4gKiBAc2VlIGh0dHA6Ly9jYW5pdXNlLmNvbS9VaW50OEFycmF5XHJcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldENsaWVudElkKClgXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC5wcm90b3R5cGUuZ2V0Q2xpZW50SWRfYXNVOCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcclxuICAgICAgdGhpcy5nZXRDbGllbnRJZCgpKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0fSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1JlcXVlc3QucHJvdG90eXBlLnNldENsaWVudElkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywgMSwgdmFsdWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBvcHRpb25hbCBzdHJpbmcgZG9jdW1lbnRfa2V5ID0gMjtcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdC5wcm90b3R5cGUuZ2V0RG9jdW1lbnRLZXkgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVxdWVzdH0gcmV0dXJucyB0aGlzXHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXF1ZXN0LnByb3RvdHlwZS5zZXREb2N1bWVudEtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZS5yZXBlYXRlZEZpZWxkc18gPSBbMV07XHJcblxyXG5cclxuXHJcbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxyXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cclxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxyXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cclxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XHJcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXHJcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XHJcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgcmV0dXJuIHByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cclxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxyXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcclxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVzcG9uc2V9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xyXG4gIHZhciBmLCBvYmogPSB7XHJcbiAgICBjaGFuZ2VzTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q2hhbmdlc0xpc3QoKSxcclxuICAgIHJlc291cmNlc19wYi5DaGFuZ2UudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSlcclxuICB9O1xyXG5cclxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XHJcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcclxuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcclxuICB2YXIgbXNnID0gbmV3IHByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlO1xyXG4gIHJldHVybiBwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxyXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXHJcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXHJcbiAqIEByZXR1cm4geyFwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZX1cclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XHJcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xyXG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcclxuICAgIHN3aXRjaCAoZmllbGQpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgdmFyIHZhbHVlID0gbmV3IHJlc291cmNlc19wYi5DaGFuZ2U7XHJcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxyZXNvdXJjZXNfcGIuQ2hhbmdlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XHJcbiAgICAgIG1zZy5hZGRDaGFuZ2VzKHZhbHVlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbXNnO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXHJcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVzcG9uc2UucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcclxuICBwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xyXG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcclxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxyXG4gKiBAcGFyYW0geyFwcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZX0gbWVzc2FnZVxyXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXHJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XHJcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XHJcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2hhbmdlc0xpc3QoKTtcclxuICBpZiAoZi5sZW5ndGggPiAwKSB7XHJcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXHJcbiAgICAgIDEsXHJcbiAgICAgIGYsXHJcbiAgICAgIHJlc291cmNlc19wYi5DaGFuZ2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiByZXBlYXRlZCBDaGFuZ2UgY2hhbmdlcyA9IDE7XHJcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8uYXBpLkNoYW5nZT59XHJcbiAqL1xyXG5wcm90by5hcGkuTGlzdENoYW5nZXNSZXNwb25zZS5wcm90b3R5cGUuZ2V0Q2hhbmdlc0xpc3QgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8uYXBpLkNoYW5nZT59ICovIChcclxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCByZXNvdXJjZXNfcGIuQ2hhbmdlLCAxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5hcGkuQ2hhbmdlPn0gdmFsdWVcclxuICogQHJldHVybiB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlfSByZXR1cm5zIHRoaXNcclxuKi9cclxucHJvdG8uYXBpLkxpc3RDaGFuZ2VzUmVzcG9uc2UucHJvdG90eXBlLnNldENoYW5nZXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHshcHJvdG8uYXBpLkNoYW5nZT19IG9wdF92YWx1ZVxyXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxyXG4gKiBAcmV0dXJuIHshcHJvdG8uYXBpLkNoYW5nZX1cclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLnByb3RvdHlwZS5hZGRDaGFuZ2VzID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcclxuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5hcGkuQ2hhbmdlLCBvcHRfaW5kZXgpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cclxuICogQHJldHVybiB7IXByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlfSByZXR1cm5zIHRoaXNcclxuICovXHJcbnByb3RvLmFwaS5MaXN0Q2hhbmdlc1Jlc3BvbnNlLnByb3RvdHlwZS5jbGVhckNoYW5nZXNMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2V0Q2hhbmdlc0xpc3QoW10pO1xyXG59O1xyXG5cclxuXHJcbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5hcGkpO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwb3NzaWJsZU5hbWVzID0gW1xuXHQnQmlnSW50NjRBcnJheScsXG5cdCdCaWdVaW50NjRBcnJheScsXG5cdCdGbG9hdDMyQXJyYXknLFxuXHQnRmxvYXQ2NEFycmF5Jyxcblx0J0ludDE2QXJyYXknLFxuXHQnSW50MzJBcnJheScsXG5cdCdJbnQ4QXJyYXknLFxuXHQnVWludDE2QXJyYXknLFxuXHQnVWludDMyQXJyYXknLFxuXHQnVWludDhBcnJheScsXG5cdCdVaW50OENsYW1wZWRBcnJheSdcbl07XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZ2xvYmFsVGhpcztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhdmFpbGFibGVUeXBlZEFycmF5cygpIHtcblx0dmFyIG91dCA9IFtdO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBvc3NpYmxlTmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAodHlwZW9mIGdbcG9zc2libGVOYW1lc1tpXV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHBvc3NpYmxlTmFtZXNbaV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoW10sICdsZW5ndGgnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGdPUERcblx0XHQkZ09QRCA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZ09QRDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDA5IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9yc1xuICogQ29weXJpZ2h0IDIwMjAgRGFuaWVsIFdpcnR6IC8gVGhlIGxvbmcuanMgQXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vLyBXZWJBc3NlbWJseSBvcHRpbWl6YXRpb25zIHRvIGRvIG5hdGl2ZSBpNjQgbXVsdGlwbGljYXRpb24gYW5kIGRpdmlkZVxudmFyIHdhc20gPSBudWxsO1xudHJ5IHtcbiAgd2FzbSA9IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG5ldyBVaW50OEFycmF5KFtcbiAgICAwLCA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAsIDEsIDEzLCAyLCA5NiwgMCwgMSwgMTI3LCA5NiwgNCwgMTI3LCAxMjcsIDEyNywgMTI3LCAxLCAxMjcsIDMsIDcsIDYsIDAsIDEsIDEsIDEsIDEsIDEsIDYsIDYsIDEsIDEyNywgMSwgNjUsIDAsIDExLCA3LCA1MCwgNiwgMywgMTA5LCAxMTcsIDEwOCwgMCwgMSwgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNSwgMCwgMiwgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNywgMCwgMywgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNSwgMCwgNCwgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNywgMCwgNSwgOCwgMTAzLCAxMDEsIDExNiwgOTUsIDEwNCwgMTA1LCAxMDMsIDEwNCwgMCwgMCwgMTAsIDE5MSwgMSwgNiwgNCwgMCwgMzUsIDAsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjYsIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNywgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTI4LCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjksIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEzMCwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMVxuICBdKSksIHt9KS5leHBvcnRzO1xufSBjYXRjaCAoZSkge1xuICAvLyBubyB3YXNtIHN1cHBvcnQgOihcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciwgZ2l2ZW4gaXRzIGxvdyBhbmQgaGlnaCAzMiBiaXQgdmFsdWVzIGFzICpzaWduZWQqIGludGVnZXJzLlxuICogIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBtb3JlIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgTG9uZ3MuXG4gKiBAZXhwb3J0cyBMb25nXG4gKiBAY2xhc3MgQSBMb25nIGNsYXNzIGZvciByZXByZXNlbnRpbmcgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBMb25nKGxvdywgaGlnaCwgdW5zaWduZWQpIHtcblxuICAvKipcbiAgICogVGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5sb3cgPSBsb3cgfCAwO1xuXG4gIC8qKlxuICAgKiBUaGUgaGlnaCAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5oaWdoID0gaGlnaCB8IDA7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMudW5zaWduZWQgPSAhIXVuc2lnbmVkO1xufVxuXG4vLyBUaGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYSBsb25nIGlzIHRoZSB0d28gZ2l2ZW4gc2lnbmVkLCAzMi1iaXQgdmFsdWVzLlxuLy8gV2UgdXNlIDMyLWJpdCBwaWVjZXMgYmVjYXVzZSB0aGVzZSBhcmUgdGhlIHNpemUgb2YgaW50ZWdlcnMgb24gd2hpY2hcbi8vIEphdmFzY3JpcHQgcGVyZm9ybXMgYml0LW9wZXJhdGlvbnMuICBGb3Igb3BlcmF0aW9ucyBsaWtlIGFkZGl0aW9uIGFuZFxuLy8gbXVsdGlwbGljYXRpb24sIHdlIHNwbGl0IGVhY2ggbnVtYmVyIGludG8gMTYgYml0IHBpZWNlcywgd2hpY2ggY2FuIGVhc2lseSBiZVxuLy8gbXVsdGlwbGllZCB3aXRoaW4gSmF2YXNjcmlwdCdzIGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgb3ZlcmZsb3dcbi8vIG9yIGNoYW5nZSBpbiBzaWduLlxuLy9cbi8vIEluIHRoZSBhbGdvcml0aG1zIGJlbG93LCB3ZSBmcmVxdWVudGx5IHJlZHVjZSB0aGUgbmVnYXRpdmUgY2FzZSB0byB0aGVcbi8vIHBvc2l0aXZlIGNhc2UgYnkgbmVnYXRpbmcgdGhlIGlucHV0KHMpIGFuZCB0aGVuIHBvc3QtcHJvY2Vzc2luZyB0aGUgcmVzdWx0LlxuLy8gTm90ZSB0aGF0IHdlIG11c3QgQUxXQVlTIGNoZWNrIHNwZWNpYWxseSB3aGV0aGVyIHRob3NlIHZhbHVlcyBhcmUgTUlOX1ZBTFVFXG4vLyAoLTJeNjMpIGJlY2F1c2UgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUUgKHNpbmNlIDJeNjMgY2Fubm90IGJlIHJlcHJlc2VudGVkIGFzXG4vLyBhIHBvc2l0aXZlIG51bWJlciwgaXQgb3ZlcmZsb3dzIGJhY2sgaW50byBhIG5lZ2F0aXZlKS4gIE5vdCBoYW5kbGluZyB0aGlzXG4vLyBjYXNlIHdvdWxkIG9mdGVuIHJlc3VsdCBpbiBpbmZpbml0ZSByZWN1cnNpb24uXG4vL1xuLy8gQ29tbW9uIGNvbnN0YW50IHZhbHVlcyBaRVJPLCBPTkUsIE5FR19PTkUsIGV0Yy4gYXJlIGRlZmluZWQgYmVsb3cgdGhlIGZyb20qXG4vLyBtZXRob2RzIG9uIHdoaWNoIHRoZXkgZGVwZW5kLlxuXG4vKipcbiAqIEFuIGluZGljYXRvciB1c2VkIHRvIHJlbGlhYmx5IGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBMb25nIG9yIG5vdC5cbiAqIEB0eXBlIHtib29sZWFufVxuICogQGNvbnN0XG4gKiBAcHJpdmF0ZVxuICovXG5Mb25nLnByb3RvdHlwZS5fX2lzTG9uZ19fO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTG9uZy5wcm90b3R5cGUsIFwiX19pc0xvbmdfX1wiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBpbm5lclxuICovXG5mdW5jdGlvbiBpc0xvbmcob2JqKSB7XG4gIHJldHVybiAob2JqICYmIG9ialtcIl9faXNMb25nX19cIl0pID09PSB0cnVlO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHsqfSB2YWx1ZSBudW1iZXJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gY3R6MzIodmFsdWUpIHtcbiAgdmFyIGMgPSBNYXRoLmNsejMyKHZhbHVlICYgLXZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlID8gMzEgLSBjIDogYztcbn1cblxuLyoqXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhIExvbmcuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmcuaXNMb25nID0gaXNMb25nO1xuXG4vKipcbiAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIGludGVnZXIgdmFsdWVzLlxuICogQHR5cGUgeyFPYmplY3R9XG4gKiBAaW5uZXJcbiAqL1xudmFyIElOVF9DQUNIRSA9IHt9O1xuXG4vKipcbiAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLlxuICogQHR5cGUgeyFPYmplY3R9XG4gKiBAaW5uZXJcbiAqL1xudmFyIFVJTlRfQ0FDSEUgPSB7fTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gZnJvbUludCh2YWx1ZSwgdW5zaWduZWQpIHtcbiAgdmFyIG9iaiwgY2FjaGVkT2JqLCBjYWNoZTtcbiAgaWYgKHVuc2lnbmVkKSB7XG4gICAgdmFsdWUgPj4+PSAwO1xuICAgIGlmIChjYWNoZSA9ICgwIDw9IHZhbHVlICYmIHZhbHVlIDwgMjU2KSkge1xuICAgICAgY2FjaGVkT2JqID0gVUlOVF9DQUNIRVt2YWx1ZV07XG4gICAgICBpZiAoY2FjaGVkT2JqKVxuICAgICAgICByZXR1cm4gY2FjaGVkT2JqO1xuICAgIH1cbiAgICBvYmogPSBmcm9tQml0cyh2YWx1ZSwgMCwgdHJ1ZSk7XG4gICAgaWYgKGNhY2hlKVxuICAgICAgVUlOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XG4gICAgcmV0dXJuIG9iajtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSB8PSAwO1xuICAgIGlmIChjYWNoZSA9ICgtMTI4IDw9IHZhbHVlICYmIHZhbHVlIDwgMTI4KSkge1xuICAgICAgY2FjaGVkT2JqID0gSU5UX0NBQ0hFW3ZhbHVlXTtcbiAgICAgIGlmIChjYWNoZWRPYmopXG4gICAgICAgIHJldHVybiBjYWNoZWRPYmo7XG4gICAgfVxuICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCB2YWx1ZSA8IDAgPyAtMSA6IDAsIGZhbHNlKTtcbiAgICBpZiAoY2FjaGUpXG4gICAgICBJTlRfQ0FDSEVbdmFsdWVdID0gb2JqO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIDMyIGJpdCBpbnRlZ2VyIHZhbHVlLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIDMyIGJpdCBpbnRlZ2VyIGluIHF1ZXN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tSW50ID0gZnJvbUludDtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSwgdW5zaWduZWQpIHtcbiAgaWYgKGlzTmFOKHZhbHVlKSlcbiAgICByZXR1cm4gdW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XG4gIGlmICh1bnNpZ25lZCkge1xuICAgIGlmICh2YWx1ZSA8IDApXG4gICAgICByZXR1cm4gVVpFUk87XG4gICAgaWYgKHZhbHVlID49IFRXT19QV1JfNjRfREJMKVxuICAgICAgcmV0dXJuIE1BWF9VTlNJR05FRF9WQUxVRTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgPD0gLVRXT19QV1JfNjNfREJMKVxuICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcbiAgICBpZiAodmFsdWUgKyAxID49IFRXT19QV1JfNjNfREJMKVxuICAgICAgcmV0dXJuIE1BWF9WQUxVRTtcbiAgfVxuICBpZiAodmFsdWUgPCAwKVxuICAgIHJldHVybiBmcm9tTnVtYmVyKC12YWx1ZSwgdW5zaWduZWQpLm5lZygpO1xuICByZXR1cm4gZnJvbUJpdHMoKHZhbHVlICUgVFdPX1BXUl8zMl9EQkwpIHwgMCwgKHZhbHVlIC8gVFdPX1BXUl8zMl9EQkwpIHwgMCwgdW5zaWduZWQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gdmFsdWUsIHByb3ZpZGVkIHRoYXQgaXQgaXMgYSBmaW5pdGUgbnVtYmVyLiBPdGhlcndpc2UsIHplcm8gaXMgcmV0dXJuZWQuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgbnVtYmVyIGluIHF1ZXN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tTnVtYmVyID0gZnJvbU51bWJlcjtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbG93Qml0c1xuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxuICogQHJldHVybnMgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGZyb21CaXRzKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCkge1xuICByZXR1cm4gbmV3IExvbmcobG93Qml0cywgaGlnaEJpdHMsIHVuc2lnbmVkKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIDY0IGJpdCBpbnRlZ2VyIHRoYXQgY29tZXMgYnkgY29uY2F0ZW5hdGluZyB0aGUgZ2l2ZW4gbG93IGFuZCBoaWdoIGJpdHMuIEVhY2ggaXNcbiAqICBhc3N1bWVkIHRvIHVzZSAzMiBiaXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gbG93Qml0cyBUaGUgbG93IDMyIGJpdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0cyBUaGUgaGlnaCAzMiBiaXRzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tQml0cyA9IGZyb21CaXRzO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGJhc2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBleHBvbmVudFxuICogQHJldHVybnMge251bWJlcn1cbiAqIEBpbm5lclxuICovXG52YXIgcG93X2RibCA9IE1hdGgucG93OyAvLyBVc2VkIDQgdGltZXMgKDQqOCB0byAxNSs0KVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7KGJvb2xlYW58bnVtYmVyKT19IHVuc2lnbmVkXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4XG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gZnJvbVN0cmluZyhzdHIsIHVuc2lnbmVkLCByYWRpeCkge1xuICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcbiAgICB0aHJvdyBFcnJvcignZW1wdHkgc3RyaW5nJyk7XG4gIGlmICh0eXBlb2YgdW5zaWduZWQgPT09ICdudW1iZXInKSB7XG4gICAgLy8gRm9yIGdvb2cubWF0aC5sb25nIGNvbXBhdGliaWxpdHlcbiAgICByYWRpeCA9IHVuc2lnbmVkO1xuICAgIHVuc2lnbmVkID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdW5zaWduZWQgPSAhIXVuc2lnbmVkO1xuICB9XG4gIGlmIChzdHIgPT09IFwiTmFOXCIgfHwgc3RyID09PSBcIkluZmluaXR5XCIgfHwgc3RyID09PSBcIitJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCItSW5maW5pdHlcIilcbiAgICByZXR1cm4gdW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XG4gIHJhZGl4ID0gcmFkaXggfHwgMTA7XG4gIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcbiAgICB0aHJvdyBSYW5nZUVycm9yKCdyYWRpeCcpO1xuXG4gIHZhciBwO1xuICBpZiAoKHAgPSBzdHIuaW5kZXhPZignLScpKSA+IDApXG4gICAgdGhyb3cgRXJyb3IoJ2ludGVyaW9yIGh5cGhlbicpO1xuICBlbHNlIGlmIChwID09PSAwKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcoc3RyLnN1YnN0cmluZygxKSwgdW5zaWduZWQsIHJhZGl4KS5uZWcoKTtcbiAgfVxuXG4gIC8vIERvIHNldmVyYWwgKDgpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cbiAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXG4gIHZhciByYWRpeFRvUG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIDgpKTtcblxuICB2YXIgcmVzdWx0ID0gWkVSTztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDgpIHtcbiAgICB2YXIgc2l6ZSA9IE1hdGgubWluKDgsIHN0ci5sZW5ndGggLSBpKSxcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhpLCBpICsgc2l6ZSksIHJhZGl4KTtcbiAgICBpZiAoc2l6ZSA8IDgpIHtcbiAgICAgIHZhciBwb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgc2l6ZSkpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChwb3dlcikuYWRkKGZyb21OdW1iZXIodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChyYWRpeFRvUG93ZXIpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChmcm9tTnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC51bnNpZ25lZCA9IHVuc2lnbmVkO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlIHNwZWNpZmllZCByYWRpeC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgTG9uZ1xuICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxuICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBUaGUgcmFkaXggaW4gd2hpY2ggdGhlIHRleHQgaXMgd3JpdHRlbiAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tU3RyaW5nID0gZnJvbVN0cmluZztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxuICogQHJldHVybnMgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGZyb21WYWx1ZSh2YWwsIHVuc2lnbmVkKSB7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJylcbiAgICByZXR1cm4gZnJvbU51bWJlcih2YWwsIHVuc2lnbmVkKTtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKVxuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbCwgdW5zaWduZWQpO1xuICAvLyBUaHJvd3MgZm9yIG5vbi1vYmplY3RzLCBjb252ZXJ0cyBub24taW5zdGFuY2VvZiBMb25nOlxuICByZXR1cm4gZnJvbUJpdHModmFsLmxvdywgdmFsLmhpZ2gsIHR5cGVvZiB1bnNpZ25lZCA9PT0gJ2Jvb2xlYW4nID8gdW5zaWduZWQgOiB2YWwudW5zaWduZWQpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgdmFsdWUgdG8gYSBMb25nIHVzaW5nIHRoZSBhcHByb3ByaWF0ZSBmcm9tKiBmdW5jdGlvbiBmb3IgaXRzIHR5cGUuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsIFZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKi9cbkxvbmcuZnJvbVZhbHVlID0gZnJvbVZhbHVlO1xuXG4vLyBOT1RFOiB0aGUgY29tcGlsZXIgc2hvdWxkIGlubGluZSB0aGVzZSBjb25zdGFudCB2YWx1ZXMgYmVsb3cgYW5kIHRoZW4gcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlXG4vLyBubyBydW50aW1lIHBlbmFsdHkgZm9yIHRoZXNlLlxuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl8xNl9EQkwgPSAxIDw8IDE2O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl8yNF9EQkwgPSAxIDw8IDI0O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl8zMl9EQkwgPSBUV09fUFdSXzE2X0RCTCAqIFRXT19QV1JfMTZfREJMO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl82NF9EQkwgPSBUV09fUFdSXzMyX0RCTCAqIFRXT19QV1JfMzJfREJMO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqIEBpbm5lclxuICovXG52YXIgVFdPX1BXUl82M19EQkwgPSBUV09fUFdSXzY0X0RCTCAvIDI7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGNvbnN0XG4gKiBAaW5uZXJcbiAqL1xudmFyIFRXT19QV1JfMjQgPSBmcm9tSW50KFRXT19QV1JfMjRfREJMKTtcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIFpFUk8gPSBmcm9tSW50KDApO1xuXG4vKipcbiAqIFNpZ25lZCB6ZXJvLlxuICogQHR5cGUgeyFMb25nfVxuICovXG5Mb25nLlpFUk8gPSBaRVJPO1xuXG4vKipcbiAqIEB0eXBlIHshTG9uZ31cbiAqIEBpbm5lclxuICovXG52YXIgVVpFUk8gPSBmcm9tSW50KDAsIHRydWUpO1xuXG4vKipcbiAqIFVuc2lnbmVkIHplcm8uXG4gKiBAdHlwZSB7IUxvbmd9XG4gKi9cbkxvbmcuVVpFUk8gPSBVWkVSTztcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIE9ORSA9IGZyb21JbnQoMSk7XG5cbi8qKlxuICogU2lnbmVkIG9uZS5cbiAqIEB0eXBlIHshTG9uZ31cbiAqL1xuTG9uZy5PTkUgPSBPTkU7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbnZhciBVT05FID0gZnJvbUludCgxLCB0cnVlKTtcblxuLyoqXG4gKiBVbnNpZ25lZCBvbmUuXG4gKiBAdHlwZSB7IUxvbmd9XG4gKi9cbkxvbmcuVU9ORSA9IFVPTkU7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbnZhciBORUdfT05FID0gZnJvbUludCgtMSk7XG5cbi8qKlxuICogU2lnbmVkIG5lZ2F0aXZlIG9uZS5cbiAqIEB0eXBlIHshTG9uZ31cbiAqL1xuTG9uZy5ORUdfT05FID0gTkVHX09ORTtcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIE1BWF9WQUxVRSA9IGZyb21CaXRzKDB4RkZGRkZGRkYgfCAwLCAweDdGRkZGRkZGIHwgMCwgZmFsc2UpO1xuXG4vKipcbiAqIE1heGltdW0gc2lnbmVkIHZhbHVlLlxuICogQHR5cGUgeyFMb25nfVxuICovXG5Mb25nLk1BWF9WQUxVRSA9IE1BWF9WQUxVRTtcblxuLyoqXG4gKiBAdHlwZSB7IUxvbmd9XG4gKiBAaW5uZXJcbiAqL1xudmFyIE1BWF9VTlNJR05FRF9WQUxVRSA9IGZyb21CaXRzKDB4RkZGRkZGRkYgfCAwLCAweEZGRkZGRkZGIHwgMCwgdHJ1ZSk7XG5cbi8qKlxuICogTWF4aW11bSB1bnNpZ25lZCB2YWx1ZS5cbiAqIEB0eXBlIHshTG9uZ31cbiAqL1xuTG9uZy5NQVhfVU5TSUdORURfVkFMVUUgPSBNQVhfVU5TSUdORURfVkFMVUU7XG5cbi8qKlxuICogQHR5cGUgeyFMb25nfVxuICogQGlubmVyXG4gKi9cbnZhciBNSU5fVkFMVUUgPSBmcm9tQml0cygwLCAweDgwMDAwMDAwIHwgMCwgZmFsc2UpO1xuXG4vKipcbiAqIE1pbmltdW0gc2lnbmVkIHZhbHVlLlxuICogQHR5cGUgeyFMb25nfVxuICovXG5Mb25nLk1JTl9WQUxVRSA9IE1JTl9WQUxVRTtcblxuLyoqXG4gKiBAYWxpYXMgTG9uZy5wcm90b3R5cGVcbiAqIEBpbm5lclxuICovXG52YXIgTG9uZ1Byb3RvdHlwZSA9IExvbmcucHJvdG90eXBlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgMzIgYml0IGludGVnZXIsIGFzc3VtaW5nIGl0IGlzIGEgMzIgYml0IGludGVnZXIuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24gdG9JbnQoKSB7XG4gIHJldHVybiB0aGlzLnVuc2lnbmVkID8gdGhpcy5sb3cgPj4+IDAgOiB0aGlzLmxvdztcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSB0aGUgbmVhcmVzdCBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlIChkb3VibGUsIDUzIGJpdCBtYW50aXNzYSkuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7XG4gIGlmICh0aGlzLnVuc2lnbmVkKVxuICAgIHJldHVybiAoKHRoaXMuaGlnaCA+Pj4gMCkgKiBUV09fUFdSXzMyX0RCTCkgKyAodGhpcy5sb3cgPj4+IDApO1xuICByZXR1cm4gdGhpcy5oaWdoICogVFdPX1BXUl8zMl9EQkwgKyAodGhpcy5sb3cgPj4+IDApO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIHN0cmluZyB3cml0dGVuIGluIHRoZSBzcGVjaWZpZWQgcmFkaXguXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFJhZGl4ICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiBAb3ZlcnJpZGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGByYWRpeGAgaXMgb3V0IG9mIHJhbmdlXG4gKi9cbkxvbmdQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhyYWRpeCkge1xuICByYWRpeCA9IHJhZGl4IHx8IDEwO1xuICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpXG4gICAgdGhyb3cgUmFuZ2VFcnJvcigncmFkaXgnKTtcbiAgaWYgKHRoaXMuaXNaZXJvKCkpXG4gICAgcmV0dXJuICcwJztcbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7IC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxuICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hhbmdlIHRoZSBMb25nIHZhbHVlIGJlZm9yZSBpdCBjYW4gYmUgbmVnYXRlZCwgc28gd2UgcmVtb3ZlXG4gICAgICAvLyB0aGUgYm90dG9tLW1vc3QgZGlnaXQgaW4gdGhpcyBiYXNlIGFuZCB0aGVuIHJlY3Vyc2UgdG8gZG8gdGhlIHJlc3QuXG4gICAgICB2YXIgcmFkaXhMb25nID0gZnJvbU51bWJlcihyYWRpeCksXG4gICAgICAgIGRpdiA9IHRoaXMuZGl2KHJhZGl4TG9uZyksXG4gICAgICAgIHJlbTEgPSBkaXYubXVsKHJhZGl4TG9uZykuc3ViKHRoaXMpO1xuICAgICAgcmV0dXJuIGRpdi50b1N0cmluZyhyYWRpeCkgKyByZW0xLnRvSW50KCkudG9TdHJpbmcocmFkaXgpO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuICctJyArIHRoaXMubmVnKCkudG9TdHJpbmcocmFkaXgpO1xuICB9XG5cbiAgLy8gRG8gc2V2ZXJhbCAoNikgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xuICAvLyBtaW5pbWl6ZSB0aGUgY2FsbHMgdG8gdGhlIHZlcnkgZXhwZW5zaXZlIGVtdWxhdGVkIGRpdi5cbiAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgNiksIHRoaXMudW5zaWduZWQpLFxuICAgIHJlbSA9IHRoaXM7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgcmVtRGl2ID0gcmVtLmRpdihyYWRpeFRvUG93ZXIpLFxuICAgICAgaW50dmFsID0gcmVtLnN1YihyZW1EaXYubXVsKHJhZGl4VG9Qb3dlcikpLnRvSW50KCkgPj4+IDAsXG4gICAgICBkaWdpdHMgPSBpbnR2YWwudG9TdHJpbmcocmFkaXgpO1xuICAgIHJlbSA9IHJlbURpdjtcbiAgICBpZiAocmVtLmlzWmVybygpKVxuICAgICAgcmV0dXJuIGRpZ2l0cyArIHJlc3VsdDtcbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoIDwgNilcbiAgICAgICAgZGlnaXRzID0gJzAnICsgZGlnaXRzO1xuICAgICAgcmVzdWx0ID0gJycgKyBkaWdpdHMgKyByZXN1bHQ7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGhpZ2ggYml0c1xuICovXG5Mb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24gZ2V0SGlnaEJpdHMoKSB7XG4gIHJldHVybiB0aGlzLmhpZ2g7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgaGlnaCBiaXRzXG4gKi9cbkxvbmdQcm90b3R5cGUuZ2V0SGlnaEJpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzVW5zaWduZWQoKSB7XG4gIHJldHVybiB0aGlzLmhpZ2ggPj4+IDA7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgbG93IGJpdHNcbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzID0gZnVuY3Rpb24gZ2V0TG93Qml0cygpIHtcbiAgcmV0dXJuIHRoaXMubG93O1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgbG93IGJpdHNcbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRMb3dCaXRzVW5zaWduZWQoKSB7XG4gIHJldHVybiB0aGlzLmxvdyA+Pj4gMDtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHJlcHJlc2VudCB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBMb25nLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24gZ2V0TnVtQml0c0FicygpIHtcbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSAvLyBVbnNpZ25lZCBMb25ncyBhcmUgbmV2ZXIgbmVnYXRpdmVcbiAgICByZXR1cm4gdGhpcy5lcShNSU5fVkFMVUUpID8gNjQgOiB0aGlzLm5lZygpLmdldE51bUJpdHNBYnMoKTtcbiAgdmFyIHZhbCA9IHRoaXMuaGlnaCAhPSAwID8gdGhpcy5oaWdoIDogdGhpcy5sb3c7XG4gIGZvciAodmFyIGJpdCA9IDMxOyBiaXQgPiAwOyBiaXQtLSlcbiAgICBpZiAoKHZhbCAmICgxIDw8IGJpdCkpICE9IDApXG4gICAgICBicmVhaztcbiAgcmV0dXJuIHRoaXMuaGlnaCAhPSAwID8gYml0ICsgMzMgOiBiaXQgKyAxO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybygpIHtcbiAgcmV0dXJuIHRoaXMuaGlnaCA9PT0gMCAmJiB0aGlzLmxvdyA9PT0gMDtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHplcm8uIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjaXNaZXJvfS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmVxeiA9IExvbmdQcm90b3R5cGUuaXNaZXJvO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG5lZ2F0aXZlLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uIGlzTmVnYXRpdmUoKSB7XG4gIHJldHVybiAhdGhpcy51bnNpZ25lZCAmJiB0aGlzLmhpZ2ggPCAwO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBwb3NpdGl2ZSBvciB6ZXJvLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuaXNQb3NpdGl2ZSA9IGZ1bmN0aW9uIGlzUG9zaXRpdmUoKSB7XG4gIHJldHVybiB0aGlzLnVuc2lnbmVkIHx8IHRoaXMuaGlnaCA+PSAwO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBvZGQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkKCkge1xuICByZXR1cm4gKHRoaXMubG93ICYgMSkgPT09IDE7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGV2ZW4uXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4oKSB7XG4gIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpXG4gICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xuICBpZiAodGhpcy51bnNpZ25lZCAhPT0gb3RoZXIudW5zaWduZWQgJiYgKHRoaXMuaGlnaCA+Pj4gMzEpID09PSAxICYmIChvdGhlci5oaWdoID4+PiAzMSkgPT09IDEpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdGhpcy5oaWdoID09PSBvdGhlci5oaWdoICYmIHRoaXMubG93ID09PSBvdGhlci5sb3c7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZXF1YWxzfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUuZXEgPSBMb25nUHJvdG90eXBlLmVxdWFscztcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubm90RXF1YWxzID0gZnVuY3Rpb24gbm90RXF1YWxzKG90aGVyKSB7XG4gIHJldHVybiAhdGhpcy5lcSgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI25vdEVxdWFsc30uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLm5lcSA9IExvbmdQcm90b3R5cGUubm90RXF1YWxzO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbm90RXF1YWxzfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubmUgPSBMb25nUHJvdG90eXBlLm5vdEVxdWFscztcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubGVzc1RoYW4gPSBmdW5jdGlvbiBsZXNzVGhhbihvdGhlcikge1xuICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPCAwO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2xlc3NUaGFufS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubHQgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDw9IDA7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkxvbmdQcm90b3R5cGUubHRlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbk9yRXF1YWx9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5sZSA9IExvbmdQcm90b3R5cGUubGVzc1RoYW5PckVxdWFsO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+IDA7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW59LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5ndCA9IExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW47XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcXVhbChvdGhlcikge1xuICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPj0gMDtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbk9yRXF1YWx9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5ndGUgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbDtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFuT3JFcXVhbH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Mb25nUHJvdG90eXBlLmdlID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWw7XG5cbi8qKlxuICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lLCAxIGlmIHRoZSB0aGlzIGlzIGdyZWF0ZXIgYW5kIC0xXG4gKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXG4gKi9cbkxvbmdQcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUob3RoZXIpIHtcbiAgaWYgKCFpc0xvbmcob3RoZXIpKVxuICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgaWYgKHRoaXMuZXEob3RoZXIpKVxuICAgIHJldHVybiAwO1xuICB2YXIgdGhpc05lZyA9IHRoaXMuaXNOZWdhdGl2ZSgpLFxuICAgIG90aGVyTmVnID0gb3RoZXIuaXNOZWdhdGl2ZSgpO1xuICBpZiAodGhpc05lZyAmJiAhb3RoZXJOZWcpXG4gICAgcmV0dXJuIC0xO1xuICBpZiAoIXRoaXNOZWcgJiYgb3RoZXJOZWcpXG4gICAgcmV0dXJuIDE7XG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHNpZ24gYml0cyBhcmUgdGhlIHNhbWVcbiAgaWYgKCF0aGlzLnVuc2lnbmVkKVxuICAgIHJldHVybiB0aGlzLnN1YihvdGhlcikuaXNOZWdhdGl2ZSgpID8gLTEgOiAxO1xuICAvLyBCb3RoIGFyZSBwb3NpdGl2ZSBpZiBhdCBsZWFzdCBvbmUgaXMgdW5zaWduZWRcbiAgcmV0dXJuIChvdGhlci5oaWdoID4+PiAwKSA+ICh0aGlzLmhpZ2ggPj4+IDApIHx8IChvdGhlci5oaWdoID09PSB0aGlzLmhpZ2ggJiYgKG90aGVyLmxvdyA+Pj4gMCkgPiAodGhpcy5sb3cgPj4+IDApKSA/IC0xIDogMTtcbn07XG5cbi8qKlxuICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjY29tcGFyZX0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcbiAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcbiAqL1xuTG9uZ1Byb3RvdHlwZS5jb21wID0gTG9uZ1Byb3RvdHlwZS5jb21wYXJlO1xuXG4vKipcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IUxvbmd9IE5lZ2F0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcbiAgaWYgKCF0aGlzLnVuc2lnbmVkICYmIHRoaXMuZXEoTUlOX1ZBTFVFKSlcbiAgICByZXR1cm4gTUlOX1ZBTFVFO1xuICByZXR1cm4gdGhpcy5ub3QoKS5hZGQoT05FKTtcbn07XG5cbi8qKlxuICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNuZWdhdGV9LlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7IUxvbmd9IE5lZ2F0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLm5lZyA9IExvbmdQcm90b3R5cGUubmVnYXRlO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGFkZGVuZCBBZGRlbmRcbiAqIEByZXR1cm5zIHshTG9uZ30gU3VtXG4gKi9cbkxvbmdQcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKGFkZGVuZCkge1xuICBpZiAoIWlzTG9uZyhhZGRlbmQpKVxuICAgIGFkZGVuZCA9IGZyb21WYWx1ZShhZGRlbmQpO1xuXG4gIC8vIERpdmlkZSBlYWNoIG51bWJlciBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIHN1bSB0aGUgY2h1bmtzLlxuXG4gIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xuICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhGRkZGO1xuICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xuICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XG5cbiAgdmFyIGI0OCA9IGFkZGVuZC5oaWdoID4+PiAxNjtcbiAgdmFyIGIzMiA9IGFkZGVuZC5oaWdoICYgMHhGRkZGO1xuICB2YXIgYjE2ID0gYWRkZW5kLmxvdyA+Pj4gMTY7XG4gIHZhciBiMDAgPSBhZGRlbmQubG93ICYgMHhGRkZGO1xuXG4gIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xuICBjMDAgKz0gYTAwICsgYjAwO1xuICBjMTYgKz0gYzAwID4+PiAxNjtcbiAgYzAwICY9IDB4RkZGRjtcbiAgYzE2ICs9IGExNiArIGIxNjtcbiAgYzMyICs9IGMxNiA+Pj4gMTY7XG4gIGMxNiAmPSAweEZGRkY7XG4gIGMzMiArPSBhMzIgKyBiMzI7XG4gIGM0OCArPSBjMzIgPj4+IDE2O1xuICBjMzIgJj0gMHhGRkZGO1xuICBjNDggKz0gYTQ4ICsgYjQ4O1xuICBjNDggJj0gMHhGRkZGO1xuICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxuICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXG4gKi9cbkxvbmdQcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiBzdWJ0cmFjdChzdWJ0cmFoZW5kKSB7XG4gIGlmICghaXNMb25nKHN1YnRyYWhlbmQpKVxuICAgIHN1YnRyYWhlbmQgPSBmcm9tVmFsdWUoc3VidHJhaGVuZCk7XG4gIHJldHVybiB0aGlzLmFkZChzdWJ0cmFoZW5kLm5lZygpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc3VidHJhY3R9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxuICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXG4gKi9cbkxvbmdQcm90b3R5cGUuc3ViID0gTG9uZ1Byb3RvdHlwZS5zdWJ0cmFjdDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gbXVsdGlwbGllciBNdWx0aXBsaWVyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFByb2R1Y3RcbiAqL1xuTG9uZ1Byb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uIG11bHRpcGx5KG11bHRpcGxpZXIpIHtcbiAgaWYgKHRoaXMuaXNaZXJvKCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghaXNMb25nKG11bHRpcGxpZXIpKVxuICAgIG11bHRpcGxpZXIgPSBmcm9tVmFsdWUobXVsdGlwbGllcik7XG5cbiAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XG4gIGlmICh3YXNtKSB7XG4gICAgdmFyIGxvdyA9IHdhc21bXCJtdWxcIl0odGhpcy5sb3csXG4gICAgICB0aGlzLmhpZ2gsXG4gICAgICBtdWx0aXBsaWVyLmxvdyxcbiAgICAgIG11bHRpcGxpZXIuaGlnaCk7XG4gICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbVtcImdldF9oaWdoXCJdKCksIHRoaXMudW5zaWduZWQpO1xuICB9XG5cbiAgaWYgKG11bHRpcGxpZXIuaXNaZXJvKCkpXG4gICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XG4gIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpXG4gICAgcmV0dXJuIG11bHRpcGxpZXIuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XG4gIGlmIChtdWx0aXBsaWVyLmVxKE1JTl9WQUxVRSkpXG4gICAgcmV0dXJuIHRoaXMuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XG5cbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XG4gICAgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxuICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIubmVnKCkpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLm5lZygpLm11bChtdWx0aXBsaWVyKS5uZWcoKTtcbiAgfSBlbHNlIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcbiAgICByZXR1cm4gdGhpcy5tdWwobXVsdGlwbGllci5uZWcoKSkubmVnKCk7XG5cbiAgLy8gSWYgYm90aCBsb25ncyBhcmUgc21hbGwsIHVzZSBmbG9hdCBtdWx0aXBsaWNhdGlvblxuICBpZiAodGhpcy5sdChUV09fUFdSXzI0KSAmJiBtdWx0aXBsaWVyLmx0KFRXT19QV1JfMjQpKVxuICAgIHJldHVybiBmcm9tTnVtYmVyKHRoaXMudG9OdW1iZXIoKSAqIG11bHRpcGxpZXIudG9OdW1iZXIoKSwgdGhpcy51bnNpZ25lZCk7XG5cbiAgLy8gRGl2aWRlIGVhY2ggbG9uZyBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIGFkZCB1cCA0eDQgcHJvZHVjdHMuXG4gIC8vIFdlIGNhbiBza2lwIHByb2R1Y3RzIHRoYXQgd291bGQgb3ZlcmZsb3cuXG5cbiAgdmFyIGE0OCA9IHRoaXMuaGlnaCA+Pj4gMTY7XG4gIHZhciBhMzIgPSB0aGlzLmhpZ2ggJiAweEZGRkY7XG4gIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XG4gIHZhciBhMDAgPSB0aGlzLmxvdyAmIDB4RkZGRjtcblxuICB2YXIgYjQ4ID0gbXVsdGlwbGllci5oaWdoID4+PiAxNjtcbiAgdmFyIGIzMiA9IG11bHRpcGxpZXIuaGlnaCAmIDB4RkZGRjtcbiAgdmFyIGIxNiA9IG11bHRpcGxpZXIubG93ID4+PiAxNjtcbiAgdmFyIGIwMCA9IG11bHRpcGxpZXIubG93ICYgMHhGRkZGO1xuXG4gIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xuICBjMDAgKz0gYTAwICogYjAwO1xuICBjMTYgKz0gYzAwID4+PiAxNjtcbiAgYzAwICY9IDB4RkZGRjtcbiAgYzE2ICs9IGExNiAqIGIwMDtcbiAgYzMyICs9IGMxNiA+Pj4gMTY7XG4gIGMxNiAmPSAweEZGRkY7XG4gIGMxNiArPSBhMDAgKiBiMTY7XG4gIGMzMiArPSBjMTYgPj4+IDE2O1xuICBjMTYgJj0gMHhGRkZGO1xuICBjMzIgKz0gYTMyICogYjAwO1xuICBjNDggKz0gYzMyID4+PiAxNjtcbiAgYzMyICY9IDB4RkZGRjtcbiAgYzMyICs9IGExNiAqIGIxNjtcbiAgYzQ4ICs9IGMzMiA+Pj4gMTY7XG4gIGMzMiAmPSAweEZGRkY7XG4gIGMzMiArPSBhMDAgKiBiMzI7XG4gIGM0OCArPSBjMzIgPj4+IDE2O1xuICBjMzIgJj0gMHhGRkZGO1xuICBjNDggKz0gYTQ4ICogYjAwICsgYTMyICogYjE2ICsgYTE2ICogYjMyICsgYTAwICogYjQ4O1xuICBjNDggJj0gMHhGRkZGO1xuICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJvZHVjdCBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbXVsdGlwbHl9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XG4gKi9cbkxvbmdQcm90b3R5cGUubXVsID0gTG9uZ1Byb3RvdHlwZS5tdWx0aXBseTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBkaXZpZGVkIGJ5IHRoZSBzcGVjaWZpZWQuIFRoZSByZXN1bHQgaXMgc2lnbmVkIGlmIHRoaXMgTG9uZyBpcyBzaWduZWQgb3JcbiAqICB1bnNpZ25lZCBpZiB0aGlzIExvbmcgaXMgdW5zaWduZWQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxuICogQHJldHVybnMgeyFMb25nfSBRdW90aWVudFxuICovXG5Mb25nUHJvdG90eXBlLmRpdmlkZSA9IGZ1bmN0aW9uIGRpdmlkZShkaXZpc29yKSB7XG4gIGlmICghaXNMb25nKGRpdmlzb3IpKVxuICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XG4gIGlmIChkaXZpc29yLmlzWmVybygpKVxuICAgIHRocm93IEVycm9yKCdkaXZpc2lvbiBieSB6ZXJvJyk7XG5cbiAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XG4gIGlmICh3YXNtKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCBzaWduZWQgZGl2aXNpb24gb3ZlcmZsb3c6IHRoZSBsYXJnZXN0XG4gICAgLy8gbmVnYXRpdmUgbnVtYmVyIC8gLTEgd291bGQgYmUgMSBsYXJnZXIgdGhhbiB0aGUgbGFyZ2VzdFxuICAgIC8vIHBvc2l0aXZlIG51bWJlciwgZHVlIHRvIHR3bydzIGNvbXBsZW1lbnQuXG4gICAgaWYgKCF0aGlzLnVuc2lnbmVkICYmXG4gICAgICB0aGlzLmhpZ2ggPT09IC0weDgwMDAwMDAwICYmXG4gICAgICBkaXZpc29yLmxvdyA9PT0gLTEgJiYgZGl2aXNvci5oaWdoID09PSAtMSkge1xuICAgICAgLy8gYmUgY29uc2lzdGVudCB3aXRoIG5vbi13YXNtIGNvZGUgcGF0aFxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBsb3cgPSAodGhpcy51bnNpZ25lZCA/IHdhc21bXCJkaXZfdVwiXSA6IHdhc21bXCJkaXZfc1wiXSkoXG4gICAgICB0aGlzLmxvdyxcbiAgICAgIHRoaXMuaGlnaCxcbiAgICAgIGRpdmlzb3IubG93LFxuICAgICAgZGl2aXNvci5oaWdoXG4gICAgKTtcbiAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtW1wiZ2V0X2hpZ2hcIl0oKSwgdGhpcy51bnNpZ25lZCk7XG4gIH1cblxuICBpZiAodGhpcy5pc1plcm8oKSlcbiAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IFVaRVJPIDogWkVSTztcbiAgdmFyIGFwcHJveCwgcmVtLCByZXM7XG4gIGlmICghdGhpcy51bnNpZ25lZCkge1xuICAgIC8vIFRoaXMgc2VjdGlvbiBpcyBvbmx5IHJlbGV2YW50IGZvciBzaWduZWQgbG9uZ3MgYW5kIGlzIGRlcml2ZWQgZnJvbSB0aGVcbiAgICAvLyBjbG9zdXJlIGxpYnJhcnkgYXMgYSB3aG9sZS5cbiAgICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKSB7XG4gICAgICBpZiAoZGl2aXNvci5lcShPTkUpIHx8IGRpdmlzb3IuZXEoTkVHX09ORSkpXG4gICAgICAgIHJldHVybiBNSU5fVkFMVUU7ICAvLyByZWNhbGwgdGhhdCAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRVxuICAgICAgZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKVxuICAgICAgICByZXR1cm4gT05FO1xuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgfG90aGVyfCA+PSAyLCBzbyB8dGhpcy9vdGhlcnwgPCB8TUlOX1ZBTFVFfC5cbiAgICAgICAgdmFyIGhhbGZUaGlzID0gdGhpcy5zaHIoMSk7XG4gICAgICAgIGFwcHJveCA9IGhhbGZUaGlzLmRpdihkaXZpc29yKS5zaGwoMSk7XG4gICAgICAgIGlmIChhcHByb3guZXEoWkVSTykpIHtcbiAgICAgICAgICByZXR1cm4gZGl2aXNvci5pc05lZ2F0aXZlKCkgPyBPTkUgOiBORUdfT05FO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbSA9IHRoaXMuc3ViKGRpdmlzb3IubXVsKGFwcHJveCkpO1xuICAgICAgICAgIHJlcyA9IGFwcHJveC5hZGQocmVtLmRpdihkaXZpc29yKSk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKVxuICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XG4gICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XG4gICAgICBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXG4gICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yLm5lZygpKTtcbiAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yKS5uZWcoKTtcbiAgICB9IGVsc2UgaWYgKGRpdmlzb3IuaXNOZWdhdGl2ZSgpKVxuICAgICAgcmV0dXJuIHRoaXMuZGl2KGRpdmlzb3IubmVnKCkpLm5lZygpO1xuICAgIHJlcyA9IFpFUk87XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGFsZ29yaXRobSBiZWxvdyBoYXMgbm90IGJlZW4gbWFkZSBmb3IgdW5zaWduZWQgbG9uZ3MuIEl0J3MgdGhlcmVmb3JlXG4gICAgLy8gcmVxdWlyZWQgdG8gdGFrZSBzcGVjaWFsIGNhcmUgb2YgdGhlIE1TQiBwcmlvciB0byBydW5uaW5nIGl0LlxuICAgIGlmICghZGl2aXNvci51bnNpZ25lZClcbiAgICAgIGRpdmlzb3IgPSBkaXZpc29yLnRvVW5zaWduZWQoKTtcbiAgICBpZiAoZGl2aXNvci5ndCh0aGlzKSlcbiAgICAgIHJldHVybiBVWkVSTztcbiAgICBpZiAoZGl2aXNvci5ndCh0aGlzLnNocnUoMSkpKSAvLyAxNSA+Pj4gMSA9IDcgOyB3aXRoIGRpdmlzb3IgPSA4IDsgdHJ1ZVxuICAgICAgcmV0dXJuIFVPTkU7XG4gICAgcmVzID0gVVpFUk87XG4gIH1cblxuICAvLyBSZXBlYXQgdGhlIGZvbGxvd2luZyB1bnRpbCB0aGUgcmVtYWluZGVyIGlzIGxlc3MgdGhhbiBvdGhlcjogIGZpbmQgYVxuICAvLyBmbG9hdGluZy1wb2ludCB0aGF0IGFwcHJveGltYXRlcyByZW1haW5kZXIgLyBvdGhlciAqZnJvbSBiZWxvdyosIGFkZCB0aGlzXG4gIC8vIGludG8gdGhlIHJlc3VsdCwgYW5kIHN1YnRyYWN0IGl0IGZyb20gdGhlIHJlbWFpbmRlci4gIEl0IGlzIGNyaXRpY2FsIHRoYXRcbiAgLy8gdGhlIGFwcHJveGltYXRlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVhbCB2YWx1ZSBzbyB0aGF0IHRoZVxuICAvLyByZW1haW5kZXIgbmV2ZXIgYmVjb21lcyBuZWdhdGl2ZS5cbiAgcmVtID0gdGhpcztcbiAgd2hpbGUgKHJlbS5ndGUoZGl2aXNvcikpIHtcbiAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXG4gICAgLy8gc21hbGxlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXG4gICAgYXBwcm94ID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihyZW0udG9OdW1iZXIoKSAvIGRpdmlzb3IudG9OdW1iZXIoKSkpO1xuXG4gICAgLy8gV2Ugd2lsbCB0d2VhayB0aGUgYXBwcm94aW1hdGUgcmVzdWx0IGJ5IGNoYW5naW5nIGl0IGluIHRoZSA0OC10aCBkaWdpdCBvclxuICAgIC8vIHRoZSBzbWFsbGVzdCBub24tZnJhY3Rpb25hbCBkaWdpdCwgd2hpY2hldmVyIGlzIGxhcmdlci5cbiAgICB2YXIgbG9nMiA9IE1hdGguY2VpbChNYXRoLmxvZyhhcHByb3gpIC8gTWF0aC5MTjIpLFxuICAgICAgZGVsdGEgPSAobG9nMiA8PSA0OCkgPyAxIDogcG93X2RibCgyLCBsb2cyIC0gNDgpLFxuXG4gICAgICAvLyBEZWNyZWFzZSB0aGUgYXBwcm94aW1hdGlvbiB1bnRpbCBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHJlbWFpbmRlci4gIE5vdGVcbiAgICAgIC8vIHRoYXQgaWYgaXQgaXMgdG9vIGxhcmdlLCB0aGUgcHJvZHVjdCBvdmVyZmxvd3MgYW5kIGlzIG5lZ2F0aXZlLlxuICAgICAgYXBwcm94UmVzID0gZnJvbU51bWJlcihhcHByb3gpLFxuICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcbiAgICB3aGlsZSAoYXBwcm94UmVtLmlzTmVnYXRpdmUoKSB8fCBhcHByb3hSZW0uZ3QocmVtKSkge1xuICAgICAgYXBwcm94IC09IGRlbHRhO1xuICAgICAgYXBwcm94UmVzID0gZnJvbU51bWJlcihhcHByb3gsIHRoaXMudW5zaWduZWQpO1xuICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcbiAgICB9XG5cbiAgICAvLyBXZSBrbm93IHRoZSBhbnN3ZXIgY2FuJ3QgYmUgemVyby4uLiBhbmQgYWN0dWFsbHksIHplcm8gd291bGQgY2F1c2VcbiAgICAvLyBpbmZpbml0ZSByZWN1cnNpb24gc2luY2Ugd2Ugd291bGQgbWFrZSBubyBwcm9ncmVzcy5cbiAgICBpZiAoYXBwcm94UmVzLmlzWmVybygpKVxuICAgICAgYXBwcm94UmVzID0gT05FO1xuXG4gICAgcmVzID0gcmVzLmFkZChhcHByb3hSZXMpO1xuICAgIHJlbSA9IHJlbS5zdWIoYXBwcm94UmVtKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBkaXZpZGVkIGJ5IHRoZSBzcGVjaWZpZWQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZGl2aWRlfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcbiAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcbiAqL1xuTG9uZ1Byb3RvdHlwZS5kaXYgPSBMb25nUHJvdG90eXBlLmRpdmlkZTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxuICovXG5Mb25nUHJvdG90eXBlLm1vZHVsbyA9IGZ1bmN0aW9uIG1vZHVsbyhkaXZpc29yKSB7XG4gIGlmICghaXNMb25nKGRpdmlzb3IpKVxuICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XG5cbiAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XG4gIGlmICh3YXNtKSB7XG4gICAgdmFyIGxvdyA9ICh0aGlzLnVuc2lnbmVkID8gd2FzbVtcInJlbV91XCJdIDogd2FzbVtcInJlbV9zXCJdKShcbiAgICAgIHRoaXMubG93LFxuICAgICAgdGhpcy5oaWdoLFxuICAgICAgZGl2aXNvci5sb3csXG4gICAgICBkaXZpc29yLmhpZ2hcbiAgICApO1xuICAgIHJldHVybiBmcm9tQml0cyhsb3csIHdhc21bXCJnZXRfaGlnaFwiXSgpLCB0aGlzLnVuc2lnbmVkKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnN1Yih0aGlzLmRpdihkaXZpc29yKS5tdWwoZGl2aXNvcikpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcbiAqL1xuTG9uZ1Byb3RvdHlwZS5tb2QgPSBMb25nUHJvdG90eXBlLm1vZHVsbztcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcbiAqL1xuTG9uZ1Byb3RvdHlwZS5yZW0gPSBMb25nUHJvdG90eXBlLm1vZHVsbztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlIE5PVCBvZiB0aGlzIExvbmcuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IUxvbmd9XG4gKi9cbkxvbmdQcm90b3R5cGUubm90ID0gZnVuY3Rpb24gbm90KCkge1xuICByZXR1cm4gZnJvbUJpdHMofnRoaXMubG93LCB+dGhpcy5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBjb3VudCBsZWFkaW5nIHplcm9zIG9mIHRoaXMgTG9uZy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshbnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLmNvdW50TGVhZGluZ1plcm9zID0gZnVuY3Rpb24gY291bnRMZWFkaW5nWmVyb3MoKSB7XG4gIHJldHVybiB0aGlzLmhpZ2ggPyBNYXRoLmNsejMyKHRoaXMuaGlnaCkgOiBNYXRoLmNsejMyKHRoaXMubG93KSArIDMyO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGNvdW50IGxlYWRpbmcgemVyb3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjY291bnRMZWFkaW5nWmVyb3N9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFMb25nfVxuICogQHJldHVybnMgeyFudW1iZXJ9XG4gKi9cbkxvbmdQcm90b3R5cGUuY2x6ID0gTG9uZ1Byb3RvdHlwZS5jb3VudExlYWRpbmdaZXJvcztcblxuLyoqXG4gKiBSZXR1cm5zIGNvdW50IHRyYWlsaW5nIHplcm9zIG9mIHRoaXMgTG9uZy5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshbnVtYmVyfVxuICovXG5Mb25nUHJvdG90eXBlLmNvdW50VHJhaWxpbmdaZXJvcyA9IGZ1bmN0aW9uIGNvdW50VHJhaWxpbmdaZXJvcygpIHtcbiAgcmV0dXJuIHRoaXMubG93ID8gY3R6MzIodGhpcy5sb3cpIDogY3R6MzIodGhpcy5oaWdoKSArIDMyO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGNvdW50IHRyYWlsaW5nIHplcm9zLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2NvdW50VHJhaWxpbmdaZXJvc30uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IW51bWJlcn1cbiAqL1xuTG9uZ1Byb3RvdHlwZS5jdHogPSBMb25nUHJvdG90eXBlLmNvdW50VHJhaWxpbmdaZXJvcztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlIEFORCBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcbiAqIEByZXR1cm5zIHshTG9uZ31cbiAqL1xuTG9uZ1Byb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQob3RoZXIpIHtcbiAgaWYgKCFpc0xvbmcob3RoZXIpKVxuICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcbiAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93ICYgb3RoZXIubG93LCB0aGlzLmhpZ2ggJiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYml0d2lzZSBPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcbiAqIEByZXR1cm5zIHshTG9uZ31cbiAqL1xuTG9uZ1Byb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yKG90aGVyKSB7XG4gIGlmICghaXNMb25nKG90aGVyKSlcbiAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XG4gIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyB8IG90aGVyLmxvdywgdGhpcy5oaWdoIHwgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgWE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIGdpdmVuIG9uZS5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xuICogQHJldHVybnMgeyFMb25nfVxuICovXG5Mb25nUHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvcihvdGhlcikge1xuICBpZiAoIWlzTG9uZyhvdGhlcikpXG4gICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xuICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgXiBvdGhlci5sb3csIHRoaXMuaGlnaCBeIG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUuc2hpZnRMZWZ0ID0gZnVuY3Rpb24gc2hpZnRMZWZ0KG51bUJpdHMpIHtcbiAgaWYgKGlzTG9uZyhudW1CaXRzKSlcbiAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xuICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBlbHNlIGlmIChudW1CaXRzIDwgMzIpXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IDw8IG51bUJpdHMsICh0aGlzLmhpZ2ggPDwgbnVtQml0cykgfCAodGhpcy5sb3cgPj4+ICgzMiAtIG51bUJpdHMpKSwgdGhpcy51bnNpZ25lZCk7XG4gIGVsc2VcbiAgICByZXR1cm4gZnJvbUJpdHMoMCwgdGhpcy5sb3cgPDwgKG51bUJpdHMgLSAzMiksIHRoaXMudW5zaWduZWQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0TGVmdH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnNobCA9IExvbmdQcm90b3R5cGUuc2hpZnRMZWZ0O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUuc2hpZnRSaWdodCA9IGZ1bmN0aW9uIHNoaWZ0UmlnaHQobnVtQml0cykge1xuICBpZiAoaXNMb25nKG51bUJpdHMpKVxuICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XG4gIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApXG4gICAgcmV0dXJuIHRoaXM7XG4gIGVsc2UgaWYgKG51bUJpdHMgPCAzMilcbiAgICByZXR1cm4gZnJvbUJpdHMoKHRoaXMubG93ID4+PiBudW1CaXRzKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCB0aGlzLmhpZ2ggPj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XG4gIGVsc2VcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5oaWdoID4+IChudW1CaXRzIC0gMzIpLCB0aGlzLmhpZ2ggPj0gMCA/IDAgOiAtMSwgdGhpcy51bnNpZ25lZCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0UmlnaHR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS5zaHIgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQ7XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkID0gZnVuY3Rpb24gc2hpZnRSaWdodFVuc2lnbmVkKG51bUJpdHMpIHtcbiAgaWYgKGlzTG9uZyhudW1CaXRzKSkgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcbiAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIGlmIChudW1CaXRzIDwgMzIpIHJldHVybiBmcm9tQml0cygodGhpcy5sb3cgPj4+IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA8PCAoMzIgLSBudW1CaXRzKSksIHRoaXMuaGlnaCA+Pj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XG4gIGlmIChudW1CaXRzID09PSAzMikgcmV0dXJuIGZyb21CaXRzKHRoaXMuaGlnaCwgMCwgdGhpcy51bnNpZ25lZCk7XG4gIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2ggPj4+IChudW1CaXRzIC0gMzIpLCAwLCB0aGlzLnVuc2lnbmVkKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0UmlnaHRVbnNpZ25lZH0uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnNocnUgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodFVuc2lnbmVkfS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUuc2hyX3UgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgcm90YXRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICogQHRoaXMgeyFMb25nfVxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gUm90YXRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUucm90YXRlTGVmdCA9IGZ1bmN0aW9uIHJvdGF0ZUxlZnQobnVtQml0cykge1xuICB2YXIgYjtcbiAgaWYgKGlzTG9uZyhudW1CaXRzKSkgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcbiAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIGlmIChudW1CaXRzID09PSAzMikgcmV0dXJuIGZyb21CaXRzKHRoaXMuaGlnaCwgdGhpcy5sb3csIHRoaXMudW5zaWduZWQpO1xuICBpZiAobnVtQml0cyA8IDMyKSB7XG4gICAgYiA9ICgzMiAtIG51bUJpdHMpO1xuICAgIHJldHVybiBmcm9tQml0cygoKHRoaXMubG93IDw8IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA+Pj4gYikpLCAoKHRoaXMuaGlnaCA8PCBudW1CaXRzKSB8ICh0aGlzLmxvdyA+Pj4gYikpLCB0aGlzLnVuc2lnbmVkKTtcbiAgfVxuICBudW1CaXRzIC09IDMyO1xuICBiID0gKDMyIC0gbnVtQml0cyk7XG4gIHJldHVybiBmcm9tQml0cygoKHRoaXMuaGlnaCA8PCBudW1CaXRzKSB8ICh0aGlzLmxvdyA+Pj4gYikpLCAoKHRoaXMubG93IDw8IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA+Pj4gYikpLCB0aGlzLnVuc2lnbmVkKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHJvdGF0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNyb3RhdGVMZWZ0fS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcbiAqIEByZXR1cm5zIHshTG9uZ30gUm90YXRlZCBMb25nXG4gKi9cbkxvbmdQcm90b3R5cGUucm90bCA9IExvbmdQcm90b3R5cGUucm90YXRlTGVmdDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgcm90YXRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJvdGF0ZWQgTG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnJvdGF0ZVJpZ2h0ID0gZnVuY3Rpb24gcm90YXRlUmlnaHQobnVtQml0cykge1xuICB2YXIgYjtcbiAgaWYgKGlzTG9uZyhudW1CaXRzKSkgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcbiAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIGlmIChudW1CaXRzID09PSAzMikgcmV0dXJuIGZyb21CaXRzKHRoaXMuaGlnaCwgdGhpcy5sb3csIHRoaXMudW5zaWduZWQpO1xuICBpZiAobnVtQml0cyA8IDMyKSB7XG4gICAgYiA9ICgzMiAtIG51bUJpdHMpO1xuICAgIHJldHVybiBmcm9tQml0cygoKHRoaXMuaGlnaCA8PCBiKSB8ICh0aGlzLmxvdyA+Pj4gbnVtQml0cykpLCAoKHRoaXMubG93IDw8IGIpIHwgKHRoaXMuaGlnaCA+Pj4gbnVtQml0cykpLCB0aGlzLnVuc2lnbmVkKTtcbiAgfVxuICBudW1CaXRzIC09IDMyO1xuICBiID0gKDMyIC0gbnVtQml0cyk7XG4gIHJldHVybiBmcm9tQml0cygoKHRoaXMubG93IDw8IGIpIHwgKHRoaXMuaGlnaCA+Pj4gbnVtQml0cykpLCAoKHRoaXMuaGlnaCA8PCBiKSB8ICh0aGlzLmxvdyA+Pj4gbnVtQml0cykpLCB0aGlzLnVuc2lnbmVkKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHJvdGF0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjcm90YXRlUmlnaHR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xuICogQHJldHVybnMgeyFMb25nfSBSb3RhdGVkIExvbmdcbiAqL1xuTG9uZ1Byb3RvdHlwZS5yb3RyID0gTG9uZ1Byb3RvdHlwZS5yb3RhdGVSaWdodDtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gc2lnbmVkLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMgeyFMb25nfSBTaWduZWQgbG9uZ1xuICovXG5Mb25nUHJvdG90eXBlLnRvU2lnbmVkID0gZnVuY3Rpb24gdG9TaWduZWQoKSB7XG4gIGlmICghdGhpcy51bnNpZ25lZClcbiAgICByZXR1cm4gdGhpcztcbiAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIHVuc2lnbmVkLlxuICogQHRoaXMgeyFMb25nfVxuICogQHJldHVybnMgeyFMb25nfSBVbnNpZ25lZCBsb25nXG4gKi9cbkxvbmdQcm90b3R5cGUudG9VbnNpZ25lZCA9IGZ1bmN0aW9uIHRvVW5zaWduZWQoKSB7XG4gIGlmICh0aGlzLnVuc2lnbmVkKVxuICAgIHJldHVybiB0aGlzO1xuICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGxlIFdoZXRoZXIgbGl0dGxlIG9yIGJpZyBlbmRpYW4sIGRlZmF1bHRzIHRvIGJpZyBlbmRpYW5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJ5dGUgcmVwcmVzZW50YXRpb25cbiAqL1xuTG9uZ1Byb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcyhsZSkge1xuICByZXR1cm4gbGUgPyB0aGlzLnRvQnl0ZXNMRSgpIDogdGhpcy50b0J5dGVzQkUoKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBsaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXG4gKiBAdGhpcyB7IUxvbmd9XG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cbiAqL1xuTG9uZ1Byb3RvdHlwZS50b0J5dGVzTEUgPSBmdW5jdGlvbiB0b0J5dGVzTEUoKSB7XG4gIHZhciBoaSA9IHRoaXMuaGlnaCxcbiAgICBsbyA9IHRoaXMubG93O1xuICByZXR1cm4gW1xuICAgIGxvICYgMHhmZixcbiAgICBsbyA+Pj4gOCAmIDB4ZmYsXG4gICAgbG8gPj4+IDE2ICYgMHhmZixcbiAgICBsbyA+Pj4gMjQsXG4gICAgaGkgJiAweGZmLFxuICAgIGhpID4+PiA4ICYgMHhmZixcbiAgICBoaSA+Pj4gMTYgJiAweGZmLFxuICAgIGhpID4+PiAyNFxuICBdO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cbiAqIEB0aGlzIHshTG9uZ31cbiAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvblxuICovXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXNCRSA9IGZ1bmN0aW9uIHRvQnl0ZXNCRSgpIHtcbiAgdmFyIGhpID0gdGhpcy5oaWdoLFxuICAgIGxvID0gdGhpcy5sb3c7XG4gIHJldHVybiBbXG4gICAgaGkgPj4+IDI0LFxuICAgIGhpID4+PiAxNiAmIDB4ZmYsXG4gICAgaGkgPj4+IDggJiAweGZmLFxuICAgIGhpICYgMHhmZixcbiAgICBsbyA+Pj4gMjQsXG4gICAgbG8gPj4+IDE2ICYgMHhmZixcbiAgICBsbyA+Pj4gOCAmIDB4ZmYsXG4gICAgbG8gJiAweGZmXG4gIF07XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBMb25nIGZyb20gaXRzIGJ5dGUgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgQnl0ZSByZXByZXNlbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxuICogQHBhcmFtIHtib29sZWFuPX0gbGUgV2hldGhlciBsaXR0bGUgb3IgYmlnIGVuZGlhbiwgZGVmYXVsdHMgdG8gYmlnIGVuZGlhblxuICogQHJldHVybnMge0xvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcbiAqL1xuTG9uZy5mcm9tQnl0ZXMgPSBmdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMsIHVuc2lnbmVkLCBsZSkge1xuICByZXR1cm4gbGUgPyBMb25nLmZyb21CeXRlc0xFKGJ5dGVzLCB1bnNpZ25lZCkgOiBMb25nLmZyb21CeXRlc0JFKGJ5dGVzLCB1bnNpZ25lZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBMb25nIGZyb20gaXRzIGxpdHRsZSBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBieXRlcyBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcbiAqIEByZXR1cm5zIHtMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXG4gKi9cbkxvbmcuZnJvbUJ5dGVzTEUgPSBmdW5jdGlvbiBmcm9tQnl0ZXNMRShieXRlcywgdW5zaWduZWQpIHtcbiAgcmV0dXJuIG5ldyBMb25nKFxuICAgIGJ5dGVzWzBdIHxcbiAgICBieXRlc1sxXSA8PCA4IHxcbiAgICBieXRlc1syXSA8PCAxNiB8XG4gICAgYnl0ZXNbM10gPDwgMjQsXG4gICAgYnl0ZXNbNF0gfFxuICAgIGJ5dGVzWzVdIDw8IDggfFxuICAgIGJ5dGVzWzZdIDw8IDE2IHxcbiAgICBieXRlc1s3XSA8PCAyNCxcbiAgICB1bnNpZ25lZFxuICApO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBiaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgQmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXG4gKiBAcmV0dXJucyB7TG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxuICovXG5Mb25nLmZyb21CeXRlc0JFID0gZnVuY3Rpb24gZnJvbUJ5dGVzQkUoYnl0ZXMsIHVuc2lnbmVkKSB7XG4gIHJldHVybiBuZXcgTG9uZyhcbiAgICBieXRlc1s0XSA8PCAyNCB8XG4gICAgYnl0ZXNbNV0gPDwgMTYgfFxuICAgIGJ5dGVzWzZdIDw8IDggfFxuICAgIGJ5dGVzWzddLFxuICAgIGJ5dGVzWzBdIDw8IDI0IHxcbiAgICBieXRlc1sxXSA8PCAxNiB8XG4gICAgYnl0ZXNbMl0gPDwgOCB8XG4gICAgYnl0ZXNbM10sXG4gICAgdW5zaWduZWRcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvbmc7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBUaGUgWW9ya2llIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENsaWVudCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9jb3JlL2NsaWVudCc7XHJcbmltcG9ydCB7IERvY3VtZW50UmVwbGljYSB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9kb2N1bWVudCc7XHJcbmltcG9ydCB7IFBsYWluVGV4dCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS90ZXh0X3Byb3h5JztcclxuaW1wb3J0IHsgUmljaFRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvcHJveHkvcmljaF90ZXh0X3Byb3h5JztcclxuaW1wb3J0IHsgQ291bnRlciB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9jb3VudGVyX3Byb3h5JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgQ2xpZW50LFxyXG4gIFByZXNlbmNlSW5mbyxcclxuICBDbGllbnRFdmVudCxcclxuICBDbGllbnRTdGF0dXMsXHJcbiAgU3RyZWFtQ29ubmVjdGlvblN0YXR1cyxcclxuICBEb2N1bWVudFN5bmNSZXN1bHRUeXBlLFxyXG4gIENsaWVudEV2ZW50VHlwZSxcclxuICBTdGF0dXNDaGFuZ2VkRXZlbnQsXHJcbiAgRG9jdW1lbnRzQ2hhbmdlZEV2ZW50LFxyXG4gIFBlZXJzQ2hhbmdlZEV2ZW50LFxyXG4gIFN0cmVhbUNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkRXZlbnQsXHJcbiAgRG9jdW1lbnRTeW5jZWRFdmVudCxcclxuICBDbGllbnRPcHRpb25zLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9jb3JlL2NsaWVudCc7XHJcbmV4cG9ydCB7XHJcbiAgRG9jRXZlbnRUeXBlLFxyXG4gIFNuYXBzaG90RXZlbnQsXHJcbiAgTG9jYWxDaGFuZ2VFdmVudCxcclxuICBSZW1vdGVDaGFuZ2VFdmVudCxcclxuICBJbmRleGFibGUsXHJcbiAgRG9jRXZlbnQsXHJcbiAgRG9jdW1lbnRSZXBsaWNhLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9kb2N1bWVudCc7XHJcbmV4cG9ydCB7XHJcbiAgT2JzZXJ2ZXIsXHJcbiAgT2JzZXJ2YWJsZSxcclxuICBOZXh0Rm4sXHJcbiAgRXJyb3JGbixcclxuICBDb21wbGV0ZUZuLFxyXG4gIFVuc3Vic2NyaWJlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy91dGlsL29ic2VydmFibGUnO1xyXG5leHBvcnQgeyBUaW1lVGlja2V0IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3RpbWUvdGlja2V0JztcclxuZXhwb3J0IHsgQWN0b3JJRCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC90aW1lL2FjdG9yX2lkJztcclxuZXhwb3J0IHtcclxuICBUZXh0Q2hhbmdlLFxyXG4gIFRleHRDaGFuZ2VUeXBlLFxyXG59IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9qc29uL3JnYV90cmVlX3NwbGl0JztcclxuZXhwb3J0IHsgSlNPTkVsZW1lbnQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvanNvbi9lbGVtZW50JztcclxuZXhwb3J0IHsgSlNPTkFycmF5IH0gZnJvbSAnQHlvcmtpZS1qcy1zZGsvc3JjL2RvY3VtZW50L3Byb3h5L2FycmF5X3Byb3h5JztcclxuZXhwb3J0IHsgQ291bnRlciB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9jb3VudGVyX3Byb3h5JztcclxuZXhwb3J0IHsgSlNPTk9iamVjdCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9vYmplY3RfcHJveHknO1xyXG5leHBvcnQgeyBSaWNoVGV4dCB9IGZyb20gJ0B5b3JraWUtanMtc2RrL3NyYy9kb2N1bWVudC9wcm94eS9yaWNoX3RleHRfcHJveHknO1xyXG5leHBvcnQgeyBQbGFpblRleHQgfSBmcm9tICdAeW9ya2llLWpzLXNkay9zcmMvZG9jdW1lbnQvcHJveHkvdGV4dF9wcm94eSc7XHJcblxyXG4vKipcclxuICogVGhlIHRvcC1sZXZlbCB5b3JraWUgbmFtZXNwYWNlIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBJbiBwcm9kdWN0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGV4YWN0bHkgb25jZSBhbmQgdGhlIHJlc3VsdFxyXG4gKiBhc3NpZ25lZCB0byB0aGUgYHlvcmtpZWAgZ2xvYmFsLlxyXG4gKlxyXG4gKiBlLmcpIGBuZXcgeW9ya2llLkNsaWVudCguLi4pO2BcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgeW9ya2llID0ge1xyXG4gIENsaWVudCxcclxuICBEb2N1bWVudDogRG9jdW1lbnRSZXBsaWNhLFxyXG4gIFRleHQ6IFBsYWluVGV4dCxcclxuICBSaWNoVGV4dCxcclxuICBDb3VudGVyLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgeW9ya2llO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=